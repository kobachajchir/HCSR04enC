
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c2  00800100  00001c5e  00001cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  008005c2  008005c2  000021b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036c1  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012da  00000000  00000000  00005b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a6f  00000000  00000000  00006e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  0000888c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d75  00000000  00000000  00008f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001453  00000000  00000000  00009c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3c       	cpi	r26, 0xC2	; 194
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a2 ec       	ldi	r26, 0xC2	; 194
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 35       	cpi	r26, 0x5D	; 93
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
      9e:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <ultraSensor>
     100:	90 93 3e 06 	sts	0x063E, r25	; 0x80063e <ultraSensor+0x1>
     104:	a0 93 3f 06 	sts	0x063F, r26	; 0x80063f <ultraSensor+0x2>
     108:	b0 93 40 06 	sts	0x0640, r27	; 0x800640 <ultraSensor+0x3>
     10c:	e9 e4       	ldi	r30, 0x49	; 73
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <ultraSensor+0x4>
     13c:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <ultraSensor+0x5>
     140:	a0 93 43 06 	sts	0x0643, r26	; 0x800643 <ultraSensor+0x6>
     144:	b0 93 44 06 	sts	0x0644, r27	; 0x800644 <ultraSensor+0x7>
     148:	e9 e4       	ldi	r30, 0x49	; 73
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
     1ca:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <bandera3>
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <bandera3>
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	75 c0       	rjmp	.+234    	; 0x2c2 <__vector_11+0x134>
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	ec 5c       	subi	r30, 0xCC	; 204
     1e4:	f9 4f       	sbci	r31, 0xF9	; 249
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	d8 01       	movw	r26, r16
     1ec:	11 96       	adiw	r26, 0x01	; 1
     1ee:	8c 91       	ld	r24, X
     1f0:	11 97       	sbiw	r26, 0x01	; 1
     1f2:	80 ff       	sbrs	r24, 0
     1f4:	65 c0       	rjmp	.+202    	; 0x2c0 <__vector_11+0x132>
     1f6:	11 96       	adiw	r26, 0x01	; 1
     1f8:	8c 91       	ld	r24, X
     1fa:	11 97       	sbiw	r26, 0x01	; 1
     1fc:	81 ff       	sbrs	r24, 1
     1fe:	33 c0       	rjmp	.+102    	; 0x266 <__vector_11+0xd8>
     200:	11 96       	adiw	r26, 0x01	; 1
     202:	8c 91       	ld	r24, X
     204:	11 97       	sbiw	r26, 0x01	; 1
     206:	82 fd       	sbrc	r24, 2
     208:	2e c0       	rjmp	.+92     	; 0x266 <__vector_11+0xd8>
     20a:	80 ea       	ldi	r24, 0xA0	; 160
     20c:	9f e0       	ldi	r25, 0x0F	; 15
     20e:	13 96       	adiw	r26, 0x03	; 3
     210:	9c 93       	st	X, r25
     212:	8e 93       	st	-X, r24
     214:	12 97       	sbiw	r26, 0x02	; 2
     216:	8f 01       	movw	r16, r30
     218:	01 90       	ld	r0, Z+
     21a:	f0 81       	ld	r31, Z
     21c:	e0 2d       	mov	r30, r0
     21e:	80 81       	ld	r24, Z
     220:	1f 92       	push	r1
     222:	8f 93       	push	r24
     224:	82 e2       	ldi	r24, 0x22	; 34
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     230:	d8 01       	movw	r26, r16
     232:	ed 91       	ld	r30, X+
     234:	fc 91       	ld	r31, X
     236:	11 97       	sbiw	r26, 0x01	; 1
     238:	81 81       	ldd	r24, Z+1	; 0x01
     23a:	84 60       	ori	r24, 0x04	; 4
     23c:	81 83       	std	Z+1, r24	; 0x01
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	80 81       	ld	r24, Z
     244:	1f 92       	push	r1
     246:	8f 93       	push	r24
     248:	88 e3       	ldi	r24, 0x38	; 56
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     254:	ed b7       	in	r30, 0x3d	; 61
     256:	fe b7       	in	r31, 0x3e	; 62
     258:	38 96       	adiw	r30, 0x08	; 8
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	fe bf       	out	0x3e, r31	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	ed bf       	out	0x3d, r30	; 61
     264:	08 c0       	rjmp	.+16     	; 0x276 <__vector_11+0xe8>
     266:	d8 01       	movw	r26, r16
     268:	14 96       	adiw	r26, 0x04	; 4
     26a:	8c 91       	ld	r24, X
     26c:	0e 94 0b 08 	call	0x1016	; 0x1016 <calculate_angle_pulseUs>
     270:	f8 01       	movw	r30, r16
     272:	93 83       	std	Z+3, r25	; 0x03
     274:	82 83       	std	Z+2, r24	; 0x02
     276:	c1 11       	cpse	r28, r1
     278:	23 c0       	rjmp	.+70     	; 0x2c0 <__vector_11+0x132>
     27a:	f7 01       	movw	r30, r14
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ec 5c       	subi	r30, 0xCC	; 204
     282:	f9 4f       	sbci	r31, 0xF9	; 249
     284:	a0 81       	ld	r26, Z
     286:	b1 81       	ldd	r27, Z+1	; 0x01
     288:	2c 91       	ld	r18, X
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	02 c0       	rjmp	.+4      	; 0x294 <__vector_11+0x106>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	2a 95       	dec	r18
     296:	e2 f7       	brpl	.-8      	; 0x290 <__vector_11+0x102>
     298:	95 b1       	in	r25, 0x05	; 5
     29a:	89 2b       	or	r24, r25
     29c:	85 b9       	out	0x05, r24	; 5
     29e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     2a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     2a6:	01 90       	ld	r0, Z+
     2a8:	f0 81       	ld	r31, Z
     2aa:	e0 2d       	mov	r30, r0
     2ac:	82 81       	ldd	r24, Z+2	; 0x02
     2ae:	93 81       	ldd	r25, Z+3	; 0x03
     2b0:	82 0f       	add	r24, r18
     2b2:	93 1f       	adc	r25, r19
     2b4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     2b8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     2bc:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <current_servo>
     2c0:	cf 5f       	subi	r28, 0xFF	; 255
     2c2:	c3 30       	cpi	r28, 0x03	; 3
     2c4:	08 f4       	brcc	.+2      	; 0x2c8 <__vector_11+0x13a>
     2c6:	88 cf       	rjmp	.-240    	; 0x1d8 <__vector_11+0x4a>
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	cf 91       	pop	r28
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <__vector_12>:
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	2f 93       	push	r18
     300:	3f 93       	push	r19
     302:	4f 93       	push	r20
     304:	5f 93       	push	r21
     306:	6f 93       	push	r22
     308:	7f 93       	push	r23
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	af 93       	push	r26
     310:	bf 93       	push	r27
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ef 93       	push	r30
     318:	ff 93       	push	r31
     31a:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 5c       	subi	r30, 0xCC	; 204
     326:	f9 4f       	sbci	r31, 0xF9	; 249
     328:	01 90       	ld	r0, Z+
     32a:	f0 81       	ld	r31, Z
     32c:	e0 2d       	mov	r30, r0
     32e:	20 81       	ld	r18, Z
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	02 c0       	rjmp	.+4      	; 0x33a <__vector_12+0x46>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	2a 95       	dec	r18
     33c:	e2 f7       	brpl	.-8      	; 0x336 <__vector_12+0x42>
     33e:	80 95       	com	r24
     340:	90 95       	com	r25
     342:	95 b1       	in	r25, 0x05	; 5
     344:	89 23       	and	r24, r25
     346:	85 b9       	out	0x05, r24	; 5
     348:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	ec 5c       	subi	r30, 0xCC	; 204
     354:	f9 4f       	sbci	r31, 0xF9	; 249
     356:	01 90       	ld	r0, Z+
     358:	f0 81       	ld	r31, Z
     35a:	e0 2d       	mov	r30, r0
     35c:	81 81       	ldd	r24, Z+1	; 0x01
     35e:	81 ff       	sbrs	r24, 1
     360:	5f c0       	rjmp	.+190    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     362:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	ec 5c       	subi	r30, 0xCC	; 204
     36e:	f9 4f       	sbci	r31, 0xF9	; 249
     370:	01 90       	ld	r0, Z+
     372:	f0 81       	ld	r31, Z
     374:	e0 2d       	mov	r30, r0
     376:	81 81       	ldd	r24, Z+1	; 0x01
     378:	82 ff       	sbrs	r24, 2
     37a:	52 c0       	rjmp	.+164    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     37c:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	ec 5c       	subi	r30, 0xCC	; 204
     388:	f9 4f       	sbci	r31, 0xF9	; 249
     38a:	01 90       	ld	r0, Z+
     38c:	f0 81       	ld	r31, Z
     38e:	e0 2d       	mov	r30, r0
     390:	81 81       	ldd	r24, Z+1	; 0x01
     392:	8b 7f       	andi	r24, 0xFB	; 251
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	ee 0f       	add	r30, r30
     39e:	ff 1f       	adc	r31, r31
     3a0:	ec 5c       	subi	r30, 0xCC	; 204
     3a2:	f9 4f       	sbci	r31, 0xF9	; 249
     3a4:	01 90       	ld	r0, Z+
     3a6:	f0 81       	ld	r31, Z
     3a8:	e0 2d       	mov	r30, r0
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	8d 7f       	andi	r24, 0xFD	; 253
     3ae:	81 83       	std	Z+1, r24	; 0x01
     3b0:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	ec 5c       	subi	r30, 0xCC	; 204
     3bc:	f9 4f       	sbci	r31, 0xF9	; 249
     3be:	01 90       	ld	r0, Z+
     3c0:	f0 81       	ld	r31, Z
     3c2:	e0 2d       	mov	r30, r0
     3c4:	80 81       	ld	r24, Z
     3c6:	1f 92       	push	r1
     3c8:	8f 93       	push	r24
     3ca:	80 e6       	ldi	r24, 0x60	; 96
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     3d6:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	ec 5c       	subi	r30, 0xCC	; 204
     3e2:	f9 4f       	sbci	r31, 0xF9	; 249
     3e4:	01 90       	ld	r0, Z+
     3e6:	f0 81       	ld	r31, Z
     3e8:	e0 2d       	mov	r30, r0
     3ea:	8a e5       	ldi	r24, 0x5A	; 90
     3ec:	84 83       	std	Z+4, r24	; 0x04
     3ee:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	ec 5c       	subi	r30, 0xCC	; 204
     3fa:	f9 4f       	sbci	r31, 0xF9	; 249
     3fc:	c0 81       	ld	r28, Z
     3fe:	d1 81       	ldd	r29, Z+1	; 0x01
     400:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	ec 5c       	subi	r30, 0xCC	; 204
     40c:	f9 4f       	sbci	r31, 0xF9	; 249
     40e:	80 81       	ld	r24, Z
     410:	0e 94 0b 08 	call	0x1016	; 0x1016 <calculate_angle_pulseUs>
     414:	9b 83       	std	Y+3, r25	; 0x03
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_servo>
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <current_servo>
     42a:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_servo>
     42e:	83 30       	cpi	r24, 0x03	; 3
     430:	08 f0       	brcs	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     432:	91 c0       	rjmp	.+290    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     434:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	ec 5c       	subi	r30, 0xCC	; 204
     440:	f9 4f       	sbci	r31, 0xF9	; 249
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
     448:	81 81       	ldd	r24, Z+1	; 0x01
     44a:	80 ff       	sbrs	r24, 0
     44c:	2c c0       	rjmp	.+88     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     44e:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ec 5c       	subi	r30, 0xCC	; 204
     45a:	f9 4f       	sbci	r31, 0xF9	; 249
     45c:	01 90       	ld	r0, Z+
     45e:	f0 81       	ld	r31, Z
     460:	e0 2d       	mov	r30, r0
     462:	20 81       	ld	r18, Z
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	2a 95       	dec	r18
     470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     472:	95 b1       	in	r25, 0x05	; 5
     474:	89 2b       	or	r24, r25
     476:	85 b9       	out	0x05, r24	; 5
     478:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     47c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     480:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	ec 5c       	subi	r30, 0xCC	; 204
     48c:	f9 4f       	sbci	r31, 0xF9	; 249
     48e:	01 90       	ld	r0, Z+
     490:	f0 81       	ld	r31, Z
     492:	e0 2d       	mov	r30, r0
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	93 81       	ldd	r25, Z+3	; 0x03
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     4a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     4a4:	58 c0       	rjmp	.+176    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     4a6:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	ec 5c       	subi	r30, 0xCC	; 204
     4b2:	f9 4f       	sbci	r31, 0xF9	; 249
     4b4:	01 90       	ld	r0, Z+
     4b6:	f0 81       	ld	r31, Z
     4b8:	e0 2d       	mov	r30, r0
     4ba:	20 81       	ld	r18, Z
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	2a 95       	dec	r18
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4ca:	80 95       	com	r24
     4cc:	90 95       	com	r25
     4ce:	95 b1       	in	r25, 0x05	; 5
     4d0:	89 23       	and	r24, r25
     4d2:	85 b9       	out	0x05, r24	; 5
     4d4:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_servo>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <current_servo>
     4de:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_servo>
     4e2:	83 30       	cpi	r24, 0x03	; 3
     4e4:	c0 f5       	brcc	.+112    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     4e6:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	ec 5c       	subi	r30, 0xCC	; 204
     4f2:	f9 4f       	sbci	r31, 0xF9	; 249
     4f4:	01 90       	ld	r0, Z+
     4f6:	f0 81       	ld	r31, Z
     4f8:	e0 2d       	mov	r30, r0
     4fa:	81 81       	ldd	r24, Z+1	; 0x01
     4fc:	80 ff       	sbrs	r24, 0
     4fe:	2b c0       	rjmp	.+86     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     500:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	ec 5c       	subi	r30, 0xCC	; 204
     50c:	f9 4f       	sbci	r31, 0xF9	; 249
     50e:	01 90       	ld	r0, Z+
     510:	f0 81       	ld	r31, Z
     512:	e0 2d       	mov	r30, r0
     514:	20 81       	ld	r18, Z
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	2a 95       	dec	r18
     522:	e2 f7       	brpl	.-8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     524:	95 b1       	in	r25, 0x05	; 5
     526:	89 2b       	or	r24, r25
     528:	85 b9       	out	0x05, r24	; 5
     52a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     52e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     532:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <current_servo>
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	ec 5c       	subi	r30, 0xCC	; 204
     53e:	f9 4f       	sbci	r31, 0xF9	; 249
     540:	01 90       	ld	r0, Z+
     542:	f0 81       	ld	r31, Z
     544:	e0 2d       	mov	r30, r0
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	93 81       	ldd	r25, Z+3	; 0x03
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     552:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <timer1_init>:
     57c:	a4 e8       	ldi	r26, 0x84	; 132
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	1c 92       	st	X, r1
     584:	1e 92       	st	-X, r1
     586:	86 b3       	in	r24, 0x16	; 22
     588:	80 62       	ori	r24, 0x20	; 32
     58a:	86 bb       	out	0x16, r24	; 22
     58c:	ef e6       	ldi	r30, 0x6F	; 111
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	87 62       	ori	r24, 0x27	; 39
     594:	80 83       	st	Z, r24
     596:	e1 e8       	ldi	r30, 0x81	; 129
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	80 64       	ori	r24, 0x40	; 64
     59e:	80 83       	st	Z, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	80 83       	st	Z, r24
     5a6:	8d 91       	ld	r24, X+
     5a8:	9c 91       	ld	r25, X
     5aa:	80 5c       	subi	r24, 0xC0	; 192
     5ac:	93 46       	sbci	r25, 0x63	; 99
     5ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     5b6:	08 95       	ret

000005b8 <timer2_init>:
     5b8:	e1 eb       	ldi	r30, 0xB1	; 177
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	87 60       	ori	r24, 0x07	; 7
     5c0:	80 83       	st	Z, r24
     5c2:	8b e9       	ldi	r24, 0x9B	; 155
     5c4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     5c8:	e0 e7       	ldi	r30, 0x70	; 112
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	80 83       	st	Z, r24
     5d2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     5d6:	08 95       	ret

000005d8 <gpio_pins_init>:
     5d8:	84 b1       	in	r24, 0x04	; 4
     5da:	80 62       	ori	r24, 0x20	; 32
     5dc:	84 b9       	out	0x04, r24	; 4
     5de:	85 b1       	in	r24, 0x05	; 5
     5e0:	80 62       	ori	r24, 0x20	; 32
     5e2:	85 b9       	out	0x05, r24	; 5
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	8a b9       	out	0x0a, r24	; 10
     5ea:	84 b1       	in	r24, 0x04	; 4
     5ec:	8e 7f       	andi	r24, 0xFE	; 254
     5ee:	84 b9       	out	0x04, r24	; 4
     5f0:	8a b1       	in	r24, 0x0a	; 10
     5f2:	8f 7e       	andi	r24, 0xEF	; 239
     5f4:	8a b9       	out	0x0a, r24	; 10
     5f6:	84 b1       	in	r24, 0x04	; 4
     5f8:	82 60       	ori	r24, 0x02	; 2
     5fa:	84 b9       	out	0x04, r24	; 4
     5fc:	84 b1       	in	r24, 0x04	; 4
     5fe:	84 60       	ori	r24, 0x04	; 4
     600:	84 b9       	out	0x04, r24	; 4
     602:	84 b1       	in	r24, 0x04	; 4
     604:	88 60       	ori	r24, 0x08	; 8
     606:	84 b9       	out	0x04, r24	; 4
     608:	0e 94 42 08 	call	0x1084	; 0x1084 <tcrt_init>
     60c:	8b b1       	in	r24, 0x0b	; 11
     60e:	87 7f       	andi	r24, 0xF7	; 247
     610:	8b b9       	out	0x0b, r24	; 11
     612:	8b b1       	in	r24, 0x0b	; 11
     614:	8f 7e       	andi	r24, 0xEF	; 239
     616:	8b b9       	out	0x0b, r24	; 11
     618:	08 95       	ret

0000061a <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	2f 93       	push	r18
     626:	3f 93       	push	r19
     628:	4f 93       	push	r20
     62a:	5f 93       	push	r21
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     63c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     640:	81 ff       	sbrs	r24, 1
     642:	a7 c0       	rjmp	.+334    	; 0x792 <__vector_7+0x178>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     644:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <ultraSensor+0xd>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	51 f5       	brne	.+84     	; 0x6a0 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     64c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     650:	85 fd       	sbrc	r24, 5
     652:	0d c0       	rjmp	.+26     	; 0x66e <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     654:	0e 94 5f 09 	call	0x12be	; 0x12be <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     658:	e9 e4       	ldi	r30, 0x49	; 73
     65a:	f6 e0       	ldi	r31, 0x06	; 6
     65c:	80 81       	ld	r24, Z
     65e:	81 60       	ori	r24, 0x01	; 1
     660:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     662:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     666:	80 62       	ori	r24, 0x20	; 32
     668:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
     66c:	19 c0       	rjmp	.+50     	; 0x6a0 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     66e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     672:	e9 e4       	ldi	r30, 0x49	; 73
     674:	f6 e0       	ldi	r31, 0x06	; 6
     676:	80 81       	ld	r24, Z
     678:	82 60       	ori	r24, 0x02	; 2
     67a:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     67c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     680:	8d 7d       	andi	r24, 0xDD	; 221
     682:	88 60       	ori	r24, 0x08	; 8
     684:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     688:	80 81       	ld	r24, Z
     68a:	8f 7d       	andi	r24, 0xDF	; 223
     68c:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     694:	80 81       	ld	r24, Z
     696:	80 61       	ori	r24, 0x10	; 16
     698:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     69a:	80 81       	ld	r24, Z
     69c:	8d 7f       	andi	r24, 0xFD	; 253
     69e:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     6a0:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <ultraSensor+0xd>
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	d1 f4       	brne	.+52     	; 0x6dc <__vector_7+0xc2>
     6a8:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <ultraSensor+0xc>
     6ac:	84 ff       	sbrs	r24, 4
     6ae:	16 c0       	rjmp	.+44     	; 0x6dc <__vector_7+0xc2>
     6b0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     6b4:	89 70       	andi	r24, 0x09	; 9
     6b6:	88 30       	cpi	r24, 0x08	; 8
     6b8:	89 f4       	brne	.+34     	; 0x6dc <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     6ba:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <veintems_counter>
     6be:	81 11       	cpse	r24, r1
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__vector_7+0xb4>
				veintems_counter++;
     6c2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <veintems_counter>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <veintems_counter>
     6cc:	07 c0       	rjmp	.+14     	; 0x6dc <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     6ce:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     6d2:	81 60       	ori	r24, 0x01	; 1
     6d4:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
				veintems_counter = 0;
     6d8:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     6dc:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <ultraSensor+0xc>
     6e0:	85 fd       	sbrc	r24, 5
     6e2:	22 c0       	rjmp	.+68     	; 0x728 <__vector_7+0x10e>
     6e4:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     6e8:	84 fd       	sbrc	r24, 4
     6ea:	1e c0       	rjmp	.+60     	; 0x728 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     6ec:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <wait_time>
     6f0:	87 30       	cpi	r24, 0x07	; 7
     6f2:	30 f4       	brcc	.+12     	; 0x700 <__vector_7+0xe6>
				wait_time++;
     6f4:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <wait_time>
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <wait_time>
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     700:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     704:	80 61       	ori	r24, 0x10	; 16
     706:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
				wait_time = 0;
     70a:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     70e:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <ultraSensor+0xc>
     712:	83 ff       	sbrs	r24, 3
     714:	09 c0       	rjmp	.+18     	; 0x728 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     716:	60 91 19 06 	lds	r22, 0x0619	; 0x800619 <bandera2>
     71a:	66 fb       	bst	r22, 6
     71c:	66 27       	eor	r22, r22
     71e:	60 f9       	bld	r22, 0
     720:	8d e3       	ldi	r24, 0x3D	; 61
     722:	96 e0       	ldi	r25, 0x06	; 6
     724:	0e 94 34 0a 	call	0x1468	; 0x1468 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     728:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <diezMsCounter>
     72c:	8a 30       	cpi	r24, 0x0A	; 10
     72e:	30 f4       	brcc	.+12     	; 0x73c <__vector_7+0x122>
			diezMsCounter++;
     730:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <diezMsCounter>
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <diezMsCounter>
     73a:	07 c0       	rjmp	.+14     	; 0x74a <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     73c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     740:	88 60       	ori	r24, 0x08	; 8
     742:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			diezMsCounter = 0;
     746:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     74a:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     74e:	86 ff       	sbrs	r24, 6
     750:	0e c0       	rjmp	.+28     	; 0x76e <__vector_7+0x154>
			if(btn_pressed_time == 255){
     752:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <btn_pressed_time>
     756:	8f 3f       	cpi	r24, 0xFF	; 255
     758:	29 f4       	brne	.+10     	; 0x764 <__vector_7+0x14a>
				BTN_OVF = 1;
     75a:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			}
			btn_pressed_time++;
     764:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <btn_pressed_time>
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <btn_pressed_time>
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
				printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}*/
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     76e:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     772:	80 ff       	sbrs	r24, 0
     774:	05 c0       	rjmp	.+10     	; 0x780 <__vector_7+0x166>
     776:	83 fd       	sbrc	r24, 3
     778:	03 c0       	rjmp	.+6      	; 0x780 <__vector_7+0x166>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     780:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     784:	80 ff       	sbrs	r24, 0
     786:	05 c0       	rjmp	.+10     	; 0x792 <__vector_7+0x178>
     788:	83 fd       	sbrc	r24, 3
     78a:	03 c0       	rjmp	.+6      	; 0x792 <__vector_7+0x178>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     78c:	88 60       	ori	r24, 0x08	; 8
     78e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <IR_B>
// 		}
// 		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
// 			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
// 		}
	}
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <main>:
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     7b4:	82 e8       	ldi	r24, 0x82	; 130
     7b6:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     7ba:	80 e8       	ldi	r24, 0x80	; 128
     7bc:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
	IR_CALIBRATED = 0;
     7c0:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     7cc:	e7 e5       	ldi	r30, 0x57	; 87
     7ce:	f6 e0       	ldi	r31, 0x06	; 6
     7d0:	8e e0       	ldi	r24, 0x0E	; 14
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	93 83       	std	Z+3, r25	; 0x03
     7d6:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	91 83       	std	Z+1, r25	; 0x01
     7de:	80 83       	st	Z, r24
	diezMsCounter = 0;
     7e0:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     7e4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     7e8:	0e 94 be 02 	call	0x57c	; 0x57c <timer1_init>
	timer2_init();
     7ec:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     7f0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     7f4:	63 e5       	ldi	r22, 0x53	; 83
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	8d e3       	ldi	r24, 0x3D	; 61
     7fa:	96 e0       	ldi	r25, 0x06	; 6
     7fc:	0e 94 15 0a 	call	0x142a	; 0x142a <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     800:	60 91 19 06 	lds	r22, 0x0619	; 0x800619 <bandera2>
     804:	66 fb       	bst	r22, 6
     806:	66 27       	eor	r22, r22
     808:	60 f9       	bld	r22, 0
     80a:	8d e3       	ldi	r24, 0x3D	; 61
     80c:	96 e0       	ldi	r25, 0x06	; 6
     80e:	0e 94 9e 09 	call	0x133c	; 0x133c <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     812:	41 ee       	ldi	r20, 0xE1	; 225
     814:	55 e0       	ldi	r21, 0x05	; 5
     816:	6d e3       	ldi	r22, 0x3D	; 61
     818:	76 e0       	ldi	r23, 0x06	; 6
     81a:	8f e2       	ldi	r24, 0x2F	; 47
     81c:	96 e0       	ldi	r25, 0x06	; 6
     81e:	0e 94 20 05 	call	0xa40	; 0xa40 <initDetector>
	initSorter(&SorterSystem);
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	96 e0       	ldi	r25, 0x06	; 6
     826:	0e 94 87 05 	call	0xb0e	; 0xb0e <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     82a:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     82e:	82 60       	ori	r24, 0x02	; 2
     830:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     834:	84 ea       	ldi	r24, 0xA4	; 164
     836:	94 e0       	ldi	r25, 0x04	; 4
     838:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
	sei();
     83c:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     83e:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <bandera3>
     842:	80 ff       	sbrs	r24, 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			irSensorsTask(&SorterSystem);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	96 e0       	ldi	r25, 0x06	; 6
     84a:	0e 94 69 07 	call	0xed2	; 0xed2 <irSensorsTask>
     84e:	69 c0       	rjmp	.+210    	; 0x922 <__stack+0x23>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     850:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <__data_end>
     854:	81 11       	cpse	r24, r1
     856:	23 c0       	rjmp	.+70     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
		printf("Calibrando sensores IR...\n");
     858:	87 e7       	ldi	r24, 0x77	; 119
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     860:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     864:	80 ff       	sbrs	r24, 0
     866:	03 c0       	rjmp	.+6      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     868:	84 60       	ori	r24, 0x04	; 4
     86a:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     86e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     872:	80 ff       	sbrs	r24, 0
     874:	03 c0       	rjmp	.+6      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     876:	84 60       	ori	r24, 0x04	; 4
     878:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     87c:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <IR_C>
     880:	80 ff       	sbrs	r24, 0
     882:	03 c0       	rjmp	.+6      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     884:	84 60       	ori	r24, 0x04	; 4
     886:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     88a:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <IR_U>
     88e:	80 ff       	sbrs	r24, 0
     890:	03 c0       	rjmp	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     892:	84 60       	ori	r24, 0x04	; 4
     894:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <IR_U>
		}
		init_done = true;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     89e:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     8a2:	82 ff       	sbrs	r24, 2
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		calibrateIRSensor(&IR_A);
     8a6:	80 e2       	ldi	r24, 0x20	; 32
     8a8:	96 e0       	ldi	r25, 0x06	; 6
     8aa:	0e 94 a1 08 	call	0x1142	; 0x1142 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8ae:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     8b2:	82 ff       	sbrs	r24, 2
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
		calibrateIRSensor(&IR_B);
     8b6:	89 ec       	ldi	r24, 0xC9	; 201
     8b8:	95 e0       	ldi	r25, 0x05	; 5
     8ba:	0e 94 a1 08 	call	0x1142	; 0x1142 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8be:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     8c2:	82 ff       	sbrs	r24, 2
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		calibrateIRSensor(&IR_B);
     8c6:	89 ec       	ldi	r24, 0xC9	; 201
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	0e 94 a1 08 	call	0x1142	; 0x1142 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8ce:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     8d2:	82 ff       	sbrs	r24, 2
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
		calibrateIRSensor(&IR_B);
     8d6:	89 ec       	ldi	r24, 0xC9	; 201
     8d8:	95 e0       	ldi	r25, 0x05	; 5
     8da:	0e 94 a1 08 	call	0x1142	; 0x1142 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     8de:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     8e2:	82 fd       	sbrc	r24, 2
     8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
     8e6:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
		calibrateIRSensor(&IR_B);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     8ea:	82 ff       	sbrs	r24, 2
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
	}
	return false; // Sigue calibrando
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
     8f6:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     8f8:	88 23       	and	r24, r24
     8fa:	99 f0       	breq	.+38     	; 0x922 <__stack+0x23>
				printf("Todos los sensores IR calibrados.\n");
     8fc:	81 e9       	ldi	r24, 0x91	; 145
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
				IR_CALIBRATED = 1;
     904:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <bandera3>
     908:	81 60       	ori	r24, 0x01	; 1
     90a:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <bandera3>
				IR_A.calibrationCounter = 0;
     90e:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     912:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     916:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     91a:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <IR_U+0x9>
				initOutputs();
     91e:	0e 94 3a 05 	call	0xa74	; 0xa74 <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	76 e0       	ldi	r23, 0x06	; 6
     926:	8f e2       	ldi	r24, 0x2F	; 47
     928:	96 e0       	ldi	r25, 0x06	; 6
     92a:	0e 94 37 06 	call	0xc6e	; 0xc6e <ultraSensorTask>
		servosTask();
     92e:	0e 94 0a 08 	call	0x1014	; 0x1014 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     932:	4c 9b       	sbis	0x09, 4	; 9
     934:	0a c0       	rjmp	.+20     	; 0x94a <__stack+0x4b>
     936:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     93a:	86 fd       	sbrc	r24, 6
     93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0x4b>
		btn_pressed_time = 0;
     93e:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <btn_pressed_time>
		BTN_PRESSED = 1;
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
     948:	28 c0       	rjmp	.+80     	; 0x99a <__stack+0x9b>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     94a:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     94e:	86 ff       	sbrs	r24, 6
     950:	24 c0       	rjmp	.+72     	; 0x99a <__stack+0x9b>
     952:	4c 99       	sbic	0x09, 4	; 9
     954:	22 c0       	rjmp	.+68     	; 0x99a <__stack+0x9b>
		BTN_PRESSED = 0;
     956:	8f 7b       	andi	r24, 0xBF	; 191
     958:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     95c:	82 ff       	sbrs	r24, 2
     95e:	04 c0       	rjmp	.+8      	; 0x968 <__stack+0x69>
			printf("Btn overflowed\n");
     960:	83 eb       	ldi	r24, 0xB3	; 179
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     968:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <btn_pressed_time>
     96c:	8a 30       	cpi	r24, 0x0A	; 10
     96e:	30 f4       	brcc	.+12     	; 0x97c <__stack+0x7d>
     970:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     974:	98 2f       	mov	r25, r24
     976:	94 70       	andi	r25, 0x04	; 4
     978:	82 ff       	sbrs	r24, 2
     97a:	06 c0       	rjmp	.+12     	; 0x988 <__stack+0x89>
			BTN_RELEASED = 1;
     97c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     980:	81 60       	ori	r24, 0x01	; 1
     982:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
     986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     988:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <btn_pressed_time>
			if(BTN_OVF){
     98c:	99 23       	and	r25, r25
     98e:	29 f0       	breq	.+10     	; 0x99a <__stack+0x9b>
				BTN_OVF = 0;
     990:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     994:	8b 7f       	andi	r24, 0xFB	; 251
     996:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     99a:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     99e:	84 ff       	sbrs	r24, 4
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <__stack+0xb3>
			WAIT_TIME_TRIGGER_PASSED = 0;
     9a2:	8f 7e       	andi	r24, 0xEF	; 239
     9a4:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     9a8:	e9 e4       	ldi	r30, 0x49	; 73
     9aa:	f6 e0       	ldi	r31, 0x06	; 6
     9ac:	80 81       	ld	r24, Z
     9ae:	80 62       	ori	r24, 0x20	; 32
     9b0:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     9b2:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     9b6:	83 ff       	sbrs	r24, 3
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <__stack+0xcb>
			ECHO_INTERVAL_FLAG = 0;
     9ba:	87 7f       	andi	r24, 0xF7	; 247
     9bc:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			EMIT_TRIGGER = 1;
     9c0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     9ca:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     9ce:	80 ff       	sbrs	r24, 0
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <__stack+0xd9>
			BTN_RELEASED = 0; //TEST SERVO A
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     9d8:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <bandera3>
     9dc:	81 ff       	sbrs	r24, 1
     9de:	2f cf       	rjmp	.-418    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			IR_READ_INTERRUPT = 0;
     9e0:	8d 7f       	andi	r24, 0xFD	; 253
     9e2:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <bandera3>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     9e6:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     9ea:	80 ff       	sbrs	r24, 0
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__stack+0xfd>
     9ee:	82 ff       	sbrs	r24, 2
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__stack+0xfd>
     9f2:	83 fd       	sbrc	r24, 3
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__stack+0xfd>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     9f6:	88 60       	ori	r24, 0x08	; 8
     9f8:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     9fc:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     a00:	80 ff       	sbrs	r24, 0
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <__stack+0x113>
     a04:	82 ff       	sbrs	r24, 2
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <__stack+0x113>
     a08:	83 fd       	sbrc	r24, 3
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x113>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a0c:	88 60       	ori	r24, 0x08	; 8
     a0e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     a12:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <IR_C>
     a16:	80 ff       	sbrs	r24, 0
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <__stack+0x129>
     a1a:	82 ff       	sbrs	r24, 2
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <__stack+0x129>
     a1e:	83 fd       	sbrc	r24, 3
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <__stack+0x129>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a22:	88 60       	ori	r24, 0x08	; 8
     a24:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     a28:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <IR_U>
     a2c:	80 ff       	sbrs	r24, 0
     a2e:	07 cf       	rjmp	.-498    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     a30:	82 ff       	sbrs	r24, 2
     a32:	05 cf       	rjmp	.-502    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     a34:	83 fd       	sbrc	r24, 3
     a36:	03 cf       	rjmp	.-506    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a38:	88 60       	ori	r24, 0x08	; 8
     a3a:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <IR_U>
     a3e:	ff ce       	rjmp	.-514    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>

00000a40 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	00 d0       	rcall	.+0      	; 0xa46 <initDetector+0x6>
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	fc 01       	movw	r30, r24
     a4c:	5a 83       	std	Y+2, r21	; 0x02
     a4e:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     a50:	8d e3       	ldi	r24, 0x3D	; 61
     a52:	96 e0       	ldi	r25, 0x06	; 6
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	93 83       	std	Z+3, r25	; 0x03
     a5e:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     a60:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     a62:	82 ec       	ldi	r24, 0xC2	; 194
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
}
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	printf("Init servos\n");
}

void initOutputs(){
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     a78:	2a e5       	ldi	r18, 0x5A	; 90
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	88 ed       	ldi	r24, 0xD8	; 216
     a86:	95 e0       	ldi	r25, 0x05	; 5
     a88:	0e 94 1e 08 	call	0x103c	; 0x103c <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     a8c:	2a e5       	ldi	r18, 0x5A	; 90
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	42 e0       	ldi	r20, 0x02	; 2
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	8e e4       	ldi	r24, 0x4E	; 78
     a9a:	96 e0       	ldi	r25, 0x06	; 6
     a9c:	0e 94 1e 08 	call	0x103c	; 0x103c <initServo>
	//initServo(&servoC, 2, SERVOC_PIN);
	servosArray[0] = &servoA;
     aa0:	e4 e3       	ldi	r30, 0x34	; 52
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	88 ed       	ldi	r24, 0xD8	; 216
     aa6:	95 e0       	ldi	r25, 0x05	; 5
     aa8:	91 83       	std	Z+1, r25	; 0x01
     aaa:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     aac:	8e e4       	ldi	r24, 0x4E	; 78
     aae:	96 e0       	ldi	r25, 0x06	; 6
     ab0:	93 83       	std	Z+3, r25	; 0x03
     ab2:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     ab4:	8a e1       	ldi	r24, 0x1A	; 26
     ab6:	96 e0       	ldi	r25, 0x06	; 6
     ab8:	95 83       	std	Z+5, r25	; 0x05
     aba:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     abc:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <current_servo>
	printf("Init servos\n");
     ac0:	83 ee       	ldi	r24, 0xE3	; 227
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     ac8:	ce ed       	ldi	r28, 0xDE	; 222
     aca:	d5 e0       	ldi	r29, 0x05	; 5
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     ad0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <IR_A+0x8>
     ad4:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     ad6:	a4 e5       	ldi	r26, 0x54	; 84
     ad8:	b6 e0       	ldi	r27, 0x06	; 6
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	11 96       	adiw	r26, 0x01	; 1
     ade:	8c 93       	st	X, r24
     ae0:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     ae2:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <IR_B+0x8>
     ae6:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     ae8:	ea e3       	ldi	r30, 0x3A	; 58
     aea:	f6 e0       	ldi	r31, 0x06	; 6
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     af0:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_C+0x8>
     af4:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     afe:	82 83       	std	Z+2, r24	; 0x02
	printf("Init outputs\n");
     b00:	8f ee       	ldi	r24, 0xEF	; 239
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     b0e:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     b10:	8c e1       	ldi	r24, 0x1C	; 28
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     b18:	8e ed       	ldi	r24, 0xDE	; 222
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	93 83       	std	Z+3, r25	; 0x03
     b1e:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     b20:	84 e5       	ldi	r24, 0x54	; 84
     b22:	96 e0       	ldi	r25, 0x06	; 6
     b24:	95 83       	std	Z+5, r25	; 0x05
     b26:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     b28:	8a e3       	ldi	r24, 0x3A	; 58
     b2a:	96 e0       	ldi	r25, 0x06	; 6
     b2c:	97 83       	std	Z+7, r25	; 0x07
     b2e:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     b30:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     b34:	88 23       	and	r24, r24
     b36:	44 f4       	brge	.+16     	; 0xb48 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     b38:	8c ef       	ldi	r24, 0xFC	; 252
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     b40:	8e e2       	ldi	r24, 0x2E	; 46
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
     b48:	08 95       	ret

00000b4a <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     b4a:	8e 3b       	cpi	r24, 0xBE	; 190
     b4c:	98 f0       	brcs	.+38     	; 0xb74 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     b4e:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <bandera2>
     b52:	99 23       	and	r25, r25
     b54:	0c f0       	brlt	.+2      	; 0xb58 <classify_box+0xe>
     b56:	83 c0       	rjmp	.+262    	; 0xc5e <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     b58:	1f 92       	push	r1
     b5a:	8f 93       	push	r24
     b5c:	83 e5       	ldi	r24, 0x53	; 83
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
		}
		return NO_BOX;
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     b74:	9e eb       	ldi	r25, 0xBE	; 190
     b76:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     b78:	97 33       	cpi	r25, 0x37	; 55
     b7a:	98 f4       	brcc	.+38     	; 0xba2 <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     b7c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     b80:	80 78       	andi	r24, 0x80	; 128
     b82:	09 f4       	brne	.+2      	; 0xb86 <classify_box+0x3c>
     b84:	73 c0       	rjmp	.+230    	; 0xc6c <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     b86:	1f 92       	push	r1
     b88:	9f 93       	push	r25
     b8a:	83 e8       	ldi	r24, 0x83	; 131
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     ba2:	db 01       	movw	r26, r22
     ba4:	ed 91       	ld	r30, X+
     ba6:	fc 91       	ld	r31, X
     ba8:	80 81       	ld	r24, Z
     baa:	98 17       	cp	r25, r24
     bac:	b0 f0       	brcs	.+44     	; 0xbda <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     bae:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     bb0:	89 17       	cp	r24, r25
     bb2:	98 f0       	brcs	.+38     	; 0xbda <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     bb4:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     bb8:	88 23       	and	r24, r24
     bba:	0c f0       	brlt	.+2      	; 0xbbe <classify_box+0x74>
     bbc:	52 c0       	rjmp	.+164    	; 0xc62 <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     bbe:	1f 92       	push	r1
     bc0:	9f 93       	push	r25
     bc2:	8c ea       	ldi	r24, 0xAC	; 172
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	98 17       	cp	r25, r24
     bde:	a8 f0       	brcs	.+42     	; 0xc0a <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     be0:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     be2:	89 17       	cp	r24, r25
     be4:	90 f0       	brcs	.+36     	; 0xc0a <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     be6:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     bea:	88 23       	and	r24, r24
     bec:	e4 f5       	brge	.+120    	; 0xc66 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     bee:	1f 92       	push	r1
     bf0:	9f 93       	push	r25
     bf2:	81 ec       	ldi	r24, 0xC1	; 193
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c0a:	84 81       	ldd	r24, Z+4	; 0x04
     c0c:	98 17       	cp	r25, r24
     c0e:	a8 f0       	brcs	.+42     	; 0xc3a <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     c10:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c12:	89 17       	cp	r24, r25
     c14:	90 f0       	brcs	.+36     	; 0xc3a <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c16:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     c1a:	88 23       	and	r24, r24
     c1c:	34 f5       	brge	.+76     	; 0xc6a <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     c1e:	1f 92       	push	r1
     c20:	9f 93       	push	r25
     c22:	86 ed       	ldi	r24, 0xD6	; 214
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     c3a:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     c3e:	80 78       	andi	r24, 0x80	; 128
     c40:	a9 f0       	breq	.+42     	; 0xc6c <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     c42:	1f 92       	push	r1
     c44:	9f 93       	push	r25
     c46:	8b ee       	ldi	r24, 0xEB	; 235
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     c6a:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     c6c:	08 95       	ret

00000c6e <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ec 01       	movw	r28, r24
     c7a:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     c7c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     c80:	88 23       	and	r24, r24
     c82:	a4 f5       	brge	.+104    	; 0xcec <ultraSensorTask+0x7e>
     c84:	e8 81       	ld	r30, Y
     c86:	f9 81       	ldd	r31, Y+1	; 0x01
     c88:	84 85       	ldd	r24, Z+12	; 0x0c
     c8a:	85 ff       	sbrs	r24, 5
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <ultraSensorTask+0x7e>
     c8e:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     c92:	81 ff       	sbrs	r24, 1
     c94:	2b c0       	rjmp	.+86     	; 0xcec <ultraSensorTask+0x7e>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     c96:	cf 01       	movw	r24, r30
     c98:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ultrasonic_start>
     c9c:	88 23       	and	r24, r24
     c9e:	c1 f0       	breq	.+48     	; 0xcd0 <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     ca0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     ca4:	86 ff       	sbrs	r24, 6
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     ca8:	89 e1       	ldi	r24, 0x19	; 25
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     cb0:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     cb4:	8f 77       	andi	r24, 0x7F	; 127
     cb6:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     cba:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
     cc0:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     cc4:	e8 81       	ld	r30, Y
     cc6:	f9 81       	ldd	r31, Y+1	; 0x01
     cc8:	84 85       	ldd	r24, Z+12	; 0x0c
     cca:	8f 7d       	andi	r24, 0xDF	; 223
     ccc:	84 87       	std	Z+12, r24	; 0x0c
     cce:	0e c0       	rjmp	.+28     	; 0xcec <ultraSensorTask+0x7e>
		}
		else
		{
			if (DEBUG_FLAGS)
     cd0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     cd4:	86 ff       	sbrs	r24, 6
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     cd8:	84 e1       	ldi	r24, 0x14	; 20
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
			}
			EMIT_FAILED = 1;
     ce0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
			EMIT_TRIGGER = 0;
     ce4:	84 60       	ori	r24, 0x04	; 4
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     cec:	88 81       	ld	r24, Y
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     cf4:	e8 81       	ld	r30, Y
     cf6:	f9 81       	ldd	r31, Y+1	; 0x01
     cf8:	85 85       	ldd	r24, Z+13	; 0x0d
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	09 f0       	breq	.+2      	; 0xd00 <ultraSensorTask+0x92>
     cfe:	b2 c0       	rjmp	.+356    	; 0xe64 <ultraSensorTask+0x1f6>
     d00:	84 85       	ldd	r24, Z+12	; 0x0c
     d02:	88 23       	and	r24, r24
     d04:	0c f0       	brlt	.+2      	; 0xd08 <ultraSensorTask+0x9a>
     d06:	ae c0       	rjmp	.+348    	; 0xe64 <ultraSensorTask+0x1f6>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     d08:	84 85       	ldd	r24, Z+12	; 0x0c
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     d0e:	e8 81       	ld	r30, Y
     d10:	f9 81       	ldd	r31, Y+1	; 0x01
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	91 85       	ldd	r25, Z+9	; 0x09
     d16:	a2 85       	ldd	r26, Z+10	; 0x0a
     d18:	b3 85       	ldd	r27, Z+11	; 0x0b
     d1a:	8f 3b       	cpi	r24, 0xBF	; 191
     d1c:	91 05       	cpc	r25, r1
     d1e:	a1 05       	cpc	r26, r1
     d20:	b1 05       	cpc	r27, r1
     d22:	b0 f0       	brcs	.+44     	; 0xd50 <ultraSensorTask+0xe2>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     d2a:	98 2f       	mov	r25, r24
     d2c:	92 95       	swap	r25
     d2e:	9f 70       	andi	r25, 0x0F	; 15
     d30:	92 30       	cpi	r25, 0x02	; 2
     d32:	51 f4       	brne	.+20     	; 0xd48 <ultraSensorTask+0xda>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     d34:	8f 70       	andi	r24, 0x0F	; 15
     d36:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     d38:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     d3c:	88 23       	and	r24, r24
     d3e:	24 f4       	brge	.+8      	; 0xd48 <ultraSensorTask+0xda>
					printf("Sensor liberado de nuevo\n");
     d40:	84 e2       	ldi	r24, 0x24	; 36
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	8f 70       	andi	r24, 0x0F	; 15
     d4c:	8c 83       	std	Y+4, r24	; 0x04
     d4e:	7e c0       	rjmp	.+252    	; 0xe4c <ultraSensorTask+0x1de>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	98 2f       	mov	r25, r24
     d54:	92 95       	swap	r25
     d56:	9f 70       	andi	r25, 0x0F	; 15
     d58:	09 f0       	breq	.+2      	; 0xd5c <ultraSensorTask+0xee>
     d5a:	78 c0       	rjmp	.+240    	; 0xe4c <ultraSensorTask+0x1de>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     d5c:	8f 70       	andi	r24, 0x0F	; 15
     d5e:	80 61       	ori	r24, 0x10	; 16
     d60:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     d62:	80 85       	ldd	r24, Z+8	; 0x08
     d64:	91 85       	ldd	r25, Z+9	; 0x09
     d66:	a2 85       	ldd	r26, Z+10	; 0x0a
     d68:	b3 85       	ldd	r27, Z+11	; 0x0b
     d6a:	b8 01       	movw	r22, r16
     d6c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <classify_box>
     d70:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	f8 16       	cp	r15, r24
     d76:	09 f4       	brne	.+2      	; 0xd7a <ultraSensorTask+0x10c>
     d78:	65 c0       	rjmp	.+202    	; 0xe44 <ultraSensorTask+0x1d6>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     d7a:	e8 81       	ld	r30, Y
     d7c:	f9 81       	ldd	r31, Y+1	; 0x01
     d7e:	80 85       	ldd	r24, Z+8	; 0x08
     d80:	91 85       	ldd	r25, Z+9	; 0x09
     d82:	a2 85       	ldd	r26, Z+10	; 0x0a
     d84:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     d86:	e1 e0       	ldi	r30, 0x01	; 1
     d88:	fe 16       	cp	r15, r30
     d8a:	49 f0       	breq	.+18     	; 0xd9e <ultraSensorTask+0x130>
     d8c:	fe 16       	cp	r15, r30
     d8e:	b0 f0       	brcs	.+44     	; 0xdbc <ultraSensorTask+0x14e>
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	ff 16       	cp	r15, r31
     d94:	49 f0       	breq	.+18     	; 0xda8 <ultraSensorTask+0x13a>
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	f8 16       	cp	r15, r24
     d9a:	59 f0       	breq	.+22     	; 0xdb2 <ultraSensorTask+0x144>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <ultraSensorTask+0x158>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     d9e:	8d e3       	ldi	r24, 0x3D	; 61
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
     da6:	13 c0       	rjmp	.+38     	; 0xdce <ultraSensorTask+0x160>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     da8:	88 e4       	ldi	r24, 0x48	; 72
     daa:	93 e0       	ldi	r25, 0x03	; 3
     dac:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
     db0:	0e c0       	rjmp	.+28     	; 0xdce <ultraSensorTask+0x160>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     db2:	83 e5       	ldi	r24, 0x53	; 83
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
     dba:	09 c0       	rjmp	.+18     	; 0xdce <ultraSensorTask+0x160>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     dbc:	8e e5       	ldi	r24, 0x5E	; 94
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <ultraSensorTask+0x160>
						default: printf("Tipo no reconocido\n"); break;
     dc6:	8c e6       	ldi	r24, 0x6C	; 108
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     dce:	f1 10       	cpse	r15, r1
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <ultraSensorTask+0x17e>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 89       	ldd	r24, Z+16	; 0x10
     dd6:	91 89       	ldd	r25, Z+17	; 0x11
     dd8:	a2 89       	ldd	r26, Z+18	; 0x12
     dda:	b3 89       	ldd	r27, Z+19	; 0x13
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	a1 1d       	adc	r26, r1
     de0:	b1 1d       	adc	r27, r1
     de2:	80 8b       	std	Z+16, r24	; 0x10
     de4:	91 8b       	std	Z+17, r25	; 0x11
     de6:	a2 8b       	std	Z+18, r26	; 0x12
     de8:	b3 8b       	std	Z+19, r27	; 0x13
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <ultraSensorTask+0x196>
					}
					else
					{
						sorter->stats.total_selected++;
     dec:	f8 01       	movw	r30, r16
     dee:	84 85       	ldd	r24, Z+12	; 0x0c
     df0:	95 85       	ldd	r25, Z+13	; 0x0d
     df2:	a6 85       	ldd	r26, Z+14	; 0x0e
     df4:	b7 85       	ldd	r27, Z+15	; 0x0f
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	a1 1d       	adc	r26, r1
     dfa:	b1 1d       	adc	r27, r1
     dfc:	84 87       	std	Z+12, r24	; 0x0c
     dfe:	95 87       	std	Z+13, r25	; 0x0d
     e00:	a6 87       	std	Z+14, r26	; 0x0e
     e02:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     e04:	f8 01       	movw	r30, r16
     e06:	80 85       	ldd	r24, Z+8	; 0x08
     e08:	91 85       	ldd	r25, Z+9	; 0x09
     e0a:	a2 85       	ldd	r26, Z+10	; 0x0a
     e0c:	b3 85       	ldd	r27, Z+11	; 0x0b
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	80 87       	std	Z+8, r24	; 0x08
     e16:	91 87       	std	Z+9, r25	; 0x09
     e18:	a2 87       	std	Z+10, r26	; 0x0a
     e1a:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     e1c:	ef 2d       	mov	r30, r15
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	35 96       	adiw	r30, 0x05	; 5
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e0 0f       	add	r30, r16
     e2c:	f1 1f       	adc	r31, r17
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	a2 81       	ldd	r26, Z+2	; 0x02
     e34:	b3 81       	ldd	r27, Z+3	; 0x03
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	a1 1d       	adc	r26, r1
     e3a:	b1 1d       	adc	r27, r1
     e3c:	80 83       	st	Z, r24
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	a2 83       	std	Z+2, r26	; 0x02
     e42:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	80 62       	ori	r24, 0x20	; 32
     e4a:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     e4c:	88 81       	ld	r24, Y
     e4e:	99 81       	ldd	r25, Y+1	; 0x01
     e50:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     e54:	e8 81       	ld	r30, Y
     e56:	f9 81       	ldd	r31, Y+1	; 0x01
     e58:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     e5a:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     e64:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     e68:	80 ff       	sbrs	r24, 0
     e6a:	2d c0       	rjmp	.+90     	; 0xec6 <ultraSensorTask+0x258>
	{
		if (DEBUG_FLAGS)
     e6c:	86 ff       	sbrs	r24, 6
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <ultraSensorTask+0x20a>
		{
			printf("HCSR04 perdio ECHO\n");
     e70:	8f e7       	ldi	r24, 0x7F	; 127
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}
		VEINTEMS_PASSED = 0;
     e78:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
		WAITING_ECHO = 0;
     e7c:	8e 7f       	andi	r24, 0xFE	; 254
     e7e:	87 7f       	andi	r24, 0xF7	; 247
     e80:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     e84:	e8 81       	ld	r30, Y
     e86:	f9 81       	ldd	r31, Y+1	; 0x01
     e88:	84 85       	ldd	r24, Z+12	; 0x0c
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     e96:	60 91 19 06 	lds	r22, 0x0619	; 0x800619 <bandera2>
     e9a:	66 fb       	bst	r22, 6
     e9c:	66 27       	eor	r22, r22
     e9e:	60 f9       	bld	r22, 0
     ea0:	88 81       	ld	r24, Y
     ea2:	99 81       	ldd	r25, Y+1	; 0x01
     ea4:	0e 94 34 0a 	call	0x1468	; 0x1468 <ultrasonic_timeout_clear>
     ea8:	88 23       	and	r24, r24
     eaa:	41 f0       	breq	.+16     	; 0xebc <ultraSensorTask+0x24e>
     eac:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bandera2>
     eb0:	86 ff       	sbrs	r24, 6
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <ultraSensorTask+0x24e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     eb4:	82 e9       	ldi	r24, 0x92	; 146
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}

		ULTRASONIC_ENABLE = 1;
     ebc:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <bandera>
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <bandera>
	}
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	08 95       	ret

00000ed2 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
     ed2:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <irSensorsTask+0x1a>
     eda:	83 ff       	sbrs	r24, 3
     edc:	07 c0       	rjmp	.+14     	; 0xeec <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     ede:	87 7f       	andi	r24, 0xF7	; 247
     ee0:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <IR_A>
		tcrt_read(&IR_A);
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	0e 94 11 09 	call	0x1222	; 0x1222 <tcrt_is_box_detected>
     ef4:	89 2b       	or	r24, r25
     ef6:	01 f1       	breq	.+64     	; 0xf38 <irSensorsTask+0x66>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     ef8:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A>
     efc:	82 95       	swap	r24
     efe:	8f 70       	andi	r24, 0x0F	; 15
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	d1 f4       	brne	.+52     	; 0xf38 <irSensorsTask+0x66>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY)){
     f04:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <salidaA+0x2>
     f08:	83 ff       	sbrs	r24, 3
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <irSensorsTask+0x54>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
     f12:	e8 ed       	ldi	r30, 0xD8	; 216
     f14:	f5 e0       	ldi	r31, 0x05	; 5
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
     f1c:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
     f1e:	84 eb       	ldi	r24, 0xB4	; 180
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
     f26:	e0 e2       	ldi	r30, 0x20	; 32
     f28:	f6 e0       	ldi	r31, 0x06	; 6
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 70       	andi	r24, 0x0F	; 15
     f2e:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
     f30:	89 ed       	ldi	r24, 0xD9	; 217
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     f38:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     f3c:	80 ff       	sbrs	r24, 0
     f3e:	09 c0       	rjmp	.+18     	; 0xf52 <irSensorsTask+0x80>
     f40:	83 ff       	sbrs	r24, 3
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <irSensorsTask+0x80>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     f44:	87 7f       	andi	r24, 0xF7	; 247
     f46:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <IR_B>
		tcrt_read(&IR_B);
     f4a:	89 ec       	ldi	r24, 0xC9	; 201
     f4c:	95 e0       	ldi	r25, 0x05	; 5
     f4e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
     f52:	89 ec       	ldi	r24, 0xC9	; 201
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	0e 94 11 09 	call	0x1222	; 0x1222 <tcrt_is_box_detected>
     f5a:	89 2b       	or	r24, r25
     f5c:	71 f0       	breq	.+28     	; 0xf7a <irSensorsTask+0xa8>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f5e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B>
     f62:	98 2f       	mov	r25, r24
     f64:	92 95       	swap	r25
     f66:	9f 70       	andi	r25, 0x0F	; 15
     f68:	92 30       	cpi	r25, 0x02	; 2
     f6a:	39 f4       	brne	.+14     	; 0xf7a <irSensorsTask+0xa8>
			//SET_FLAG(salidaB.flags, OUTPUT_PUSH);
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <IR_B>
			printf("Detecto en IR B\n");
     f72:	89 ee       	ldi	r24, 0xE9	; 233
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     f7a:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <IR_C>
     f7e:	80 ff       	sbrs	r24, 0
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <irSensorsTask+0xc2>
     f82:	83 ff       	sbrs	r24, 3
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <irSensorsTask+0xc2>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <IR_C>
		tcrt_read(&IR_C);
     f8c:	81 ef       	ldi	r24, 0xF1	; 241
     f8e:	95 e0       	ldi	r25, 0x05	; 5
     f90:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
     f94:	81 ef       	ldi	r24, 0xF1	; 241
     f96:	95 e0       	ldi	r25, 0x05	; 5
     f98:	0e 94 11 09 	call	0x1222	; 0x1222 <tcrt_is_box_detected>
     f9c:	89 2b       	or	r24, r25
     f9e:	99 f0       	breq	.+38     	; 0xfc6 <irSensorsTask+0xf4>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     fa0:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <IR_C>
     fa4:	98 2f       	mov	r25, r24
     fa6:	92 95       	swap	r25
     fa8:	9f 70       	andi	r25, 0x0F	; 15
     faa:	92 30       	cpi	r25, 0x02	; 2
     fac:	61 f4       	brne	.+24     	; 0xfc6 <irSensorsTask+0xf4>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
     fae:	e4 e5       	ldi	r30, 0x54	; 84
     fb0:	f6 e0       	ldi	r31, 0x06	; 6
     fb2:	92 81       	ldd	r25, Z+2	; 0x02
     fb4:	92 60       	ori	r25, 0x02	; 2
     fb6:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
     fb8:	8f 70       	andi	r24, 0x0F	; 15
     fba:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <IR_C>
			printf("Detecto en IR C\n");
     fbe:	89 ef       	ldi	r24, 0xF9	; 249
     fc0:	93 e0       	ldi	r25, 0x03	; 3
     fc2:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     fc6:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <IR_U>
     fca:	80 ff       	sbrs	r24, 0
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <irSensorsTask+0x10e>
     fce:	83 ff       	sbrs	r24, 3
     fd0:	07 c0       	rjmp	.+14     	; 0xfe0 <irSensorsTask+0x10e>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <IR_U>
		tcrt_read(&IR_U);
     fd8:	81 ee       	ldi	r24, 0xE1	; 225
     fda:	95 e0       	ldi	r25, 0x05	; 5
     fdc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
     fe0:	81 ee       	ldi	r24, 0xE1	; 225
     fe2:	95 e0       	ldi	r25, 0x05	; 5
     fe4:	0e 94 11 09 	call	0x1222	; 0x1222 <tcrt_is_box_detected>
     fe8:	89 2b       	or	r24, r25
     fea:	99 f0       	breq	.+38     	; 0x1012 <irSensorsTask+0x140>
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     fec:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <IR_U>
     ff0:	98 2f       	mov	r25, r24
     ff2:	92 95       	swap	r25
     ff4:	9f 70       	andi	r25, 0x0F	; 15
     ff6:	92 30       	cpi	r25, 0x02	; 2
     ff8:	61 f4       	brne	.+24     	; 0x1012 <irSensorsTask+0x140>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
     ffa:	e4 e5       	ldi	r30, 0x54	; 84
     ffc:	f6 e0       	ldi	r31, 0x06	; 6
     ffe:	92 81       	ldd	r25, Z+2	; 0x02
    1000:	92 60       	ori	r25, 0x02	; 2
    1002:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);
    1004:	8f 70       	andi	r24, 0x0F	; 15
    1006:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <IR_U>
			printf("Detecto en IR U\n");
    100a:	89 e0       	ldi	r24, 0x09	; 9
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
    1012:	08 95       	ret

00001014 <servosTask>:
		}
	}
}

void servosTask() {
    1014:	08 95       	ret

00001016 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    1016:	85 3b       	cpi	r24, 0xB5	; 181
    1018:	08 f0       	brcs	.+2      	; 0x101c <calculate_angle_pulseUs+0x6>
    101a:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	a0 ed       	ldi	r26, 0xD0	; 208
    1022:	b7 e0       	ldi	r27, 0x07	; 7
    1024:	0e 94 05 0b 	call	0x160a	; 0x160a <__umulhisi3>
    1028:	24 eb       	ldi	r18, 0xB4	; 180
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__udivmodsi4>
}
    1034:	c9 01       	movw	r24, r18
    1036:	80 53       	subi	r24, 0x30	; 48
    1038:	98 4f       	sbci	r25, 0xF8	; 248
    103a:	08 95       	ret

0000103c <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	04 2f       	mov	r16, r20
    1048:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    104a:	1f 92       	push	r1
    104c:	6f 93       	push	r22
    104e:	89 e1       	ldi	r24, 0x19	; 25
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	9f 93       	push	r25
    1054:	8f 93       	push	r24
    1056:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
	servo->flags.byte = 0;
    105a:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    105c:	81 2f       	mov	r24, r17
    105e:	0e 94 0b 08 	call	0x1016	; 0x1016 <calculate_angle_pulseUs>
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    1066:	08 83       	st	Y, r16
	servo->angle = startAngle;
    1068:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    106a:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	89 83       	std	Y+1, r24	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    1084:	87 b1       	in	r24, 0x07	; 7
    1086:	80 7f       	andi	r24, 0xF0	; 240
    1088:	87 b9       	out	0x07, r24	; 7
    108a:	88 b1       	in	r24, 0x08	; 8
    108c:	80 7f       	andi	r24, 0xF0	; 240
    108e:	88 b9       	out	0x08, r24	; 8
    1090:	80 e4       	ldi	r24, 0x40	; 64
    1092:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1096:	86 e8       	ldi	r24, 0x86	; 134
    1098:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    109c:	08 95       	ret

0000109e <tcrt_read_channel>:
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	a0 f4       	brcc	.+40     	; 0x10ca <tcrt_read_channel+0x2c>
    10a2:	ec e7       	ldi	r30, 0x7C	; 124
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	90 81       	ld	r25, Z
    10a8:	90 7f       	andi	r25, 0xF0	; 240
    10aa:	89 2b       	or	r24, r25
    10ac:	80 83       	st	Z, r24
    10ae:	ea e7       	ldi	r30, 0x7A	; 122
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	80 83       	st	Z, r24
    10b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10bc:	86 fd       	sbrc	r24, 6
    10be:	fc cf       	rjmp	.-8      	; 0x10b8 <tcrt_read_channel+0x1a>
    10c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    10c8:	08 95       	ret
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	08 95       	ret

000010d0 <TCRT_init_Handlers>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	e0 e2       	ldi	r30, 0x20	; 32
    10d6:	f6 e0       	ldi	r31, 0x06	; 6
    10d8:	17 82       	std	Z+7, r1	; 0x07
    10da:	10 86       	std	Z+8, r1	; 0x08
    10dc:	12 82       	std	Z+2, r1	; 0x02
    10de:	11 82       	std	Z+1, r1	; 0x01
    10e0:	16 82       	std	Z+6, r1	; 0x06
    10e2:	15 82       	std	Z+5, r1	; 0x05
    10e4:	c4 e1       	ldi	r28, 0x14	; 20
    10e6:	c6 87       	std	Z+14, r28	; 0x0e
    10e8:	d1 e0       	ldi	r29, 0x01	; 1
    10ea:	d0 83       	st	Z, r29
    10ec:	88 e2       	ldi	r24, 0x28	; 40
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
    10f4:	e9 ec       	ldi	r30, 0xC9	; 201
    10f6:	f5 e0       	ldi	r31, 0x05	; 5
    10f8:	d7 83       	std	Z+7, r29	; 0x07
    10fa:	d0 87       	std	Z+8, r29	; 0x08
    10fc:	12 82       	std	Z+2, r1	; 0x02
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	16 82       	std	Z+6, r1	; 0x06
    1102:	15 82       	std	Z+5, r1	; 0x05
    1104:	c6 87       	std	Z+14, r28	; 0x0e
    1106:	d0 83       	st	Z, r29
    1108:	87 e3       	ldi	r24, 0x37	; 55
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	0e 94 35 0b 	call	0x166a	; 0x166a <puts>
    1110:	e1 ef       	ldi	r30, 0xF1	; 241
    1112:	f5 e0       	ldi	r31, 0x05	; 5
    1114:	10 82       	st	Z, r1
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	87 83       	std	Z+7, r24	; 0x07
    111a:	80 87       	std	Z+8, r24	; 0x08
    111c:	12 82       	std	Z+2, r1	; 0x02
    111e:	11 82       	std	Z+1, r1	; 0x01
    1120:	16 82       	std	Z+6, r1	; 0x06
    1122:	15 82       	std	Z+5, r1	; 0x05
    1124:	c6 87       	std	Z+14, r28	; 0x0e
    1126:	e1 ee       	ldi	r30, 0xE1	; 225
    1128:	f5 e0       	ldi	r31, 0x05	; 5
    112a:	10 82       	st	Z, r1
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	87 83       	std	Z+7, r24	; 0x07
    1130:	80 87       	std	Z+8, r24	; 0x08
    1132:	12 82       	std	Z+2, r1	; 0x02
    1134:	11 82       	std	Z+1, r1	; 0x01
    1136:	16 82       	std	Z+6, r1	; 0x06
    1138:	15 82       	std	Z+5, r1	; 0x05
    113a:	c6 87       	std	Z+14, r28	; 0x0e
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    1148:	88 81       	ld	r24, Y
    114a:	83 ff       	sbrs	r24, 3
    114c:	36 c0       	rjmp	.+108    	; 0x11ba <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	81 11       	cpse	r24, r1
    1156:	02 c0       	rjmp	.+4      	; 0x115c <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    1158:	1e 82       	std	Y+6, r1	; 0x06
    115a:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	0e 94 4f 08 	call	0x109e	; 0x109e <tcrt_read_channel>
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	28 0f       	add	r18, r24
    1168:	39 1f       	adc	r19, r25
    116a:	3e 83       	std	Y+6, r19	; 0x06
    116c:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    116e:	99 85       	ldd	r25, Y+9	; 0x09
    1170:	9f 5f       	subi	r25, 0xFF	; 255
    1172:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    1174:	9a 30       	cpi	r25, 0x0A	; 10
    1176:	08 f1       	brcs	.+66     	; 0x11ba <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    1178:	ad ec       	ldi	r26, 0xCD	; 205
    117a:	bc ec       	ldi	r27, 0xCC	; 204
    117c:	0e 94 05 0b 	call	0x160a	; 0x160a <__umulhisi3>
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	96 95       	lsr	r25
    1186:	87 95       	ror	r24
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1190:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1192:	28 81       	ld	r18, Y
    1194:	2b 7f       	andi	r18, 0xFB	; 251
    1196:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    1198:	2f 81       	ldd	r18, Y+7	; 0x07
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	1f 92       	push	r1
    11a0:	2f 93       	push	r18
    11a2:	86 e4       	ldi	r24, 0x46	; 70
    11a4:	94 e0       	ldi	r25, 0x04	; 4
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	0e 94 1f 0b 	call	0x163e	; 0x163e <printf>
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
		}
	}
}
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	0e 94 4f 08 	call	0x109e	; 0x109e <tcrt_read_channel>
	sensor->lastReading = lectura;
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    11d4:	4a 85       	ldd	r20, Y+10	; 0x0a
    11d6:	5b 85       	ldd	r21, Y+11	; 0x0b
    11d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    11da:	7d 85       	ldd	r23, Y+13	; 0x0d
    11dc:	8a 01       	movw	r16, r20
    11de:	9b 01       	movw	r18, r22
    11e0:	08 0f       	add	r16, r24
    11e2:	19 1f       	adc	r17, r25
    11e4:	21 1d       	adc	r18, r1
    11e6:	31 1d       	adc	r19, r1
    11e8:	c9 01       	movw	r24, r18
    11ea:	b8 01       	movw	r22, r16
    11ec:	0a 87       	std	Y+10, r16	; 0x0a
    11ee:	1b 87       	std	Y+11, r17	; 0x0b
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    11f4:	29 85       	ldd	r18, Y+9	; 0x09
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    11fa:	2a 30       	cpi	r18, 0x0A	; 10
    11fc:	68 f0       	brcs	.+26     	; 0x1218 <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__udivmodsi4>
    120a:	3a 83       	std	Y+2, r19	; 0x02
    120c:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    120e:	1a 86       	std	Y+10, r1	; 0x0a
    1210:	1b 86       	std	Y+11, r1	; 0x0b
    1212:	1c 86       	std	Y+12, r1	; 0x0c
    1214:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1216:	19 86       	std	Y+9, r1	; 0x09
	}
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1230:	ab 81       	ldd	r26, Y+3	; 0x03
    1232:	bc 81       	ldd	r27, Y+4	; 0x04
    1234:	8e 85       	ldd	r24, Y+14	; 0x0e
    1236:	0f 2e       	mov	r0, r31
    1238:	f4 e6       	ldi	r31, 0x64	; 100
    123a:	cf 2e       	mov	r12, r31
    123c:	d1 2c       	mov	r13, r1
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	f0 2d       	mov	r31, r0
    1244:	a7 01       	movw	r20, r14
    1246:	96 01       	movw	r18, r12
    1248:	28 1b       	sub	r18, r24
    124a:	31 09       	sbc	r19, r1
    124c:	41 09       	sbc	r20, r1
    124e:	51 09       	sbc	r21, r1
    1250:	0e 94 14 0b 	call	0x1628	; 0x1628 <__muluhisi3>
    1254:	a7 01       	movw	r20, r14
    1256:	96 01       	movw	r18, r12
    1258:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	6c 01       	movw	r12, r24
    1262:	e1 2c       	mov	r14, r1
    1264:	f1 2c       	mov	r15, r1
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	c2 16       	cp	r12, r18
    126a:	d3 06       	cpc	r13, r19
    126c:	e4 06       	cpc	r14, r20
    126e:	f5 06       	cpc	r15, r21
    1270:	08 f0       	brcs	.+2      	; 0x1274 <tcrt_is_box_detected+0x52>
    1272:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    1274:	c2 16       	cp	r12, r18
    1276:	d3 06       	cpc	r13, r19
    1278:	e4 06       	cpc	r14, r20
    127a:	f5 06       	cpc	r15, r21
    127c:	50 f4       	brcc	.+20     	; 0x1292 <tcrt_is_box_detected+0x70>
    127e:	98 81       	ld	r25, Y
    1280:	e9 2f       	mov	r30, r25
    1282:	e2 95       	swap	r30
    1284:	ef 70       	andi	r30, 0x0F	; 15
    1286:	29 f4       	brne	.+10     	; 0x1292 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    1288:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    128a:	9f 70       	andi	r25, 0x0F	; 15
    128c:	90 61       	ori	r25, 0x10	; 16
    128e:	98 83       	st	Y, r25
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <tcrt_is_box_detected+0x8e>
	}
	else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    1292:	c2 16       	cp	r12, r18
    1294:	d3 06       	cpc	r13, r19
    1296:	e4 06       	cpc	r14, r20
    1298:	f5 06       	cpc	r15, r21
    129a:	50 f0       	brcs	.+20     	; 0x12b0 <tcrt_is_box_detected+0x8e>
    129c:	98 81       	ld	r25, Y
    129e:	29 2f       	mov	r18, r25
    12a0:	22 95       	swap	r18
    12a2:	2f 70       	andi	r18, 0x0F	; 15
    12a4:	21 30       	cpi	r18, 0x01	; 1
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    12a8:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    12aa:	9d 70       	andi	r25, 0x0D	; 13
    12ac:	90 62       	ori	r25, 0x20	; 32
    12ae:	98 83       	st	Y, r25
	}

	return box_now;
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	08 95       	ret

000012be <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    12be:	8b b1       	in	r24, 0x0b	; 11
    12c0:	88 60       	ori	r24, 0x08	; 8
    12c2:	8b b9       	out	0x0b, r24	; 11
    12c4:	08 95       	ret

000012c6 <ultrasonic_hal_trigger_setLow>:
    12c6:	8b b1       	in	r24, 0x0b	; 11
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	8b b9       	out	0x0b, r24	; 11
    12cc:	08 95       	ret

000012ce <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    12ce:	e1 e8       	ldi	r30, 0x81	; 129
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 64       	ori	r24, 0x40	; 64
    12d6:	80 83       	st	Z, r24
    12d8:	08 95       	ret

000012da <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    12da:	e1 e8       	ldi	r30, 0x81	; 129
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7b       	andi	r24, 0xBF	; 191
    12e2:	80 83       	st	Z, r24
    12e4:	08 95       	ret

000012e6 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    12e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    12ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    12ee:	88 e1       	ldi	r24, 0x18	; 24
    12f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    12f4:	86 e0       	ldi	r24, 0x06	; 6
    12f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    12fa:	08 95       	ret

000012fc <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    12fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1300:	95 ff       	sbrs	r25, 5
    1302:	fc cf       	rjmp	.-8      	; 0x12fc <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    1304:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1308:	08 95       	ret

0000130a <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    130a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    130e:	88 23       	and	r24, r24
    1310:	e4 f7       	brge	.-8      	; 0x130a <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    1312:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1316:	08 95       	ret

00001318 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1318:	cf 93       	push	r28
    131a:	c8 2f       	mov	r28, r24
	if (c == '\n')
    131c:	8a 30       	cpi	r24, 0x0A	; 10
    131e:	19 f4       	brne	.+6      	; 0x1326 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    1320:	8d e0       	ldi	r24, 0x0D	; 13
    1322:	0e 94 7e 09 	call	0x12fc	; 0x12fc <USART_Transmit>
	USART_Transmit(c);
    1326:	8c 2f       	mov	r24, r28
    1328:	0e 94 7e 09 	call	0x12fc	; 0x12fc <USART_Transmit>
	return 0;
}
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    1334:	0e 94 85 09 	call	0x130a	; 0x130a <USART_Receive>
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	08 95       	ret

0000133c <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    133c:	fc 01       	movw	r30, r24
    133e:	66 87       	std	Z+14, r22	; 0x0e
    1340:	08 95       	ret

00001342 <ultrasonic_calculate_distance>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	ae 81       	ldd	r26, Y+6	; 0x06
    1352:	bf 81       	ldd	r27, Y+7	; 0x07
    1354:	48 81       	ld	r20, Y
    1356:	59 81       	ldd	r21, Y+1	; 0x01
    1358:	6a 81       	ldd	r22, Y+2	; 0x02
    135a:	7b 81       	ldd	r23, Y+3	; 0x03
    135c:	8c 01       	movw	r16, r24
    135e:	9d 01       	movw	r18, r26
    1360:	04 1b       	sub	r16, r20
    1362:	15 0b       	sbc	r17, r21
    1364:	26 0b       	sbc	r18, r22
    1366:	37 0b       	sbc	r19, r23
    1368:	b9 01       	movw	r22, r18
    136a:	a8 01       	movw	r20, r16
    136c:	d9 01       	movw	r26, r18
    136e:	c8 01       	movw	r24, r16
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	aa 1f       	adc	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	aa 1f       	adc	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	8c 01       	movw	r16, r24
    1392:	9d 01       	movw	r18, r26
    1394:	04 0f       	add	r16, r20
    1396:	15 1f       	adc	r17, r21
    1398:	26 1f       	adc	r18, r22
    139a:	37 1f       	adc	r19, r23
    139c:	c9 01       	movw	r24, r18
    139e:	b8 01       	movw	r22, r16
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	20 e9       	ldi	r18, 0x90	; 144
    13aa:	31 e0       	ldi	r19, 0x01	; 1
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__udivmodsi4>
    13b4:	28 87       	std	Y+8, r18	; 0x08
    13b6:	39 87       	std	Y+9, r19	; 0x09
    13b8:	4a 87       	std	Y+10, r20	; 0x0a
    13ba:	5b 87       	std	Y+11, r21	; 0x0b
    13bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	8c 87       	std	Y+12, r24	; 0x0c
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    13cc:	dc 01       	movw	r26, r24
    13ce:	1f 96       	adiw	r26, 0x0f	; 15
    13d0:	ed 91       	ld	r30, X+
    13d2:	fc 91       	ld	r31, X
    13d4:	50 97       	sbiw	r26, 0x10	; 16
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	11 f0       	breq	.+4      	; 0x13de <ultrasonic_print+0x12>
    13da:	cb 01       	movw	r24, r22
		us->print_method(message);
    13dc:	09 95       	icall
    13de:	08 95       	ret

000013e0 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    13e6:	18 82       	st	Y, r1
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	1a 82       	std	Y+2, r1	; 0x02
    13ec:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    13ee:	1c 82       	std	Y+4, r1	; 0x04
    13f0:	1d 82       	std	Y+5, r1	; 0x05
    13f2:	1e 82       	std	Y+6, r1	; 0x06
    13f4:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    13f6:	18 86       	std	Y+8, r1	; 0x08
    13f8:	19 86       	std	Y+9, r1	; 0x09
    13fa:	1a 86       	std	Y+10, r1	; 0x0a
    13fc:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    13fe:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1400:	8c 85       	ldd	r24, Y+12	; 0x0c
    1402:	80 62       	ori	r24, 0x20	; 32
    1404:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1406:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1408:	0e 94 67 09 	call	0x12ce	; 0x12ce <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	98 89       	ldd	r25, Y+16	; 0x10
    1410:	89 2b       	or	r24, r25
    1412:	41 f0       	breq	.+16     	; 0x1424 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1414:	8e 85       	ldd	r24, Y+14	; 0x0e
    1416:	88 23       	and	r24, r24
    1418:	29 f0       	breq	.+10     	; 0x1424 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    141a:	62 e7       	ldi	r22, 0x72	; 114
    141c:	74 e0       	ldi	r23, 0x04	; 4
    141e:	ce 01       	movw	r24, r28
    1420:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
		}
	}
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1436:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <ultrasonic_init_flags>
	us->debugMode = true;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    143e:	01 15       	cp	r16, r1
    1440:	11 05       	cpc	r17, r1
    1442:	19 f4       	brne	.+6      	; 0x144a <ultrasonic_init+0x20>
		us->print_method = NULL;
    1444:	18 8a       	std	Y+16, r1	; 0x10
    1446:	1f 86       	std	Y+15, r1	; 0x0f
    1448:	0a c0       	rjmp	.+20     	; 0x145e <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    144a:	18 8b       	std	Y+16, r17	; 0x10
    144c:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    144e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1450:	88 23       	and	r24, r24
    1452:	29 f0       	breq	.+10     	; 0x145e <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1454:	61 e9       	ldi	r22, 0x91	; 145
    1456:	74 e0       	ldi	r23, 0x04	; 4
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
		}
	}
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    146e:	fc 01       	movw	r30, r24
    1470:	25 85       	ldd	r18, Z+13	; 0x0d
    1472:	26 30       	cpi	r18, 0x06	; 6
    1474:	71 f4       	brne	.+28     	; 0x1492 <ultrasonic_timeout_clear+0x2a>
    1476:	16 2f       	mov	r17, r22
    1478:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    147a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <ultrasonic_init_flags>
		us->debugMode = state;
    147e:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    1480:	1e 85       	ldd	r17, Y+14	; 0x0e
    1482:	11 23       	and	r17, r17
    1484:	41 f0       	breq	.+16     	; 0x1496 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    1486:	62 e9       	ldi	r22, 0x92	; 146
    1488:	73 e0       	ldi	r23, 0x03	; 3
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    1496:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    1498:	81 2f       	mov	r24, r17
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	08 95       	ret

000014a2 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    14a2:	cf 93       	push	r28
    14a4:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    14a6:	85 85       	ldd	r24, Z+13	; 0x0d
    14a8:	88 23       	and	r24, r24
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <ultrasonic_start+0x10>
    14ac:	85 85       	ldd	r24, Z+13	; 0x0d
    14ae:	85 30       	cpi	r24, 0x05	; 5
    14b0:	c1 f4       	brne	.+48     	; 0x14e2 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    14b2:	84 85       	ldd	r24, Z+12	; 0x0c
    14b4:	85 ff       	sbrs	r24, 5
    14b6:	0b c0       	rjmp	.+22     	; 0x14ce <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    14bc:	c6 85       	ldd	r28, Z+14	; 0x0e
    14be:	cc 23       	and	r28, r28
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    14c2:	6d ea       	ldi	r22, 0xAD	; 173
    14c4:	74 e0       	ldi	r23, 0x04	; 4
    14c6:	cf 01       	movw	r24, r30
    14c8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    14ce:	c6 85       	ldd	r28, Z+14	; 0x0e
    14d0:	cc 23       	and	r28, r28
    14d2:	91 f0       	breq	.+36     	; 0x14f8 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    14d4:	6c ed       	ldi	r22, 0xDC	; 220
    14d6:	74 e0       	ldi	r23, 0x04	; 4
    14d8:	cf 01       	movw	r24, r30
    14da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    14de:	c0 e0       	ldi	r28, 0x00	; 0
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    14e2:	c6 85       	ldd	r28, Z+14	; 0x0e
    14e4:	cc 23       	and	r28, r28
    14e6:	41 f0       	breq	.+16     	; 0x14f8 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    14e8:	63 e1       	ldi	r22, 0x13	; 19
    14ea:	75 e0       	ldi	r23, 0x05	; 5
    14ec:	cf 01       	movw	r24, r30
    14ee:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
			}
	}
	return false;
    14f2:	c0 e0       	ldi	r28, 0x00	; 0
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    14f6:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    14f8:	8c 2f       	mov	r24, r28
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
	switch (us->state)
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	71 f1       	breq	.+92     	; 0x1566 <ultrasonic_update+0x68>
    150a:	28 f4       	brcc	.+10     	; 0x1516 <ultrasonic_update+0x18>
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	49 f0       	breq	.+18     	; 0x1522 <ultrasonic_update+0x24>
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	a1 f0       	breq	.+40     	; 0x153c <ultrasonic_update+0x3e>
    1514:	55 c0       	rjmp	.+170    	; 0x15c0 <ultrasonic_update+0xc2>
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	e1 f1       	breq	.+120    	; 0x1592 <ultrasonic_update+0x94>
    151a:	86 30       	cpi	r24, 0x06	; 6
    151c:	09 f4       	brne	.+2      	; 0x1520 <ultrasonic_update+0x22>
    151e:	4d c0       	rjmp	.+154    	; 0x15ba <ultrasonic_update+0xbc>
    1520:	4f c0       	rjmp	.+158    	; 0x15c0 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1522:	8c 85       	ldd	r24, Y+12	; 0x0c
    1524:	81 ff       	sbrs	r24, 1
    1526:	4c c0       	rjmp	.+152    	; 0x15c0 <ultrasonic_update+0xc2>
				if(us->debugMode){
    1528:	8e 85       	ldd	r24, Y+14	; 0x0e
    152a:	88 23       	and	r24, r24
    152c:	09 f4       	brne	.+2      	; 0x1530 <ultrasonic_update+0x32>
    152e:	48 c0       	rjmp	.+144    	; 0x15c0 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1530:	60 e4       	ldi	r22, 0x40	; 64
    1532:	75 e0       	ldi	r23, 0x05	; 5
    1534:	ce 01       	movw	r24, r28
    1536:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
    153a:	42 c0       	rjmp	.+132    	; 0x15c0 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    153c:	8c 85       	ldd	r24, Y+12	; 0x0c
    153e:	84 fd       	sbrc	r24, 4
    1540:	0c c0       	rjmp	.+24     	; 0x155a <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    1546:	0e 94 6d 09 	call	0x12da	; 0x12da <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    154a:	8e 85       	ldd	r24, Y+14	; 0x0e
    154c:	88 23       	and	r24, r24
    154e:	29 f0       	breq	.+10     	; 0x155a <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    1550:	6f e5       	ldi	r22, 0x5F	; 95
    1552:	75 e0       	ldi	r23, 0x05	; 5
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    155a:	8c 85       	ldd	r24, Y+12	; 0x0c
    155c:	83 ff       	sbrs	r24, 3
    155e:	30 c0       	rjmp	.+96     	; 0x15c0 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1560:	86 e0       	ldi	r24, 0x06	; 6
    1562:	8d 87       	std	Y+13, r24	; 0x0d
    1564:	2d c0       	rjmp	.+90     	; 0x15c0 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    1566:	8c 85       	ldd	r24, Y+12	; 0x0c
    1568:	86 ff       	sbrs	r24, 6
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    1570:	8e 85       	ldd	r24, Y+14	; 0x0e
    1572:	88 23       	and	r24, r24
    1574:	29 f0       	breq	.+10     	; 0x1580 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    1576:	6c e7       	ldi	r22, 0x7C	; 124
    1578:	75 e0       	ldi	r23, 0x05	; 5
    157a:	ce 01       	movw	r24, r28
    157c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    1580:	8c 85       	ldd	r24, Y+12	; 0x0c
    1582:	84 60       	ori	r24, 0x04	; 4
    1584:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    1586:	8c 85       	ldd	r24, Y+12	; 0x0c
    1588:	83 ff       	sbrs	r24, 3
    158a:	1a c0       	rjmp	.+52     	; 0x15c0 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    158c:	86 e0       	ldi	r24, 0x06	; 6
    158e:	8d 87       	std	Y+13, r24	; 0x0d
    1590:	17 c0       	rjmp	.+46     	; 0x15c0 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    1592:	8c 85       	ldd	r24, Y+12	; 0x0c
    1594:	82 ff       	sbrs	r24, 2
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    1598:	ce 01       	movw	r24, r28
    159a:	0e 94 a1 09 	call	0x1342	; 0x1342 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    159e:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a0:	8b 7f       	andi	r24, 0xFB	; 251
    15a2:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    15a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a6:	88 23       	and	r24, r24
    15a8:	29 f0       	breq	.+10     	; 0x15b4 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    15aa:	63 e9       	ldi	r22, 0x93	; 147
    15ac:	75 e0       	ldi	r23, 0x05	; 5
    15ae:	ce 01       	movw	r24, r28
    15b0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    15b4:	85 e0       	ldi	r24, 0x05	; 5
    15b6:	8d 87       	std	Y+13, r24	; 0x0d
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    15ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    15bc:	88 60       	ori	r24, 0x08	; 8
    15be:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <__udivmodsi4>:
    15c6:	a1 e2       	ldi	r26, 0x21	; 33
    15c8:	1a 2e       	mov	r1, r26
    15ca:	aa 1b       	sub	r26, r26
    15cc:	bb 1b       	sub	r27, r27
    15ce:	fd 01       	movw	r30, r26
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <__udivmodsi4_ep>

000015d2 <__udivmodsi4_loop>:
    15d2:	aa 1f       	adc	r26, r26
    15d4:	bb 1f       	adc	r27, r27
    15d6:	ee 1f       	adc	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	a2 17       	cp	r26, r18
    15dc:	b3 07       	cpc	r27, r19
    15de:	e4 07       	cpc	r30, r20
    15e0:	f5 07       	cpc	r31, r21
    15e2:	20 f0       	brcs	.+8      	; 0x15ec <__udivmodsi4_ep>
    15e4:	a2 1b       	sub	r26, r18
    15e6:	b3 0b       	sbc	r27, r19
    15e8:	e4 0b       	sbc	r30, r20
    15ea:	f5 0b       	sbc	r31, r21

000015ec <__udivmodsi4_ep>:
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	1a 94       	dec	r1
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <__udivmodsi4_loop>
    15f8:	60 95       	com	r22
    15fa:	70 95       	com	r23
    15fc:	80 95       	com	r24
    15fe:	90 95       	com	r25
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	bd 01       	movw	r22, r26
    1606:	cf 01       	movw	r24, r30
    1608:	08 95       	ret

0000160a <__umulhisi3>:
    160a:	a2 9f       	mul	r26, r18
    160c:	b0 01       	movw	r22, r0
    160e:	b3 9f       	mul	r27, r19
    1610:	c0 01       	movw	r24, r0
    1612:	a3 9f       	mul	r26, r19
    1614:	70 0d       	add	r23, r0
    1616:	81 1d       	adc	r24, r1
    1618:	11 24       	eor	r1, r1
    161a:	91 1d       	adc	r25, r1
    161c:	b2 9f       	mul	r27, r18
    161e:	70 0d       	add	r23, r0
    1620:	81 1d       	adc	r24, r1
    1622:	11 24       	eor	r1, r1
    1624:	91 1d       	adc	r25, r1
    1626:	08 95       	ret

00001628 <__muluhisi3>:
    1628:	0e 94 05 0b 	call	0x160a	; 0x160a <__umulhisi3>
    162c:	a5 9f       	mul	r26, r21
    162e:	90 0d       	add	r25, r0
    1630:	b4 9f       	mul	r27, r20
    1632:	90 0d       	add	r25, r0
    1634:	a4 9f       	mul	r26, r20
    1636:	80 0d       	add	r24, r0
    1638:	91 1d       	adc	r25, r1
    163a:	11 24       	eor	r1, r1
    163c:	08 95       	ret

0000163e <printf>:
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e2       	ldi	r30, 0x25	; 37
    1644:	fb e0       	ldi	r31, 0x0B	; 11
    1646:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__prologue_saves__+0x20>
    164a:	ae 01       	movw	r20, r28
    164c:	4b 5f       	subi	r20, 0xFB	; 251
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	fa 01       	movw	r30, r20
    1652:	61 91       	ld	r22, Z+
    1654:	71 91       	ld	r23, Z+
    1656:	af 01       	movw	r20, r30
    1658:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <__iob+0x2>
    165c:	90 91 5a 06 	lds	r25, 0x065A	; 0x80065a <__iob+0x3>
    1660:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vfprintf>
    1664:	e2 e0       	ldi	r30, 0x02	; 2
    1666:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__epilogue_restores__+0x20>

0000166a <puts>:
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <__iob+0x2>
    1676:	f0 91 5a 06 	lds	r31, 0x065A	; 0x80065a <__iob+0x3>
    167a:	23 81       	ldd	r18, Z+3	; 0x03
    167c:	21 ff       	sbrs	r18, 1
    167e:	1b c0       	rjmp	.+54     	; 0x16b6 <puts+0x4c>
    1680:	8c 01       	movw	r16, r24
    1682:	d0 e0       	ldi	r29, 0x00	; 0
    1684:	c0 e0       	ldi	r28, 0x00	; 0
    1686:	f8 01       	movw	r30, r16
    1688:	81 91       	ld	r24, Z+
    168a:	8f 01       	movw	r16, r30
    168c:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <__iob+0x2>
    1690:	70 91 5a 06 	lds	r23, 0x065A	; 0x80065a <__iob+0x3>
    1694:	db 01       	movw	r26, r22
    1696:	18 96       	adiw	r26, 0x08	; 8
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	19 97       	sbiw	r26, 0x09	; 9
    169e:	88 23       	and	r24, r24
    16a0:	31 f0       	breq	.+12     	; 0x16ae <puts+0x44>
    16a2:	09 95       	icall
    16a4:	89 2b       	or	r24, r25
    16a6:	79 f3       	breq	.-34     	; 0x1686 <puts+0x1c>
    16a8:	df ef       	ldi	r29, 0xFF	; 255
    16aa:	cf ef       	ldi	r28, 0xFF	; 255
    16ac:	ec cf       	rjmp	.-40     	; 0x1686 <puts+0x1c>
    16ae:	8a e0       	ldi	r24, 0x0A	; 10
    16b0:	09 95       	icall
    16b2:	89 2b       	or	r24, r25
    16b4:	19 f0       	breq	.+6      	; 0x16bc <puts+0x52>
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <puts+0x56>
    16bc:	8d 2f       	mov	r24, r29
    16be:	9c 2f       	mov	r25, r28
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	08 95       	ret

000016ca <vfprintf>:
    16ca:	ab e0       	ldi	r26, 0x0B	; 11
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e6       	ldi	r30, 0x6B	; 107
    16d0:	fb e0       	ldi	r31, 0x0B	; 11
    16d2:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__prologue_saves__>
    16d6:	6c 01       	movw	r12, r24
    16d8:	7b 01       	movw	r14, r22
    16da:	8a 01       	movw	r16, r20
    16dc:	fc 01       	movw	r30, r24
    16de:	17 82       	std	Z+7, r1	; 0x07
    16e0:	16 82       	std	Z+6, r1	; 0x06
    16e2:	83 81       	ldd	r24, Z+3	; 0x03
    16e4:	81 ff       	sbrs	r24, 1
    16e6:	cc c1       	rjmp	.+920    	; 0x1a80 <vfprintf+0x3b6>
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	3c 01       	movw	r6, r24
    16ee:	f6 01       	movw	r30, r12
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	f7 01       	movw	r30, r14
    16f4:	93 fd       	sbrc	r25, 3
    16f6:	85 91       	lpm	r24, Z+
    16f8:	93 ff       	sbrs	r25, 3
    16fa:	81 91       	ld	r24, Z+
    16fc:	7f 01       	movw	r14, r30
    16fe:	88 23       	and	r24, r24
    1700:	09 f4       	brne	.+2      	; 0x1704 <vfprintf+0x3a>
    1702:	ba c1       	rjmp	.+884    	; 0x1a78 <vfprintf+0x3ae>
    1704:	85 32       	cpi	r24, 0x25	; 37
    1706:	39 f4       	brne	.+14     	; 0x1716 <vfprintf+0x4c>
    1708:	93 fd       	sbrc	r25, 3
    170a:	85 91       	lpm	r24, Z+
    170c:	93 ff       	sbrs	r25, 3
    170e:	81 91       	ld	r24, Z+
    1710:	7f 01       	movw	r14, r30
    1712:	85 32       	cpi	r24, 0x25	; 37
    1714:	29 f4       	brne	.+10     	; 0x1720 <vfprintf+0x56>
    1716:	b6 01       	movw	r22, r12
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    171e:	e7 cf       	rjmp	.-50     	; 0x16ee <vfprintf+0x24>
    1720:	91 2c       	mov	r9, r1
    1722:	21 2c       	mov	r2, r1
    1724:	31 2c       	mov	r3, r1
    1726:	ff e1       	ldi	r31, 0x1F	; 31
    1728:	f3 15       	cp	r31, r3
    172a:	d8 f0       	brcs	.+54     	; 0x1762 <vfprintf+0x98>
    172c:	8b 32       	cpi	r24, 0x2B	; 43
    172e:	79 f0       	breq	.+30     	; 0x174e <vfprintf+0x84>
    1730:	38 f4       	brcc	.+14     	; 0x1740 <vfprintf+0x76>
    1732:	80 32       	cpi	r24, 0x20	; 32
    1734:	79 f0       	breq	.+30     	; 0x1754 <vfprintf+0x8a>
    1736:	83 32       	cpi	r24, 0x23	; 35
    1738:	a1 f4       	brne	.+40     	; 0x1762 <vfprintf+0x98>
    173a:	23 2d       	mov	r18, r3
    173c:	20 61       	ori	r18, 0x10	; 16
    173e:	1d c0       	rjmp	.+58     	; 0x177a <vfprintf+0xb0>
    1740:	8d 32       	cpi	r24, 0x2D	; 45
    1742:	61 f0       	breq	.+24     	; 0x175c <vfprintf+0x92>
    1744:	80 33       	cpi	r24, 0x30	; 48
    1746:	69 f4       	brne	.+26     	; 0x1762 <vfprintf+0x98>
    1748:	23 2d       	mov	r18, r3
    174a:	21 60       	ori	r18, 0x01	; 1
    174c:	16 c0       	rjmp	.+44     	; 0x177a <vfprintf+0xb0>
    174e:	83 2d       	mov	r24, r3
    1750:	82 60       	ori	r24, 0x02	; 2
    1752:	38 2e       	mov	r3, r24
    1754:	e3 2d       	mov	r30, r3
    1756:	e4 60       	ori	r30, 0x04	; 4
    1758:	3e 2e       	mov	r3, r30
    175a:	2a c0       	rjmp	.+84     	; 0x17b0 <vfprintf+0xe6>
    175c:	f3 2d       	mov	r31, r3
    175e:	f8 60       	ori	r31, 0x08	; 8
    1760:	1d c0       	rjmp	.+58     	; 0x179c <vfprintf+0xd2>
    1762:	37 fc       	sbrc	r3, 7
    1764:	2d c0       	rjmp	.+90     	; 0x17c0 <vfprintf+0xf6>
    1766:	20 ed       	ldi	r18, 0xD0	; 208
    1768:	28 0f       	add	r18, r24
    176a:	2a 30       	cpi	r18, 0x0A	; 10
    176c:	40 f0       	brcs	.+16     	; 0x177e <vfprintf+0xb4>
    176e:	8e 32       	cpi	r24, 0x2E	; 46
    1770:	b9 f4       	brne	.+46     	; 0x17a0 <vfprintf+0xd6>
    1772:	36 fc       	sbrc	r3, 6
    1774:	81 c1       	rjmp	.+770    	; 0x1a78 <vfprintf+0x3ae>
    1776:	23 2d       	mov	r18, r3
    1778:	20 64       	ori	r18, 0x40	; 64
    177a:	32 2e       	mov	r3, r18
    177c:	19 c0       	rjmp	.+50     	; 0x17b0 <vfprintf+0xe6>
    177e:	36 fe       	sbrs	r3, 6
    1780:	06 c0       	rjmp	.+12     	; 0x178e <vfprintf+0xc4>
    1782:	8a e0       	ldi	r24, 0x0A	; 10
    1784:	98 9e       	mul	r9, r24
    1786:	20 0d       	add	r18, r0
    1788:	11 24       	eor	r1, r1
    178a:	92 2e       	mov	r9, r18
    178c:	11 c0       	rjmp	.+34     	; 0x17b0 <vfprintf+0xe6>
    178e:	ea e0       	ldi	r30, 0x0A	; 10
    1790:	2e 9e       	mul	r2, r30
    1792:	20 0d       	add	r18, r0
    1794:	11 24       	eor	r1, r1
    1796:	22 2e       	mov	r2, r18
    1798:	f3 2d       	mov	r31, r3
    179a:	f0 62       	ori	r31, 0x20	; 32
    179c:	3f 2e       	mov	r3, r31
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <vfprintf+0xe6>
    17a0:	8c 36       	cpi	r24, 0x6C	; 108
    17a2:	21 f4       	brne	.+8      	; 0x17ac <vfprintf+0xe2>
    17a4:	83 2d       	mov	r24, r3
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	38 2e       	mov	r3, r24
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0xe6>
    17ac:	88 36       	cpi	r24, 0x68	; 104
    17ae:	41 f4       	brne	.+16     	; 0x17c0 <vfprintf+0xf6>
    17b0:	f7 01       	movw	r30, r14
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	7f 01       	movw	r14, r30
    17bc:	81 11       	cpse	r24, r1
    17be:	b3 cf       	rjmp	.-154    	; 0x1726 <vfprintf+0x5c>
    17c0:	98 2f       	mov	r25, r24
    17c2:	9f 7d       	andi	r25, 0xDF	; 223
    17c4:	95 54       	subi	r25, 0x45	; 69
    17c6:	93 30       	cpi	r25, 0x03	; 3
    17c8:	28 f4       	brcc	.+10     	; 0x17d4 <vfprintf+0x10a>
    17ca:	0c 5f       	subi	r16, 0xFC	; 252
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	9f e3       	ldi	r25, 0x3F	; 63
    17d0:	99 83       	std	Y+1, r25	; 0x01
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x124>
    17d4:	83 36       	cpi	r24, 0x63	; 99
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <vfprintf+0x11a>
    17d8:	83 37       	cpi	r24, 0x73	; 115
    17da:	71 f0       	breq	.+28     	; 0x17f8 <vfprintf+0x12e>
    17dc:	83 35       	cpi	r24, 0x53	; 83
    17de:	09 f0       	breq	.+2      	; 0x17e2 <vfprintf+0x118>
    17e0:	59 c0       	rjmp	.+178    	; 0x1894 <vfprintf+0x1ca>
    17e2:	21 c0       	rjmp	.+66     	; 0x1826 <vfprintf+0x15c>
    17e4:	f8 01       	movw	r30, r16
    17e6:	80 81       	ld	r24, Z
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	0e 5f       	subi	r16, 0xFE	; 254
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	88 24       	eor	r8, r8
    17f0:	83 94       	inc	r8
    17f2:	91 2c       	mov	r9, r1
    17f4:	53 01       	movw	r10, r6
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <vfprintf+0x154>
    17f8:	28 01       	movw	r4, r16
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	4f 0e       	add	r4, r31
    17fe:	51 1c       	adc	r5, r1
    1800:	f8 01       	movw	r30, r16
    1802:	a0 80       	ld	r10, Z
    1804:	b1 80       	ldd	r11, Z+1	; 0x01
    1806:	36 fe       	sbrs	r3, 6
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <vfprintf+0x146>
    180a:	69 2d       	mov	r22, r9
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0x14a>
    1810:	6f ef       	ldi	r22, 0xFF	; 255
    1812:	7f ef       	ldi	r23, 0xFF	; 255
    1814:	c5 01       	movw	r24, r10
    1816:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <strnlen>
    181a:	4c 01       	movw	r8, r24
    181c:	82 01       	movw	r16, r4
    181e:	f3 2d       	mov	r31, r3
    1820:	ff 77       	andi	r31, 0x7F	; 127
    1822:	3f 2e       	mov	r3, r31
    1824:	16 c0       	rjmp	.+44     	; 0x1852 <vfprintf+0x188>
    1826:	28 01       	movw	r4, r16
    1828:	22 e0       	ldi	r18, 0x02	; 2
    182a:	42 0e       	add	r4, r18
    182c:	51 1c       	adc	r5, r1
    182e:	f8 01       	movw	r30, r16
    1830:	a0 80       	ld	r10, Z
    1832:	b1 80       	ldd	r11, Z+1	; 0x01
    1834:	36 fe       	sbrs	r3, 6
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x174>
    1838:	69 2d       	mov	r22, r9
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x178>
    183e:	6f ef       	ldi	r22, 0xFF	; 255
    1840:	7f ef       	ldi	r23, 0xFF	; 255
    1842:	c5 01       	movw	r24, r10
    1844:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <strnlen_P>
    1848:	4c 01       	movw	r8, r24
    184a:	f3 2d       	mov	r31, r3
    184c:	f0 68       	ori	r31, 0x80	; 128
    184e:	3f 2e       	mov	r3, r31
    1850:	82 01       	movw	r16, r4
    1852:	33 fc       	sbrc	r3, 3
    1854:	1b c0       	rjmp	.+54     	; 0x188c <vfprintf+0x1c2>
    1856:	82 2d       	mov	r24, r2
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	88 16       	cp	r8, r24
    185c:	99 06       	cpc	r9, r25
    185e:	b0 f4       	brcc	.+44     	; 0x188c <vfprintf+0x1c2>
    1860:	b6 01       	movw	r22, r12
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    186a:	2a 94       	dec	r2
    186c:	f4 cf       	rjmp	.-24     	; 0x1856 <vfprintf+0x18c>
    186e:	f5 01       	movw	r30, r10
    1870:	37 fc       	sbrc	r3, 7
    1872:	85 91       	lpm	r24, Z+
    1874:	37 fe       	sbrs	r3, 7
    1876:	81 91       	ld	r24, Z+
    1878:	5f 01       	movw	r10, r30
    187a:	b6 01       	movw	r22, r12
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1882:	21 10       	cpse	r2, r1
    1884:	2a 94       	dec	r2
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	82 1a       	sub	r8, r18
    188a:	91 08       	sbc	r9, r1
    188c:	81 14       	cp	r8, r1
    188e:	91 04       	cpc	r9, r1
    1890:	71 f7       	brne	.-36     	; 0x186e <vfprintf+0x1a4>
    1892:	e8 c0       	rjmp	.+464    	; 0x1a64 <vfprintf+0x39a>
    1894:	84 36       	cpi	r24, 0x64	; 100
    1896:	11 f0       	breq	.+4      	; 0x189c <vfprintf+0x1d2>
    1898:	89 36       	cpi	r24, 0x69	; 105
    189a:	41 f5       	brne	.+80     	; 0x18ec <vfprintf+0x222>
    189c:	f8 01       	movw	r30, r16
    189e:	37 fe       	sbrs	r3, 7
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <vfprintf+0x1e6>
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	0c 5f       	subi	r16, 0xFC	; 252
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <vfprintf+0x1f6>
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	07 2e       	mov	r0, r23
    18b6:	00 0c       	add	r0, r0
    18b8:	88 0b       	sbc	r24, r24
    18ba:	99 0b       	sbc	r25, r25
    18bc:	0e 5f       	subi	r16, 0xFE	; 254
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	f3 2d       	mov	r31, r3
    18c2:	ff 76       	andi	r31, 0x6F	; 111
    18c4:	3f 2e       	mov	r3, r31
    18c6:	97 ff       	sbrs	r25, 7
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <vfprintf+0x212>
    18ca:	90 95       	com	r25
    18cc:	80 95       	com	r24
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	f0 68       	ori	r31, 0x80	; 128
    18da:	3f 2e       	mov	r3, r31
    18dc:	2a e0       	ldi	r18, 0x0A	; 10
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a3 01       	movw	r20, r6
    18e2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__ultoa_invert>
    18e6:	88 2e       	mov	r8, r24
    18e8:	86 18       	sub	r8, r6
    18ea:	45 c0       	rjmp	.+138    	; 0x1976 <vfprintf+0x2ac>
    18ec:	85 37       	cpi	r24, 0x75	; 117
    18ee:	31 f4       	brne	.+12     	; 0x18fc <vfprintf+0x232>
    18f0:	23 2d       	mov	r18, r3
    18f2:	2f 7e       	andi	r18, 0xEF	; 239
    18f4:	b2 2e       	mov	r11, r18
    18f6:	2a e0       	ldi	r18, 0x0A	; 10
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	25 c0       	rjmp	.+74     	; 0x1946 <vfprintf+0x27c>
    18fc:	93 2d       	mov	r25, r3
    18fe:	99 7f       	andi	r25, 0xF9	; 249
    1900:	b9 2e       	mov	r11, r25
    1902:	8f 36       	cpi	r24, 0x6F	; 111
    1904:	c1 f0       	breq	.+48     	; 0x1936 <vfprintf+0x26c>
    1906:	18 f4       	brcc	.+6      	; 0x190e <vfprintf+0x244>
    1908:	88 35       	cpi	r24, 0x58	; 88
    190a:	79 f0       	breq	.+30     	; 0x192a <vfprintf+0x260>
    190c:	b5 c0       	rjmp	.+362    	; 0x1a78 <vfprintf+0x3ae>
    190e:	80 37       	cpi	r24, 0x70	; 112
    1910:	19 f0       	breq	.+6      	; 0x1918 <vfprintf+0x24e>
    1912:	88 37       	cpi	r24, 0x78	; 120
    1914:	21 f0       	breq	.+8      	; 0x191e <vfprintf+0x254>
    1916:	b0 c0       	rjmp	.+352    	; 0x1a78 <vfprintf+0x3ae>
    1918:	e9 2f       	mov	r30, r25
    191a:	e0 61       	ori	r30, 0x10	; 16
    191c:	be 2e       	mov	r11, r30
    191e:	b4 fe       	sbrs	r11, 4
    1920:	0d c0       	rjmp	.+26     	; 0x193c <vfprintf+0x272>
    1922:	fb 2d       	mov	r31, r11
    1924:	f4 60       	ori	r31, 0x04	; 4
    1926:	bf 2e       	mov	r11, r31
    1928:	09 c0       	rjmp	.+18     	; 0x193c <vfprintf+0x272>
    192a:	34 fe       	sbrs	r3, 4
    192c:	0a c0       	rjmp	.+20     	; 0x1942 <vfprintf+0x278>
    192e:	29 2f       	mov	r18, r25
    1930:	26 60       	ori	r18, 0x06	; 6
    1932:	b2 2e       	mov	r11, r18
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x278>
    1936:	28 e0       	ldi	r18, 0x08	; 8
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <vfprintf+0x27c>
    193c:	20 e1       	ldi	r18, 0x10	; 16
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x27c>
    1942:	20 e1       	ldi	r18, 0x10	; 16
    1944:	32 e0       	ldi	r19, 0x02	; 2
    1946:	f8 01       	movw	r30, r16
    1948:	b7 fe       	sbrs	r11, 7
    194a:	07 c0       	rjmp	.+14     	; 0x195a <vfprintf+0x290>
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	0c 5f       	subi	r16, 0xFC	; 252
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <vfprintf+0x29c>
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 5f       	subi	r16, 0xFE	; 254
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	a3 01       	movw	r20, r6
    1968:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__ultoa_invert>
    196c:	88 2e       	mov	r8, r24
    196e:	86 18       	sub	r8, r6
    1970:	fb 2d       	mov	r31, r11
    1972:	ff 77       	andi	r31, 0x7F	; 127
    1974:	3f 2e       	mov	r3, r31
    1976:	36 fe       	sbrs	r3, 6
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <vfprintf+0x2ca>
    197a:	23 2d       	mov	r18, r3
    197c:	2e 7f       	andi	r18, 0xFE	; 254
    197e:	a2 2e       	mov	r10, r18
    1980:	89 14       	cp	r8, r9
    1982:	58 f4       	brcc	.+22     	; 0x199a <vfprintf+0x2d0>
    1984:	34 fe       	sbrs	r3, 4
    1986:	0b c0       	rjmp	.+22     	; 0x199e <vfprintf+0x2d4>
    1988:	32 fc       	sbrc	r3, 2
    198a:	09 c0       	rjmp	.+18     	; 0x199e <vfprintf+0x2d4>
    198c:	83 2d       	mov	r24, r3
    198e:	8e 7e       	andi	r24, 0xEE	; 238
    1990:	a8 2e       	mov	r10, r24
    1992:	05 c0       	rjmp	.+10     	; 0x199e <vfprintf+0x2d4>
    1994:	b8 2c       	mov	r11, r8
    1996:	a3 2c       	mov	r10, r3
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x2d6>
    199a:	b8 2c       	mov	r11, r8
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <vfprintf+0x2d6>
    199e:	b9 2c       	mov	r11, r9
    19a0:	a4 fe       	sbrs	r10, 4
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <vfprintf+0x2f8>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e8 0d       	add	r30, r8
    19a8:	f1 1d       	adc	r31, r1
    19aa:	80 81       	ld	r24, Z
    19ac:	80 33       	cpi	r24, 0x30	; 48
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <vfprintf+0x2ee>
    19b0:	9a 2d       	mov	r25, r10
    19b2:	99 7e       	andi	r25, 0xE9	; 233
    19b4:	a9 2e       	mov	r10, r25
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x300>
    19b8:	a2 fe       	sbrs	r10, 2
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x2fe>
    19bc:	b3 94       	inc	r11
    19be:	b3 94       	inc	r11
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <vfprintf+0x300>
    19c2:	8a 2d       	mov	r24, r10
    19c4:	86 78       	andi	r24, 0x86	; 134
    19c6:	09 f0       	breq	.+2      	; 0x19ca <vfprintf+0x300>
    19c8:	b3 94       	inc	r11
    19ca:	a3 fc       	sbrc	r10, 3
    19cc:	11 c0       	rjmp	.+34     	; 0x19f0 <vfprintf+0x326>
    19ce:	a0 fe       	sbrs	r10, 0
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <vfprintf+0x314>
    19d2:	b2 14       	cp	r11, r2
    19d4:	88 f4       	brcc	.+34     	; 0x19f8 <vfprintf+0x32e>
    19d6:	28 0c       	add	r2, r8
    19d8:	92 2c       	mov	r9, r2
    19da:	9b 18       	sub	r9, r11
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <vfprintf+0x330>
    19de:	b2 14       	cp	r11, r2
    19e0:	60 f4       	brcc	.+24     	; 0x19fa <vfprintf+0x330>
    19e2:	b6 01       	movw	r22, r12
    19e4:	80 e2       	ldi	r24, 0x20	; 32
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    19ec:	b3 94       	inc	r11
    19ee:	f7 cf       	rjmp	.-18     	; 0x19de <vfprintf+0x314>
    19f0:	b2 14       	cp	r11, r2
    19f2:	18 f4       	brcc	.+6      	; 0x19fa <vfprintf+0x330>
    19f4:	2b 18       	sub	r2, r11
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfprintf+0x332>
    19f8:	98 2c       	mov	r9, r8
    19fa:	21 2c       	mov	r2, r1
    19fc:	a4 fe       	sbrs	r10, 4
    19fe:	10 c0       	rjmp	.+32     	; 0x1a20 <vfprintf+0x356>
    1a00:	b6 01       	movw	r22, r12
    1a02:	80 e3       	ldi	r24, 0x30	; 48
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1a0a:	a2 fe       	sbrs	r10, 2
    1a0c:	17 c0       	rjmp	.+46     	; 0x1a3c <vfprintf+0x372>
    1a0e:	a1 fc       	sbrc	r10, 1
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <vfprintf+0x34e>
    1a12:	88 e7       	ldi	r24, 0x78	; 120
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x352>
    1a18:	88 e5       	ldi	r24, 0x58	; 88
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <vfprintf+0x36e>
    1a20:	8a 2d       	mov	r24, r10
    1a22:	86 78       	andi	r24, 0x86	; 134
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <vfprintf+0x372>
    1a26:	a1 fe       	sbrs	r10, 1
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x364>
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <vfprintf+0x366>
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	a7 fc       	sbrc	r10, 7
    1a32:	8d e2       	ldi	r24, 0x2D	; 45
    1a34:	b6 01       	movw	r22, r12
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1a3c:	89 14       	cp	r8, r9
    1a3e:	38 f4       	brcc	.+14     	; 0x1a4e <vfprintf+0x384>
    1a40:	b6 01       	movw	r22, r12
    1a42:	80 e3       	ldi	r24, 0x30	; 48
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1a4a:	9a 94       	dec	r9
    1a4c:	f7 cf       	rjmp	.-18     	; 0x1a3c <vfprintf+0x372>
    1a4e:	8a 94       	dec	r8
    1a50:	f3 01       	movw	r30, r6
    1a52:	e8 0d       	add	r30, r8
    1a54:	f1 1d       	adc	r31, r1
    1a56:	80 81       	ld	r24, Z
    1a58:	b6 01       	movw	r22, r12
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1a60:	81 10       	cpse	r8, r1
    1a62:	f5 cf       	rjmp	.-22     	; 0x1a4e <vfprintf+0x384>
    1a64:	22 20       	and	r2, r2
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <vfprintf+0x3a0>
    1a68:	42 ce       	rjmp	.-892    	; 0x16ee <vfprintf+0x24>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fputc>
    1a74:	2a 94       	dec	r2
    1a76:	f6 cf       	rjmp	.-20     	; 0x1a64 <vfprintf+0x39a>
    1a78:	f6 01       	movw	r30, r12
    1a7a:	86 81       	ldd	r24, Z+6	; 0x06
    1a7c:	97 81       	ldd	r25, Z+7	; 0x07
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0x3ba>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	2b 96       	adiw	r28, 0x0b	; 11
    1a86:	e2 e1       	ldi	r30, 0x12	; 18
    1a88:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__epilogue_restores__>

00001a8c <strnlen_P>:
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	05 90       	lpm	r0, Z+
    1a90:	61 50       	subi	r22, 0x01	; 1
    1a92:	70 40       	sbci	r23, 0x00	; 0
    1a94:	01 10       	cpse	r0, r1
    1a96:	d8 f7       	brcc	.-10     	; 0x1a8e <strnlen_P+0x2>
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	8e 0f       	add	r24, r30
    1a9e:	9f 1f       	adc	r25, r31
    1aa0:	08 95       	ret

00001aa2 <strnlen>:
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	61 50       	subi	r22, 0x01	; 1
    1aa6:	70 40       	sbci	r23, 0x00	; 0
    1aa8:	01 90       	ld	r0, Z+
    1aaa:	01 10       	cpse	r0, r1
    1aac:	d8 f7       	brcc	.-10     	; 0x1aa4 <strnlen+0x2>
    1aae:	80 95       	com	r24
    1ab0:	90 95       	com	r25
    1ab2:	8e 0f       	add	r24, r30
    1ab4:	9f 1f       	adc	r25, r31
    1ab6:	08 95       	ret

00001ab8 <fputc>:
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	23 81       	ldd	r18, Z+3	; 0x03
    1ac4:	21 fd       	sbrc	r18, 1
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <fputc+0x16>
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	9f ef       	ldi	r25, 0xFF	; 255
    1acc:	2c c0       	rjmp	.+88     	; 0x1b26 <fputc+0x6e>
    1ace:	22 ff       	sbrs	r18, 2
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <fputc+0x46>
    1ad2:	46 81       	ldd	r20, Z+6	; 0x06
    1ad4:	57 81       	ldd	r21, Z+7	; 0x07
    1ad6:	24 81       	ldd	r18, Z+4	; 0x04
    1ad8:	35 81       	ldd	r19, Z+5	; 0x05
    1ada:	42 17       	cp	r20, r18
    1adc:	53 07       	cpc	r21, r19
    1ade:	44 f4       	brge	.+16     	; 0x1af0 <fputc+0x38>
    1ae0:	a0 81       	ld	r26, Z
    1ae2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ae4:	9d 01       	movw	r18, r26
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	31 83       	std	Z+1, r19	; 0x01
    1aec:	20 83       	st	Z, r18
    1aee:	8c 93       	st	X, r24
    1af0:	26 81       	ldd	r18, Z+6	; 0x06
    1af2:	37 81       	ldd	r19, Z+7	; 0x07
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	37 83       	std	Z+7, r19	; 0x07
    1afa:	26 83       	std	Z+6, r18	; 0x06
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <fputc+0x6e>
    1afe:	8b 01       	movw	r16, r22
    1b00:	ec 01       	movw	r28, r24
    1b02:	fb 01       	movw	r30, r22
    1b04:	00 84       	ldd	r0, Z+8	; 0x08
    1b06:	f1 85       	ldd	r31, Z+9	; 0x09
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	09 95       	icall
    1b0c:	89 2b       	or	r24, r25
    1b0e:	e1 f6       	brne	.-72     	; 0x1ac8 <fputc+0x10>
    1b10:	d8 01       	movw	r26, r16
    1b12:	16 96       	adiw	r26, 0x06	; 6
    1b14:	8d 91       	ld	r24, X+
    1b16:	9c 91       	ld	r25, X
    1b18:	17 97       	sbiw	r26, 0x07	; 7
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	17 96       	adiw	r26, 0x07	; 7
    1b1e:	9c 93       	st	X, r25
    1b20:	8e 93       	st	-X, r24
    1b22:	16 97       	sbiw	r26, 0x06	; 6
    1b24:	ce 01       	movw	r24, r28
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <__ultoa_invert>:
    1b30:	fa 01       	movw	r30, r20
    1b32:	aa 27       	eor	r26, r26
    1b34:	28 30       	cpi	r18, 0x08	; 8
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <__ultoa_invert+0x5c>
    1b38:	20 31       	cpi	r18, 0x10	; 16
    1b3a:	81 f1       	breq	.+96     	; 0x1b9c <__ultoa_invert+0x6c>
    1b3c:	e8 94       	clt
    1b3e:	6f 93       	push	r22
    1b40:	6e 7f       	andi	r22, 0xFE	; 254
    1b42:	6e 5f       	subi	r22, 0xFE	; 254
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	af 4f       	sbci	r26, 0xFF	; 255
    1b4c:	b1 e0       	ldi	r27, 0x01	; 1
    1b4e:	3e d0       	rcall	.+124    	; 0x1bcc <__ultoa_invert+0x9c>
    1b50:	b4 e0       	ldi	r27, 0x04	; 4
    1b52:	3c d0       	rcall	.+120    	; 0x1bcc <__ultoa_invert+0x9c>
    1b54:	67 0f       	add	r22, r23
    1b56:	78 1f       	adc	r23, r24
    1b58:	89 1f       	adc	r24, r25
    1b5a:	9a 1f       	adc	r25, r26
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	68 0f       	add	r22, r24
    1b60:	79 1f       	adc	r23, r25
    1b62:	8a 1f       	adc	r24, r26
    1b64:	91 1d       	adc	r25, r1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	6a 0f       	add	r22, r26
    1b6a:	71 1d       	adc	r23, r1
    1b6c:	81 1d       	adc	r24, r1
    1b6e:	91 1d       	adc	r25, r1
    1b70:	a1 1d       	adc	r26, r1
    1b72:	20 d0       	rcall	.+64     	; 0x1bb4 <__ultoa_invert+0x84>
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <__ultoa_invert+0x48>
    1b76:	68 94       	set
    1b78:	3f 91       	pop	r19
    1b7a:	2a e0       	ldi	r18, 0x0A	; 10
    1b7c:	26 9f       	mul	r18, r22
    1b7e:	11 24       	eor	r1, r1
    1b80:	30 19       	sub	r19, r0
    1b82:	30 5d       	subi	r19, 0xD0	; 208
    1b84:	31 93       	st	Z+, r19
    1b86:	de f6       	brtc	.-74     	; 0x1b3e <__ultoa_invert+0xe>
    1b88:	cf 01       	movw	r24, r30
    1b8a:	08 95       	ret
    1b8c:	46 2f       	mov	r20, r22
    1b8e:	47 70       	andi	r20, 0x07	; 7
    1b90:	40 5d       	subi	r20, 0xD0	; 208
    1b92:	41 93       	st	Z+, r20
    1b94:	b3 e0       	ldi	r27, 0x03	; 3
    1b96:	0f d0       	rcall	.+30     	; 0x1bb6 <__ultoa_invert+0x86>
    1b98:	c9 f7       	brne	.-14     	; 0x1b8c <__ultoa_invert+0x5c>
    1b9a:	f6 cf       	rjmp	.-20     	; 0x1b88 <__ultoa_invert+0x58>
    1b9c:	46 2f       	mov	r20, r22
    1b9e:	4f 70       	andi	r20, 0x0F	; 15
    1ba0:	40 5d       	subi	r20, 0xD0	; 208
    1ba2:	4a 33       	cpi	r20, 0x3A	; 58
    1ba4:	18 f0       	brcs	.+6      	; 0x1bac <__ultoa_invert+0x7c>
    1ba6:	49 5d       	subi	r20, 0xD9	; 217
    1ba8:	31 fd       	sbrc	r19, 1
    1baa:	40 52       	subi	r20, 0x20	; 32
    1bac:	41 93       	st	Z+, r20
    1bae:	02 d0       	rcall	.+4      	; 0x1bb4 <__ultoa_invert+0x84>
    1bb0:	a9 f7       	brne	.-22     	; 0x1b9c <__ultoa_invert+0x6c>
    1bb2:	ea cf       	rjmp	.-44     	; 0x1b88 <__ultoa_invert+0x58>
    1bb4:	b4 e0       	ldi	r27, 0x04	; 4
    1bb6:	a6 95       	lsr	r26
    1bb8:	97 95       	ror	r25
    1bba:	87 95       	ror	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	ba 95       	dec	r27
    1bc2:	c9 f7       	brne	.-14     	; 0x1bb6 <__ultoa_invert+0x86>
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	61 05       	cpc	r22, r1
    1bc8:	71 05       	cpc	r23, r1
    1bca:	08 95       	ret
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	0a 2e       	mov	r0, r26
    1bd2:	06 94       	lsr	r0
    1bd4:	57 95       	ror	r21
    1bd6:	47 95       	ror	r20
    1bd8:	37 95       	ror	r19
    1bda:	27 95       	ror	r18
    1bdc:	ba 95       	dec	r27
    1bde:	c9 f7       	brne	.-14     	; 0x1bd2 <__ultoa_invert+0xa2>
    1be0:	62 0f       	add	r22, r18
    1be2:	73 1f       	adc	r23, r19
    1be4:	84 1f       	adc	r24, r20
    1be6:	95 1f       	adc	r25, r21
    1be8:	a0 1d       	adc	r26, r0
    1bea:	08 95       	ret

00001bec <__prologue_saves__>:
    1bec:	2f 92       	push	r2
    1bee:	3f 92       	push	r3
    1bf0:	4f 92       	push	r4
    1bf2:	5f 92       	push	r5
    1bf4:	6f 92       	push	r6
    1bf6:	7f 92       	push	r7
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	ca 1b       	sub	r28, r26
    1c16:	db 0b       	sbc	r29, r27
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	09 94       	ijmp

00001c24 <__epilogue_restores__>:
    1c24:	2a 88       	ldd	r2, Y+18	; 0x12
    1c26:	39 88       	ldd	r3, Y+17	; 0x11
    1c28:	48 88       	ldd	r4, Y+16	; 0x10
    1c2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c30:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c32:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c34:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c36:	b9 84       	ldd	r11, Y+9	; 0x09
    1c38:	c8 84       	ldd	r12, Y+8	; 0x08
    1c3a:	df 80       	ldd	r13, Y+7	; 0x07
    1c3c:	ee 80       	ldd	r14, Y+6	; 0x06
    1c3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1c40:	0c 81       	ldd	r16, Y+4	; 0x04
    1c42:	1b 81       	ldd	r17, Y+3	; 0x03
    1c44:	aa 81       	ldd	r26, Y+2	; 0x02
    1c46:	b9 81       	ldd	r27, Y+1	; 0x01
    1c48:	ce 0f       	add	r28, r30
    1c4a:	d1 1d       	adc	r29, r1
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	ed 01       	movw	r28, r26
    1c58:	08 95       	ret

00001c5a <_exit>:
    1c5a:	f8 94       	cli

00001c5c <__stop_program>:
    1c5c:	ff cf       	rjmp	.-2      	; 0x1c5c <__stop_program>
