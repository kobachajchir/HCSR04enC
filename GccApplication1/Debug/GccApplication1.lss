
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ce  00800100  00001baa  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008005ce  008005ce  0000210c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033fc  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001268  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e3  00000000  00000000  00006a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00008420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4e  00000000  00000000  00008ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a4  00000000  00000000  00009832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000add6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ea       	ldi	r30, 0xAA	; 170
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3c       	cpi	r26, 0xCE	; 206
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ae ec       	ldi	r26, 0xCE	; 206
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 36       	cpi	r26, 0x67	; 103
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 03 	call	0x64e	; 0x64e <main>
      9e:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <ultraSensor>
     100:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <ultraSensor+0x1>
     104:	a0 93 4a 06 	sts	0x064A, r26	; 0x80064a <ultraSensor+0x2>
     108:	b0 93 4b 06 	sts	0x064B, r27	; 0x80064b <ultraSensor+0x3>
     10c:	e4 e5       	ldi	r30, 0x54	; 84
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <ultraSensor+0x4>
     13c:	90 93 4d 06 	sts	0x064D, r25	; 0x80064d <ultraSensor+0x5>
     140:	a0 93 4e 06 	sts	0x064E, r26	; 0x80064e <ultraSensor+0x6>
     144:	b0 93 4f 06 	sts	0x064F, r27	; 0x80064f <ultraSensor+0x7>
     148:	e4 e5       	ldi	r30, 0x54	; 84
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
     1b0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e1 5c       	subi	r30, 0xC1	; 193
     1bc:	f9 4f       	sbci	r31, 0xF9	; 249
     1be:	01 90       	ld	r0, Z+
     1c0:	f0 81       	ld	r31, Z
     1c2:	e0 2d       	mov	r30, r0
     1c4:	81 81       	ldd	r24, Z+1	; 0x01
     1c6:	81 ff       	sbrs	r24, 1
     1c8:	20 c0       	rjmp	.+64     	; 0x20a <__vector_11+0x7c>
     1ca:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <current_servo>
     1ce:	6a e5       	ldi	r22, 0x5A	; 90
     1d0:	0e 94 77 07 	call	0xeee	; 0xeee <servo_set_angle>
     1d4:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	e1 5c       	subi	r30, 0xC1	; 193
     1e0:	f9 4f       	sbci	r31, 0xF9	; 249
     1e2:	01 90       	ld	r0, Z+
     1e4:	f0 81       	ld	r31, Z
     1e6:	e0 2d       	mov	r30, r0
     1e8:	81 81       	ldd	r24, Z+1	; 0x01
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	81 83       	std	Z+1, r24	; 0x01
     1ee:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	e1 5c       	subi	r30, 0xC1	; 193
     1fa:	f9 4f       	sbci	r31, 0xF9	; 249
     1fc:	01 90       	ld	r0, Z+
     1fe:	f0 81       	ld	r31, Z
     200:	e0 2d       	mov	r30, r0
     202:	81 81       	ldd	r24, Z+1	; 0x01
     204:	84 60       	ori	r24, 0x04	; 4
     206:	81 83       	std	Z+1, r24	; 0x01
     208:	05 c0       	rjmp	.+10     	; 0x214 <__vector_11+0x86>
     20a:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <current_servo>
     20e:	6a e5       	ldi	r22, 0x5A	; 90
     210:	0e 94 77 07 	call	0xeee	; 0xeee <servo_set_angle>
     214:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	ee 0f       	add	r30, r30
     21c:	ff 1f       	adc	r31, r31
     21e:	e1 5c       	subi	r30, 0xC1	; 193
     220:	f9 4f       	sbci	r31, 0xF9	; 249
     222:	01 90       	ld	r0, Z+
     224:	f0 81       	ld	r31, Z
     226:	e0 2d       	mov	r30, r0
     228:	20 81       	ld	r18, Z
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	e1 5c       	subi	r30, 0xC1	; 193
     252:	f9 4f       	sbci	r31, 0xF9	; 249
     254:	01 90       	ld	r0, Z+
     256:	f0 81       	ld	r31, Z
     258:	e0 2d       	mov	r30, r0
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     266:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     26a:	e8 e8       	ldi	r30, 0x88	; 136
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	91 81       	ldd	r25, Z+1	; 0x01
     272:	80 5c       	subi	r24, 0xC0	; 192
     274:	93 46       	sbci	r25, 0x63	; 99
     276:	91 83       	std	Z+1, r25	; 0x01
     278:	80 83       	st	Z, r24
     27a:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     27e:	82 ff       	sbrs	r24, 2
     280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_11+0xfe>
     282:	83 fd       	sbrc	r24, 3
     284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_11+0xfe>
     286:	88 60       	ori	r24, 0x08	; 8
     288:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_A>
     28c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <IR_B>
     290:	82 ff       	sbrs	r24, 2
     292:	05 c0       	rjmp	.+10     	; 0x29e <__vector_11+0x110>
     294:	83 fd       	sbrc	r24, 3
     296:	03 c0       	rjmp	.+6      	; 0x29e <__vector_11+0x110>
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <IR_B>
     29e:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <IR_C>
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <__vector_11+0x122>
     2a6:	83 fd       	sbrc	r24, 3
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__vector_11+0x122>
     2aa:	88 60       	ori	r24, 0x08	; 8
     2ac:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <IR_C>
     2b0:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <IR_U>
     2b4:	82 ff       	sbrs	r24, 2
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <__vector_11+0x134>
     2b8:	83 fd       	sbrc	r24, 3
     2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <__vector_11+0x134>
     2bc:	88 60       	ori	r24, 0x08	; 8
     2be:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <IR_U>
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	bf 91       	pop	r27
     2c8:	af 91       	pop	r26
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	7f 91       	pop	r23
     2d0:	6f 91       	pop	r22
     2d2:	5f 91       	pop	r21
     2d4:	4f 91       	pop	r20
     2d6:	3f 91       	pop	r19
     2d8:	2f 91       	pop	r18
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_12>:
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	2f 93       	push	r18
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e1 5c       	subi	r30, 0xC1	; 193
     30e:	f9 4f       	sbci	r31, 0xF9	; 249
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	20 81       	ld	r18, Z
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__vector_12+0x3e>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	2a 95       	dec	r18
     324:	e2 f7       	brpl	.-8      	; 0x31e <__vector_12+0x3a>
     326:	80 95       	com	r24
     328:	90 95       	com	r25
     32a:	95 b1       	in	r25, 0x05	; 5
     32c:	89 23       	and	r24, r25
     32e:	85 b9       	out	0x05, r24	; 5
     330:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	e1 5c       	subi	r30, 0xC1	; 193
     33c:	f9 4f       	sbci	r31, 0xF9	; 249
     33e:	01 90       	ld	r0, Z+
     340:	f0 81       	ld	r31, Z
     342:	e0 2d       	mov	r30, r0
     344:	81 81       	ldd	r24, Z+1	; 0x01
     346:	81 ff       	sbrs	r24, 1
     348:	34 c0       	rjmp	.+104    	; 0x3b2 <__vector_12+0xce>
     34a:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e1 5c       	subi	r30, 0xC1	; 193
     356:	f9 4f       	sbci	r31, 0xF9	; 249
     358:	01 90       	ld	r0, Z+
     35a:	f0 81       	ld	r31, Z
     35c:	e0 2d       	mov	r30, r0
     35e:	81 81       	ldd	r24, Z+1	; 0x01
     360:	82 ff       	sbrs	r24, 2
     362:	27 c0       	rjmp	.+78     	; 0x3b2 <__vector_12+0xce>
     364:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e1 5c       	subi	r30, 0xC1	; 193
     370:	f9 4f       	sbci	r31, 0xF9	; 249
     372:	01 90       	ld	r0, Z+
     374:	f0 81       	ld	r31, Z
     376:	e0 2d       	mov	r30, r0
     378:	81 81       	ldd	r24, Z+1	; 0x01
     37a:	8d 7f       	andi	r24, 0xFD	; 253
     37c:	81 83       	std	Z+1, r24	; 0x01
     37e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	e1 5c       	subi	r30, 0xC1	; 193
     38a:	f9 4f       	sbci	r31, 0xF9	; 249
     38c:	01 90       	ld	r0, Z+
     38e:	f0 81       	ld	r31, Z
     390:	e0 2d       	mov	r30, r0
     392:	81 81       	ldd	r24, Z+1	; 0x01
     394:	8b 7f       	andi	r24, 0xFB	; 251
     396:	81 83       	std	Z+1, r24	; 0x01
     398:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <current_servo>
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	e1 5c       	subi	r30, 0xC1	; 193
     3a4:	f9 4f       	sbci	r31, 0xF9	; 249
     3a6:	01 90       	ld	r0, Z+
     3a8:	f0 81       	ld	r31, Z
     3aa:	e0 2d       	mov	r30, r0
     3ac:	81 81       	ldd	r24, Z+1	; 0x01
     3ae:	8d 7f       	andi	r24, 0xFD	; 253
     3b0:	81 83       	std	Z+1, r24	; 0x01
     3b2:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <current_servo>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	63 e0       	ldi	r22, 0x03	; 3
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__divmodhi4>
     3c2:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <current_servo>
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	bf 91       	pop	r27
     3cc:	af 91       	pop	r26
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	7f 91       	pop	r23
     3d4:	6f 91       	pop	r22
     3d6:	5f 91       	pop	r21
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <timer1_init>:
     3e4:	a4 e8       	ldi	r26, 0x84	; 132
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	11 96       	adiw	r26, 0x01	; 1
     3ea:	1c 92       	st	X, r1
     3ec:	1e 92       	st	-X, r1
     3ee:	86 b3       	in	r24, 0x16	; 22
     3f0:	80 62       	ori	r24, 0x20	; 32
     3f2:	86 bb       	out	0x16, r24	; 22
     3f4:	ef e6       	ldi	r30, 0x6F	; 111
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	87 62       	ori	r24, 0x27	; 39
     3fc:	80 83       	st	Z, r24
     3fe:	e1 e8       	ldi	r30, 0x81	; 129
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	80 64       	ori	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
     408:	80 81       	ld	r24, Z
     40a:	82 60       	ori	r24, 0x02	; 2
     40c:	80 83       	st	Z, r24
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	80 5c       	subi	r24, 0xC0	; 192
     414:	93 46       	sbci	r25, 0x63	; 99
     416:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     41a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     41e:	08 95       	ret

00000420 <timer2_init>:
     420:	e1 eb       	ldi	r30, 0xB1	; 177
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	87 60       	ori	r24, 0x07	; 7
     428:	80 83       	st	Z, r24
     42a:	8b e9       	ldi	r24, 0x9B	; 155
     42c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     430:	e0 e7       	ldi	r30, 0x70	; 112
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 60       	ori	r24, 0x02	; 2
     438:	80 83       	st	Z, r24
     43a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     43e:	08 95       	ret

00000440 <gpio_pins_init>:
     440:	84 b1       	in	r24, 0x04	; 4
     442:	80 62       	ori	r24, 0x20	; 32
     444:	84 b9       	out	0x04, r24	; 4
     446:	85 b1       	in	r24, 0x05	; 5
     448:	80 62       	ori	r24, 0x20	; 32
     44a:	85 b9       	out	0x05, r24	; 5
     44c:	8a b1       	in	r24, 0x0a	; 10
     44e:	88 60       	ori	r24, 0x08	; 8
     450:	8a b9       	out	0x0a, r24	; 10
     452:	84 b1       	in	r24, 0x04	; 4
     454:	8e 7f       	andi	r24, 0xFE	; 254
     456:	84 b9       	out	0x04, r24	; 4
     458:	8a b1       	in	r24, 0x0a	; 10
     45a:	8f 7e       	andi	r24, 0xEF	; 239
     45c:	8a b9       	out	0x0a, r24	; 10
     45e:	84 b1       	in	r24, 0x04	; 4
     460:	82 60       	ori	r24, 0x02	; 2
     462:	84 b9       	out	0x04, r24	; 4
     464:	84 b1       	in	r24, 0x04	; 4
     466:	84 60       	ori	r24, 0x04	; 4
     468:	84 b9       	out	0x04, r24	; 4
     46a:	84 b1       	in	r24, 0x04	; 4
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	84 b9       	out	0x04, r24	; 4
     470:	0e 94 9d 07 	call	0xf3a	; 0xf3a <tcrt_init>
     474:	8b b1       	in	r24, 0x0b	; 11
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8b b9       	out	0x0b, r24	; 11
     47a:	8b b1       	in	r24, 0x0b	; 11
     47c:	8f 7e       	andi	r24, 0xEF	; 239
     47e:	8b b9       	out	0x0b, r24	; 11
     480:	08 95       	ret

00000482 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     4a4:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     4a8:	81 ff       	sbrs	r24, 1
     4aa:	c0 c0       	rjmp	.+384    	; 0x62c <__vector_7+0x1aa>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     4ac:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <ultraSensor+0xd>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	51 f5       	brne	.+84     	; 0x508 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     4b4:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     4b8:	85 fd       	sbrc	r24, 5
     4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     4bc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     4c0:	e4 e5       	ldi	r30, 0x54	; 84
     4c2:	f6 e0       	ldi	r31, 0x06	; 6
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     4ca:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     4ce:	80 62       	ori	r24, 0x20	; 32
     4d0:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
     4d4:	19 c0       	rjmp	.+50     	; 0x508 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     4d6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     4da:	e4 e5       	ldi	r30, 0x54	; 84
     4dc:	f6 e0       	ldi	r31, 0x06	; 6
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     4e4:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     4e8:	8d 7d       	andi	r24, 0xDD	; 221
     4ea:	88 60       	ori	r24, 0x08	; 8
     4ec:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     4f0:	80 81       	ld	r24, Z
     4f2:	8f 7d       	andi	r24, 0xDF	; 223
     4f4:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     4fc:	80 81       	ld	r24, Z
     4fe:	80 61       	ori	r24, 0x10	; 16
     500:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     502:	80 81       	ld	r24, Z
     504:	8d 7f       	andi	r24, 0xFD	; 253
     506:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     508:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <ultraSensor+0xd>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	d1 f4       	brne	.+52     	; 0x544 <__vector_7+0xc2>
     510:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ultraSensor+0xc>
     514:	84 ff       	sbrs	r24, 4
     516:	16 c0       	rjmp	.+44     	; 0x544 <__vector_7+0xc2>
     518:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     51c:	89 70       	andi	r24, 0x09	; 9
     51e:	88 30       	cpi	r24, 0x08	; 8
     520:	89 f4       	brne	.+34     	; 0x544 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     522:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <veintems_counter>
     526:	81 11       	cpse	r24, r1
     528:	06 c0       	rjmp	.+12     	; 0x536 <__vector_7+0xb4>
				veintems_counter++;
     52a:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <veintems_counter>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <veintems_counter>
     534:	07 c0       	rjmp	.+14     	; 0x544 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     536:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     53a:	81 60       	ori	r24, 0x01	; 1
     53c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
				veintems_counter = 0;
     540:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     544:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ultraSensor+0xc>
     548:	85 fd       	sbrc	r24, 5
     54a:	22 c0       	rjmp	.+68     	; 0x590 <__vector_7+0x10e>
     54c:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     550:	84 fd       	sbrc	r24, 4
     552:	1e c0       	rjmp	.+60     	; 0x590 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     554:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <wait_time>
     558:	87 30       	cpi	r24, 0x07	; 7
     55a:	30 f4       	brcc	.+12     	; 0x568 <__vector_7+0xe6>
				wait_time++;
     55c:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <wait_time>
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <wait_time>
     566:	07 c0       	rjmp	.+14     	; 0x576 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     568:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
				wait_time = 0;
     572:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     576:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ultraSensor+0xc>
     57a:	83 ff       	sbrs	r24, 3
     57c:	09 c0       	rjmp	.+18     	; 0x590 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     57e:	60 91 25 06 	lds	r22, 0x0625	; 0x800625 <bandera2>
     582:	66 fb       	bst	r22, 6
     584:	66 27       	eor	r22, r22
     586:	60 f9       	bld	r22, 0
     588:	88 e4       	ldi	r24, 0x48	; 72
     58a:	96 e0       	ldi	r25, 0x06	; 6
     58c:	0e 94 b2 09 	call	0x1364	; 0x1364 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     590:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <diezMsCounter>
     594:	8a 30       	cpi	r24, 0x0A	; 10
     596:	30 f4       	brcc	.+12     	; 0x5a4 <__vector_7+0x122>
			diezMsCounter++;
     598:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <diezMsCounter>
     59c:	8f 5f       	subi	r24, 0xFF	; 255
     59e:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <diezMsCounter>
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     5a4:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     5a8:	88 60       	ori	r24, 0x08	; 8
     5aa:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
			diezMsCounter = 0;
     5ae:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     5b2:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     5b6:	86 ff       	sbrs	r24, 6
     5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <__vector_7+0x154>
			if(btn_pressed_time == 255){
     5ba:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <btn_pressed_time>
     5be:	8f 3f       	cpi	r24, 0xFF	; 255
     5c0:	29 f4       	brne	.+10     	; 0x5cc <__vector_7+0x14a>
				BTN_OVF = 1;
     5c2:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     5c6:	84 60       	ori	r24, 0x04	; 4
     5c8:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
			}
			btn_pressed_time++;
     5cc:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <btn_pressed_time>
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <btn_pressed_time>
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     5d6:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     5da:	80 ff       	sbrs	r24, 0
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__vector_7+0x166>
     5de:	83 fd       	sbrc	r24, 3
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__vector_7+0x166>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     5e8:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <IR_B>
     5ec:	80 ff       	sbrs	r24, 0
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <__vector_7+0x178>
     5f0:	83 fd       	sbrc	r24, 3
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <__vector_7+0x178>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     5f4:	88 60       	ori	r24, 0x08	; 8
     5f6:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <IR_B>
		}
		if(SERVOA_RESET){
     5fa:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     5fe:	85 ff       	sbrs	r24, 5
     600:	15 c0       	rjmp	.+42     	; 0x62c <__vector_7+0x1aa>
			if(servo_counter < SERVO_RESET_TIME){
     602:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <servo_counter>
     606:	8e 31       	cpi	r24, 0x1E	; 30
     608:	30 f4       	brcc	.+12     	; 0x616 <__vector_7+0x194>
				servo_counter++;
     60a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <servo_counter>
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <servo_counter>
     614:	0b c0       	rjmp	.+22     	; 0x62c <__vector_7+0x1aa>
				} else {
				servo_counter = 0;
     616:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <servo_counter>
				SERVOA_RESET = 0;
     61a:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     61e:	8f 7d       	andi	r24, 0xDF	; 223
     620:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
				servo_set_angle(0, SERVO_IDLE_ANGLE);
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 77 07 	call	0xeee	; 0xeee <servo_set_angle>
			}
		}
	}
}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <main>:
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     64e:	82 e8       	ldi	r24, 0x82	; 130
     650:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     654:	80 e8       	ldi	r24, 0x80	; 128
     656:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
	IR_CALIBRATED = 0;
     65a:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     666:	e1 e6       	ldi	r30, 0x61	; 97
     668:	f6 e0       	ldi	r31, 0x06	; 6
     66a:	8e e0       	ldi	r24, 0x0E	; 14
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	93 83       	std	Z+3, r25	; 0x03
     670:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	91 83       	std	Z+1, r25	; 0x01
     678:	80 83       	st	Z, r24
	diezMsCounter = 0;
     67a:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     67e:	0e 94 20 02 	call	0x440	; 0x440 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     682:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <timer1_init>
	timer2_init();
     686:	0e 94 10 02 	call	0x420	; 0x420 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     68a:	0e 94 c3 07 	call	0xf86	; 0xf86 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     68e:	63 e5       	ldi	r22, 0x53	; 83
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	88 e4       	ldi	r24, 0x48	; 72
     694:	96 e0       	ldi	r25, 0x06	; 6
     696:	0e 94 93 09 	call	0x1326	; 0x1326 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     69a:	60 91 25 06 	lds	r22, 0x0625	; 0x800625 <bandera2>
     69e:	66 fb       	bst	r22, 6
     6a0:	66 27       	eor	r22, r22
     6a2:	60 f9       	bld	r22, 0
     6a4:	88 e4       	ldi	r24, 0x48	; 72
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	0e 94 1c 09 	call	0x1238	; 0x1238 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     6ac:	4d ee       	ldi	r20, 0xED	; 237
     6ae:	55 e0       	ldi	r21, 0x05	; 5
     6b0:	68 e4       	ldi	r22, 0x48	; 72
     6b2:	76 e0       	ldi	r23, 0x06	; 6
     6b4:	8a e3       	ldi	r24, 0x3A	; 58
     6b6:	96 e0       	ldi	r25, 0x06	; 6
     6b8:	0e 94 1b 04 	call	0x836	; 0x836 <initDetector>
	initOutputs();
     6bc:	0e 94 35 04 	call	0x86a	; 0x86a <initOutputs>
	initSorter(&SorterSystem);
     6c0:	8c e0       	ldi	r24, 0x0C	; 12
     6c2:	96 e0       	ldi	r25, 0x06	; 6
     6c4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     6c8:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     6cc:	82 60       	ori	r24, 0x02	; 2
     6ce:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     6d2:	80 eb       	ldi	r24, 0xB0	; 176
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
	sei();
     6da:	78 94       	sei
	while (1)
	{ 
		if(!IR_CALIBRATED){
     6dc:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     6e0:	80 fd       	sbrc	r24, 0
     6e2:	43 c0       	rjmp	.+134    	; 0x76a <main+0x11c>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     6e4:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <__data_end>
     6e8:	81 11       	cpse	r24, r1
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <main+0xc0>
		printf("Calibrando sensores IR...\n");
     6ec:	82 e2       	ldi	r24, 0x22	; 34
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
		SET_FLAG(IR_A.flags, TCRT_CALIBRATING);
     6f4:	eb e2       	ldi	r30, 0x2B	; 43
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	80 81       	ld	r24, Z
     6fa:	84 60       	ori	r24, 0x04	; 4
     6fc:	80 83       	st	Z, r24
		SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     6fe:	e6 ed       	ldi	r30, 0xD6	; 214
     700:	f5 e0       	ldi	r31, 0x05	; 5
     702:	80 81       	ld	r24, Z
     704:	84 60       	ori	r24, 0x04	; 4
     706:	80 83       	st	Z, r24
		// SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
		// SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
		init_done = true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     70e:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     712:	82 ff       	sbrs	r24, 2
     714:	04 c0       	rjmp	.+8      	; 0x71e <main+0xd0>
		calibrateIRSensor(&IR_A);
     716:	8b e2       	ldi	r24, 0x2B	; 43
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	0e 94 1a 08 	call	0x1034	; 0x1034 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     71e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <IR_B>
     722:	82 ff       	sbrs	r24, 2
     724:	04 c0       	rjmp	.+8      	; 0x72e <main+0xe0>
		calibrateIRSensor(&IR_B);
     726:	86 ed       	ldi	r24, 0xD6	; 214
     728:	95 e0       	ldi	r25, 0x05	; 5
     72a:	0e 94 1a 08 	call	0x1034	; 0x1034 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     72e:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     732:	82 fd       	sbrc	r24, 2
     734:	11 c0       	rjmp	.+34     	; 0x758 <main+0x10a>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
     736:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <IR_B>
		calibrateIRSensor(&IR_B);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     73a:	82 fd       	sbrc	r24, 2
     73c:	0d c0       	rjmp	.+26     	; 0x758 <main+0x10a>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		if(!IR_CALIBRATED){
     73e:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     742:	80 fd       	sbrc	r24, 0
     744:	09 c0       	rjmp	.+18     	; 0x758 <main+0x10a>
			printf("Todos los sensores IR calibrados.\n");	
     746:	8c e3       	ldi	r24, 0x3C	; 60
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
			IR_CALIBRATED = 1;
     74e:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     752:	81 60       	ori	r24, 0x01	; 1
     754:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <bandera3>
	sei();
	while (1)
	{ 
		if(!IR_CALIBRATED){
			calibrateAllIRSensors();
			IR_A.calibrationCounter = 0;
     758:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <IR_A+0x9>
			IR_B.calibrationCounter = 0;
     75c:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <IR_B+0x9>
			IR_C.calibrationCounter = 0;
     760:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <IR_C+0x9>
			IR_U.calibrationCounter = 0;
     764:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <IR_U+0x9>
     768:	04 c0       	rjmp	.+8      	; 0x772 <main+0x124>
		}else{
			irSensorsTask(&SorterSystem);
     76a:	8c e0       	ldi	r24, 0x0C	; 12
     76c:	96 e0       	ldi	r25, 0x06	; 6
     76e:	0e 94 4c 06 	call	0xc98	; 0xc98 <irSensorsTask>
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     772:	6c e0       	ldi	r22, 0x0C	; 12
     774:	76 e0       	ldi	r23, 0x06	; 6
     776:	8a e3       	ldi	r24, 0x3A	; 58
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	0e 94 1a 05 	call	0xa34	; 0xa34 <ultraSensorTask>
		servosTask();
     77e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <servosTask>
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     782:	4c 9b       	sbis	0x09, 4	; 9
     784:	0a c0       	rjmp	.+20     	; 0x79a <main+0x14c>
     786:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     78a:	86 fd       	sbrc	r24, 6
     78c:	06 c0       	rjmp	.+12     	; 0x79a <main+0x14c>
			btn_pressed_time = 0;
     78e:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <btn_pressed_time>
			BTN_PRESSED = 1;
     792:	80 64       	ori	r24, 0x40	; 64
     794:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
     798:	28 c0       	rjmp	.+80     	; 0x7ea <main+0x19c>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     79a:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     79e:	86 ff       	sbrs	r24, 6
     7a0:	24 c0       	rjmp	.+72     	; 0x7ea <main+0x19c>
     7a2:	4c 99       	sbic	0x09, 4	; 9
     7a4:	22 c0       	rjmp	.+68     	; 0x7ea <main+0x19c>
			BTN_PRESSED = 0;
     7a6:	8f 7b       	andi	r24, 0xBF	; 191
     7a8:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     7ac:	82 ff       	sbrs	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <main+0x16a>
				printf("Btn overflowed\n");
     7b0:	8e e5       	ldi	r24, 0x5E	; 94
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     7b8:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <btn_pressed_time>
     7bc:	8a 30       	cpi	r24, 0x0A	; 10
     7be:	30 f4       	brcc	.+12     	; 0x7cc <main+0x17e>
     7c0:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     7c4:	98 2f       	mov	r25, r24
     7c6:	94 70       	andi	r25, 0x04	; 4
     7c8:	82 ff       	sbrs	r24, 2
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <main+0x18a>
				BTN_RELEASED = 1;
     7cc:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <main+0x19c>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     7d8:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <btn_pressed_time>
				if(BTN_OVF){
     7dc:	99 23       	and	r25, r25
     7de:	29 f0       	breq	.+10     	; 0x7ea <main+0x19c>
					BTN_OVF = 0;
     7e0:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     7e4:	8b 7f       	andi	r24, 0xFB	; 251
     7e6:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     7ea:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     7ee:	84 ff       	sbrs	r24, 4
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			WAIT_TIME_TRIGGER_PASSED = 0;
     7f2:	8f 7e       	andi	r24, 0xEF	; 239
     7f4:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     7f8:	e4 e5       	ldi	r30, 0x54	; 84
     7fa:	f6 e0       	ldi	r31, 0x06	; 6
     7fc:	80 81       	ld	r24, Z
     7fe:	80 62       	ori	r24, 0x20	; 32
     800:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     802:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     806:	83 ff       	sbrs	r24, 3
     808:	0d c0       	rjmp	.+26     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			ECHO_INTERVAL_FLAG = 0;
     80a:	87 7f       	andi	r24, 0xF7	; 247
     80c:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
			EMIT_TRIGGER = 1;
     810:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     814:	82 60       	ori	r24, 0x02	; 2
     816:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
			IR_READ = 1;
     81a:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <bandera3>
		}
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     824:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     828:	80 ff       	sbrs	r24, 0
     82a:	58 cf       	rjmp	.-336    	; 0x6dc <main+0x8e>
			BTN_RELEASED = 0; //TEST SERVO A
			//EMIT_TRIGGER = 1;
			SERVOA_MOVE = 1;
     82c:	8e 7f       	andi	r24, 0xFE	; 254
     82e:	80 61       	ori	r24, 0x10	; 16
     830:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
     834:	53 cf       	rjmp	.-346    	; 0x6dc <main+0x8e>

00000836 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <initDetector+0x6>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	fc 01       	movw	r30, r24
     842:	5a 83       	std	Y+2, r21	; 0x02
     844:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     846:	88 e4       	ldi	r24, 0x48	; 72
     848:	96 e0       	ldi	r25, 0x06	; 6
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	93 83       	std	Z+3, r25	; 0x03
     854:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     856:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     858:	8d e6       	ldi	r24, 0x6D	; 109
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <initOutputs>:

void initOutputs(){
	initServo(&servoA, 0, SERVOA_PIN);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	85 ee       	ldi	r24, 0xE5	; 229
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 4e 07 	call	0xe9c	; 0xe9c <initServo>
	initServo(&servoB, 1, SERVOB_PIN);
     87a:	42 e0       	ldi	r20, 0x02	; 2
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	89 e5       	ldi	r24, 0x59	; 89
     884:	96 e0       	ldi	r25, 0x06	; 6
     886:	0e 94 4e 07 	call	0xe9c	; 0xe9c <initServo>
	initServo(&servoC, 2, SERVOC_PIN);
     88a:	43 e0       	ldi	r20, 0x03	; 3
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	86 e2       	ldi	r24, 0x26	; 38
     894:	96 e0       	ldi	r25, 0x06	; 6
     896:	0e 94 4e 07 	call	0xe9c	; 0xe9c <initServo>
	salidaA.actuator_pin = SERVOA_PIN;
     89a:	ea ee       	ldi	r30, 0xEA	; 234
     89c:	f5 e0       	ldi	r31, 0x05	; 5
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	81 83       	std	Z+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     8a2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <IR_A+0x8>
     8a6:	80 83       	st	Z, r24
	salidaA.flags.byte = 0;
     8a8:	12 82       	std	Z+2, r1	; 0x02
	salidaB.actuator_pin = SERVOB_PIN;
     8aa:	ee e5       	ldi	r30, 0x5E	; 94
     8ac:	f6 e0       	ldi	r31, 0x06	; 6
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	81 83       	std	Z+1, r24	; 0x01
	salidaB.sensor_pin = IR_B.pin;
     8b2:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <IR_B+0x8>
     8b6:	80 83       	st	Z, r24
	salidaB.flags.byte = 0;
     8b8:	12 82       	std	Z+2, r1	; 0x02
	salidaC.actuator_pin = SERVOC_PIN;
     8ba:	e5 e4       	ldi	r30, 0x45	; 69
     8bc:	f6 e0       	ldi	r31, 0x06	; 6
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     8c2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <IR_C+0x8>
     8c6:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
     8c8:	12 82       	std	Z+2, r1	; 0x02
	printf("Init outputs\n");
     8ca:	8e e8       	ldi	r24, 0x8E	; 142
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     8d2:	08 95       	ret

000008d4 <initSorter>:
}

void initSorter(sorter_system_t* SystemSorter){
     8d4:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     8d6:	8c e1       	ldi	r24, 0x1C	; 28
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     8de:	8a ee       	ldi	r24, 0xEA	; 234
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	93 83       	std	Z+3, r25	; 0x03
     8e4:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     8e6:	8e e5       	ldi	r24, 0x5E	; 94
     8e8:	96 e0       	ldi	r25, 0x06	; 6
     8ea:	95 83       	std	Z+5, r25	; 0x05
     8ec:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     8ee:	85 e4       	ldi	r24, 0x45	; 69
     8f0:	96 e0       	ldi	r25, 0x06	; 6
     8f2:	97 83       	std	Z+7, r25	; 0x07
     8f4:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     8f6:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     8fa:	88 23       	and	r24, r24
     8fc:	44 f4       	brge	.+16     	; 0x90e <__stack+0xf>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     8fe:	8b e9       	ldi	r24, 0x9B	; 155
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     906:	8d ec       	ldi	r24, 0xCD	; 205
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     90e:	08 95       	ret

00000910 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     910:	8e 3b       	cpi	r24, 0xBE	; 190
     912:	98 f0       	brcs	.+38     	; 0x93a <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     914:	90 91 25 06 	lds	r25, 0x0625	; 0x800625 <bandera2>
     918:	99 23       	and	r25, r25
     91a:	0c f0       	brlt	.+2      	; 0x91e <classify_box+0xe>
     91c:	83 c0       	rjmp	.+262    	; 0xa24 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     91e:	1f 92       	push	r1
     920:	8f 93       	push	r24
     922:	82 ef       	ldi	r24, 0xF2	; 242
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
		}
		return NO_BOX;
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     93a:	9e eb       	ldi	r25, 0xBE	; 190
     93c:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     93e:	97 33       	cpi	r25, 0x37	; 55
     940:	98 f4       	brcc	.+38     	; 0x968 <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     942:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     946:	80 78       	andi	r24, 0x80	; 128
     948:	09 f4       	brne	.+2      	; 0x94c <classify_box+0x3c>
     94a:	73 c0       	rjmp	.+230    	; 0xa32 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     94c:	1f 92       	push	r1
     94e:	9f 93       	push	r25
     950:	82 e2       	ldi	r24, 0x22	; 34
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     968:	db 01       	movw	r26, r22
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	80 81       	ld	r24, Z
     970:	98 17       	cp	r25, r24
     972:	b0 f0       	brcs	.+44     	; 0x9a0 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     974:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     976:	89 17       	cp	r24, r25
     978:	98 f0       	brcs	.+38     	; 0x9a0 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     97a:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     97e:	88 23       	and	r24, r24
     980:	0c f0       	brlt	.+2      	; 0x984 <classify_box+0x74>
     982:	52 c0       	rjmp	.+164    	; 0xa28 <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     984:	1f 92       	push	r1
     986:	9f 93       	push	r25
     988:	8b e4       	ldi	r24, 0x4B	; 75
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	98 17       	cp	r25, r24
     9a4:	a8 f0       	brcs	.+42     	; 0x9d0 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     9a6:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     9a8:	89 17       	cp	r24, r25
     9aa:	90 f0       	brcs	.+36     	; 0x9d0 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     9ac:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     9b0:	88 23       	and	r24, r24
     9b2:	e4 f5       	brge	.+120    	; 0xa2c <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     9b4:	1f 92       	push	r1
     9b6:	9f 93       	push	r25
     9b8:	80 e6       	ldi	r24, 0x60	; 96
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     9d0:	84 81       	ldd	r24, Z+4	; 0x04
     9d2:	98 17       	cp	r25, r24
     9d4:	a8 f0       	brcs	.+42     	; 0xa00 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     9d6:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     9d8:	89 17       	cp	r24, r25
     9da:	90 f0       	brcs	.+36     	; 0xa00 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     9dc:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     9e0:	88 23       	and	r24, r24
     9e2:	34 f5       	brge	.+76     	; 0xa30 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     9e4:	1f 92       	push	r1
     9e6:	9f 93       	push	r25
     9e8:	85 e7       	ldi	r24, 0x75	; 117
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     a00:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     a04:	80 78       	andi	r24, 0x80	; 128
     a06:	a9 f0       	breq	.+42     	; 0xa32 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     a08:	1f 92       	push	r1
     a0a:	9f 93       	push	r25
     a0c:	8a e8       	ldi	r24, 0x8A	; 138
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     a30:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     a32:	08 95       	ret

00000a34 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     a42:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     a46:	88 23       	and	r24, r24
     a48:	a4 f5       	brge	.+104    	; 0xab2 <ultraSensorTask+0x7e>
     a4a:	e8 81       	ld	r30, Y
     a4c:	f9 81       	ldd	r31, Y+1	; 0x01
     a4e:	84 85       	ldd	r24, Z+12	; 0x0c
     a50:	85 ff       	sbrs	r24, 5
     a52:	2f c0       	rjmp	.+94     	; 0xab2 <ultraSensorTask+0x7e>
     a54:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     a58:	81 ff       	sbrs	r24, 1
     a5a:	2b c0       	rjmp	.+86     	; 0xab2 <ultraSensorTask+0x7e>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     a5c:	cf 01       	movw	r24, r30
     a5e:	0e 94 cf 09 	call	0x139e	; 0x139e <ultrasonic_start>
     a62:	88 23       	and	r24, r24
     a64:	c1 f0       	breq	.+48     	; 0xa96 <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     a66:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     a6a:	86 ff       	sbrs	r24, 6
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     a6e:	88 eb       	ldi	r24, 0xB8	; 184
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     a76:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     a7a:	8f 77       	andi	r24, 0x7F	; 127
     a7c:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     a80:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     a84:	8d 7f       	andi	r24, 0xFD	; 253
     a86:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     a8a:	e8 81       	ld	r30, Y
     a8c:	f9 81       	ldd	r31, Y+1	; 0x01
     a8e:	84 85       	ldd	r24, Z+12	; 0x0c
     a90:	8f 7d       	andi	r24, 0xDF	; 223
     a92:	84 87       	std	Z+12, r24	; 0x0c
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <ultraSensorTask+0x7e>
		}
		else
		{
			if (DEBUG_FLAGS)
     a96:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     a9a:	86 ff       	sbrs	r24, 6
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     a9e:	83 eb       	ldi	r24, 0xB3	; 179
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
			}
			EMIT_FAILED = 1;
     aa6:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
			EMIT_TRIGGER = 0;
     aaa:	84 60       	ori	r24, 0x04	; 4
     aac:	8d 7f       	andi	r24, 0xFD	; 253
     aae:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     ab2:	88 81       	ld	r24, Y
     ab4:	99 81       	ldd	r25, Y+1	; 0x01
     ab6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     aba:	e8 81       	ld	r30, Y
     abc:	f9 81       	ldd	r31, Y+1	; 0x01
     abe:	85 85       	ldd	r24, Z+13	; 0x0d
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	09 f0       	breq	.+2      	; 0xac6 <ultraSensorTask+0x92>
     ac4:	b2 c0       	rjmp	.+356    	; 0xc2a <ultraSensorTask+0x1f6>
     ac6:	84 85       	ldd	r24, Z+12	; 0x0c
     ac8:	88 23       	and	r24, r24
     aca:	0c f0       	brlt	.+2      	; 0xace <ultraSensorTask+0x9a>
     acc:	ae c0       	rjmp	.+348    	; 0xc2a <ultraSensorTask+0x1f6>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     ace:	84 85       	ldd	r24, Z+12	; 0x0c
     ad0:	8f 77       	andi	r24, 0x7F	; 127
     ad2:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     ad4:	e8 81       	ld	r30, Y
     ad6:	f9 81       	ldd	r31, Y+1	; 0x01
     ad8:	80 85       	ldd	r24, Z+8	; 0x08
     ada:	91 85       	ldd	r25, Z+9	; 0x09
     adc:	a2 85       	ldd	r26, Z+10	; 0x0a
     ade:	b3 85       	ldd	r27, Z+11	; 0x0b
     ae0:	8f 3b       	cpi	r24, 0xBF	; 191
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	b0 f0       	brcs	.+44     	; 0xb16 <ultraSensorTask+0xe2>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     af0:	98 2f       	mov	r25, r24
     af2:	92 95       	swap	r25
     af4:	9f 70       	andi	r25, 0x0F	; 15
     af6:	92 30       	cpi	r25, 0x02	; 2
     af8:	51 f4       	brne	.+20     	; 0xb0e <ultraSensorTask+0xda>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     afe:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     b02:	88 23       	and	r24, r24
     b04:	24 f4       	brge	.+8      	; 0xb0e <ultraSensorTask+0xda>
					printf("Sensor liberado de nuevo\n");
     b06:	83 ec       	ldi	r24, 0xC3	; 195
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	8c 83       	std	Y+4, r24	; 0x04
     b14:	7e c0       	rjmp	.+252    	; 0xc12 <ultraSensorTask+0x1de>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	98 2f       	mov	r25, r24
     b1a:	92 95       	swap	r25
     b1c:	9f 70       	andi	r25, 0x0F	; 15
     b1e:	09 f0       	breq	.+2      	; 0xb22 <ultraSensorTask+0xee>
     b20:	78 c0       	rjmp	.+240    	; 0xc12 <ultraSensorTask+0x1de>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     b22:	8f 70       	andi	r24, 0x0F	; 15
     b24:	80 61       	ori	r24, 0x10	; 16
     b26:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     b28:	80 85       	ldd	r24, Z+8	; 0x08
     b2a:	91 85       	ldd	r25, Z+9	; 0x09
     b2c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b2e:	b3 85       	ldd	r27, Z+11	; 0x0b
     b30:	b8 01       	movw	r22, r16
     b32:	0e 94 88 04 	call	0x910	; 0x910 <classify_box>
     b36:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	f8 16       	cp	r15, r24
     b3c:	09 f4       	brne	.+2      	; 0xb40 <ultraSensorTask+0x10c>
     b3e:	65 c0       	rjmp	.+202    	; 0xc0a <ultraSensorTask+0x1d6>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     b40:	e8 81       	ld	r30, Y
     b42:	f9 81       	ldd	r31, Y+1	; 0x01
     b44:	80 85       	ldd	r24, Z+8	; 0x08
     b46:	91 85       	ldd	r25, Z+9	; 0x09
     b48:	a2 85       	ldd	r26, Z+10	; 0x0a
     b4a:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     b4c:	e1 e0       	ldi	r30, 0x01	; 1
     b4e:	fe 16       	cp	r15, r30
     b50:	49 f0       	breq	.+18     	; 0xb64 <ultraSensorTask+0x130>
     b52:	fe 16       	cp	r15, r30
     b54:	b0 f0       	brcs	.+44     	; 0xb82 <ultraSensorTask+0x14e>
     b56:	f2 e0       	ldi	r31, 0x02	; 2
     b58:	ff 16       	cp	r15, r31
     b5a:	49 f0       	breq	.+18     	; 0xb6e <ultraSensorTask+0x13a>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	f8 16       	cp	r15, r24
     b60:	59 f0       	breq	.+22     	; 0xb78 <ultraSensorTask+0x144>
     b62:	14 c0       	rjmp	.+40     	; 0xb8c <ultraSensorTask+0x158>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     b64:	8c ed       	ldi	r24, 0xDC	; 220
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <ultraSensorTask+0x160>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     b6e:	87 ee       	ldi	r24, 0xE7	; 231
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <ultraSensorTask+0x160>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     b78:	82 ef       	ldi	r24, 0xF2	; 242
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <ultraSensorTask+0x160>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     b82:	8d ef       	ldi	r24, 0xFD	; 253
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <ultraSensorTask+0x160>
						default: printf("Tipo no reconocido\n"); break;
     b8c:	8b e0       	ldi	r24, 0x0B	; 11
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     b94:	f1 10       	cpse	r15, r1
     b96:	0d c0       	rjmp	.+26     	; 0xbb2 <ultraSensorTask+0x17e>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     b98:	f8 01       	movw	r30, r16
     b9a:	80 89       	ldd	r24, Z+16	; 0x10
     b9c:	91 89       	ldd	r25, Z+17	; 0x11
     b9e:	a2 89       	ldd	r26, Z+18	; 0x12
     ba0:	b3 89       	ldd	r27, Z+19	; 0x13
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	a1 1d       	adc	r26, r1
     ba6:	b1 1d       	adc	r27, r1
     ba8:	80 8b       	std	Z+16, r24	; 0x10
     baa:	91 8b       	std	Z+17, r25	; 0x11
     bac:	a2 8b       	std	Z+18, r26	; 0x12
     bae:	b3 8b       	std	Z+19, r27	; 0x13
     bb0:	0c c0       	rjmp	.+24     	; 0xbca <ultraSensorTask+0x196>
					}
					else
					{
						sorter->stats.total_selected++;
     bb2:	f8 01       	movw	r30, r16
     bb4:	84 85       	ldd	r24, Z+12	; 0x0c
     bb6:	95 85       	ldd	r25, Z+13	; 0x0d
     bb8:	a6 85       	ldd	r26, Z+14	; 0x0e
     bba:	b7 85       	ldd	r27, Z+15	; 0x0f
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	a1 1d       	adc	r26, r1
     bc0:	b1 1d       	adc	r27, r1
     bc2:	84 87       	std	Z+12, r24	; 0x0c
     bc4:	95 87       	std	Z+13, r25	; 0x0d
     bc6:	a6 87       	std	Z+14, r26	; 0x0e
     bc8:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     bca:	f8 01       	movw	r30, r16
     bcc:	80 85       	ldd	r24, Z+8	; 0x08
     bce:	91 85       	ldd	r25, Z+9	; 0x09
     bd0:	a2 85       	ldd	r26, Z+10	; 0x0a
     bd2:	b3 85       	ldd	r27, Z+11	; 0x0b
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	a1 1d       	adc	r26, r1
     bd8:	b1 1d       	adc	r27, r1
     bda:	80 87       	std	Z+8, r24	; 0x08
     bdc:	91 87       	std	Z+9, r25	; 0x09
     bde:	a2 87       	std	Z+10, r26	; 0x0a
     be0:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     be2:	ef 2d       	mov	r30, r15
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	35 96       	adiw	r30, 0x05	; 5
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e0 0f       	add	r30, r16
     bf2:	f1 1f       	adc	r31, r17
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	a2 81       	ldd	r26, Z+2	; 0x02
     bfa:	b3 81       	ldd	r27, Z+3	; 0x03
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	a1 1d       	adc	r26, r1
     c00:	b1 1d       	adc	r27, r1
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
     c0c:	8f 70       	andi	r24, 0x0F	; 15
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     c12:	88 81       	ld	r24, Y
     c14:	99 81       	ldd	r25, Y+1	; 0x01
     c16:	0e 94 6e 09 	call	0x12dc	; 0x12dc <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     c1a:	e8 81       	ld	r30, Y
     c1c:	f9 81       	ldd	r31, Y+1	; 0x01
     c1e:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     c20:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     c24:	80 68       	ori	r24, 0x80	; 128
     c26:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     c2a:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     c2e:	80 ff       	sbrs	r24, 0
     c30:	2d c0       	rjmp	.+90     	; 0xc8c <ultraSensorTask+0x258>
	{
		if (DEBUG_FLAGS)
     c32:	86 ff       	sbrs	r24, 6
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <ultraSensorTask+0x20a>
		{
			printf("HCSR04 perdio ECHO\n");
     c36:	8e e1       	ldi	r24, 0x1E	; 30
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
		}
		VEINTEMS_PASSED = 0;
     c3e:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
		WAITING_ECHO = 0;
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	87 7f       	andi	r24, 0xF7	; 247
     c46:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     c4a:	e8 81       	ld	r30, Y
     c4c:	f9 81       	ldd	r31, Y+1	; 0x01
     c4e:	84 85       	ldd	r24, Z+12	; 0x0c
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     c54:	e8 81       	ld	r30, Y
     c56:	f9 81       	ldd	r31, Y+1	; 0x01
     c58:	86 e0       	ldi	r24, 0x06	; 6
     c5a:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     c5c:	60 91 25 06 	lds	r22, 0x0625	; 0x800625 <bandera2>
     c60:	66 fb       	bst	r22, 6
     c62:	66 27       	eor	r22, r22
     c64:	60 f9       	bld	r22, 0
     c66:	88 81       	ld	r24, Y
     c68:	99 81       	ldd	r25, Y+1	; 0x01
     c6a:	0e 94 b2 09 	call	0x1364	; 0x1364 <ultrasonic_timeout_clear>
     c6e:	88 23       	and	r24, r24
     c70:	41 f0       	breq	.+16     	; 0xc82 <ultraSensorTask+0x24e>
     c72:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <bandera2>
     c76:	86 ff       	sbrs	r24, 6
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <ultraSensorTask+0x24e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     c7a:	81 e3       	ldi	r24, 0x31	; 49
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     c82:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <bandera>
     c86:	80 68       	ori	r24, 0x80	; 128
     c88:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <bandera>
	}
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	08 95       	ret

00000c98 <irSensorsTask>:

void irSensorsTask(sorter_system_t * sorter){
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
	if(IR_READ){
     c9c:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     ca0:	81 ff       	sbrs	r24, 1
     ca2:	2f c0       	rjmp	.+94     	; 0xd02 <irSensorsTask+0x6a>
		printf("IR A: %u\n", IR_A.ADCConvertedValue);
     ca4:	eb e2       	ldi	r30, 0x2B	; 43
     ca6:	f6 e0       	ldi	r31, 0x06	; 6
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	8f 93       	push	r24
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	8f 93       	push	r24
     cb0:	83 e5       	ldi	r24, 0x53	; 83
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
		printf("IR B: %u\n", IR_B.ADCConvertedValue);
     cbc:	c6 ed       	ldi	r28, 0xD6	; 214
     cbe:	d5 e0       	ldi	r29, 0x05	; 5
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	8f 93       	push	r24
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	8f 93       	push	r24
     cc8:	8d e5       	ldi	r24, 0x5D	; 93
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
		printf("IR C: %u\n", IR_B.ADCConvertedValue);
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	8f 93       	push	r24
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	8f 93       	push	r24
     cdc:	87 e6       	ldi	r24, 0x67	; 103
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
		IR_READ = 0;
     ce8:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <bandera3>
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <bandera3>
     cf2:	8d b7       	in	r24, 0x3d	; 61
     cf4:	9e b7       	in	r25, 0x3e	; 62
     cf6:	0c 96       	adiw	r24, 0x0c	; 12
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	9e bf       	out	0x3e, r25	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	8d bf       	out	0x3d, r24	; 61
	}
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     d02:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     d06:	80 ff       	sbrs	r24, 0
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <irSensorsTask+0x84>
     d0a:	83 ff       	sbrs	r24, 3
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <irSensorsTask+0x84>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     d0e:	87 7f       	andi	r24, 0xF7	; 247
     d10:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_A>
		tcrt_read(&IR_A);
     d14:	8b e2       	ldi	r24, 0x2B	; 43
     d16:	96 e0       	ldi	r25, 0x06	; 6
     d18:	0e 94 59 08 	call	0x10b2	; 0x10b2 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
     d1c:	8b e2       	ldi	r24, 0x2B	; 43
     d1e:	96 e0       	ldi	r25, 0x06	; 6
     d20:	0e 94 8f 08 	call	0x111e	; 0x111e <tcrt_is_box_detected>
     d24:	89 2b       	or	r24, r25
     d26:	b9 f0       	breq	.+46     	; 0xd56 <irSensorsTask+0xbe>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     d28:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     d2c:	98 2f       	mov	r25, r24
     d2e:	92 95       	swap	r25
     d30:	9f 70       	andi	r25, 0x0F	; 15
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	81 f4       	brne	.+32     	; 0xd56 <irSensorsTask+0xbe>
			SET_FLAG(salidaA.flags, OUTPUT_PUSH);
     d36:	ea ee       	ldi	r30, 0xEA	; 234
     d38:	f5 e0       	ldi	r31, 0x05	; 5
     d3a:	92 81       	ldd	r25, Z+2	; 0x02
     d3c:	92 60       	ori	r25, 0x02	; 2
     d3e:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
     d40:	8f 70       	andi	r24, 0x0F	; 15
     d42:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_A>
			printf("Detecto en IR A");
     d46:	81 e7       	ldi	r24, 0x71	; 113
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
		}
	}
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     d56:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_A>
     d5a:	80 ff       	sbrs	r24, 0
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <irSensorsTask+0xd8>
     d5e:	83 ff       	sbrs	r24, 3
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <irSensorsTask+0xd8>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     d62:	87 7f       	andi	r24, 0xF7	; 247
     d64:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_A>
		tcrt_read(&IR_B);
     d68:	86 ed       	ldi	r24, 0xD6	; 214
     d6a:	95 e0       	ldi	r25, 0x05	; 5
     d6c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
     d70:	86 ed       	ldi	r24, 0xD6	; 214
     d72:	95 e0       	ldi	r25, 0x05	; 5
     d74:	0e 94 8f 08 	call	0x111e	; 0x111e <tcrt_is_box_detected>
     d78:	89 2b       	or	r24, r25
     d7a:	b9 f0       	breq	.+46     	; 0xdaa <irSensorsTask+0x112>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     d7c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <IR_B>
     d80:	98 2f       	mov	r25, r24
     d82:	92 95       	swap	r25
     d84:	9f 70       	andi	r25, 0x0F	; 15
     d86:	92 30       	cpi	r25, 0x02	; 2
     d88:	81 f4       	brne	.+32     	; 0xdaa <irSensorsTask+0x112>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
     d8a:	ee e5       	ldi	r30, 0x5E	; 94
     d8c:	f6 e0       	ldi	r31, 0x06	; 6
     d8e:	92 81       	ldd	r25, Z+2	; 0x02
     d90:	92 60       	ori	r25, 0x02	; 2
     d92:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
     d94:	8f 70       	andi	r24, 0x0F	; 15
     d96:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <IR_B>
			printf("Detecto en IR B");
     d9a:	81 e8       	ldi	r24, 0x81	; 129
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
		}
	}
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <servosTask>:

void servosTask(){
	// SERVO A
	if (!IS_FLAG_SET(servoA.flags, SERVO_PUSH) && !IS_FLAG_SET(servoA.flags, SERVO_RESET)) {
     db0:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <servoA+0x1>
     db4:	28 2f       	mov	r18, r24
     db6:	22 70       	andi	r18, 0x02	; 2
     db8:	81 fd       	sbrc	r24, 1
     dba:	10 c0       	rjmp	.+32     	; 0xddc <servosTask+0x2c>
     dbc:	82 fd       	sbrc	r24, 2
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <servosTask+0x2c>
		// Ya terminó su ciclo de activación ? limpiar orden externa
		CLEAR_FLAG(salidaA.flags, OUTPUT_PUSH);
     dc0:	ea ee       	ldi	r30, 0xEA	; 234
     dc2:	f5 e0       	ldi	r31, 0x05	; 5
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	82 83       	std	Z+2, r24	; 0x02
		printf("Desactiva Servo A");
     dca:	81 e9       	ldi	r24, 0x91	; 145
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	11 c0       	rjmp	.+34     	; 0xdfe <servosTask+0x4e>
	} else if (IS_FLAG_SET(salidaA.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoA.flags, SERVO_PUSH)) {
     ddc:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <salidaA+0x2>
     de0:	91 ff       	sbrs	r25, 1
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <servosTask+0x4e>
     de4:	21 11       	cpse	r18, r1
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <servosTask+0x4e>
		// Solo setea si no se activó aún el pulso
		SET_FLAG(servoA.flags, SERVO_PUSH);
		SET_FLAG(servoA.flags, SERVO_RESET);
     de8:	86 60       	ori	r24, 0x06	; 6
     dea:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <servoA+0x1>
		printf("Activa Servo A");
     dee:	83 ea       	ldi	r24, 0xA3	; 163
     df0:	93 e0       	ldi	r25, 0x03	; 3
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
	}

	// SERVO B
	if (!IS_FLAG_SET(servoB.flags, SERVO_PUSH) && !IS_FLAG_SET(servoB.flags, SERVO_RESET)) {
     dfe:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <servoB+0x1>
     e02:	28 2f       	mov	r18, r24
     e04:	22 70       	andi	r18, 0x02	; 2
     e06:	81 fd       	sbrc	r24, 1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <servosTask+0x7a>
     e0a:	82 fd       	sbrc	r24, 2
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <servosTask+0x7a>
		CLEAR_FLAG(salidaB.flags, OUTPUT_PUSH);
     e0e:	ee e5       	ldi	r30, 0x5E	; 94
     e10:	f6 e0       	ldi	r31, 0x06	; 6
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	8d 7f       	andi	r24, 0xFD	; 253
     e16:	82 83       	std	Z+2, r24	; 0x02
		printf("Desactiva Servo B");
     e18:	82 eb       	ldi	r24, 0xB2	; 178
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <servosTask+0x9c>
	} else if (IS_FLAG_SET(salidaB.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoB.flags, SERVO_PUSH)) {
     e2a:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <salidaB+0x2>
     e2e:	91 ff       	sbrs	r25, 1
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <servosTask+0x9c>
     e32:	21 11       	cpse	r18, r1
     e34:	0b c0       	rjmp	.+22     	; 0xe4c <servosTask+0x9c>
		SET_FLAG(servoB.flags, SERVO_PUSH);
		SET_FLAG(servoB.flags, SERVO_RESET);
     e36:	86 60       	ori	r24, 0x06	; 6
     e38:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <servoB+0x1>
		printf("Activa Servo B");
     e3c:	84 ec       	ldi	r24, 0xC4	; 196
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	9f 93       	push	r25
     e42:	8f 93       	push	r24
     e44:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
	}

	// SERVO C
	if (!IS_FLAG_SET(servoC.flags, SERVO_PUSH) && !IS_FLAG_SET(servoC.flags, SERVO_RESET)) {
     e4c:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <servoC+0x1>
     e50:	28 2f       	mov	r18, r24
     e52:	22 70       	andi	r18, 0x02	; 2
     e54:	81 fd       	sbrc	r24, 1
     e56:	10 c0       	rjmp	.+32     	; 0xe78 <servosTask+0xc8>
     e58:	82 fd       	sbrc	r24, 2
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <servosTask+0xc8>
		CLEAR_FLAG(salidaC.flags, OUTPUT_PUSH);
     e5c:	e5 e4       	ldi	r30, 0x45	; 69
     e5e:	f6 e0       	ldi	r31, 0x06	; 6
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	82 83       	std	Z+2, r24	; 0x02
		printf("Desactiva Servo C");
     e66:	83 ed       	ldi	r24, 0xD3	; 211
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	9f 93       	push	r25
     e6c:	8f 93       	push	r24
     e6e:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	08 95       	ret
		} else if (IS_FLAG_SET(salidaC.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoC.flags, SERVO_PUSH)) {
     e78:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <salidaC+0x2>
     e7c:	91 ff       	sbrs	r25, 1
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <servosTask+0xea>
     e80:	21 11       	cpse	r18, r1
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <servosTask+0xea>
		SET_FLAG(servoC.flags, SERVO_PUSH);
		SET_FLAG(servoC.flags, SERVO_RESET);
     e84:	86 60       	ori	r24, 0x06	; 6
     e86:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <servoC+0x1>
		printf("Activa Servo C");
     e8a:	85 ee       	ldi	r24, 0xE5	; 229
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	08 95       	ret

00000e9c <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(servo_t* servo, uint8_t index, uint8_t pin){
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	8c 01       	movw	r16, r24
     ea8:	f4 2e       	mov	r15, r20
	printf("Init Servo %u\n", index);
     eaa:	c6 2f       	mov	r28, r22
     eac:	d0 e0       	ldi	r29, 0x00	; 0
     eae:	1f 92       	push	r1
     eb0:	6f 93       	push	r22
     eb2:	84 ef       	ldi	r24, 0xF4	; 244
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
	servo->flags.byte = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 83       	std	Z+1, r24	; 0x01
	servo->pulse_us = SERVO_START_PULSE;
     ec4:	88 eb       	ldi	r24, 0xB8	; 184
     ec6:	9b e0       	ldi	r25, 0x0B	; 11
     ec8:	93 83       	std	Z+3, r25	; 0x03
     eca:	82 83       	std	Z+2, r24	; 0x02
	servo->pin = pin;
     ecc:	f0 82       	st	Z, r15
	servosArray[index] = servo;
     ece:	cc 0f       	add	r28, r28
     ed0:	dd 1f       	adc	r29, r29
     ed2:	c1 5c       	subi	r28, 0xC1	; 193
     ed4:	d9 4f       	sbci	r29, 0xF9	; 249
     ed6:	19 83       	std	Y+1, r17	; 0x01
     ed8:	08 83       	st	Y, r16
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	08 95       	ret

00000eee <servo_set_angle>:

void servo_set_angle(uint8_t index, uint8_t angle)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
	if (index >= NUM_OUTPUTS) return;
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	f8 f4       	brcc	.+62     	; 0xf34 <servo_set_angle+0x46>
	if (angle > 180) angle = 180;
     ef6:	65 3b       	cpi	r22, 0xB5	; 181
     ef8:	08 f0       	brcs	.+2      	; 0xefc <servo_set_angle+0xe>
     efa:	64 eb       	ldi	r22, 0xB4	; 180
	servosArray[index]->angle = angle;
     efc:	e8 2f       	mov	r30, r24
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e1 5c       	subi	r30, 0xC1	; 193
     f06:	f9 4f       	sbci	r31, 0xF9	; 249
     f08:	a0 81       	ld	r26, Z
     f0a:	b1 81       	ldd	r27, Z+1	; 0x01
     f0c:	14 96       	adiw	r26, 0x04	; 4
     f0e:	6c 93       	st	X, r22
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	// Escalado lineal: 0º ? min_ticks, 180º ? max_ticks
	servosArray[index]->pulse_us = min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U);
     f10:	c0 81       	ld	r28, Z
     f12:	d1 81       	ldd	r29, Z+1	; 0x01
     f14:	26 2f       	mov	r18, r22
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a0 ed       	ldi	r26, 0xD0	; 208
     f1a:	b7 e0       	ldi	r27, 0x07	; 7
     f1c:	0e 94 97 0a 	call	0x152e	; 0x152e <__umulhisi3>
     f20:	24 eb       	ldi	r18, 0xB4	; 180
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__udivmodsi4>
     f2c:	20 53       	subi	r18, 0x30	; 48
     f2e:	38 4f       	sbci	r19, 0xF8	; 248
     f30:	3b 83       	std	Y+3, r19	; 0x03
     f32:	2a 83       	std	Y+2, r18	; 0x02
}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
     f3a:	87 b1       	in	r24, 0x07	; 7
     f3c:	80 7f       	andi	r24, 0xF0	; 240
     f3e:	87 b9       	out	0x07, r24	; 7
     f40:	88 b1       	in	r24, 0x08	; 8
     f42:	80 7f       	andi	r24, 0xF0	; 240
     f44:	88 b9       	out	0x08, r24	; 8
     f46:	80 e4       	ldi	r24, 0x40	; 64
     f48:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f4c:	86 e8       	ldi	r24, 0x86	; 134
     f4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f52:	08 95       	ret

00000f54 <tcrt_read_channel>:
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	a0 f4       	brcc	.+40     	; 0xf80 <tcrt_read_channel+0x2c>
     f58:	ec e7       	ldi	r30, 0x7C	; 124
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	90 7f       	andi	r25, 0xF0	; 240
     f60:	89 2b       	or	r24, r25
     f62:	80 83       	st	Z, r24
     f64:	ea e7       	ldi	r30, 0x7A	; 122
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	80 83       	st	Z, r24
     f6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f72:	86 fd       	sbrc	r24, 6
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <tcrt_read_channel+0x1a>
     f76:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f7a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f7e:	08 95       	ret
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	08 95       	ret

00000f86 <TCRT_init_Handlers>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	eb e2       	ldi	r30, 0x2B	; 43
     f8c:	f6 e0       	ldi	r31, 0x06	; 6
     f8e:	17 82       	std	Z+7, r1	; 0x07
     f90:	10 86       	std	Z+8, r1	; 0x08
     f92:	12 82       	std	Z+2, r1	; 0x02
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	16 82       	std	Z+6, r1	; 0x06
     f98:	15 82       	std	Z+5, r1	; 0x05
     f9a:	d4 e1       	ldi	r29, 0x14	; 20
     f9c:	d6 87       	std	Z+14, r29	; 0x0e
     f9e:	c1 e0       	ldi	r28, 0x01	; 1
     fa0:	c0 83       	st	Z, r28
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	9f 93       	push	r25
     fa8:	8f 93       	push	r24
     faa:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     fae:	e6 ed       	ldi	r30, 0xD6	; 214
     fb0:	f5 e0       	ldi	r31, 0x05	; 5
     fb2:	c7 83       	std	Z+7, r28	; 0x07
     fb4:	c0 87       	std	Z+8, r28	; 0x08
     fb6:	12 82       	std	Z+2, r1	; 0x02
     fb8:	11 82       	std	Z+1, r1	; 0x01
     fba:	16 82       	std	Z+6, r1	; 0x06
     fbc:	15 82       	std	Z+5, r1	; 0x05
     fbe:	d6 87       	std	Z+14, r29	; 0x0e
     fc0:	c0 83       	st	Z, r28
     fc2:	82 e1       	ldi	r24, 0x12	; 18
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     fce:	ed ef       	ldi	r30, 0xFD	; 253
     fd0:	f5 e0       	ldi	r31, 0x05	; 5
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	87 83       	std	Z+7, r24	; 0x07
     fd6:	80 87       	std	Z+8, r24	; 0x08
     fd8:	12 82       	std	Z+2, r1	; 0x02
     fda:	11 82       	std	Z+1, r1	; 0x01
     fdc:	16 82       	std	Z+6, r1	; 0x06
     fde:	15 82       	std	Z+5, r1	; 0x05
     fe0:	d6 87       	std	Z+14, r29	; 0x0e
     fe2:	c0 83       	st	Z, r28
     fe4:	81 e2       	ldi	r24, 0x21	; 33
     fe6:	94 e0       	ldi	r25, 0x04	; 4
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
     ff0:	ed ee       	ldi	r30, 0xED	; 237
     ff2:	f5 e0       	ldi	r31, 0x05	; 5
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	87 83       	std	Z+7, r24	; 0x07
     ff8:	80 87       	std	Z+8, r24	; 0x08
     ffa:	12 82       	std	Z+2, r1	; 0x02
     ffc:	11 82       	std	Z+1, r1	; 0x01
     ffe:	16 82       	std	Z+6, r1	; 0x06
    1000:	15 82       	std	Z+5, r1	; 0x05
    1002:	d6 87       	std	Z+14, r29	; 0x0e
    1004:	c0 83       	st	Z, r28
    1006:	80 e3       	ldi	r24, 0x30	; 48
    1008:	94 e0       	ldi	r25, 0x04	; 4
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
    1012:	8f e3       	ldi	r24, 0x3F	; 63
    1014:	94 e0       	ldi	r25, 0x04	; 4
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
    101e:	8d b7       	in	r24, 0x3d	; 61
    1020:	9e b7       	in	r25, 0x3e	; 62
    1022:	0a 96       	adiw	r24, 0x0a	; 10
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	9e bf       	out	0x3e, r25	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	8d bf       	out	0x3d, r24	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    103a:	88 81       	ld	r24, Y
    103c:	83 ff       	sbrs	r24, 3
    103e:	36 c0       	rjmp	.+108    	; 0x10ac <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    1040:	87 7f       	andi	r24, 0xF7	; 247
    1042:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1044:	89 85       	ldd	r24, Y+9	; 0x09
    1046:	81 11       	cpse	r24, r1
    1048:	02 c0       	rjmp	.+4      	; 0x104e <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    104a:	1e 82       	std	Y+6, r1	; 0x06
    104c:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	0e 94 aa 07 	call	0xf54	; 0xf54 <tcrt_read_channel>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	28 0f       	add	r18, r24
    105a:	39 1f       	adc	r19, r25
    105c:	3e 83       	std	Y+6, r19	; 0x06
    105e:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    1060:	99 85       	ldd	r25, Y+9	; 0x09
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    1066:	9a 30       	cpi	r25, 0x0A	; 10
    1068:	08 f1       	brcs	.+66     	; 0x10ac <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    106a:	ad ec       	ldi	r26, 0xCD	; 205
    106c:	bc ec       	ldi	r27, 0xCC	; 204
    106e:	0e 94 97 0a 	call	0x152e	; 0x152e <__umulhisi3>
    1072:	96 95       	lsr	r25
    1074:	87 95       	ror	r24
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1082:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1084:	28 81       	ld	r18, Y
    1086:	2b 7f       	andi	r18, 0xFB	; 251
    1088:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	1f 92       	push	r1
    1092:	2f 93       	push	r18
    1094:	82 e5       	ldi	r24, 0x52	; 82
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	0e 94 c5 0a 	call	0x158a	; 0x158a <printf>
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
		}
	}
}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    10bc:	98 81       	ld	r25, Y
    10be:	93 ff       	sbrs	r25, 3
    10c0:	29 c0       	rjmp	.+82     	; 0x1114 <tcrt_read+0x62>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE);  // Consumimos el pulso de 10ms
    10c2:	97 7f       	andi	r25, 0xF7	; 247
    10c4:	98 83       	st	Y, r25

		uint16_t lectura = tcrt_read_channel(sensor->channel);
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	0e 94 aa 07 	call	0xf54	; 0xf54 <tcrt_read_channel>
		sensor->lastReading = lectura;
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05

		// Acumula
		sensor->filterAccumulator += lectura;
    10d0:	4a 85       	ldd	r20, Y+10	; 0x0a
    10d2:	5b 85       	ldd	r21, Y+11	; 0x0b
    10d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    10d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    10d8:	8a 01       	movw	r16, r20
    10da:	9b 01       	movw	r18, r22
    10dc:	08 0f       	add	r16, r24
    10de:	19 1f       	adc	r17, r25
    10e0:	21 1d       	adc	r18, r1
    10e2:	31 1d       	adc	r19, r1
    10e4:	c9 01       	movw	r24, r18
    10e6:	b8 01       	movw	r22, r16
    10e8:	0a 87       	std	Y+10, r16	; 0x0a
    10ea:	1b 87       	std	Y+11, r17	; 0x0b
    10ec:	2c 87       	std	Y+12, r18	; 0x0c
    10ee:	3d 87       	std	Y+13, r19	; 0x0d
		sensor->calibrationCounter++;
    10f0:	29 85       	ldd	r18, Y+9	; 0x09
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	29 87       	std	Y+9, r18	; 0x09

		// Si alcanzó el número de muestras requerido
		if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    10f6:	2a 30       	cpi	r18, 0x0A	; 10
    10f8:	68 f0       	brcs	.+26     	; 0x1114 <tcrt_read+0x62>
			sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    10fa:	2a e0       	ldi	r18, 0x0A	; 10
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__udivmodsi4>
    1106:	3a 83       	std	Y+2, r19	; 0x02
    1108:	29 83       	std	Y+1, r18	; 0x01
			sensor->filterAccumulator = 0;
    110a:	1a 86       	std	Y+10, r1	; 0x0a
    110c:	1b 86       	std	Y+11, r1	; 0x0b
    110e:	1c 86       	std	Y+12, r1	; 0x0c
    1110:	1d 86       	std	Y+13, r1	; 0x0d
			sensor->calibrationCounter = 0;
    1112:	19 86       	std	Y+9, r1	; 0x09
		}
	}
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    112c:	ab 81       	ldd	r26, Y+3	; 0x03
    112e:	bc 81       	ldd	r27, Y+4	; 0x04
    1130:	8e 85       	ldd	r24, Y+14	; 0x0e
    1132:	0f 2e       	mov	r0, r31
    1134:	f4 e6       	ldi	r31, 0x64	; 100
    1136:	cf 2e       	mov	r12, r31
    1138:	d1 2c       	mov	r13, r1
    113a:	e1 2c       	mov	r14, r1
    113c:	f1 2c       	mov	r15, r1
    113e:	f0 2d       	mov	r31, r0
    1140:	a7 01       	movw	r20, r14
    1142:	96 01       	movw	r18, r12
    1144:	28 1b       	sub	r18, r24
    1146:	31 09       	sbc	r19, r1
    1148:	41 09       	sbc	r20, r1
    114a:	51 09       	sbc	r21, r1
    114c:	0e 94 a6 0a 	call	0x154c	; 0x154c <__muluhisi3>
    1150:	a7 01       	movw	r20, r14
    1152:	96 01       	movw	r18, r12
    1154:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	6c 01       	movw	r12, r24
    115e:	e1 2c       	mov	r14, r1
    1160:	f1 2c       	mov	r15, r1
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	c2 16       	cp	r12, r18
    1166:	d3 06       	cpc	r13, r19
    1168:	e4 06       	cpc	r14, r20
    116a:	f5 06       	cpc	r15, r21
    116c:	08 f0       	brcs	.+2      	; 0x1170 <tcrt_is_box_detected+0x52>
    116e:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    1170:	c2 16       	cp	r12, r18
    1172:	d3 06       	cpc	r13, r19
    1174:	e4 06       	cpc	r14, r20
    1176:	f5 06       	cpc	r15, r21
    1178:	50 f4       	brcc	.+20     	; 0x118e <tcrt_is_box_detected+0x70>
    117a:	98 81       	ld	r25, Y
    117c:	e9 2f       	mov	r30, r25
    117e:	e2 95       	swap	r30
    1180:	ef 70       	andi	r30, 0x0F	; 15
    1182:	29 f4       	brne	.+10     	; 0x118e <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    1184:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    1186:	9f 70       	andi	r25, 0x0F	; 15
    1188:	90 61       	ori	r25, 0x10	; 16
    118a:	98 83       	st	Y, r25
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <tcrt_is_box_detected+0x8e>
	}
	else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    118e:	c2 16       	cp	r12, r18
    1190:	d3 06       	cpc	r13, r19
    1192:	e4 06       	cpc	r14, r20
    1194:	f5 06       	cpc	r15, r21
    1196:	50 f0       	brcs	.+20     	; 0x11ac <tcrt_is_box_detected+0x8e>
    1198:	98 81       	ld	r25, Y
    119a:	29 2f       	mov	r18, r25
    119c:	22 95       	swap	r18
    119e:	2f 70       	andi	r18, 0x0F	; 15
    11a0:	21 30       	cpi	r18, 0x01	; 1
    11a2:	21 f4       	brne	.+8      	; 0x11ac <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    11a4:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    11a6:	9d 70       	andi	r25, 0x0D	; 13
    11a8:	90 62       	ori	r25, 0x20	; 32
    11aa:	98 83       	st	Y, r25
	}

	return box_now;
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	08 95       	ret

000011ba <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    11ba:	8b b1       	in	r24, 0x0b	; 11
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	8b b9       	out	0x0b, r24	; 11
    11c0:	08 95       	ret

000011c2 <ultrasonic_hal_trigger_setLow>:
    11c2:	8b b1       	in	r24, 0x0b	; 11
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	8b b9       	out	0x0b, r24	; 11
    11c8:	08 95       	ret

000011ca <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    11ca:	e1 e8       	ldi	r30, 0x81	; 129
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 64       	ori	r24, 0x40	; 64
    11d2:	80 83       	st	Z, r24
    11d4:	08 95       	ret

000011d6 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    11d6:	e1 e8       	ldi	r30, 0x81	; 129
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 7b       	andi	r24, 0xBF	; 191
    11de:	80 83       	st	Z, r24
    11e0:	08 95       	ret

000011e2 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    11e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    11e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    11ea:	88 e1       	ldi	r24, 0x18	; 24
    11ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    11f6:	08 95       	ret

000011f8 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    11f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    11fc:	95 ff       	sbrs	r25, 5
    11fe:	fc cf       	rjmp	.-8      	; 0x11f8 <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    1200:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1204:	08 95       	ret

00001206 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    1206:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    120a:	88 23       	and	r24, r24
    120c:	e4 f7       	brge	.-8      	; 0x1206 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    120e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1212:	08 95       	ret

00001214 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1214:	cf 93       	push	r28
    1216:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1218:	8a 30       	cpi	r24, 0x0A	; 10
    121a:	19 f4       	brne	.+6      	; 0x1222 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    121c:	8d e0       	ldi	r24, 0x0D	; 13
    121e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <USART_Transmit>
	USART_Transmit(c);
    1222:	8c 2f       	mov	r24, r28
    1224:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <USART_Transmit>
	return 0;
}
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    1230:	0e 94 03 09 	call	0x1206	; 0x1206 <USART_Receive>
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	08 95       	ret

00001238 <ultrasonic_set_debug_mode>:
    1238:	fc 01       	movw	r30, r24
    123a:	66 87       	std	Z+14, r22	; 0x0e
    123c:	08 95       	ret

0000123e <ultrasonic_calculate_distance>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	ae 81       	ldd	r26, Y+6	; 0x06
    124e:	bf 81       	ldd	r27, Y+7	; 0x07
    1250:	48 81       	ld	r20, Y
    1252:	59 81       	ldd	r21, Y+1	; 0x01
    1254:	6a 81       	ldd	r22, Y+2	; 0x02
    1256:	7b 81       	ldd	r23, Y+3	; 0x03
    1258:	8c 01       	movw	r16, r24
    125a:	9d 01       	movw	r18, r26
    125c:	04 1b       	sub	r16, r20
    125e:	15 0b       	sbc	r17, r21
    1260:	26 0b       	sbc	r18, r22
    1262:	37 0b       	sbc	r19, r23
    1264:	b9 01       	movw	r22, r18
    1266:	a8 01       	movw	r20, r16
    1268:	d9 01       	movw	r26, r18
    126a:	c8 01       	movw	r24, r16
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	aa 1f       	adc	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	aa 1f       	adc	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	aa 1f       	adc	r26, r26
    128a:	bb 1f       	adc	r27, r27
    128c:	8c 01       	movw	r16, r24
    128e:	9d 01       	movw	r18, r26
    1290:	04 0f       	add	r16, r20
    1292:	15 1f       	adc	r17, r21
    1294:	26 1f       	adc	r18, r22
    1296:	37 1f       	adc	r19, r23
    1298:	c9 01       	movw	r24, r18
    129a:	b8 01       	movw	r22, r16
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	20 e9       	ldi	r18, 0x90	; 144
    12a6:	31 e0       	ldi	r19, 0x01	; 1
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__udivmodsi4>
    12b0:	28 87       	std	Y+8, r18	; 0x08
    12b2:	39 87       	std	Y+9, r19	; 0x09
    12b4:	4a 87       	std	Y+10, r20	; 0x0a
    12b6:	5b 87       	std	Y+11, r21	; 0x0b
    12b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <ultrasonic_print>:
    12c8:	dc 01       	movw	r26, r24
    12ca:	1f 96       	adiw	r26, 0x0f	; 15
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	50 97       	sbiw	r26, 0x10	; 16
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	11 f0       	breq	.+4      	; 0x12da <ultrasonic_print+0x12>
    12d6:	cb 01       	movw	r24, r22
    12d8:	09 95       	icall
    12da:	08 95       	ret

000012dc <ultrasonic_init_flags>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	18 82       	st	Y, r1
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	1b 82       	std	Y+3, r1	; 0x03
    12ea:	1c 82       	std	Y+4, r1	; 0x04
    12ec:	1d 82       	std	Y+5, r1	; 0x05
    12ee:	1e 82       	std	Y+6, r1	; 0x06
    12f0:	1f 82       	std	Y+7, r1	; 0x07
    12f2:	18 86       	std	Y+8, r1	; 0x08
    12f4:	19 86       	std	Y+9, r1	; 0x09
    12f6:	1a 86       	std	Y+10, r1	; 0x0a
    12f8:	1b 86       	std	Y+11, r1	; 0x0b
    12fa:	1c 86       	std	Y+12, r1	; 0x0c
    12fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	8c 87       	std	Y+12, r24	; 0x0c
    1302:	1d 86       	std	Y+13, r1	; 0x0d
    1304:	0e 94 e5 08 	call	0x11ca	; 0x11ca <ultrasonic_hal_echo_setRisingEdge>
    1308:	8f 85       	ldd	r24, Y+15	; 0x0f
    130a:	98 89       	ldd	r25, Y+16	; 0x10
    130c:	89 2b       	or	r24, r25
    130e:	41 f0       	breq	.+16     	; 0x1320 <ultrasonic_init_flags+0x44>
    1310:	8e 85       	ldd	r24, Y+14	; 0x0e
    1312:	88 23       	and	r24, r24
    1314:	29 f0       	breq	.+10     	; 0x1320 <ultrasonic_init_flags+0x44>
    1316:	6e e7       	ldi	r22, 0x7E	; 126
    1318:	74 e0       	ldi	r23, 0x04	; 4
    131a:	ce 01       	movw	r24, r28
    131c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <ultrasonic_init>:
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
    1330:	8b 01       	movw	r16, r22
    1332:	0e 94 6e 09 	call	0x12dc	; 0x12dc <ultrasonic_init_flags>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	8e 87       	std	Y+14, r24	; 0x0e
    133a:	01 15       	cp	r16, r1
    133c:	11 05       	cpc	r17, r1
    133e:	19 f4       	brne	.+6      	; 0x1346 <ultrasonic_init+0x20>
    1340:	18 8a       	std	Y+16, r1	; 0x10
    1342:	1f 86       	std	Y+15, r1	; 0x0f
    1344:	0a c0       	rjmp	.+20     	; 0x135a <ultrasonic_init+0x34>
    1346:	18 8b       	std	Y+16, r17	; 0x10
    1348:	0f 87       	std	Y+15, r16	; 0x0f
    134a:	8e 85       	ldd	r24, Y+14	; 0x0e
    134c:	88 23       	and	r24, r24
    134e:	29 f0       	breq	.+10     	; 0x135a <ultrasonic_init+0x34>
    1350:	6d e9       	ldi	r22, 0x9D	; 157
    1352:	74 e0       	ldi	r23, 0x04	; 4
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <ultrasonic_timeout_clear>:
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	fc 01       	movw	r30, r24
    136c:	25 85       	ldd	r18, Z+13	; 0x0d
    136e:	26 30       	cpi	r18, 0x06	; 6
    1370:	71 f4       	brne	.+28     	; 0x138e <ultrasonic_timeout_clear+0x2a>
    1372:	16 2f       	mov	r17, r22
    1374:	ec 01       	movw	r28, r24
    1376:	0e 94 6e 09 	call	0x12dc	; 0x12dc <ultrasonic_init_flags>
    137a:	1e 87       	std	Y+14, r17	; 0x0e
    137c:	1e 85       	ldd	r17, Y+14	; 0x0e
    137e:	11 23       	and	r17, r17
    1380:	41 f0       	breq	.+16     	; 0x1392 <ultrasonic_timeout_clear+0x2e>
    1382:	61 e3       	ldi	r22, 0x31	; 49
    1384:	73 e0       	ldi	r23, 0x03	; 3
    1386:	ce 01       	movw	r24, r28
    1388:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <ultrasonic_timeout_clear+0x30>
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <ultrasonic_timeout_clear+0x30>
    1392:	11 e0       	ldi	r17, 0x01	; 1
    1394:	81 2f       	mov	r24, r17
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	08 95       	ret

0000139e <ultrasonic_start>:
    139e:	cf 93       	push	r28
    13a0:	fc 01       	movw	r30, r24
    13a2:	85 85       	ldd	r24, Z+13	; 0x0d
    13a4:	88 23       	and	r24, r24
    13a6:	19 f0       	breq	.+6      	; 0x13ae <ultrasonic_start+0x10>
    13a8:	85 85       	ldd	r24, Z+13	; 0x0d
    13aa:	85 30       	cpi	r24, 0x05	; 5
    13ac:	c1 f4       	brne	.+48     	; 0x13de <ultrasonic_start+0x40>
    13ae:	84 85       	ldd	r24, Z+12	; 0x0c
    13b0:	85 ff       	sbrs	r24, 5
    13b2:	0b c0       	rjmp	.+22     	; 0x13ca <ultrasonic_start+0x2c>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	85 87       	std	Z+13, r24	; 0x0d
    13b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    13ba:	cc 23       	and	r28, r28
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <ultrasonic_start+0x54>
    13be:	69 eb       	ldi	r22, 0xB9	; 185
    13c0:	74 e0       	ldi	r23, 0x04	; 4
    13c2:	cf 01       	movw	r24, r30
    13c4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    13c8:	15 c0       	rjmp	.+42     	; 0x13f4 <ultrasonic_start+0x56>
    13ca:	c6 85       	ldd	r28, Z+14	; 0x0e
    13cc:	cc 23       	and	r28, r28
    13ce:	91 f0       	breq	.+36     	; 0x13f4 <ultrasonic_start+0x56>
    13d0:	68 ee       	ldi	r22, 0xE8	; 232
    13d2:	74 e0       	ldi	r23, 0x04	; 4
    13d4:	cf 01       	movw	r24, r30
    13d6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    13da:	c0 e0       	ldi	r28, 0x00	; 0
    13dc:	0b c0       	rjmp	.+22     	; 0x13f4 <ultrasonic_start+0x56>
    13de:	c6 85       	ldd	r28, Z+14	; 0x0e
    13e0:	cc 23       	and	r28, r28
    13e2:	41 f0       	breq	.+16     	; 0x13f4 <ultrasonic_start+0x56>
    13e4:	6f e1       	ldi	r22, 0x1F	; 31
    13e6:	75 e0       	ldi	r23, 0x05	; 5
    13e8:	cf 01       	movw	r24, r30
    13ea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <ultrasonic_start+0x56>
    13f2:	c1 e0       	ldi	r28, 0x01	; 1
    13f4:	8c 2f       	mov	r24, r28
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <ultrasonic_update>:
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	71 f1       	breq	.+92     	; 0x1462 <ultrasonic_update+0x68>
    1406:	28 f4       	brcc	.+10     	; 0x1412 <ultrasonic_update+0x18>
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	49 f0       	breq	.+18     	; 0x141e <ultrasonic_update+0x24>
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	a1 f0       	breq	.+40     	; 0x1438 <ultrasonic_update+0x3e>
    1410:	55 c0       	rjmp	.+170    	; 0x14bc <ultrasonic_update+0xc2>
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	e1 f1       	breq	.+120    	; 0x148e <ultrasonic_update+0x94>
    1416:	86 30       	cpi	r24, 0x06	; 6
    1418:	09 f4       	brne	.+2      	; 0x141c <ultrasonic_update+0x22>
    141a:	4d c0       	rjmp	.+154    	; 0x14b6 <ultrasonic_update+0xbc>
    141c:	4f c0       	rjmp	.+158    	; 0x14bc <ultrasonic_update+0xc2>
    141e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1420:	81 ff       	sbrs	r24, 1
    1422:	4c c0       	rjmp	.+152    	; 0x14bc <ultrasonic_update+0xc2>
    1424:	8e 85       	ldd	r24, Y+14	; 0x0e
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <ultrasonic_update+0x32>
    142a:	48 c0       	rjmp	.+144    	; 0x14bc <ultrasonic_update+0xc2>
    142c:	6c e4       	ldi	r22, 0x4C	; 76
    142e:	75 e0       	ldi	r23, 0x05	; 5
    1430:	ce 01       	movw	r24, r28
    1432:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    1436:	42 c0       	rjmp	.+132    	; 0x14bc <ultrasonic_update+0xc2>
    1438:	8c 85       	ldd	r24, Y+12	; 0x0c
    143a:	84 fd       	sbrc	r24, 4
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <ultrasonic_update+0x5c>
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	8d 87       	std	Y+13, r24	; 0x0d
    1442:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <ultrasonic_hal_echo_setFallingEdge>
    1446:	8e 85       	ldd	r24, Y+14	; 0x0e
    1448:	88 23       	and	r24, r24
    144a:	29 f0       	breq	.+10     	; 0x1456 <ultrasonic_update+0x5c>
    144c:	6b e6       	ldi	r22, 0x6B	; 107
    144e:	75 e0       	ldi	r23, 0x05	; 5
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    1456:	8c 85       	ldd	r24, Y+12	; 0x0c
    1458:	83 ff       	sbrs	r24, 3
    145a:	30 c0       	rjmp	.+96     	; 0x14bc <ultrasonic_update+0xc2>
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	8d 87       	std	Y+13, r24	; 0x0d
    1460:	2d c0       	rjmp	.+90     	; 0x14bc <ultrasonic_update+0xc2>
    1462:	8c 85       	ldd	r24, Y+12	; 0x0c
    1464:	86 ff       	sbrs	r24, 6
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <ultrasonic_update+0x88>
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	8d 87       	std	Y+13, r24	; 0x0d
    146c:	8e 85       	ldd	r24, Y+14	; 0x0e
    146e:	88 23       	and	r24, r24
    1470:	29 f0       	breq	.+10     	; 0x147c <ultrasonic_update+0x82>
    1472:	68 e8       	ldi	r22, 0x88	; 136
    1474:	75 e0       	ldi	r23, 0x05	; 5
    1476:	ce 01       	movw	r24, r28
    1478:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    147c:	8c 85       	ldd	r24, Y+12	; 0x0c
    147e:	84 60       	ori	r24, 0x04	; 4
    1480:	8c 87       	std	Y+12, r24	; 0x0c
    1482:	8c 85       	ldd	r24, Y+12	; 0x0c
    1484:	83 ff       	sbrs	r24, 3
    1486:	1a c0       	rjmp	.+52     	; 0x14bc <ultrasonic_update+0xc2>
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	8d 87       	std	Y+13, r24	; 0x0d
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <ultrasonic_update+0xc2>
    148e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1490:	82 ff       	sbrs	r24, 2
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <ultrasonic_update+0xc2>
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 1f 09 	call	0x123e	; 0x123e <ultrasonic_calculate_distance>
    149a:	8c 85       	ldd	r24, Y+12	; 0x0c
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	8c 87       	std	Y+12, r24	; 0x0c
    14a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a2:	88 23       	and	r24, r24
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <ultrasonic_update+0xb6>
    14a6:	6f e9       	ldi	r22, 0x9F	; 159
    14a8:	75 e0       	ldi	r23, 0x05	; 5
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ultrasonic_print>
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	8d 87       	std	Y+13, r24	; 0x0d
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <ultrasonic_update+0xc2>
    14b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b8:	88 60       	ori	r24, 0x08	; 8
    14ba:	8c 87       	std	Y+12, r24	; 0x0c
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <__divmodhi4>:
    14c2:	97 fb       	bst	r25, 7
    14c4:	07 2e       	mov	r0, r23
    14c6:	16 f4       	brtc	.+4      	; 0x14cc <__divmodhi4+0xa>
    14c8:	00 94       	com	r0
    14ca:	07 d0       	rcall	.+14     	; 0x14da <__divmodhi4_neg1>
    14cc:	77 fd       	sbrc	r23, 7
    14ce:	09 d0       	rcall	.+18     	; 0x14e2 <__divmodhi4_neg2>
    14d0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__udivmodhi4>
    14d4:	07 fc       	sbrc	r0, 7
    14d6:	05 d0       	rcall	.+10     	; 0x14e2 <__divmodhi4_neg2>
    14d8:	3e f4       	brtc	.+14     	; 0x14e8 <__divmodhi4_exit>

000014da <__divmodhi4_neg1>:
    14da:	90 95       	com	r25
    14dc:	81 95       	neg	r24
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	08 95       	ret

000014e2 <__divmodhi4_neg2>:
    14e2:	70 95       	com	r23
    14e4:	61 95       	neg	r22
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255

000014e8 <__divmodhi4_exit>:
    14e8:	08 95       	ret

000014ea <__udivmodsi4>:
    14ea:	a1 e2       	ldi	r26, 0x21	; 33
    14ec:	1a 2e       	mov	r1, r26
    14ee:	aa 1b       	sub	r26, r26
    14f0:	bb 1b       	sub	r27, r27
    14f2:	fd 01       	movw	r30, r26
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <__udivmodsi4_ep>

000014f6 <__udivmodsi4_loop>:
    14f6:	aa 1f       	adc	r26, r26
    14f8:	bb 1f       	adc	r27, r27
    14fa:	ee 1f       	adc	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	a2 17       	cp	r26, r18
    1500:	b3 07       	cpc	r27, r19
    1502:	e4 07       	cpc	r30, r20
    1504:	f5 07       	cpc	r31, r21
    1506:	20 f0       	brcs	.+8      	; 0x1510 <__udivmodsi4_ep>
    1508:	a2 1b       	sub	r26, r18
    150a:	b3 0b       	sbc	r27, r19
    150c:	e4 0b       	sbc	r30, r20
    150e:	f5 0b       	sbc	r31, r21

00001510 <__udivmodsi4_ep>:
    1510:	66 1f       	adc	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	1a 94       	dec	r1
    151a:	69 f7       	brne	.-38     	; 0x14f6 <__udivmodsi4_loop>
    151c:	60 95       	com	r22
    151e:	70 95       	com	r23
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	9b 01       	movw	r18, r22
    1526:	ac 01       	movw	r20, r24
    1528:	bd 01       	movw	r22, r26
    152a:	cf 01       	movw	r24, r30
    152c:	08 95       	ret

0000152e <__umulhisi3>:
    152e:	a2 9f       	mul	r26, r18
    1530:	b0 01       	movw	r22, r0
    1532:	b3 9f       	mul	r27, r19
    1534:	c0 01       	movw	r24, r0
    1536:	a3 9f       	mul	r26, r19
    1538:	70 0d       	add	r23, r0
    153a:	81 1d       	adc	r24, r1
    153c:	11 24       	eor	r1, r1
    153e:	91 1d       	adc	r25, r1
    1540:	b2 9f       	mul	r27, r18
    1542:	70 0d       	add	r23, r0
    1544:	81 1d       	adc	r24, r1
    1546:	11 24       	eor	r1, r1
    1548:	91 1d       	adc	r25, r1
    154a:	08 95       	ret

0000154c <__muluhisi3>:
    154c:	0e 94 97 0a 	call	0x152e	; 0x152e <__umulhisi3>
    1550:	a5 9f       	mul	r26, r21
    1552:	90 0d       	add	r25, r0
    1554:	b4 9f       	mul	r27, r20
    1556:	90 0d       	add	r25, r0
    1558:	a4 9f       	mul	r26, r20
    155a:	80 0d       	add	r24, r0
    155c:	91 1d       	adc	r25, r1
    155e:	11 24       	eor	r1, r1
    1560:	08 95       	ret

00001562 <__udivmodhi4>:
    1562:	aa 1b       	sub	r26, r26
    1564:	bb 1b       	sub	r27, r27
    1566:	51 e1       	ldi	r21, 0x11	; 17
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <__udivmodhi4_ep>

0000156a <__udivmodhi4_loop>:
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	a6 17       	cp	r26, r22
    1570:	b7 07       	cpc	r27, r23
    1572:	10 f0       	brcs	.+4      	; 0x1578 <__udivmodhi4_ep>
    1574:	a6 1b       	sub	r26, r22
    1576:	b7 0b       	sbc	r27, r23

00001578 <__udivmodhi4_ep>:
    1578:	88 1f       	adc	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	5a 95       	dec	r21
    157e:	a9 f7       	brne	.-22     	; 0x156a <__udivmodhi4_loop>
    1580:	80 95       	com	r24
    1582:	90 95       	com	r25
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	08 95       	ret

0000158a <printf>:
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb ec       	ldi	r30, 0xCB	; 203
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__prologue_saves__+0x20>
    1596:	ae 01       	movw	r20, r28
    1598:	4b 5f       	subi	r20, 0xFB	; 251
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    159c:	fa 01       	movw	r30, r20
    159e:	61 91       	ld	r22, Z+
    15a0:	71 91       	ld	r23, Z+
    15a2:	af 01       	movw	r20, r30
    15a4:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <__iob+0x2>
    15a8:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <__iob+0x3>
    15ac:	0e 94 0b 0b 	call	0x1616	; 0x1616 <vfprintf>
    15b0:	e2 e0       	ldi	r30, 0x02	; 2
    15b2:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__epilogue_restores__+0x20>

000015b6 <puts>:
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	e0 91 63 06 	lds	r30, 0x0663	; 0x800663 <__iob+0x2>
    15c2:	f0 91 64 06 	lds	r31, 0x0664	; 0x800664 <__iob+0x3>
    15c6:	23 81       	ldd	r18, Z+3	; 0x03
    15c8:	21 ff       	sbrs	r18, 1
    15ca:	1b c0       	rjmp	.+54     	; 0x1602 <puts+0x4c>
    15cc:	8c 01       	movw	r16, r24
    15ce:	d0 e0       	ldi	r29, 0x00	; 0
    15d0:	c0 e0       	ldi	r28, 0x00	; 0
    15d2:	f8 01       	movw	r30, r16
    15d4:	81 91       	ld	r24, Z+
    15d6:	8f 01       	movw	r16, r30
    15d8:	60 91 63 06 	lds	r22, 0x0663	; 0x800663 <__iob+0x2>
    15dc:	70 91 64 06 	lds	r23, 0x0664	; 0x800664 <__iob+0x3>
    15e0:	db 01       	movw	r26, r22
    15e2:	18 96       	adiw	r26, 0x08	; 8
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	19 97       	sbiw	r26, 0x09	; 9
    15ea:	88 23       	and	r24, r24
    15ec:	31 f0       	breq	.+12     	; 0x15fa <puts+0x44>
    15ee:	09 95       	icall
    15f0:	89 2b       	or	r24, r25
    15f2:	79 f3       	breq	.-34     	; 0x15d2 <puts+0x1c>
    15f4:	df ef       	ldi	r29, 0xFF	; 255
    15f6:	cf ef       	ldi	r28, 0xFF	; 255
    15f8:	ec cf       	rjmp	.-40     	; 0x15d2 <puts+0x1c>
    15fa:	8a e0       	ldi	r24, 0x0A	; 10
    15fc:	09 95       	icall
    15fe:	89 2b       	or	r24, r25
    1600:	19 f0       	breq	.+6      	; 0x1608 <puts+0x52>
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	02 c0       	rjmp	.+4      	; 0x160c <puts+0x56>
    1608:	8d 2f       	mov	r24, r29
    160a:	9c 2f       	mov	r25, r28
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <vfprintf>:
    1616:	ab e0       	ldi	r26, 0x0B	; 11
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e1       	ldi	r30, 0x11	; 17
    161c:	fb e0       	ldi	r31, 0x0B	; 11
    161e:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__prologue_saves__>
    1622:	6c 01       	movw	r12, r24
    1624:	7b 01       	movw	r14, r22
    1626:	8a 01       	movw	r16, r20
    1628:	fc 01       	movw	r30, r24
    162a:	17 82       	std	Z+7, r1	; 0x07
    162c:	16 82       	std	Z+6, r1	; 0x06
    162e:	83 81       	ldd	r24, Z+3	; 0x03
    1630:	81 ff       	sbrs	r24, 1
    1632:	cc c1       	rjmp	.+920    	; 0x19cc <vfprintf+0x3b6>
    1634:	ce 01       	movw	r24, r28
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	3c 01       	movw	r6, r24
    163a:	f6 01       	movw	r30, r12
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	f7 01       	movw	r30, r14
    1640:	93 fd       	sbrc	r25, 3
    1642:	85 91       	lpm	r24, Z+
    1644:	93 ff       	sbrs	r25, 3
    1646:	81 91       	ld	r24, Z+
    1648:	7f 01       	movw	r14, r30
    164a:	88 23       	and	r24, r24
    164c:	09 f4       	brne	.+2      	; 0x1650 <vfprintf+0x3a>
    164e:	ba c1       	rjmp	.+884    	; 0x19c4 <vfprintf+0x3ae>
    1650:	85 32       	cpi	r24, 0x25	; 37
    1652:	39 f4       	brne	.+14     	; 0x1662 <vfprintf+0x4c>
    1654:	93 fd       	sbrc	r25, 3
    1656:	85 91       	lpm	r24, Z+
    1658:	93 ff       	sbrs	r25, 3
    165a:	81 91       	ld	r24, Z+
    165c:	7f 01       	movw	r14, r30
    165e:	85 32       	cpi	r24, 0x25	; 37
    1660:	29 f4       	brne	.+10     	; 0x166c <vfprintf+0x56>
    1662:	b6 01       	movw	r22, r12
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    166a:	e7 cf       	rjmp	.-50     	; 0x163a <vfprintf+0x24>
    166c:	91 2c       	mov	r9, r1
    166e:	21 2c       	mov	r2, r1
    1670:	31 2c       	mov	r3, r1
    1672:	ff e1       	ldi	r31, 0x1F	; 31
    1674:	f3 15       	cp	r31, r3
    1676:	d8 f0       	brcs	.+54     	; 0x16ae <vfprintf+0x98>
    1678:	8b 32       	cpi	r24, 0x2B	; 43
    167a:	79 f0       	breq	.+30     	; 0x169a <vfprintf+0x84>
    167c:	38 f4       	brcc	.+14     	; 0x168c <vfprintf+0x76>
    167e:	80 32       	cpi	r24, 0x20	; 32
    1680:	79 f0       	breq	.+30     	; 0x16a0 <vfprintf+0x8a>
    1682:	83 32       	cpi	r24, 0x23	; 35
    1684:	a1 f4       	brne	.+40     	; 0x16ae <vfprintf+0x98>
    1686:	23 2d       	mov	r18, r3
    1688:	20 61       	ori	r18, 0x10	; 16
    168a:	1d c0       	rjmp	.+58     	; 0x16c6 <vfprintf+0xb0>
    168c:	8d 32       	cpi	r24, 0x2D	; 45
    168e:	61 f0       	breq	.+24     	; 0x16a8 <vfprintf+0x92>
    1690:	80 33       	cpi	r24, 0x30	; 48
    1692:	69 f4       	brne	.+26     	; 0x16ae <vfprintf+0x98>
    1694:	23 2d       	mov	r18, r3
    1696:	21 60       	ori	r18, 0x01	; 1
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <vfprintf+0xb0>
    169a:	83 2d       	mov	r24, r3
    169c:	82 60       	ori	r24, 0x02	; 2
    169e:	38 2e       	mov	r3, r24
    16a0:	e3 2d       	mov	r30, r3
    16a2:	e4 60       	ori	r30, 0x04	; 4
    16a4:	3e 2e       	mov	r3, r30
    16a6:	2a c0       	rjmp	.+84     	; 0x16fc <vfprintf+0xe6>
    16a8:	f3 2d       	mov	r31, r3
    16aa:	f8 60       	ori	r31, 0x08	; 8
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <vfprintf+0xd2>
    16ae:	37 fc       	sbrc	r3, 7
    16b0:	2d c0       	rjmp	.+90     	; 0x170c <vfprintf+0xf6>
    16b2:	20 ed       	ldi	r18, 0xD0	; 208
    16b4:	28 0f       	add	r18, r24
    16b6:	2a 30       	cpi	r18, 0x0A	; 10
    16b8:	40 f0       	brcs	.+16     	; 0x16ca <vfprintf+0xb4>
    16ba:	8e 32       	cpi	r24, 0x2E	; 46
    16bc:	b9 f4       	brne	.+46     	; 0x16ec <vfprintf+0xd6>
    16be:	36 fc       	sbrc	r3, 6
    16c0:	81 c1       	rjmp	.+770    	; 0x19c4 <vfprintf+0x3ae>
    16c2:	23 2d       	mov	r18, r3
    16c4:	20 64       	ori	r18, 0x40	; 64
    16c6:	32 2e       	mov	r3, r18
    16c8:	19 c0       	rjmp	.+50     	; 0x16fc <vfprintf+0xe6>
    16ca:	36 fe       	sbrs	r3, 6
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <vfprintf+0xc4>
    16ce:	8a e0       	ldi	r24, 0x0A	; 10
    16d0:	98 9e       	mul	r9, r24
    16d2:	20 0d       	add	r18, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	92 2e       	mov	r9, r18
    16d8:	11 c0       	rjmp	.+34     	; 0x16fc <vfprintf+0xe6>
    16da:	ea e0       	ldi	r30, 0x0A	; 10
    16dc:	2e 9e       	mul	r2, r30
    16de:	20 0d       	add	r18, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	22 2e       	mov	r2, r18
    16e4:	f3 2d       	mov	r31, r3
    16e6:	f0 62       	ori	r31, 0x20	; 32
    16e8:	3f 2e       	mov	r3, r31
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <vfprintf+0xe6>
    16ec:	8c 36       	cpi	r24, 0x6C	; 108
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <vfprintf+0xe2>
    16f0:	83 2d       	mov	r24, r3
    16f2:	80 68       	ori	r24, 0x80	; 128
    16f4:	38 2e       	mov	r3, r24
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0xe6>
    16f8:	88 36       	cpi	r24, 0x68	; 104
    16fa:	41 f4       	brne	.+16     	; 0x170c <vfprintf+0xf6>
    16fc:	f7 01       	movw	r30, r14
    16fe:	93 fd       	sbrc	r25, 3
    1700:	85 91       	lpm	r24, Z+
    1702:	93 ff       	sbrs	r25, 3
    1704:	81 91       	ld	r24, Z+
    1706:	7f 01       	movw	r14, r30
    1708:	81 11       	cpse	r24, r1
    170a:	b3 cf       	rjmp	.-154    	; 0x1672 <vfprintf+0x5c>
    170c:	98 2f       	mov	r25, r24
    170e:	9f 7d       	andi	r25, 0xDF	; 223
    1710:	95 54       	subi	r25, 0x45	; 69
    1712:	93 30       	cpi	r25, 0x03	; 3
    1714:	28 f4       	brcc	.+10     	; 0x1720 <vfprintf+0x10a>
    1716:	0c 5f       	subi	r16, 0xFC	; 252
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	9f e3       	ldi	r25, 0x3F	; 63
    171c:	99 83       	std	Y+1, r25	; 0x01
    171e:	0d c0       	rjmp	.+26     	; 0x173a <vfprintf+0x124>
    1720:	83 36       	cpi	r24, 0x63	; 99
    1722:	31 f0       	breq	.+12     	; 0x1730 <vfprintf+0x11a>
    1724:	83 37       	cpi	r24, 0x73	; 115
    1726:	71 f0       	breq	.+28     	; 0x1744 <vfprintf+0x12e>
    1728:	83 35       	cpi	r24, 0x53	; 83
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x118>
    172c:	59 c0       	rjmp	.+178    	; 0x17e0 <vfprintf+0x1ca>
    172e:	21 c0       	rjmp	.+66     	; 0x1772 <vfprintf+0x15c>
    1730:	f8 01       	movw	r30, r16
    1732:	80 81       	ld	r24, Z
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	0e 5f       	subi	r16, 0xFE	; 254
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	88 24       	eor	r8, r8
    173c:	83 94       	inc	r8
    173e:	91 2c       	mov	r9, r1
    1740:	53 01       	movw	r10, r6
    1742:	13 c0       	rjmp	.+38     	; 0x176a <vfprintf+0x154>
    1744:	28 01       	movw	r4, r16
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	4f 0e       	add	r4, r31
    174a:	51 1c       	adc	r5, r1
    174c:	f8 01       	movw	r30, r16
    174e:	a0 80       	ld	r10, Z
    1750:	b1 80       	ldd	r11, Z+1	; 0x01
    1752:	36 fe       	sbrs	r3, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x146>
    1756:	69 2d       	mov	r22, r9
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x14a>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c5 01       	movw	r24, r10
    1762:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <strnlen>
    1766:	4c 01       	movw	r8, r24
    1768:	82 01       	movw	r16, r4
    176a:	f3 2d       	mov	r31, r3
    176c:	ff 77       	andi	r31, 0x7F	; 127
    176e:	3f 2e       	mov	r3, r31
    1770:	16 c0       	rjmp	.+44     	; 0x179e <vfprintf+0x188>
    1772:	28 01       	movw	r4, r16
    1774:	22 e0       	ldi	r18, 0x02	; 2
    1776:	42 0e       	add	r4, r18
    1778:	51 1c       	adc	r5, r1
    177a:	f8 01       	movw	r30, r16
    177c:	a0 80       	ld	r10, Z
    177e:	b1 80       	ldd	r11, Z+1	; 0x01
    1780:	36 fe       	sbrs	r3, 6
    1782:	03 c0       	rjmp	.+6      	; 0x178a <vfprintf+0x174>
    1784:	69 2d       	mov	r22, r9
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x178>
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	7f ef       	ldi	r23, 0xFF	; 255
    178e:	c5 01       	movw	r24, r10
    1790:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <strnlen_P>
    1794:	4c 01       	movw	r8, r24
    1796:	f3 2d       	mov	r31, r3
    1798:	f0 68       	ori	r31, 0x80	; 128
    179a:	3f 2e       	mov	r3, r31
    179c:	82 01       	movw	r16, r4
    179e:	33 fc       	sbrc	r3, 3
    17a0:	1b c0       	rjmp	.+54     	; 0x17d8 <vfprintf+0x1c2>
    17a2:	82 2d       	mov	r24, r2
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	88 16       	cp	r8, r24
    17a8:	99 06       	cpc	r9, r25
    17aa:	b0 f4       	brcc	.+44     	; 0x17d8 <vfprintf+0x1c2>
    17ac:	b6 01       	movw	r22, r12
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    17b6:	2a 94       	dec	r2
    17b8:	f4 cf       	rjmp	.-24     	; 0x17a2 <vfprintf+0x18c>
    17ba:	f5 01       	movw	r30, r10
    17bc:	37 fc       	sbrc	r3, 7
    17be:	85 91       	lpm	r24, Z+
    17c0:	37 fe       	sbrs	r3, 7
    17c2:	81 91       	ld	r24, Z+
    17c4:	5f 01       	movw	r10, r30
    17c6:	b6 01       	movw	r22, r12
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    17ce:	21 10       	cpse	r2, r1
    17d0:	2a 94       	dec	r2
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	82 1a       	sub	r8, r18
    17d6:	91 08       	sbc	r9, r1
    17d8:	81 14       	cp	r8, r1
    17da:	91 04       	cpc	r9, r1
    17dc:	71 f7       	brne	.-36     	; 0x17ba <vfprintf+0x1a4>
    17de:	e8 c0       	rjmp	.+464    	; 0x19b0 <vfprintf+0x39a>
    17e0:	84 36       	cpi	r24, 0x64	; 100
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <vfprintf+0x1d2>
    17e4:	89 36       	cpi	r24, 0x69	; 105
    17e6:	41 f5       	brne	.+80     	; 0x1838 <vfprintf+0x222>
    17e8:	f8 01       	movw	r30, r16
    17ea:	37 fe       	sbrs	r3, 7
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <vfprintf+0x1e6>
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	08 c0       	rjmp	.+16     	; 0x180c <vfprintf+0x1f6>
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	07 2e       	mov	r0, r23
    1802:	00 0c       	add	r0, r0
    1804:	88 0b       	sbc	r24, r24
    1806:	99 0b       	sbc	r25, r25
    1808:	0e 5f       	subi	r16, 0xFE	; 254
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	f3 2d       	mov	r31, r3
    180e:	ff 76       	andi	r31, 0x6F	; 111
    1810:	3f 2e       	mov	r3, r31
    1812:	97 ff       	sbrs	r25, 7
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x212>
    1816:	90 95       	com	r25
    1818:	80 95       	com	r24
    181a:	70 95       	com	r23
    181c:	61 95       	neg	r22
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	8f 4f       	sbci	r24, 0xFF	; 255
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	f0 68       	ori	r31, 0x80	; 128
    1826:	3f 2e       	mov	r3, r31
    1828:	2a e0       	ldi	r18, 0x0A	; 10
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	a3 01       	movw	r20, r6
    182e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__ultoa_invert>
    1832:	88 2e       	mov	r8, r24
    1834:	86 18       	sub	r8, r6
    1836:	45 c0       	rjmp	.+138    	; 0x18c2 <vfprintf+0x2ac>
    1838:	85 37       	cpi	r24, 0x75	; 117
    183a:	31 f4       	brne	.+12     	; 0x1848 <vfprintf+0x232>
    183c:	23 2d       	mov	r18, r3
    183e:	2f 7e       	andi	r18, 0xEF	; 239
    1840:	b2 2e       	mov	r11, r18
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	25 c0       	rjmp	.+74     	; 0x1892 <vfprintf+0x27c>
    1848:	93 2d       	mov	r25, r3
    184a:	99 7f       	andi	r25, 0xF9	; 249
    184c:	b9 2e       	mov	r11, r25
    184e:	8f 36       	cpi	r24, 0x6F	; 111
    1850:	c1 f0       	breq	.+48     	; 0x1882 <vfprintf+0x26c>
    1852:	18 f4       	brcc	.+6      	; 0x185a <vfprintf+0x244>
    1854:	88 35       	cpi	r24, 0x58	; 88
    1856:	79 f0       	breq	.+30     	; 0x1876 <vfprintf+0x260>
    1858:	b5 c0       	rjmp	.+362    	; 0x19c4 <vfprintf+0x3ae>
    185a:	80 37       	cpi	r24, 0x70	; 112
    185c:	19 f0       	breq	.+6      	; 0x1864 <vfprintf+0x24e>
    185e:	88 37       	cpi	r24, 0x78	; 120
    1860:	21 f0       	breq	.+8      	; 0x186a <vfprintf+0x254>
    1862:	b0 c0       	rjmp	.+352    	; 0x19c4 <vfprintf+0x3ae>
    1864:	e9 2f       	mov	r30, r25
    1866:	e0 61       	ori	r30, 0x10	; 16
    1868:	be 2e       	mov	r11, r30
    186a:	b4 fe       	sbrs	r11, 4
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <vfprintf+0x272>
    186e:	fb 2d       	mov	r31, r11
    1870:	f4 60       	ori	r31, 0x04	; 4
    1872:	bf 2e       	mov	r11, r31
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <vfprintf+0x272>
    1876:	34 fe       	sbrs	r3, 4
    1878:	0a c0       	rjmp	.+20     	; 0x188e <vfprintf+0x278>
    187a:	29 2f       	mov	r18, r25
    187c:	26 60       	ori	r18, 0x06	; 6
    187e:	b2 2e       	mov	r11, r18
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x278>
    1882:	28 e0       	ldi	r18, 0x08	; 8
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <vfprintf+0x27c>
    1888:	20 e1       	ldi	r18, 0x10	; 16
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <vfprintf+0x27c>
    188e:	20 e1       	ldi	r18, 0x10	; 16
    1890:	32 e0       	ldi	r19, 0x02	; 2
    1892:	f8 01       	movw	r30, r16
    1894:	b7 fe       	sbrs	r11, 7
    1896:	07 c0       	rjmp	.+14     	; 0x18a6 <vfprintf+0x290>
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	0c 5f       	subi	r16, 0xFC	; 252
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <vfprintf+0x29c>
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 5f       	subi	r16, 0xFE	; 254
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	a3 01       	movw	r20, r6
    18b4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__ultoa_invert>
    18b8:	88 2e       	mov	r8, r24
    18ba:	86 18       	sub	r8, r6
    18bc:	fb 2d       	mov	r31, r11
    18be:	ff 77       	andi	r31, 0x7F	; 127
    18c0:	3f 2e       	mov	r3, r31
    18c2:	36 fe       	sbrs	r3, 6
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <vfprintf+0x2ca>
    18c6:	23 2d       	mov	r18, r3
    18c8:	2e 7f       	andi	r18, 0xFE	; 254
    18ca:	a2 2e       	mov	r10, r18
    18cc:	89 14       	cp	r8, r9
    18ce:	58 f4       	brcc	.+22     	; 0x18e6 <vfprintf+0x2d0>
    18d0:	34 fe       	sbrs	r3, 4
    18d2:	0b c0       	rjmp	.+22     	; 0x18ea <vfprintf+0x2d4>
    18d4:	32 fc       	sbrc	r3, 2
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <vfprintf+0x2d4>
    18d8:	83 2d       	mov	r24, r3
    18da:	8e 7e       	andi	r24, 0xEE	; 238
    18dc:	a8 2e       	mov	r10, r24
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <vfprintf+0x2d4>
    18e0:	b8 2c       	mov	r11, r8
    18e2:	a3 2c       	mov	r10, r3
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <vfprintf+0x2d6>
    18e6:	b8 2c       	mov	r11, r8
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x2d6>
    18ea:	b9 2c       	mov	r11, r9
    18ec:	a4 fe       	sbrs	r10, 4
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <vfprintf+0x2f8>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e8 0d       	add	r30, r8
    18f4:	f1 1d       	adc	r31, r1
    18f6:	80 81       	ld	r24, Z
    18f8:	80 33       	cpi	r24, 0x30	; 48
    18fa:	21 f4       	brne	.+8      	; 0x1904 <vfprintf+0x2ee>
    18fc:	9a 2d       	mov	r25, r10
    18fe:	99 7e       	andi	r25, 0xE9	; 233
    1900:	a9 2e       	mov	r10, r25
    1902:	09 c0       	rjmp	.+18     	; 0x1916 <vfprintf+0x300>
    1904:	a2 fe       	sbrs	r10, 2
    1906:	06 c0       	rjmp	.+12     	; 0x1914 <vfprintf+0x2fe>
    1908:	b3 94       	inc	r11
    190a:	b3 94       	inc	r11
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <vfprintf+0x300>
    190e:	8a 2d       	mov	r24, r10
    1910:	86 78       	andi	r24, 0x86	; 134
    1912:	09 f0       	breq	.+2      	; 0x1916 <vfprintf+0x300>
    1914:	b3 94       	inc	r11
    1916:	a3 fc       	sbrc	r10, 3
    1918:	11 c0       	rjmp	.+34     	; 0x193c <vfprintf+0x326>
    191a:	a0 fe       	sbrs	r10, 0
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x314>
    191e:	b2 14       	cp	r11, r2
    1920:	88 f4       	brcc	.+34     	; 0x1944 <vfprintf+0x32e>
    1922:	28 0c       	add	r2, r8
    1924:	92 2c       	mov	r9, r2
    1926:	9b 18       	sub	r9, r11
    1928:	0e c0       	rjmp	.+28     	; 0x1946 <vfprintf+0x330>
    192a:	b2 14       	cp	r11, r2
    192c:	60 f4       	brcc	.+24     	; 0x1946 <vfprintf+0x330>
    192e:	b6 01       	movw	r22, r12
    1930:	80 e2       	ldi	r24, 0x20	; 32
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1938:	b3 94       	inc	r11
    193a:	f7 cf       	rjmp	.-18     	; 0x192a <vfprintf+0x314>
    193c:	b2 14       	cp	r11, r2
    193e:	18 f4       	brcc	.+6      	; 0x1946 <vfprintf+0x330>
    1940:	2b 18       	sub	r2, r11
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <vfprintf+0x332>
    1944:	98 2c       	mov	r9, r8
    1946:	21 2c       	mov	r2, r1
    1948:	a4 fe       	sbrs	r10, 4
    194a:	10 c0       	rjmp	.+32     	; 0x196c <vfprintf+0x356>
    194c:	b6 01       	movw	r22, r12
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1956:	a2 fe       	sbrs	r10, 2
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <vfprintf+0x372>
    195a:	a1 fc       	sbrc	r10, 1
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <vfprintf+0x34e>
    195e:	88 e7       	ldi	r24, 0x78	; 120
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x352>
    1964:	88 e5       	ldi	r24, 0x58	; 88
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	b6 01       	movw	r22, r12
    196a:	0c c0       	rjmp	.+24     	; 0x1984 <vfprintf+0x36e>
    196c:	8a 2d       	mov	r24, r10
    196e:	86 78       	andi	r24, 0x86	; 134
    1970:	59 f0       	breq	.+22     	; 0x1988 <vfprintf+0x372>
    1972:	a1 fe       	sbrs	r10, 1
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x364>
    1976:	8b e2       	ldi	r24, 0x2B	; 43
    1978:	01 c0       	rjmp	.+2      	; 0x197c <vfprintf+0x366>
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	a7 fc       	sbrc	r10, 7
    197e:	8d e2       	ldi	r24, 0x2D	; 45
    1980:	b6 01       	movw	r22, r12
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1988:	89 14       	cp	r8, r9
    198a:	38 f4       	brcc	.+14     	; 0x199a <vfprintf+0x384>
    198c:	b6 01       	movw	r22, r12
    198e:	80 e3       	ldi	r24, 0x30	; 48
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1996:	9a 94       	dec	r9
    1998:	f7 cf       	rjmp	.-18     	; 0x1988 <vfprintf+0x372>
    199a:	8a 94       	dec	r8
    199c:	f3 01       	movw	r30, r6
    199e:	e8 0d       	add	r30, r8
    19a0:	f1 1d       	adc	r31, r1
    19a2:	80 81       	ld	r24, Z
    19a4:	b6 01       	movw	r22, r12
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    19ac:	81 10       	cpse	r8, r1
    19ae:	f5 cf       	rjmp	.-22     	; 0x199a <vfprintf+0x384>
    19b0:	22 20       	and	r2, r2
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <vfprintf+0x3a0>
    19b4:	42 ce       	rjmp	.-892    	; 0x163a <vfprintf+0x24>
    19b6:	b6 01       	movw	r22, r12
    19b8:	80 e2       	ldi	r24, 0x20	; 32
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    19c0:	2a 94       	dec	r2
    19c2:	f6 cf       	rjmp	.-20     	; 0x19b0 <vfprintf+0x39a>
    19c4:	f6 01       	movw	r30, r12
    19c6:	86 81       	ldd	r24, Z+6	; 0x06
    19c8:	97 81       	ldd	r25, Z+7	; 0x07
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfprintf+0x3ba>
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	9f ef       	ldi	r25, 0xFF	; 255
    19d0:	2b 96       	adiw	r28, 0x0b	; 11
    19d2:	e2 e1       	ldi	r30, 0x12	; 18
    19d4:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__epilogue_restores__>

000019d8 <strnlen_P>:
    19d8:	fc 01       	movw	r30, r24
    19da:	05 90       	lpm	r0, Z+
    19dc:	61 50       	subi	r22, 0x01	; 1
    19de:	70 40       	sbci	r23, 0x00	; 0
    19e0:	01 10       	cpse	r0, r1
    19e2:	d8 f7       	brcc	.-10     	; 0x19da <strnlen_P+0x2>
    19e4:	80 95       	com	r24
    19e6:	90 95       	com	r25
    19e8:	8e 0f       	add	r24, r30
    19ea:	9f 1f       	adc	r25, r31
    19ec:	08 95       	ret

000019ee <strnlen>:
    19ee:	fc 01       	movw	r30, r24
    19f0:	61 50       	subi	r22, 0x01	; 1
    19f2:	70 40       	sbci	r23, 0x00	; 0
    19f4:	01 90       	ld	r0, Z+
    19f6:	01 10       	cpse	r0, r1
    19f8:	d8 f7       	brcc	.-10     	; 0x19f0 <strnlen+0x2>
    19fa:	80 95       	com	r24
    19fc:	90 95       	com	r25
    19fe:	8e 0f       	add	r24, r30
    1a00:	9f 1f       	adc	r25, r31
    1a02:	08 95       	ret

00001a04 <fputc>:
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	23 81       	ldd	r18, Z+3	; 0x03
    1a10:	21 fd       	sbrc	r18, 1
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <fputc+0x16>
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	2c c0       	rjmp	.+88     	; 0x1a72 <fputc+0x6e>
    1a1a:	22 ff       	sbrs	r18, 2
    1a1c:	16 c0       	rjmp	.+44     	; 0x1a4a <fputc+0x46>
    1a1e:	46 81       	ldd	r20, Z+6	; 0x06
    1a20:	57 81       	ldd	r21, Z+7	; 0x07
    1a22:	24 81       	ldd	r18, Z+4	; 0x04
    1a24:	35 81       	ldd	r19, Z+5	; 0x05
    1a26:	42 17       	cp	r20, r18
    1a28:	53 07       	cpc	r21, r19
    1a2a:	44 f4       	brge	.+16     	; 0x1a3c <fputc+0x38>
    1a2c:	a0 81       	ld	r26, Z
    1a2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a30:	9d 01       	movw	r18, r26
    1a32:	2f 5f       	subi	r18, 0xFF	; 255
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	31 83       	std	Z+1, r19	; 0x01
    1a38:	20 83       	st	Z, r18
    1a3a:	8c 93       	st	X, r24
    1a3c:	26 81       	ldd	r18, Z+6	; 0x06
    1a3e:	37 81       	ldd	r19, Z+7	; 0x07
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	37 83       	std	Z+7, r19	; 0x07
    1a46:	26 83       	std	Z+6, r18	; 0x06
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <fputc+0x6e>
    1a4a:	8b 01       	movw	r16, r22
    1a4c:	ec 01       	movw	r28, r24
    1a4e:	fb 01       	movw	r30, r22
    1a50:	00 84       	ldd	r0, Z+8	; 0x08
    1a52:	f1 85       	ldd	r31, Z+9	; 0x09
    1a54:	e0 2d       	mov	r30, r0
    1a56:	09 95       	icall
    1a58:	89 2b       	or	r24, r25
    1a5a:	e1 f6       	brne	.-72     	; 0x1a14 <fputc+0x10>
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	16 96       	adiw	r26, 0x06	; 6
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	17 97       	sbiw	r26, 0x07	; 7
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	17 96       	adiw	r26, 0x07	; 7
    1a6a:	9c 93       	st	X, r25
    1a6c:	8e 93       	st	-X, r24
    1a6e:	16 97       	sbiw	r26, 0x06	; 6
    1a70:	ce 01       	movw	r24, r28
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <__ultoa_invert>:
    1a7c:	fa 01       	movw	r30, r20
    1a7e:	aa 27       	eor	r26, r26
    1a80:	28 30       	cpi	r18, 0x08	; 8
    1a82:	51 f1       	breq	.+84     	; 0x1ad8 <__ultoa_invert+0x5c>
    1a84:	20 31       	cpi	r18, 0x10	; 16
    1a86:	81 f1       	breq	.+96     	; 0x1ae8 <__ultoa_invert+0x6c>
    1a88:	e8 94       	clt
    1a8a:	6f 93       	push	r22
    1a8c:	6e 7f       	andi	r22, 0xFE	; 254
    1a8e:	6e 5f       	subi	r22, 0xFE	; 254
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	8f 4f       	sbci	r24, 0xFF	; 255
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	af 4f       	sbci	r26, 0xFF	; 255
    1a98:	b1 e0       	ldi	r27, 0x01	; 1
    1a9a:	3e d0       	rcall	.+124    	; 0x1b18 <__ultoa_invert+0x9c>
    1a9c:	b4 e0       	ldi	r27, 0x04	; 4
    1a9e:	3c d0       	rcall	.+120    	; 0x1b18 <__ultoa_invert+0x9c>
    1aa0:	67 0f       	add	r22, r23
    1aa2:	78 1f       	adc	r23, r24
    1aa4:	89 1f       	adc	r24, r25
    1aa6:	9a 1f       	adc	r25, r26
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	68 0f       	add	r22, r24
    1aac:	79 1f       	adc	r23, r25
    1aae:	8a 1f       	adc	r24, r26
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	6a 0f       	add	r22, r26
    1ab6:	71 1d       	adc	r23, r1
    1ab8:	81 1d       	adc	r24, r1
    1aba:	91 1d       	adc	r25, r1
    1abc:	a1 1d       	adc	r26, r1
    1abe:	20 d0       	rcall	.+64     	; 0x1b00 <__ultoa_invert+0x84>
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <__ultoa_invert+0x48>
    1ac2:	68 94       	set
    1ac4:	3f 91       	pop	r19
    1ac6:	2a e0       	ldi	r18, 0x0A	; 10
    1ac8:	26 9f       	mul	r18, r22
    1aca:	11 24       	eor	r1, r1
    1acc:	30 19       	sub	r19, r0
    1ace:	30 5d       	subi	r19, 0xD0	; 208
    1ad0:	31 93       	st	Z+, r19
    1ad2:	de f6       	brtc	.-74     	; 0x1a8a <__ultoa_invert+0xe>
    1ad4:	cf 01       	movw	r24, r30
    1ad6:	08 95       	ret
    1ad8:	46 2f       	mov	r20, r22
    1ada:	47 70       	andi	r20, 0x07	; 7
    1adc:	40 5d       	subi	r20, 0xD0	; 208
    1ade:	41 93       	st	Z+, r20
    1ae0:	b3 e0       	ldi	r27, 0x03	; 3
    1ae2:	0f d0       	rcall	.+30     	; 0x1b02 <__ultoa_invert+0x86>
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <__ultoa_invert+0x5c>
    1ae6:	f6 cf       	rjmp	.-20     	; 0x1ad4 <__ultoa_invert+0x58>
    1ae8:	46 2f       	mov	r20, r22
    1aea:	4f 70       	andi	r20, 0x0F	; 15
    1aec:	40 5d       	subi	r20, 0xD0	; 208
    1aee:	4a 33       	cpi	r20, 0x3A	; 58
    1af0:	18 f0       	brcs	.+6      	; 0x1af8 <__ultoa_invert+0x7c>
    1af2:	49 5d       	subi	r20, 0xD9	; 217
    1af4:	31 fd       	sbrc	r19, 1
    1af6:	40 52       	subi	r20, 0x20	; 32
    1af8:	41 93       	st	Z+, r20
    1afa:	02 d0       	rcall	.+4      	; 0x1b00 <__ultoa_invert+0x84>
    1afc:	a9 f7       	brne	.-22     	; 0x1ae8 <__ultoa_invert+0x6c>
    1afe:	ea cf       	rjmp	.-44     	; 0x1ad4 <__ultoa_invert+0x58>
    1b00:	b4 e0       	ldi	r27, 0x04	; 4
    1b02:	a6 95       	lsr	r26
    1b04:	97 95       	ror	r25
    1b06:	87 95       	ror	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	ba 95       	dec	r27
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <__ultoa_invert+0x86>
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	61 05       	cpc	r22, r1
    1b14:	71 05       	cpc	r23, r1
    1b16:	08 95       	ret
    1b18:	9b 01       	movw	r18, r22
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	0a 2e       	mov	r0, r26
    1b1e:	06 94       	lsr	r0
    1b20:	57 95       	ror	r21
    1b22:	47 95       	ror	r20
    1b24:	37 95       	ror	r19
    1b26:	27 95       	ror	r18
    1b28:	ba 95       	dec	r27
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <__ultoa_invert+0xa2>
    1b2c:	62 0f       	add	r22, r18
    1b2e:	73 1f       	adc	r23, r19
    1b30:	84 1f       	adc	r24, r20
    1b32:	95 1f       	adc	r25, r21
    1b34:	a0 1d       	adc	r26, r0
    1b36:	08 95       	ret

00001b38 <__prologue_saves__>:
    1b38:	2f 92       	push	r2
    1b3a:	3f 92       	push	r3
    1b3c:	4f 92       	push	r4
    1b3e:	5f 92       	push	r5
    1b40:	6f 92       	push	r6
    1b42:	7f 92       	push	r7
    1b44:	8f 92       	push	r8
    1b46:	9f 92       	push	r9
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	ca 1b       	sub	r28, r26
    1b62:	db 0b       	sbc	r29, r27
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	09 94       	ijmp

00001b70 <__epilogue_restores__>:
    1b70:	2a 88       	ldd	r2, Y+18	; 0x12
    1b72:	39 88       	ldd	r3, Y+17	; 0x11
    1b74:	48 88       	ldd	r4, Y+16	; 0x10
    1b76:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b78:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b80:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b82:	b9 84       	ldd	r11, Y+9	; 0x09
    1b84:	c8 84       	ldd	r12, Y+8	; 0x08
    1b86:	df 80       	ldd	r13, Y+7	; 0x07
    1b88:	ee 80       	ldd	r14, Y+6	; 0x06
    1b8a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b90:	aa 81       	ldd	r26, Y+2	; 0x02
    1b92:	b9 81       	ldd	r27, Y+1	; 0x01
    1b94:	ce 0f       	add	r28, r30
    1b96:	d1 1d       	adc	r29, r1
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	ed 01       	movw	r28, r26
    1ba4:	08 95       	ret

00001ba6 <_exit>:
    1ba6:	f8 94       	cli

00001ba8 <__stop_program>:
    1ba8:	ff cf       	rjmp	.-2      	; 0x1ba8 <__stop_program>
