
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00000f80  00001014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800252  00800252  00001166  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aed  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc5  00000000  00000000  00002e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1b  00000000  00000000  00003b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000939  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000733  00000000  00000000  000054f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005c24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 38       	cpi	r26, 0x81	; 129
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  9e:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
  a6:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
  aa:	08 95       	ret

000000ac <__vector_10>:
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
  c6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
  d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
  d4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <ultraSensor+0xc>
  d8:	84 ff       	sbrs	r24, 4
  da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
  dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e4:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ovf_count>
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	dc 01       	movw	r26, r24
  f0:	99 27       	eor	r25, r25
  f2:	88 27       	eor	r24, r24
  f4:	82 0f       	add	r24, r18
  f6:	93 1f       	adc	r25, r19
  f8:	a1 1d       	adc	r26, r1
  fa:	b1 1d       	adc	r27, r1
  fc:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <ultraSensor>
 100:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <ultraSensor+0x1>
 104:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <ultraSensor+0x2>
 108:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <ultraSensor+0x3>
 10c:	e7 e7       	ldi	r30, 0x77	; 119
 10e:	f2 e0       	ldi	r31, 0x02	; 2
 110:	80 81       	ld	r24, Z
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	80 83       	st	Z, r24
 116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
 118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 120:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ovf_count>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	dc 01       	movw	r26, r24
 12c:	99 27       	eor	r25, r25
 12e:	88 27       	eor	r24, r24
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <ultraSensor+0x4>
 13c:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <ultraSensor+0x5>
 140:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <ultraSensor+0x6>
 144:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <ultraSensor+0x7>
 148:	e7 e7       	ldi	r30, 0x77	; 119
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_13>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ovf_count>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ovf_count>
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_11>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	e8 e8       	ldi	r30, 0x88	; 136
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	80 5c       	subi	r24, 0xC0	; 192
 1b2:	93 46       	sbci	r25, 0x63	; 99
 1b4:	91 83       	std	Z+1, r25	; 0x01
 1b6:	80 83       	st	Z, r24
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
 1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
 1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
 1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_12>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <timer1_init>:
 21a:	a4 e8       	ldi	r26, 0x84	; 132
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	11 96       	adiw	r26, 0x01	; 1
 220:	1c 92       	st	X, r1
 222:	1e 92       	st	-X, r1
 224:	86 b3       	in	r24, 0x16	; 22
 226:	80 62       	ori	r24, 0x20	; 32
 228:	86 bb       	out	0x16, r24	; 22
 22a:	ef e6       	ldi	r30, 0x6F	; 111
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	87 62       	ori	r24, 0x27	; 39
 232:	80 83       	st	Z, r24
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
 244:	8d 91       	ld	r24, X+
 246:	9c 91       	ld	r25, X
 248:	80 5c       	subi	r24, 0xC0	; 192
 24a:	93 46       	sbci	r25, 0x63	; 99
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 254:	08 95       	ret

00000256 <timer2_init>:
 256:	e1 eb       	ldi	r30, 0xB1	; 177
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	80 83       	st	Z, r24
 260:	8b e9       	ldi	r24, 0x9B	; 155
 262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 266:	e0 e7       	ldi	r30, 0x70	; 112
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
 270:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 274:	08 95       	ret

00000276 <gpio_pins_init>:
 276:	84 b1       	in	r24, 0x04	; 4
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	84 b9       	out	0x04, r24	; 4
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	80 62       	ori	r24, 0x20	; 32
 280:	85 b9       	out	0x05, r24	; 5
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	88 60       	ori	r24, 0x08	; 8
 286:	8a b9       	out	0x0a, r24	; 10
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	84 b9       	out	0x04, r24	; 4
 28e:	8a b1       	in	r24, 0x0a	; 10
 290:	8f 7e       	andi	r24, 0xEF	; 239
 292:	8a b9       	out	0x0a, r24	; 10
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	8f 7e       	andi	r24, 0xEF	; 239
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	84 b1       	in	r24, 0x04	; 4
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	84 b9       	out	0x04, r24	; 4
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	87 7f       	andi	r24, 0xF7	; 247
 2a4:	8b b9       	out	0x0b, r24	; 11
 2a6:	08 95       	ret

000002a8 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
 2ca:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 2ce:	81 ff       	sbrs	r24, 1
 2d0:	9d c0       	rjmp	.+314    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
 2d2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	39 f5       	brne	.+78     	; 0x328 <__vector_7+0x80>
			if(!trigger_active) {
 2da:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <trigger_active>
 2de:	81 11       	cpse	r24, r1
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <__vector_7+0x50>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
 2e2:	0e 94 56 03 	call	0x6ac	; 0x6ac <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
 2e6:	e7 e7       	ldi	r30, 0x77	; 119
 2e8:	f2 e0       	ldi	r31, 0x02	; 2
 2ea:	80 81       	ld	r24, Z
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	80 83       	st	Z, r24
				trigger_active = true;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <trigger_active>
 2f6:	18 c0       	rjmp	.+48     	; 0x328 <__vector_7+0x80>
				} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
 2f8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
 2fc:	e7 e7       	ldi	r30, 0x77	; 119
 2fe:	f2 e0       	ldi	r31, 0x02	; 2
 300:	80 81       	ld	r24, Z
 302:	82 60       	ori	r24, 0x02	; 2
 304:	80 83       	st	Z, r24
				trigger_active = false;
 306:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <trigger_active>
				EMIT_TRIGGER = 0;
 30a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
				WAITING_ECHO = 1;
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	88 60       	ori	r24, 0x08	; 8
 312:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
				ultraSensor.state = ULTRA_WAIT_RISING;
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
 31c:	80 81       	ld	r24, Z
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
 322:	80 81       	ld	r24, Z
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
 328:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	d9 f4       	brne	.+54     	; 0x366 <__vector_7+0xbe>
 330:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <ultraSensor+0xc>
 334:	84 ff       	sbrs	r24, 4
 336:	17 c0       	rjmp	.+46     	; 0x366 <__vector_7+0xbe>
 338:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 33c:	89 70       	andi	r24, 0x09	; 9
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	91 f4       	brne	.+36     	; 0x366 <__vector_7+0xbe>
			static volatile uint8_t wait_echo_counter = 0;
			if(wait_echo_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
 342:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <wait_echo_counter.1987>
 346:	81 11       	cpse	r24, r1
 348:	06 c0       	rjmp	.+12     	; 0x356 <__vector_7+0xae>
				wait_echo_counter++;
 34a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <wait_echo_counter.1987>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <wait_echo_counter.1987>
 354:	25 c0       	rjmp	.+74     	; 0x3a0 <__vector_7+0xf8>
				} else {
				VEINTEMS_PASSED = 1;
 356:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
				wait_echo_counter = 0;
 360:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <wait_echo_counter.1987>
 364:	1d c0       	rjmp	.+58     	; 0x3a0 <__vector_7+0xf8>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		else if(ultraSensor.state == ULTRA_IDLE || ultraSensor.state == ULTRA_DONE) {
 366:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
 36a:	88 23       	and	r24, r24
 36c:	21 f0       	breq	.+8      	; 0x376 <__vector_7+0xce>
 36e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
 372:	85 30       	cpi	r24, 0x05	; 5
 374:	a9 f4       	brne	.+42     	; 0x3a0 <__vector_7+0xf8>
			static volatile uint8_t wait_trigger_allowed_counter = 0;
			if(!ultraSensor.TRIGGER_ALLOWED && wait_trigger_allowed_counter < 7){ // 7 * 10ms = 70ms
 376:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <ultraSensor+0xc>
 37a:	85 fd       	sbrc	r24, 5
 37c:	0a c0       	rjmp	.+20     	; 0x392 <__vector_7+0xea>
 37e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
 382:	87 30       	cpi	r24, 0x07	; 7
 384:	30 f4       	brcc	.+12     	; 0x392 <__vector_7+0xea>
				wait_trigger_allowed_counter++;
 386:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end>
 390:	07 c0       	rjmp	.+14     	; 0x3a0 <__vector_7+0xf8>
				} else {
				ultraSensor.TRIGGER_ALLOWED = 1;
 392:	e7 e7       	ldi	r30, 0x77	; 119
 394:	f2 e0       	ldi	r31, 0x02	; 2
 396:	80 81       	ld	r24, Z
 398:	80 62       	ori	r24, 0x20	; 32
 39a:	80 83       	st	Z, r24
				wait_trigger_allowed_counter = 0;
 39c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <__data_end>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
 3a0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <diezMsCounter>
 3a4:	84 31       	cpi	r24, 0x14	; 20
 3a6:	30 f4       	brcc	.+12     	; 0x3b4 <__vector_7+0x10c>
			diezMsCounter++;
 3a8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <diezMsCounter>
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <diezMsCounter>
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__vector_7+0x110>
			} else {
			diezMsCounter = 0;
 3b4:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
 3b8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 3bc:	86 ff       	sbrs	r24, 6
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <__vector_7+0x134>
			if(btn_pressed_time == 255){
 3c0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <btn_pressed_time>
 3c4:	8f 3f       	cpi	r24, 0xFF	; 255
 3c6:	29 f4       	brne	.+10     	; 0x3d2 <__vector_7+0x12a>
				BTN_OVF = 1;
 3c8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			}
			btn_pressed_time++;
 3d2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <btn_pressed_time>
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <btn_pressed_time>
		}
		if(SERVOA_RESET){
 3dc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 3e0:	85 ff       	sbrs	r24, 5
 3e2:	14 c0       	rjmp	.+40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			if(servo_counter < SERVO_RESET_TIME){
 3e4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <servo_counter>
 3e8:	8e 31       	cpi	r24, 0x1E	; 30
 3ea:	30 f4       	brcc	.+12     	; 0x3f8 <__vector_7+0x150>
				servo_counter++;
 3ec:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <servo_counter>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <servo_counter>
 3f6:	0a c0       	rjmp	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				} else {
				servo_counter = 0;
 3f8:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <servo_counter>
				SERVOA_RESET = 0;
 3fc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 400:	8f 7d       	andi	r24, 0xDF	; 223
 402:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
				servoA_set_angle(90);
 406:	8a e5       	ldi	r24, 0x5A	; 90
 408:	0e 94 38 03 	call	0x670	; 0x670 <servoA_set_angle>
			}
		}
	}
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <main>:

int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
 42e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <bandera2>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
 432:	82 e8       	ldi	r24, 0x82	; 130
 434:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
 440:	eb e7       	ldi	r30, 0x7B	; 123
 442:	f2 e0       	ldi	r31, 0x02	; 2
 444:	8e e0       	ldi	r24, 0x0E	; 14
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	93 83       	std	Z+3, r25	; 0x03
 44a:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	80 83       	st	Z, r24
	diezMsCounter = 0;
 454:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <diezMsCounter>
	outA.cinta_struct_full_mem = 0;
 458:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <outA>
 45c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <outA+0x1>
 460:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <outA+0x2>
 464:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <outA+0x3>
	outB.cinta_struct_full_mem = 0;
 468:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <outB>
 46c:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <outB+0x1>
 470:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <outB+0x2>
 474:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <outB+0x3>
	outC.cinta_struct_full_mem = 0;
 478:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <outC>
 47c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <outC+0x1>
 480:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <outC+0x2>
 484:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <outC+0x3>
	outD.cinta_struct_full_mem = 0;
 488:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <outD>
 48c:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <outD+0x1>
 490:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <outD+0x2>
 494:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <outD+0x3>
	// Inicializa los pines GPIO
	gpio_pins_init();
 498:	0e 94 3b 01 	call	0x276	; 0x276 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
 49c:	0e 94 0d 01 	call	0x21a	; 0x21a <timer1_init>
	timer2_init();
 4a0:	0e 94 2b 01 	call	0x256	; 0x256 <timer2_init>
	//Inicia HCSR04
	ultrasonic_init(&ultraSensor, printfWrapper);
 4a4:	63 e5       	ldi	r22, 0x53	; 83
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	8b e6       	ldi	r24, 0x6B	; 107
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ultrasonic_init>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
 4b0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
 4ba:	8d e8       	ldi	r24, 0x8D	; 141
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
	sei();
 4c2:	78 94       	sei
	while (1)
	{ 
		if(ULTRASONIC_ENABLE && ultraSensor.TRIGGER_ALLOWED && EMIT_TRIGGER){
 4c4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 4c8:	88 23       	and	r24, r24
 4ca:	34 f5       	brge	.+76     	; 0x518 <main+0xea>
 4cc:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <ultraSensor+0xc>
 4d0:	85 ff       	sbrs	r24, 5
 4d2:	22 c0       	rjmp	.+68     	; 0x518 <main+0xea>
 4d4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 4d8:	81 ff       	sbrs	r24, 1
 4da:	1e c0       	rjmp	.+60     	; 0x518 <main+0xea>
			if(ultrasonic_start(&ultraSensor)){
 4dc:	8b e6       	ldi	r24, 0x6B	; 107
 4de:	92 e0       	ldi	r25, 0x02	; 2
 4e0:	0e 94 14 04 	call	0x828	; 0x828 <ultrasonic_start>
 4e4:	88 23       	and	r24, r24
 4e6:	79 f0       	breq	.+30     	; 0x506 <main+0xd8>
				printf("InitHCSR04\n");
 4e8:	85 e2       	ldi	r24, 0x25	; 37
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
				ULTRASONIC_ENABLE = 0; // Se desactiva para no reiniciar la medición hasta que termine
 4f0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 4f4:	8f 77       	andi	r24, 0x7F	; 127
 4f6:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
				EMIT_TRIGGER = 0;
 4fa:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
 500:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
 504:	09 c0       	rjmp	.+18     	; 0x518 <main+0xea>
				} else {
				printf("ErrorInitHCSR04\n");
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
				EMIT_FAILED = 1;
 50e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 512:	84 60       	ori	r24, 0x04	; 4
 514:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
			}
		}
		ultrasonic_update(&ultraSensor);	
 518:	8b e6       	ldi	r24, 0x6B	; 107
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	0e 94 26 04 	call	0x84c	; 0x84c <ultrasonic_update>
		if(ultraSensor.state == ULTRA_DONE && ultraSensor.NEW_RESULT){
 520:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <ultraSensor+0xd>
 524:	85 30       	cpi	r24, 0x05	; 5
 526:	e9 f4       	brne	.+58     	; 0x562 <main+0x134>
 528:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <ultraSensor+0xc>
 52c:	88 23       	and	r24, r24
 52e:	cc f4       	brge	.+50     	; 0x562 <main+0x134>
			printf("HCSR04 Dist[mm] %ul\n", ultrasonic_get_distance(&ultraSensor));
 530:	8b e6       	ldi	r24, 0x6B	; 107
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ultrasonic_get_distance>
 538:	9f 93       	push	r25
 53a:	8f 93       	push	r24
 53c:	7f 93       	push	r23
 53e:	6f 93       	push	r22
 540:	80 e3       	ldi	r24, 0x30	; 48
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	9f 93       	push	r25
 546:	8f 93       	push	r24
 548:	0e 94 b0 04 	call	0x960	; 0x960 <printf>
			ultraSensor.NEW_RESULT = 0;
 54c:	e7 e7       	ldi	r30, 0x77	; 119
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	80 81       	ld	r24, Z
 552:	8f 77       	andi	r24, 0x7F	; 127
 554:	80 83       	st	Z, r24
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
		}
		if(VEINTEMS_PASSED){
 562:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 566:	80 ff       	sbrs	r24, 0
 568:	22 c0       	rjmp	.+68     	; 0x5ae <main+0x180>
			//ultrasonic_hal_echo_timeout(&ultraSensor); //Wrapper fn para setear TIMEDOUT = 1 en la libreria
			printf("HCSR04 perdio ECHO\n");
 56a:	85 e4       	ldi	r24, 0x45	; 69
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
			VEINTEMS_PASSED = 0; //Reiniciar bandera de timeout
 572:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
			WAITING_ECHO = 0;
 576:	8e 7f       	andi	r24, 0xFE	; 254
 578:	87 7f       	andi	r24, 0xF7	; 247
 57a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
			ULTRASONIC_ENABLE = 1;
 57e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 582:	80 68       	ori	r24, 0x80	; 128
 584:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			ultraSensor.TIMEDOUT = 1;
 588:	e7 e7       	ldi	r30, 0x77	; 119
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	80 81       	ld	r24, Z
 58e:	88 60       	ori	r24, 0x08	; 8
 590:	80 83       	st	Z, r24
			if(ultrasonic_timeout_clear(&ultraSensor)){
 592:	8b e6       	ldi	r24, 0x6B	; 107
 594:	92 e0       	ldi	r25, 0x02	; 2
 596:	0e 94 04 04 	call	0x808	; 0x808 <ultrasonic_timeout_clear>
 59a:	88 23       	and	r24, r24
 59c:	41 f0       	breq	.+16     	; 0x5ae <main+0x180>
				printf("Timeout clear");
 59e:	88 e5       	ldi	r24, 0x58	; 88
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	0e 94 b0 04 	call	0x960	; 0x960 <printf>
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
			}
		}
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
 5ae:	4c 9b       	sbis	0x09, 4	; 9
 5b0:	0a c0       	rjmp	.+20     	; 0x5c6 <main+0x198>
 5b2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 5b6:	86 fd       	sbrc	r24, 6
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <main+0x198>
			btn_pressed_time = 0;
 5ba:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <btn_pressed_time>
			BTN_PRESSED = 1;
 5be:	80 64       	ori	r24, 0x40	; 64
 5c0:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
 5c4:	28 c0       	rjmp	.+80     	; 0x616 <main+0x1e8>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
 5c6:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 5ca:	86 ff       	sbrs	r24, 6
 5cc:	24 c0       	rjmp	.+72     	; 0x616 <main+0x1e8>
 5ce:	4c 99       	sbic	0x09, 4	; 9
 5d0:	22 c0       	rjmp	.+68     	; 0x616 <main+0x1e8>
			BTN_PRESSED = 0;
 5d2:	8f 7b       	andi	r24, 0xBF	; 191
 5d4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
 5d8:	82 ff       	sbrs	r24, 2
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <main+0x1b6>
				printf("Btn overflowed\n");
 5dc:	86 e6       	ldi	r24, 0x66	; 102
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
 5e4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <btn_pressed_time>
 5e8:	8a 30       	cpi	r24, 0x0A	; 10
 5ea:	30 f4       	brcc	.+12     	; 0x5f8 <main+0x1ca>
 5ec:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 5f0:	98 2f       	mov	r25, r24
 5f2:	94 70       	andi	r25, 0x04	; 4
 5f4:	82 ff       	sbrs	r24, 2
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <main+0x1d6>
				BTN_RELEASED = 1;
 5f8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
 602:	09 c0       	rjmp	.+18     	; 0x616 <main+0x1e8>
			}else{ //Reiniciar
				btn_pressed_time = 0;
 604:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <btn_pressed_time>
				if(BTN_OVF){
 608:	99 23       	and	r25, r25
 60a:	29 f0       	breq	.+10     	; 0x616 <main+0x1e8>
					BTN_OVF = 0;
 60c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 610:	8b 7f       	andi	r24, 0xFB	; 251
 612:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			}
		}
		/*if(SECPASSED){ Aun no implementado
			SECPASSED = 0;
		}*/ 
		if(DEBUG_FLAG){
 616:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 61a:	84 ff       	sbrs	r24, 4
 61c:	0d c0       	rjmp	.+26     	; 0x638 <main+0x20a>
			printf("Aqui");
 61e:	85 e7       	ldi	r24, 0x75	; 117
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	0e 94 b0 04 	call	0x960	; 0x960 <printf>
			DEBUG_FLAG = 0;
 62a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 62e:	8f 7e       	andi	r24, 0xEF	; 239
 630:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
		}
		if(BTN_RELEASED){
 638:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 63c:	80 ff       	sbrs	r24, 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <main+0x222>
			BTN_RELEASED = 0; //TEST SERVO A
 640:	8e 7f       	andi	r24, 0xFE	; 254
 642:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			EMIT_TRIGGER = 1;
 646:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <bandera2>
 64a:	82 60       	ori	r24, 0x02	; 2
 64c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <bandera2>
			//SERVOA_MOVE = 1;
		}
		if(SERVOA_MOVE){
 650:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 654:	84 ff       	sbrs	r24, 4
 656:	36 cf       	rjmp	.-404    	; 0x4c4 <main+0x96>
			SERVOA_MOVE = 0;
 658:	8f 7e       	andi	r24, 0xEF	; 239
 65a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
			servoA_set_angle(0);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 38 03 	call	0x670	; 0x670 <servoA_set_angle>
			SERVOA_RESET = 1;
 664:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <bandera>
 668:	80 62       	ori	r24, 0x20	; 32
 66a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <bandera>
 66e:	2a cf       	rjmp	.-428    	; 0x4c4 <main+0x96>

00000670 <servoA_set_angle>:
#include <stdio.h>
#include "./../../main.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
 670:	85 3b       	cpi	r24, 0xB5	; 181
 672:	08 f0       	brcs	.+2      	; 0x676 <servoA_set_angle+0x6>
		angle = 180;
 674:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	a0 ed       	ldi	r26, 0xD0	; 208
 67c:	b7 e0       	ldi	r27, 0x07	; 7
 67e:	0e 94 a1 04 	call	0x942	; 0x942 <__umulhisi3>
 682:	24 eb       	ldi	r18, 0xB4	; 180
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
 68e:	da 01       	movw	r26, r20
 690:	c9 01       	movw	r24, r18
 692:	80 53       	subi	r24, 0x30	; 48
 694:	98 4f       	sbci	r25, 0xF8	; 248
 696:	af 4f       	sbci	r26, 0xFF	; 255
 698:	bf 4f       	sbci	r27, 0xFF	; 255
 69a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
 69e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
 6a2:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
 6a6:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
 6aa:	08 95       	ret

000006ac <ultrasonic_hal_trigger_setHigh>:
	us->TIMEDOUT = 1;
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
 6ac:	8b b1       	in	r24, 0x0b	; 11
 6ae:	88 60       	ori	r24, 0x08	; 8
 6b0:	8b b9       	out	0x0b, r24	; 11
 6b2:	08 95       	ret

000006b4 <ultrasonic_hal_trigger_setLow>:
 6b4:	8b b1       	in	r24, 0x0b	; 11
 6b6:	87 7f       	andi	r24, 0xF7	; 247
 6b8:	8b b9       	out	0x0b, r24	; 11
 6ba:	08 95       	ret

000006bc <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
 6bc:	e1 e8       	ldi	r30, 0x81	; 129
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	8f 7b       	andi	r24, 0xBF	; 191
 6c4:	80 83       	st	Z, r24
 6c6:	08 95       	ret

000006c8 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
 6c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
 6cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
 6d0:	88 e1       	ldi	r24, 0x18	; 24
 6d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 6d6:	86 e0       	ldi	r24, 0x06	; 6
 6d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6dc:	08 95       	ret

000006de <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
 6de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6e2:	95 ff       	sbrs	r25, 5
 6e4:	fc cf       	rjmp	.-8      	; 0x6de <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
 6e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6ea:	08 95       	ret

000006ec <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
 6ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6f0:	88 23       	and	r24, r24
 6f2:	e4 f7       	brge	.-8      	; 0x6ec <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
 6f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 6f8:	08 95       	ret

000006fa <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
 6fa:	cf 93       	push	r28
 6fc:	c8 2f       	mov	r28, r24
	if (c == '\n')
 6fe:	8a 30       	cpi	r24, 0x0A	; 10
 700:	19 f4       	brne	.+6      	; 0x708 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
 702:	8d e0       	ldi	r24, 0x0D	; 13
 704:	0e 94 6f 03 	call	0x6de	; 0x6de <USART_Transmit>
	USART_Transmit(c);
 708:	8c 2f       	mov	r24, r28
 70a:	0e 94 6f 03 	call	0x6de	; 0x6de <USART_Transmit>
	return 0;
}
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
 716:	0e 94 76 03 	call	0x6ec	; 0x6ec <USART_Receive>
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	08 95       	ret

0000071e <ultrasonic_calculate_distance>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	ec 01       	movw	r28, r24
 728:	8c 81       	ldd	r24, Y+4	; 0x04
 72a:	9d 81       	ldd	r25, Y+5	; 0x05
 72c:	ae 81       	ldd	r26, Y+6	; 0x06
 72e:	bf 81       	ldd	r27, Y+7	; 0x07
 730:	48 81       	ld	r20, Y
 732:	59 81       	ldd	r21, Y+1	; 0x01
 734:	6a 81       	ldd	r22, Y+2	; 0x02
 736:	7b 81       	ldd	r23, Y+3	; 0x03
 738:	8c 01       	movw	r16, r24
 73a:	9d 01       	movw	r18, r26
 73c:	04 1b       	sub	r16, r20
 73e:	15 0b       	sbc	r17, r21
 740:	26 0b       	sbc	r18, r22
 742:	37 0b       	sbc	r19, r23
 744:	b9 01       	movw	r22, r18
 746:	a8 01       	movw	r20, r16
 748:	d9 01       	movw	r26, r18
 74a:	c8 01       	movw	r24, r16
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	aa 1f       	adc	r26, r26
 762:	bb 1f       	adc	r27, r27
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	aa 1f       	adc	r26, r26
 76a:	bb 1f       	adc	r27, r27
 76c:	8c 01       	movw	r16, r24
 76e:	9d 01       	movw	r18, r26
 770:	04 0f       	add	r16, r20
 772:	15 1f       	adc	r17, r21
 774:	26 1f       	adc	r18, r22
 776:	37 1f       	adc	r19, r23
 778:	c9 01       	movw	r24, r18
 77a:	b8 01       	movw	r22, r16
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	20 e9       	ldi	r18, 0x90	; 144
 786:	31 e0       	ldi	r19, 0x01	; 1
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__udivmodsi4>
 790:	28 87       	std	Y+8, r18	; 0x08
 792:	39 87       	std	Y+9, r19	; 0x09
 794:	4a 87       	std	Y+10, r20	; 0x0a
 796:	5b 87       	std	Y+11, r21	; 0x0b
 798:	8c 85       	ldd	r24, Y+12	; 0x0c
 79a:	80 68       	ori	r24, 0x80	; 128
 79c:	8c 87       	std	Y+12, r24	; 0x0c
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <ultrasonic_get_distance>:
 7a8:	fc 01       	movw	r30, r24
 7aa:	60 85       	ldd	r22, Z+8	; 0x08
 7ac:	71 85       	ldd	r23, Z+9	; 0x09
 7ae:	82 85       	ldd	r24, Z+10	; 0x0a
 7b0:	93 85       	ldd	r25, Z+11	; 0x0b
 7b2:	08 95       	ret

000007b4 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
 7b4:	dc 01       	movw	r26, r24
 7b6:	1e 96       	adiw	r26, 0x0e	; 14
 7b8:	ed 91       	ld	r30, X+
 7ba:	fc 91       	ld	r31, X
 7bc:	1f 97       	sbiw	r26, 0x0f	; 15
 7be:	30 97       	sbiw	r30, 0x00	; 0
 7c0:	11 f0       	breq	.+4      	; 0x7c6 <ultrasonic_print+0x12>
 7c2:	cb 01       	movw	r24, r22
		us->print_method(message);
 7c4:	09 95       	icall
 7c6:	08 95       	ret

000007c8 <ultrasonic_init>:
#include "ultrasonic_hal.h"  // Funciones de bajo nivel (setTriggerHigh, setTriggerLow, etc.)
#include <stddef.h>

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
 7c8:	fc 01       	movw	r30, r24
	us->echo_init_time    = 0;
 7ca:	10 82       	st	Z, r1
 7cc:	11 82       	std	Z+1, r1	; 0x01
 7ce:	12 82       	std	Z+2, r1	; 0x02
 7d0:	13 82       	std	Z+3, r1	; 0x03
	us->echo_finish_time  = 0;
 7d2:	14 82       	std	Z+4, r1	; 0x04
 7d4:	15 82       	std	Z+5, r1	; 0x05
 7d6:	16 82       	std	Z+6, r1	; 0x06
 7d8:	17 82       	std	Z+7, r1	; 0x07
	us->distance_mm       = 0;
 7da:	10 86       	std	Z+8, r1	; 0x08
 7dc:	11 86       	std	Z+9, r1	; 0x09
 7de:	12 86       	std	Z+10, r1	; 0x0a
 7e0:	13 86       	std	Z+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
 7e2:	14 86       	std	Z+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
 7e4:	84 85       	ldd	r24, Z+12	; 0x0c
 7e6:	80 62       	ori	r24, 0x20	; 32
 7e8:	84 87       	std	Z+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
 7ea:	15 86       	std	Z+13, r1	; 0x0d
	
	if(printMethod == NULL){
 7ec:	61 15       	cp	r22, r1
 7ee:	71 05       	cpc	r23, r1
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <ultrasonic_init+0x30>
		us->print_method = NULL;
 7f2:	17 86       	std	Z+15, r1	; 0x0f
 7f4:	16 86       	std	Z+14, r1	; 0x0e
 7f6:	08 95       	ret
 7f8:	cf 01       	movw	r24, r30
		}else{
		us->print_method = printMethod; // Asignación directa
 7fa:	77 87       	std	Z+15, r23	; 0x0f
 7fc:	66 87       	std	Z+14, r22	; 0x0e
		ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
 7fe:	6a e7       	ldi	r22, 0x7A	; 122
 800:	71 e0       	ldi	r23, 0x01	; 1
 802:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
 806:	08 95       	ret

00000808 <ultrasonic_timeout_clear>:
	}
}

bool ultrasonic_timeout_clear(ultrasonic_t *us){
	if(us->state == ULTRA_TIMEOUT){
 808:	fc 01       	movw	r30, r24
 80a:	25 85       	ldd	r18, Z+13	; 0x0d
 80c:	26 30       	cpi	r18, 0x06	; 6
 80e:	51 f4       	brne	.+20     	; 0x824 <ultrasonic_timeout_clear+0x1c>
		us->state = ULTRA_IDLE;
 810:	15 86       	std	Z+13, r1	; 0x0d
		us->TIMEDOUT = 0;
 812:	24 85       	ldd	r18, Z+12	; 0x0c
 814:	27 7f       	andi	r18, 0xF7	; 247
 816:	24 87       	std	Z+12, r18	; 0x0c
		ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
 818:	66 e9       	ldi	r22, 0x96	; 150
 81a:	71 e0       	ldi	r23, 0x01	; 1
 81c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
		return true;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	08 95       	ret
	}
	return false;
 824:	80 e0       	ldi	r24, 0x00	; 0
}
 826:	08 95       	ret

00000828 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if(us->state == ULTRA_IDLE || us->state == ULTRA_DONE) {
 828:	fc 01       	movw	r30, r24
 82a:	25 85       	ldd	r18, Z+13	; 0x0d
 82c:	22 23       	and	r18, r18
 82e:	19 f0       	breq	.+6      	; 0x836 <ultrasonic_start+0xe>
 830:	25 85       	ldd	r18, Z+13	; 0x0d
 832:	25 30       	cpi	r18, 0x05	; 5
 834:	49 f4       	brne	.+18     	; 0x848 <ultrasonic_start+0x20>
		us->state = ULTRA_TRIGGERING;
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	fc 01       	movw	r30, r24
 83a:	25 87       	std	Z+13, r18	; 0x0d
		ultrasonic_print(us, "LIB DEBUG - HCSR04 Start");
 83c:	68 eb       	ldi	r22, 0xB8	; 184
 83e:	71 e0       	ldi	r23, 0x01	; 1
 840:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
		return true;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	08 95       	ret
	}
	return false;
 848:	80 e0       	ldi	r24, 0x00	; 0
}
 84a:	08 95       	ret

0000084c <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	ec 01       	movw	r28, r24
	switch (us->state)
 852:	8d 85       	ldd	r24, Y+13	; 0x0d
 854:	82 30       	cpi	r24, 0x02	; 2
 856:	b9 f0       	breq	.+46     	; 0x886 <ultrasonic_update+0x3a>
 858:	30 f4       	brcc	.+12     	; 0x866 <ultrasonic_update+0x1a>
 85a:	88 23       	and	r24, r24
 85c:	09 f4       	brne	.+2      	; 0x860 <ultrasonic_update+0x14>
 85e:	4c c0       	rjmp	.+152    	; 0x8f8 <ultrasonic_update+0xac>
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	41 f0       	breq	.+16     	; 0x874 <ultrasonic_update+0x28>
 864:	46 c0       	rjmp	.+140    	; 0x8f2 <ultrasonic_update+0xa6>
 866:	84 30       	cpi	r24, 0x04	; 4
 868:	99 f1       	breq	.+102    	; 0x8d0 <ultrasonic_update+0x84>
 86a:	f8 f0       	brcs	.+62     	; 0x8aa <ultrasonic_update+0x5e>
 86c:	85 30       	cpi	r24, 0x05	; 5
 86e:	09 f4       	brne	.+2      	; 0x872 <ultrasonic_update+0x26>
 870:	43 c0       	rjmp	.+134    	; 0x8f8 <ultrasonic_update+0xac>
 872:	3f c0       	rjmp	.+126    	; 0x8f2 <ultrasonic_update+0xa6>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
 874:	8c 85       	ldd	r24, Y+12	; 0x0c
 876:	81 ff       	sbrs	r24, 1
 878:	3f c0       	rjmp	.+126    	; 0x8f8 <ultrasonic_update+0xac>
				ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
 87a:	61 ed       	ldi	r22, 0xD1	; 209
 87c:	71 e0       	ldi	r23, 0x01	; 1
 87e:	ce 01       	movw	r24, r28
 880:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
 884:	39 c0       	rjmp	.+114    	; 0x8f8 <ultrasonic_update+0xac>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
 886:	8c 85       	ldd	r24, Y+12	; 0x0c
 888:	84 fd       	sbrc	r24, 4
 88a:	09 c0       	rjmp	.+18     	; 0x89e <ultrasonic_update+0x52>
				us->state = ULTRA_WAIT_FALLING;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
 890:	60 ef       	ldi	r22, 0xF0	; 240
 892:	71 e0       	ldi	r23, 0x01	; 1
 894:	ce 01       	movw	r24, r28
 896:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
				ultrasonic_hal_echo_setFallingEdge();
 89a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ultrasonic_hal_echo_setFallingEdge>
			}
			if (us->TIMEDOUT) {
 89e:	8c 85       	ldd	r24, Y+12	; 0x0c
 8a0:	83 ff       	sbrs	r24, 3
 8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <ultrasonic_update+0xac>
				us->state = ULTRA_TIMEOUT;
 8a4:	86 e0       	ldi	r24, 0x06	; 6
 8a6:	8d 87       	std	Y+13, r24	; 0x0d
 8a8:	27 c0       	rjmp	.+78     	; 0x8f8 <ultrasonic_update+0xac>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
 8aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 8ac:	86 ff       	sbrs	r24, 6
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <ultrasonic_update+0x78>
				us->state = ULTRA_CALCULATING;
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
 8b4:	6d e0       	ldi	r22, 0x0D	; 13
 8b6:	72 e0       	ldi	r23, 0x02	; 2
 8b8:	ce 01       	movw	r24, r28
 8ba:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
				us->CALCULATE_DISTANCE = 1;
 8be:	8c 85       	ldd	r24, Y+12	; 0x0c
 8c0:	84 60       	ori	r24, 0x04	; 4
 8c2:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
 8c4:	8c 85       	ldd	r24, Y+12	; 0x0c
 8c6:	83 ff       	sbrs	r24, 3
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <ultrasonic_update+0xac>
				us->state = ULTRA_TIMEOUT;
 8ca:	86 e0       	ldi	r24, 0x06	; 6
 8cc:	8d 87       	std	Y+13, r24	; 0x0d
 8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <ultrasonic_update+0xac>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
 8d0:	8c 85       	ldd	r24, Y+12	; 0x0c
 8d2:	82 ff       	sbrs	r24, 2
 8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <ultrasonic_update+0xac>
				ultrasonic_calculate_distance(us);
 8d6:	ce 01       	movw	r24, r28
 8d8:	0e 94 8f 03 	call	0x71e	; 0x71e <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
 8dc:	8c 85       	ldd	r24, Y+12	; 0x0c
 8de:	8b 7f       	andi	r24, 0xFB	; 251
 8e0:	8c 87       	std	Y+12, r24	; 0x0c
				ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
 8e2:	64 e2       	ldi	r22, 0x24	; 36
 8e4:	72 e0       	ldi	r23, 0x02	; 2
 8e6:	ce 01       	movw	r24, r28
 8e8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ultrasonic_print>
				us->state = ULTRA_DONE;
 8ec:	85 e0       	ldi	r24, 0x05	; 5
 8ee:	8d 87       	std	Y+13, r24	; 0x0d
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <ultrasonic_update+0xac>
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
		default:
		us->TIMEDOUT = 1;
 8f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 8f4:	88 60       	ori	r24, 0x08	; 8
 8f6:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <__udivmodsi4>:
 8fe:	a1 e2       	ldi	r26, 0x21	; 33
 900:	1a 2e       	mov	r1, r26
 902:	aa 1b       	sub	r26, r26
 904:	bb 1b       	sub	r27, r27
 906:	fd 01       	movw	r30, r26
 908:	0d c0       	rjmp	.+26     	; 0x924 <__udivmodsi4_ep>

0000090a <__udivmodsi4_loop>:
 90a:	aa 1f       	adc	r26, r26
 90c:	bb 1f       	adc	r27, r27
 90e:	ee 1f       	adc	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	a2 17       	cp	r26, r18
 914:	b3 07       	cpc	r27, r19
 916:	e4 07       	cpc	r30, r20
 918:	f5 07       	cpc	r31, r21
 91a:	20 f0       	brcs	.+8      	; 0x924 <__udivmodsi4_ep>
 91c:	a2 1b       	sub	r26, r18
 91e:	b3 0b       	sbc	r27, r19
 920:	e4 0b       	sbc	r30, r20
 922:	f5 0b       	sbc	r31, r21

00000924 <__udivmodsi4_ep>:
 924:	66 1f       	adc	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	1a 94       	dec	r1
 92e:	69 f7       	brne	.-38     	; 0x90a <__udivmodsi4_loop>
 930:	60 95       	com	r22
 932:	70 95       	com	r23
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	9b 01       	movw	r18, r22
 93a:	ac 01       	movw	r20, r24
 93c:	bd 01       	movw	r22, r26
 93e:	cf 01       	movw	r24, r30
 940:	08 95       	ret

00000942 <__umulhisi3>:
 942:	a2 9f       	mul	r26, r18
 944:	b0 01       	movw	r22, r0
 946:	b3 9f       	mul	r27, r19
 948:	c0 01       	movw	r24, r0
 94a:	a3 9f       	mul	r26, r19
 94c:	70 0d       	add	r23, r0
 94e:	81 1d       	adc	r24, r1
 950:	11 24       	eor	r1, r1
 952:	91 1d       	adc	r25, r1
 954:	b2 9f       	mul	r27, r18
 956:	70 0d       	add	r23, r0
 958:	81 1d       	adc	r24, r1
 95a:	11 24       	eor	r1, r1
 95c:	91 1d       	adc	r25, r1
 95e:	08 95       	ret

00000960 <printf>:
 960:	a0 e0       	ldi	r26, 0x00	; 0
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e6 eb       	ldi	r30, 0xB6	; 182
 966:	f4 e0       	ldi	r31, 0x04	; 4
 968:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__prologue_saves__+0x20>
 96c:	ae 01       	movw	r20, r28
 96e:	4b 5f       	subi	r20, 0xFB	; 251
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	fa 01       	movw	r30, r20
 974:	61 91       	ld	r22, Z+
 976:	71 91       	ld	r23, Z+
 978:	af 01       	movw	r20, r30
 97a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <__iob+0x2>
 97e:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__iob+0x3>
 982:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vfprintf>
 986:	e2 e0       	ldi	r30, 0x02	; 2
 988:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__epilogue_restores__+0x20>

0000098c <puts>:
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <__iob+0x2>
 998:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <__iob+0x3>
 99c:	23 81       	ldd	r18, Z+3	; 0x03
 99e:	21 ff       	sbrs	r18, 1
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <puts+0x4c>
 9a2:	8c 01       	movw	r16, r24
 9a4:	d0 e0       	ldi	r29, 0x00	; 0
 9a6:	c0 e0       	ldi	r28, 0x00	; 0
 9a8:	f8 01       	movw	r30, r16
 9aa:	81 91       	ld	r24, Z+
 9ac:	8f 01       	movw	r16, r30
 9ae:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <__iob+0x2>
 9b2:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <__iob+0x3>
 9b6:	db 01       	movw	r26, r22
 9b8:	18 96       	adiw	r26, 0x08	; 8
 9ba:	ed 91       	ld	r30, X+
 9bc:	fc 91       	ld	r31, X
 9be:	19 97       	sbiw	r26, 0x09	; 9
 9c0:	88 23       	and	r24, r24
 9c2:	31 f0       	breq	.+12     	; 0x9d0 <puts+0x44>
 9c4:	09 95       	icall
 9c6:	89 2b       	or	r24, r25
 9c8:	79 f3       	breq	.-34     	; 0x9a8 <puts+0x1c>
 9ca:	df ef       	ldi	r29, 0xFF	; 255
 9cc:	cf ef       	ldi	r28, 0xFF	; 255
 9ce:	ec cf       	rjmp	.-40     	; 0x9a8 <puts+0x1c>
 9d0:	8a e0       	ldi	r24, 0x0A	; 10
 9d2:	09 95       	icall
 9d4:	89 2b       	or	r24, r25
 9d6:	19 f0       	breq	.+6      	; 0x9de <puts+0x52>
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <puts+0x56>
 9de:	8d 2f       	mov	r24, r29
 9e0:	9c 2f       	mov	r25, r28
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <vfprintf>:
 9ec:	ab e0       	ldi	r26, 0x0B	; 11
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	ec ef       	ldi	r30, 0xFC	; 252
 9f2:	f4 e0       	ldi	r31, 0x04	; 4
 9f4:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__prologue_saves__>
 9f8:	6c 01       	movw	r12, r24
 9fa:	7b 01       	movw	r14, r22
 9fc:	8a 01       	movw	r16, r20
 9fe:	fc 01       	movw	r30, r24
 a00:	17 82       	std	Z+7, r1	; 0x07
 a02:	16 82       	std	Z+6, r1	; 0x06
 a04:	83 81       	ldd	r24, Z+3	; 0x03
 a06:	81 ff       	sbrs	r24, 1
 a08:	cc c1       	rjmp	.+920    	; 0xda2 <vfprintf+0x3b6>
 a0a:	ce 01       	movw	r24, r28
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	3c 01       	movw	r6, r24
 a10:	f6 01       	movw	r30, r12
 a12:	93 81       	ldd	r25, Z+3	; 0x03
 a14:	f7 01       	movw	r30, r14
 a16:	93 fd       	sbrc	r25, 3
 a18:	85 91       	lpm	r24, Z+
 a1a:	93 ff       	sbrs	r25, 3
 a1c:	81 91       	ld	r24, Z+
 a1e:	7f 01       	movw	r14, r30
 a20:	88 23       	and	r24, r24
 a22:	09 f4       	brne	.+2      	; 0xa26 <vfprintf+0x3a>
 a24:	ba c1       	rjmp	.+884    	; 0xd9a <vfprintf+0x3ae>
 a26:	85 32       	cpi	r24, 0x25	; 37
 a28:	39 f4       	brne	.+14     	; 0xa38 <vfprintf+0x4c>
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	7f 01       	movw	r14, r30
 a34:	85 32       	cpi	r24, 0x25	; 37
 a36:	29 f4       	brne	.+10     	; 0xa42 <vfprintf+0x56>
 a38:	b6 01       	movw	r22, r12
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 a40:	e7 cf       	rjmp	.-50     	; 0xa10 <vfprintf+0x24>
 a42:	91 2c       	mov	r9, r1
 a44:	21 2c       	mov	r2, r1
 a46:	31 2c       	mov	r3, r1
 a48:	ff e1       	ldi	r31, 0x1F	; 31
 a4a:	f3 15       	cp	r31, r3
 a4c:	d8 f0       	brcs	.+54     	; 0xa84 <vfprintf+0x98>
 a4e:	8b 32       	cpi	r24, 0x2B	; 43
 a50:	79 f0       	breq	.+30     	; 0xa70 <vfprintf+0x84>
 a52:	38 f4       	brcc	.+14     	; 0xa62 <vfprintf+0x76>
 a54:	80 32       	cpi	r24, 0x20	; 32
 a56:	79 f0       	breq	.+30     	; 0xa76 <vfprintf+0x8a>
 a58:	83 32       	cpi	r24, 0x23	; 35
 a5a:	a1 f4       	brne	.+40     	; 0xa84 <vfprintf+0x98>
 a5c:	23 2d       	mov	r18, r3
 a5e:	20 61       	ori	r18, 0x10	; 16
 a60:	1d c0       	rjmp	.+58     	; 0xa9c <vfprintf+0xb0>
 a62:	8d 32       	cpi	r24, 0x2D	; 45
 a64:	61 f0       	breq	.+24     	; 0xa7e <vfprintf+0x92>
 a66:	80 33       	cpi	r24, 0x30	; 48
 a68:	69 f4       	brne	.+26     	; 0xa84 <vfprintf+0x98>
 a6a:	23 2d       	mov	r18, r3
 a6c:	21 60       	ori	r18, 0x01	; 1
 a6e:	16 c0       	rjmp	.+44     	; 0xa9c <vfprintf+0xb0>
 a70:	83 2d       	mov	r24, r3
 a72:	82 60       	ori	r24, 0x02	; 2
 a74:	38 2e       	mov	r3, r24
 a76:	e3 2d       	mov	r30, r3
 a78:	e4 60       	ori	r30, 0x04	; 4
 a7a:	3e 2e       	mov	r3, r30
 a7c:	2a c0       	rjmp	.+84     	; 0xad2 <vfprintf+0xe6>
 a7e:	f3 2d       	mov	r31, r3
 a80:	f8 60       	ori	r31, 0x08	; 8
 a82:	1d c0       	rjmp	.+58     	; 0xabe <vfprintf+0xd2>
 a84:	37 fc       	sbrc	r3, 7
 a86:	2d c0       	rjmp	.+90     	; 0xae2 <vfprintf+0xf6>
 a88:	20 ed       	ldi	r18, 0xD0	; 208
 a8a:	28 0f       	add	r18, r24
 a8c:	2a 30       	cpi	r18, 0x0A	; 10
 a8e:	40 f0       	brcs	.+16     	; 0xaa0 <vfprintf+0xb4>
 a90:	8e 32       	cpi	r24, 0x2E	; 46
 a92:	b9 f4       	brne	.+46     	; 0xac2 <vfprintf+0xd6>
 a94:	36 fc       	sbrc	r3, 6
 a96:	81 c1       	rjmp	.+770    	; 0xd9a <vfprintf+0x3ae>
 a98:	23 2d       	mov	r18, r3
 a9a:	20 64       	ori	r18, 0x40	; 64
 a9c:	32 2e       	mov	r3, r18
 a9e:	19 c0       	rjmp	.+50     	; 0xad2 <vfprintf+0xe6>
 aa0:	36 fe       	sbrs	r3, 6
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <vfprintf+0xc4>
 aa4:	8a e0       	ldi	r24, 0x0A	; 10
 aa6:	98 9e       	mul	r9, r24
 aa8:	20 0d       	add	r18, r0
 aaa:	11 24       	eor	r1, r1
 aac:	92 2e       	mov	r9, r18
 aae:	11 c0       	rjmp	.+34     	; 0xad2 <vfprintf+0xe6>
 ab0:	ea e0       	ldi	r30, 0x0A	; 10
 ab2:	2e 9e       	mul	r2, r30
 ab4:	20 0d       	add	r18, r0
 ab6:	11 24       	eor	r1, r1
 ab8:	22 2e       	mov	r2, r18
 aba:	f3 2d       	mov	r31, r3
 abc:	f0 62       	ori	r31, 0x20	; 32
 abe:	3f 2e       	mov	r3, r31
 ac0:	08 c0       	rjmp	.+16     	; 0xad2 <vfprintf+0xe6>
 ac2:	8c 36       	cpi	r24, 0x6C	; 108
 ac4:	21 f4       	brne	.+8      	; 0xace <vfprintf+0xe2>
 ac6:	83 2d       	mov	r24, r3
 ac8:	80 68       	ori	r24, 0x80	; 128
 aca:	38 2e       	mov	r3, r24
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <vfprintf+0xe6>
 ace:	88 36       	cpi	r24, 0x68	; 104
 ad0:	41 f4       	brne	.+16     	; 0xae2 <vfprintf+0xf6>
 ad2:	f7 01       	movw	r30, r14
 ad4:	93 fd       	sbrc	r25, 3
 ad6:	85 91       	lpm	r24, Z+
 ad8:	93 ff       	sbrs	r25, 3
 ada:	81 91       	ld	r24, Z+
 adc:	7f 01       	movw	r14, r30
 ade:	81 11       	cpse	r24, r1
 ae0:	b3 cf       	rjmp	.-154    	; 0xa48 <vfprintf+0x5c>
 ae2:	98 2f       	mov	r25, r24
 ae4:	9f 7d       	andi	r25, 0xDF	; 223
 ae6:	95 54       	subi	r25, 0x45	; 69
 ae8:	93 30       	cpi	r25, 0x03	; 3
 aea:	28 f4       	brcc	.+10     	; 0xaf6 <vfprintf+0x10a>
 aec:	0c 5f       	subi	r16, 0xFC	; 252
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	9f e3       	ldi	r25, 0x3F	; 63
 af2:	99 83       	std	Y+1, r25	; 0x01
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <vfprintf+0x124>
 af6:	83 36       	cpi	r24, 0x63	; 99
 af8:	31 f0       	breq	.+12     	; 0xb06 <vfprintf+0x11a>
 afa:	83 37       	cpi	r24, 0x73	; 115
 afc:	71 f0       	breq	.+28     	; 0xb1a <vfprintf+0x12e>
 afe:	83 35       	cpi	r24, 0x53	; 83
 b00:	09 f0       	breq	.+2      	; 0xb04 <vfprintf+0x118>
 b02:	59 c0       	rjmp	.+178    	; 0xbb6 <vfprintf+0x1ca>
 b04:	21 c0       	rjmp	.+66     	; 0xb48 <vfprintf+0x15c>
 b06:	f8 01       	movw	r30, r16
 b08:	80 81       	ld	r24, Z
 b0a:	89 83       	std	Y+1, r24	; 0x01
 b0c:	0e 5f       	subi	r16, 0xFE	; 254
 b0e:	1f 4f       	sbci	r17, 0xFF	; 255
 b10:	88 24       	eor	r8, r8
 b12:	83 94       	inc	r8
 b14:	91 2c       	mov	r9, r1
 b16:	53 01       	movw	r10, r6
 b18:	13 c0       	rjmp	.+38     	; 0xb40 <vfprintf+0x154>
 b1a:	28 01       	movw	r4, r16
 b1c:	f2 e0       	ldi	r31, 0x02	; 2
 b1e:	4f 0e       	add	r4, r31
 b20:	51 1c       	adc	r5, r1
 b22:	f8 01       	movw	r30, r16
 b24:	a0 80       	ld	r10, Z
 b26:	b1 80       	ldd	r11, Z+1	; 0x01
 b28:	36 fe       	sbrs	r3, 6
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <vfprintf+0x146>
 b2c:	69 2d       	mov	r22, r9
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <vfprintf+0x14a>
 b32:	6f ef       	ldi	r22, 0xFF	; 255
 b34:	7f ef       	ldi	r23, 0xFF	; 255
 b36:	c5 01       	movw	r24, r10
 b38:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strnlen>
 b3c:	4c 01       	movw	r8, r24
 b3e:	82 01       	movw	r16, r4
 b40:	f3 2d       	mov	r31, r3
 b42:	ff 77       	andi	r31, 0x7F	; 127
 b44:	3f 2e       	mov	r3, r31
 b46:	16 c0       	rjmp	.+44     	; 0xb74 <vfprintf+0x188>
 b48:	28 01       	movw	r4, r16
 b4a:	22 e0       	ldi	r18, 0x02	; 2
 b4c:	42 0e       	add	r4, r18
 b4e:	51 1c       	adc	r5, r1
 b50:	f8 01       	movw	r30, r16
 b52:	a0 80       	ld	r10, Z
 b54:	b1 80       	ldd	r11, Z+1	; 0x01
 b56:	36 fe       	sbrs	r3, 6
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x174>
 b5a:	69 2d       	mov	r22, r9
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x178>
 b60:	6f ef       	ldi	r22, 0xFF	; 255
 b62:	7f ef       	ldi	r23, 0xFF	; 255
 b64:	c5 01       	movw	r24, r10
 b66:	0e 94 d7 06 	call	0xdae	; 0xdae <strnlen_P>
 b6a:	4c 01       	movw	r8, r24
 b6c:	f3 2d       	mov	r31, r3
 b6e:	f0 68       	ori	r31, 0x80	; 128
 b70:	3f 2e       	mov	r3, r31
 b72:	82 01       	movw	r16, r4
 b74:	33 fc       	sbrc	r3, 3
 b76:	1b c0       	rjmp	.+54     	; 0xbae <vfprintf+0x1c2>
 b78:	82 2d       	mov	r24, r2
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	88 16       	cp	r8, r24
 b7e:	99 06       	cpc	r9, r25
 b80:	b0 f4       	brcc	.+44     	; 0xbae <vfprintf+0x1c2>
 b82:	b6 01       	movw	r22, r12
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 b8c:	2a 94       	dec	r2
 b8e:	f4 cf       	rjmp	.-24     	; 0xb78 <vfprintf+0x18c>
 b90:	f5 01       	movw	r30, r10
 b92:	37 fc       	sbrc	r3, 7
 b94:	85 91       	lpm	r24, Z+
 b96:	37 fe       	sbrs	r3, 7
 b98:	81 91       	ld	r24, Z+
 b9a:	5f 01       	movw	r10, r30
 b9c:	b6 01       	movw	r22, r12
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 ba4:	21 10       	cpse	r2, r1
 ba6:	2a 94       	dec	r2
 ba8:	21 e0       	ldi	r18, 0x01	; 1
 baa:	82 1a       	sub	r8, r18
 bac:	91 08       	sbc	r9, r1
 bae:	81 14       	cp	r8, r1
 bb0:	91 04       	cpc	r9, r1
 bb2:	71 f7       	brne	.-36     	; 0xb90 <vfprintf+0x1a4>
 bb4:	e8 c0       	rjmp	.+464    	; 0xd86 <vfprintf+0x39a>
 bb6:	84 36       	cpi	r24, 0x64	; 100
 bb8:	11 f0       	breq	.+4      	; 0xbbe <vfprintf+0x1d2>
 bba:	89 36       	cpi	r24, 0x69	; 105
 bbc:	41 f5       	brne	.+80     	; 0xc0e <vfprintf+0x222>
 bbe:	f8 01       	movw	r30, r16
 bc0:	37 fe       	sbrs	r3, 7
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <vfprintf+0x1e6>
 bc4:	60 81       	ld	r22, Z
 bc6:	71 81       	ldd	r23, Z+1	; 0x01
 bc8:	82 81       	ldd	r24, Z+2	; 0x02
 bca:	93 81       	ldd	r25, Z+3	; 0x03
 bcc:	0c 5f       	subi	r16, 0xFC	; 252
 bce:	1f 4f       	sbci	r17, 0xFF	; 255
 bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <vfprintf+0x1f6>
 bd2:	60 81       	ld	r22, Z
 bd4:	71 81       	ldd	r23, Z+1	; 0x01
 bd6:	07 2e       	mov	r0, r23
 bd8:	00 0c       	add	r0, r0
 bda:	88 0b       	sbc	r24, r24
 bdc:	99 0b       	sbc	r25, r25
 bde:	0e 5f       	subi	r16, 0xFE	; 254
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	f3 2d       	mov	r31, r3
 be4:	ff 76       	andi	r31, 0x6F	; 111
 be6:	3f 2e       	mov	r3, r31
 be8:	97 ff       	sbrs	r25, 7
 bea:	09 c0       	rjmp	.+18     	; 0xbfe <vfprintf+0x212>
 bec:	90 95       	com	r25
 bee:	80 95       	com	r24
 bf0:	70 95       	com	r23
 bf2:	61 95       	neg	r22
 bf4:	7f 4f       	sbci	r23, 0xFF	; 255
 bf6:	8f 4f       	sbci	r24, 0xFF	; 255
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	f0 68       	ori	r31, 0x80	; 128
 bfc:	3f 2e       	mov	r3, r31
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	a3 01       	movw	r20, r6
 c04:	0e 94 29 07 	call	0xe52	; 0xe52 <__ultoa_invert>
 c08:	88 2e       	mov	r8, r24
 c0a:	86 18       	sub	r8, r6
 c0c:	45 c0       	rjmp	.+138    	; 0xc98 <vfprintf+0x2ac>
 c0e:	85 37       	cpi	r24, 0x75	; 117
 c10:	31 f4       	brne	.+12     	; 0xc1e <vfprintf+0x232>
 c12:	23 2d       	mov	r18, r3
 c14:	2f 7e       	andi	r18, 0xEF	; 239
 c16:	b2 2e       	mov	r11, r18
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	25 c0       	rjmp	.+74     	; 0xc68 <vfprintf+0x27c>
 c1e:	93 2d       	mov	r25, r3
 c20:	99 7f       	andi	r25, 0xF9	; 249
 c22:	b9 2e       	mov	r11, r25
 c24:	8f 36       	cpi	r24, 0x6F	; 111
 c26:	c1 f0       	breq	.+48     	; 0xc58 <vfprintf+0x26c>
 c28:	18 f4       	brcc	.+6      	; 0xc30 <vfprintf+0x244>
 c2a:	88 35       	cpi	r24, 0x58	; 88
 c2c:	79 f0       	breq	.+30     	; 0xc4c <vfprintf+0x260>
 c2e:	b5 c0       	rjmp	.+362    	; 0xd9a <vfprintf+0x3ae>
 c30:	80 37       	cpi	r24, 0x70	; 112
 c32:	19 f0       	breq	.+6      	; 0xc3a <vfprintf+0x24e>
 c34:	88 37       	cpi	r24, 0x78	; 120
 c36:	21 f0       	breq	.+8      	; 0xc40 <vfprintf+0x254>
 c38:	b0 c0       	rjmp	.+352    	; 0xd9a <vfprintf+0x3ae>
 c3a:	e9 2f       	mov	r30, r25
 c3c:	e0 61       	ori	r30, 0x10	; 16
 c3e:	be 2e       	mov	r11, r30
 c40:	b4 fe       	sbrs	r11, 4
 c42:	0d c0       	rjmp	.+26     	; 0xc5e <vfprintf+0x272>
 c44:	fb 2d       	mov	r31, r11
 c46:	f4 60       	ori	r31, 0x04	; 4
 c48:	bf 2e       	mov	r11, r31
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x272>
 c4c:	34 fe       	sbrs	r3, 4
 c4e:	0a c0       	rjmp	.+20     	; 0xc64 <vfprintf+0x278>
 c50:	29 2f       	mov	r18, r25
 c52:	26 60       	ori	r18, 0x06	; 6
 c54:	b2 2e       	mov	r11, r18
 c56:	06 c0       	rjmp	.+12     	; 0xc64 <vfprintf+0x278>
 c58:	28 e0       	ldi	r18, 0x08	; 8
 c5a:	30 e0       	ldi	r19, 0x00	; 0
 c5c:	05 c0       	rjmp	.+10     	; 0xc68 <vfprintf+0x27c>
 c5e:	20 e1       	ldi	r18, 0x10	; 16
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <vfprintf+0x27c>
 c64:	20 e1       	ldi	r18, 0x10	; 16
 c66:	32 e0       	ldi	r19, 0x02	; 2
 c68:	f8 01       	movw	r30, r16
 c6a:	b7 fe       	sbrs	r11, 7
 c6c:	07 c0       	rjmp	.+14     	; 0xc7c <vfprintf+0x290>
 c6e:	60 81       	ld	r22, Z
 c70:	71 81       	ldd	r23, Z+1	; 0x01
 c72:	82 81       	ldd	r24, Z+2	; 0x02
 c74:	93 81       	ldd	r25, Z+3	; 0x03
 c76:	0c 5f       	subi	r16, 0xFC	; 252
 c78:	1f 4f       	sbci	r17, 0xFF	; 255
 c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0x29c>
 c7c:	60 81       	ld	r22, Z
 c7e:	71 81       	ldd	r23, Z+1	; 0x01
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 5f       	subi	r16, 0xFE	; 254
 c86:	1f 4f       	sbci	r17, 0xFF	; 255
 c88:	a3 01       	movw	r20, r6
 c8a:	0e 94 29 07 	call	0xe52	; 0xe52 <__ultoa_invert>
 c8e:	88 2e       	mov	r8, r24
 c90:	86 18       	sub	r8, r6
 c92:	fb 2d       	mov	r31, r11
 c94:	ff 77       	andi	r31, 0x7F	; 127
 c96:	3f 2e       	mov	r3, r31
 c98:	36 fe       	sbrs	r3, 6
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <vfprintf+0x2ca>
 c9c:	23 2d       	mov	r18, r3
 c9e:	2e 7f       	andi	r18, 0xFE	; 254
 ca0:	a2 2e       	mov	r10, r18
 ca2:	89 14       	cp	r8, r9
 ca4:	58 f4       	brcc	.+22     	; 0xcbc <vfprintf+0x2d0>
 ca6:	34 fe       	sbrs	r3, 4
 ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <vfprintf+0x2d4>
 caa:	32 fc       	sbrc	r3, 2
 cac:	09 c0       	rjmp	.+18     	; 0xcc0 <vfprintf+0x2d4>
 cae:	83 2d       	mov	r24, r3
 cb0:	8e 7e       	andi	r24, 0xEE	; 238
 cb2:	a8 2e       	mov	r10, r24
 cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <vfprintf+0x2d4>
 cb6:	b8 2c       	mov	r11, r8
 cb8:	a3 2c       	mov	r10, r3
 cba:	03 c0       	rjmp	.+6      	; 0xcc2 <vfprintf+0x2d6>
 cbc:	b8 2c       	mov	r11, r8
 cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <vfprintf+0x2d6>
 cc0:	b9 2c       	mov	r11, r9
 cc2:	a4 fe       	sbrs	r10, 4
 cc4:	0f c0       	rjmp	.+30     	; 0xce4 <vfprintf+0x2f8>
 cc6:	fe 01       	movw	r30, r28
 cc8:	e8 0d       	add	r30, r8
 cca:	f1 1d       	adc	r31, r1
 ccc:	80 81       	ld	r24, Z
 cce:	80 33       	cpi	r24, 0x30	; 48
 cd0:	21 f4       	brne	.+8      	; 0xcda <vfprintf+0x2ee>
 cd2:	9a 2d       	mov	r25, r10
 cd4:	99 7e       	andi	r25, 0xE9	; 233
 cd6:	a9 2e       	mov	r10, r25
 cd8:	09 c0       	rjmp	.+18     	; 0xcec <vfprintf+0x300>
 cda:	a2 fe       	sbrs	r10, 2
 cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x2fe>
 cde:	b3 94       	inc	r11
 ce0:	b3 94       	inc	r11
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <vfprintf+0x300>
 ce4:	8a 2d       	mov	r24, r10
 ce6:	86 78       	andi	r24, 0x86	; 134
 ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0x300>
 cea:	b3 94       	inc	r11
 cec:	a3 fc       	sbrc	r10, 3
 cee:	11 c0       	rjmp	.+34     	; 0xd12 <vfprintf+0x326>
 cf0:	a0 fe       	sbrs	r10, 0
 cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x314>
 cf4:	b2 14       	cp	r11, r2
 cf6:	88 f4       	brcc	.+34     	; 0xd1a <vfprintf+0x32e>
 cf8:	28 0c       	add	r2, r8
 cfa:	92 2c       	mov	r9, r2
 cfc:	9b 18       	sub	r9, r11
 cfe:	0e c0       	rjmp	.+28     	; 0xd1c <vfprintf+0x330>
 d00:	b2 14       	cp	r11, r2
 d02:	60 f4       	brcc	.+24     	; 0xd1c <vfprintf+0x330>
 d04:	b6 01       	movw	r22, r12
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d0e:	b3 94       	inc	r11
 d10:	f7 cf       	rjmp	.-18     	; 0xd00 <vfprintf+0x314>
 d12:	b2 14       	cp	r11, r2
 d14:	18 f4       	brcc	.+6      	; 0xd1c <vfprintf+0x330>
 d16:	2b 18       	sub	r2, r11
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x332>
 d1a:	98 2c       	mov	r9, r8
 d1c:	21 2c       	mov	r2, r1
 d1e:	a4 fe       	sbrs	r10, 4
 d20:	10 c0       	rjmp	.+32     	; 0xd42 <vfprintf+0x356>
 d22:	b6 01       	movw	r22, r12
 d24:	80 e3       	ldi	r24, 0x30	; 48
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d2c:	a2 fe       	sbrs	r10, 2
 d2e:	17 c0       	rjmp	.+46     	; 0xd5e <vfprintf+0x372>
 d30:	a1 fc       	sbrc	r10, 1
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x34e>
 d34:	88 e7       	ldi	r24, 0x78	; 120
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x352>
 d3a:	88 e5       	ldi	r24, 0x58	; 88
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	b6 01       	movw	r22, r12
 d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0x36e>
 d42:	8a 2d       	mov	r24, r10
 d44:	86 78       	andi	r24, 0x86	; 134
 d46:	59 f0       	breq	.+22     	; 0xd5e <vfprintf+0x372>
 d48:	a1 fe       	sbrs	r10, 1
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x364>
 d4c:	8b e2       	ldi	r24, 0x2B	; 43
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x366>
 d50:	80 e2       	ldi	r24, 0x20	; 32
 d52:	a7 fc       	sbrc	r10, 7
 d54:	8d e2       	ldi	r24, 0x2D	; 45
 d56:	b6 01       	movw	r22, r12
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d5e:	89 14       	cp	r8, r9
 d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x384>
 d62:	b6 01       	movw	r22, r12
 d64:	80 e3       	ldi	r24, 0x30	; 48
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d6c:	9a 94       	dec	r9
 d6e:	f7 cf       	rjmp	.-18     	; 0xd5e <vfprintf+0x372>
 d70:	8a 94       	dec	r8
 d72:	f3 01       	movw	r30, r6
 d74:	e8 0d       	add	r30, r8
 d76:	f1 1d       	adc	r31, r1
 d78:	80 81       	ld	r24, Z
 d7a:	b6 01       	movw	r22, r12
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d82:	81 10       	cpse	r8, r1
 d84:	f5 cf       	rjmp	.-22     	; 0xd70 <vfprintf+0x384>
 d86:	22 20       	and	r2, r2
 d88:	09 f4       	brne	.+2      	; 0xd8c <vfprintf+0x3a0>
 d8a:	42 ce       	rjmp	.-892    	; 0xa10 <vfprintf+0x24>
 d8c:	b6 01       	movw	r22, r12
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d96:	2a 94       	dec	r2
 d98:	f6 cf       	rjmp	.-20     	; 0xd86 <vfprintf+0x39a>
 d9a:	f6 01       	movw	r30, r12
 d9c:	86 81       	ldd	r24, Z+6	; 0x06
 d9e:	97 81       	ldd	r25, Z+7	; 0x07
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x3ba>
 da2:	8f ef       	ldi	r24, 0xFF	; 255
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	2b 96       	adiw	r28, 0x0b	; 11
 da8:	e2 e1       	ldi	r30, 0x12	; 18
 daa:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__epilogue_restores__>

00000dae <strnlen_P>:
 dae:	fc 01       	movw	r30, r24
 db0:	05 90       	lpm	r0, Z+
 db2:	61 50       	subi	r22, 0x01	; 1
 db4:	70 40       	sbci	r23, 0x00	; 0
 db6:	01 10       	cpse	r0, r1
 db8:	d8 f7       	brcc	.-10     	; 0xdb0 <strnlen_P+0x2>
 dba:	80 95       	com	r24
 dbc:	90 95       	com	r25
 dbe:	8e 0f       	add	r24, r30
 dc0:	9f 1f       	adc	r25, r31
 dc2:	08 95       	ret

00000dc4 <strnlen>:
 dc4:	fc 01       	movw	r30, r24
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 90       	ld	r0, Z+
 dcc:	01 10       	cpse	r0, r1
 dce:	d8 f7       	brcc	.-10     	; 0xdc6 <strnlen+0x2>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	8e 0f       	add	r24, r30
 dd6:	9f 1f       	adc	r25, r31
 dd8:	08 95       	ret

00000dda <fputc>:
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	fb 01       	movw	r30, r22
 de4:	23 81       	ldd	r18, Z+3	; 0x03
 de6:	21 fd       	sbrc	r18, 1
 de8:	03 c0       	rjmp	.+6      	; 0xdf0 <fputc+0x16>
 dea:	8f ef       	ldi	r24, 0xFF	; 255
 dec:	9f ef       	ldi	r25, 0xFF	; 255
 dee:	2c c0       	rjmp	.+88     	; 0xe48 <fputc+0x6e>
 df0:	22 ff       	sbrs	r18, 2
 df2:	16 c0       	rjmp	.+44     	; 0xe20 <fputc+0x46>
 df4:	46 81       	ldd	r20, Z+6	; 0x06
 df6:	57 81       	ldd	r21, Z+7	; 0x07
 df8:	24 81       	ldd	r18, Z+4	; 0x04
 dfa:	35 81       	ldd	r19, Z+5	; 0x05
 dfc:	42 17       	cp	r20, r18
 dfe:	53 07       	cpc	r21, r19
 e00:	44 f4       	brge	.+16     	; 0xe12 <fputc+0x38>
 e02:	a0 81       	ld	r26, Z
 e04:	b1 81       	ldd	r27, Z+1	; 0x01
 e06:	9d 01       	movw	r18, r26
 e08:	2f 5f       	subi	r18, 0xFF	; 255
 e0a:	3f 4f       	sbci	r19, 0xFF	; 255
 e0c:	31 83       	std	Z+1, r19	; 0x01
 e0e:	20 83       	st	Z, r18
 e10:	8c 93       	st	X, r24
 e12:	26 81       	ldd	r18, Z+6	; 0x06
 e14:	37 81       	ldd	r19, Z+7	; 0x07
 e16:	2f 5f       	subi	r18, 0xFF	; 255
 e18:	3f 4f       	sbci	r19, 0xFF	; 255
 e1a:	37 83       	std	Z+7, r19	; 0x07
 e1c:	26 83       	std	Z+6, r18	; 0x06
 e1e:	14 c0       	rjmp	.+40     	; 0xe48 <fputc+0x6e>
 e20:	8b 01       	movw	r16, r22
 e22:	ec 01       	movw	r28, r24
 e24:	fb 01       	movw	r30, r22
 e26:	00 84       	ldd	r0, Z+8	; 0x08
 e28:	f1 85       	ldd	r31, Z+9	; 0x09
 e2a:	e0 2d       	mov	r30, r0
 e2c:	09 95       	icall
 e2e:	89 2b       	or	r24, r25
 e30:	e1 f6       	brne	.-72     	; 0xdea <fputc+0x10>
 e32:	d8 01       	movw	r26, r16
 e34:	16 96       	adiw	r26, 0x06	; 6
 e36:	8d 91       	ld	r24, X+
 e38:	9c 91       	ld	r25, X
 e3a:	17 97       	sbiw	r26, 0x07	; 7
 e3c:	01 96       	adiw	r24, 0x01	; 1
 e3e:	17 96       	adiw	r26, 0x07	; 7
 e40:	9c 93       	st	X, r25
 e42:	8e 93       	st	-X, r24
 e44:	16 97       	sbiw	r26, 0x06	; 6
 e46:	ce 01       	movw	r24, r28
 e48:	df 91       	pop	r29
 e4a:	cf 91       	pop	r28
 e4c:	1f 91       	pop	r17
 e4e:	0f 91       	pop	r16
 e50:	08 95       	ret

00000e52 <__ultoa_invert>:
 e52:	fa 01       	movw	r30, r20
 e54:	aa 27       	eor	r26, r26
 e56:	28 30       	cpi	r18, 0x08	; 8
 e58:	51 f1       	breq	.+84     	; 0xeae <__ultoa_invert+0x5c>
 e5a:	20 31       	cpi	r18, 0x10	; 16
 e5c:	81 f1       	breq	.+96     	; 0xebe <__ultoa_invert+0x6c>
 e5e:	e8 94       	clt
 e60:	6f 93       	push	r22
 e62:	6e 7f       	andi	r22, 0xFE	; 254
 e64:	6e 5f       	subi	r22, 0xFE	; 254
 e66:	7f 4f       	sbci	r23, 0xFF	; 255
 e68:	8f 4f       	sbci	r24, 0xFF	; 255
 e6a:	9f 4f       	sbci	r25, 0xFF	; 255
 e6c:	af 4f       	sbci	r26, 0xFF	; 255
 e6e:	b1 e0       	ldi	r27, 0x01	; 1
 e70:	3e d0       	rcall	.+124    	; 0xeee <__ultoa_invert+0x9c>
 e72:	b4 e0       	ldi	r27, 0x04	; 4
 e74:	3c d0       	rcall	.+120    	; 0xeee <__ultoa_invert+0x9c>
 e76:	67 0f       	add	r22, r23
 e78:	78 1f       	adc	r23, r24
 e7a:	89 1f       	adc	r24, r25
 e7c:	9a 1f       	adc	r25, r26
 e7e:	a1 1d       	adc	r26, r1
 e80:	68 0f       	add	r22, r24
 e82:	79 1f       	adc	r23, r25
 e84:	8a 1f       	adc	r24, r26
 e86:	91 1d       	adc	r25, r1
 e88:	a1 1d       	adc	r26, r1
 e8a:	6a 0f       	add	r22, r26
 e8c:	71 1d       	adc	r23, r1
 e8e:	81 1d       	adc	r24, r1
 e90:	91 1d       	adc	r25, r1
 e92:	a1 1d       	adc	r26, r1
 e94:	20 d0       	rcall	.+64     	; 0xed6 <__ultoa_invert+0x84>
 e96:	09 f4       	brne	.+2      	; 0xe9a <__ultoa_invert+0x48>
 e98:	68 94       	set
 e9a:	3f 91       	pop	r19
 e9c:	2a e0       	ldi	r18, 0x0A	; 10
 e9e:	26 9f       	mul	r18, r22
 ea0:	11 24       	eor	r1, r1
 ea2:	30 19       	sub	r19, r0
 ea4:	30 5d       	subi	r19, 0xD0	; 208
 ea6:	31 93       	st	Z+, r19
 ea8:	de f6       	brtc	.-74     	; 0xe60 <__ultoa_invert+0xe>
 eaa:	cf 01       	movw	r24, r30
 eac:	08 95       	ret
 eae:	46 2f       	mov	r20, r22
 eb0:	47 70       	andi	r20, 0x07	; 7
 eb2:	40 5d       	subi	r20, 0xD0	; 208
 eb4:	41 93       	st	Z+, r20
 eb6:	b3 e0       	ldi	r27, 0x03	; 3
 eb8:	0f d0       	rcall	.+30     	; 0xed8 <__ultoa_invert+0x86>
 eba:	c9 f7       	brne	.-14     	; 0xeae <__ultoa_invert+0x5c>
 ebc:	f6 cf       	rjmp	.-20     	; 0xeaa <__ultoa_invert+0x58>
 ebe:	46 2f       	mov	r20, r22
 ec0:	4f 70       	andi	r20, 0x0F	; 15
 ec2:	40 5d       	subi	r20, 0xD0	; 208
 ec4:	4a 33       	cpi	r20, 0x3A	; 58
 ec6:	18 f0       	brcs	.+6      	; 0xece <__ultoa_invert+0x7c>
 ec8:	49 5d       	subi	r20, 0xD9	; 217
 eca:	31 fd       	sbrc	r19, 1
 ecc:	40 52       	subi	r20, 0x20	; 32
 ece:	41 93       	st	Z+, r20
 ed0:	02 d0       	rcall	.+4      	; 0xed6 <__ultoa_invert+0x84>
 ed2:	a9 f7       	brne	.-22     	; 0xebe <__ultoa_invert+0x6c>
 ed4:	ea cf       	rjmp	.-44     	; 0xeaa <__ultoa_invert+0x58>
 ed6:	b4 e0       	ldi	r27, 0x04	; 4
 ed8:	a6 95       	lsr	r26
 eda:	97 95       	ror	r25
 edc:	87 95       	ror	r24
 ede:	77 95       	ror	r23
 ee0:	67 95       	ror	r22
 ee2:	ba 95       	dec	r27
 ee4:	c9 f7       	brne	.-14     	; 0xed8 <__ultoa_invert+0x86>
 ee6:	00 97       	sbiw	r24, 0x00	; 0
 ee8:	61 05       	cpc	r22, r1
 eea:	71 05       	cpc	r23, r1
 eec:	08 95       	ret
 eee:	9b 01       	movw	r18, r22
 ef0:	ac 01       	movw	r20, r24
 ef2:	0a 2e       	mov	r0, r26
 ef4:	06 94       	lsr	r0
 ef6:	57 95       	ror	r21
 ef8:	47 95       	ror	r20
 efa:	37 95       	ror	r19
 efc:	27 95       	ror	r18
 efe:	ba 95       	dec	r27
 f00:	c9 f7       	brne	.-14     	; 0xef4 <__ultoa_invert+0xa2>
 f02:	62 0f       	add	r22, r18
 f04:	73 1f       	adc	r23, r19
 f06:	84 1f       	adc	r24, r20
 f08:	95 1f       	adc	r25, r21
 f0a:	a0 1d       	adc	r26, r0
 f0c:	08 95       	ret

00000f0e <__prologue_saves__>:
 f0e:	2f 92       	push	r2
 f10:	3f 92       	push	r3
 f12:	4f 92       	push	r4
 f14:	5f 92       	push	r5
 f16:	6f 92       	push	r6
 f18:	7f 92       	push	r7
 f1a:	8f 92       	push	r8
 f1c:	9f 92       	push	r9
 f1e:	af 92       	push	r10
 f20:	bf 92       	push	r11
 f22:	cf 92       	push	r12
 f24:	df 92       	push	r13
 f26:	ef 92       	push	r14
 f28:	ff 92       	push	r15
 f2a:	0f 93       	push	r16
 f2c:	1f 93       	push	r17
 f2e:	cf 93       	push	r28
 f30:	df 93       	push	r29
 f32:	cd b7       	in	r28, 0x3d	; 61
 f34:	de b7       	in	r29, 0x3e	; 62
 f36:	ca 1b       	sub	r28, r26
 f38:	db 0b       	sbc	r29, r27
 f3a:	0f b6       	in	r0, 0x3f	; 63
 f3c:	f8 94       	cli
 f3e:	de bf       	out	0x3e, r29	; 62
 f40:	0f be       	out	0x3f, r0	; 63
 f42:	cd bf       	out	0x3d, r28	; 61
 f44:	09 94       	ijmp

00000f46 <__epilogue_restores__>:
 f46:	2a 88       	ldd	r2, Y+18	; 0x12
 f48:	39 88       	ldd	r3, Y+17	; 0x11
 f4a:	48 88       	ldd	r4, Y+16	; 0x10
 f4c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f4e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f50:	7d 84       	ldd	r7, Y+13	; 0x0d
 f52:	8c 84       	ldd	r8, Y+12	; 0x0c
 f54:	9b 84       	ldd	r9, Y+11	; 0x0b
 f56:	aa 84       	ldd	r10, Y+10	; 0x0a
 f58:	b9 84       	ldd	r11, Y+9	; 0x09
 f5a:	c8 84       	ldd	r12, Y+8	; 0x08
 f5c:	df 80       	ldd	r13, Y+7	; 0x07
 f5e:	ee 80       	ldd	r14, Y+6	; 0x06
 f60:	fd 80       	ldd	r15, Y+5	; 0x05
 f62:	0c 81       	ldd	r16, Y+4	; 0x04
 f64:	1b 81       	ldd	r17, Y+3	; 0x03
 f66:	aa 81       	ldd	r26, Y+2	; 0x02
 f68:	b9 81       	ldd	r27, Y+1	; 0x01
 f6a:	ce 0f       	add	r28, r30
 f6c:	d1 1d       	adc	r29, r1
 f6e:	0f b6       	in	r0, 0x3f	; 63
 f70:	f8 94       	cli
 f72:	de bf       	out	0x3e, r29	; 62
 f74:	0f be       	out	0x3f, r0	; 63
 f76:	cd bf       	out	0x3d, r28	; 61
 f78:	ed 01       	movw	r28, r26
 f7a:	08 95       	ret

00000f7c <_exit>:
 f7c:	f8 94       	cli

00000f7e <__stop_program>:
 f7e:	ff cf       	rjmp	.-2      	; 0xf7e <__stop_program>
