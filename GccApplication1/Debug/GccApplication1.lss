
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004dc  00800100  00001c8a  00001d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  008005dc  008005dc  000021fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000371c  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bd  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ae7  00000000  00000000  00006ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00008988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d75  00000000  00000000  00008fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d2  00000000  00000000  00009d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3d       	cpi	r26, 0xDC	; 220
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ac ed       	ldi	r26, 0xDC	; 220
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 37       	cpi	r26, 0x77	; 119
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
      9e:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <ultraSensor>
     100:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <ultraSensor+0x1>
     104:	a0 93 59 06 	sts	0x0659, r26	; 0x800659 <ultraSensor+0x2>
     108:	b0 93 5a 06 	sts	0x065A, r27	; 0x80065a <ultraSensor+0x3>
     10c:	e3 e6       	ldi	r30, 0x63	; 99
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <ultraSensor+0x4>
     13c:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <ultraSensor+0x5>
     140:	a0 93 5d 06 	sts	0x065D, r26	; 0x80065d <ultraSensor+0x6>
     144:	b0 93 5e 06 	sts	0x065E, r27	; 0x80065e <ultraSensor+0x7>
     148:	e3 e6       	ldi	r30, 0x63	; 99
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
     1ca:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <bandera3>
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <bandera3>
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	45 c0       	rjmp	.+138    	; 0x262 <__vector_11+0xd4>
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	e2 5b       	subi	r30, 0xB2	; 178
     1e4:	f9 4f       	sbci	r31, 0xF9	; 249
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__vector_11+0xd2>
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <__vector_11+0x7a>
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x7a>
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_11+0x88>
     208:	f8 01       	movw	r30, r16
     20a:	84 81       	ldd	r24, Z+4	; 0x04
     20c:	0e 94 21 08 	call	0x1042	; 0x1042 <calculate_angle_pulseUs>
     210:	f8 01       	movw	r30, r16
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	c1 11       	cpse	r28, r1
     218:	23 c0       	rjmp	.+70     	; 0x260 <__vector_11+0xd2>
     21a:	f7 01       	movw	r30, r14
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e2 5b       	subi	r30, 0xB2	; 178
     222:	f9 4f       	sbci	r31, 0xF9	; 249
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	2c 91       	ld	r18, X
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	01 90       	ld	r0, Z+
     248:	f0 81       	ld	r31, Z
     24a:	e0 2d       	mov	r30, r0
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     25c:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <current_servo>
     260:	cf 5f       	subi	r28, 0xFF	; 255
     262:	c3 30       	cpi	r28, 0x03	; 3
     264:	08 f4       	brcc	.+2      	; 0x268 <__vector_11+0xda>
     266:	b8 cf       	rjmp	.-144    	; 0x1d8 <__vector_11+0x4a>
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	cf 91       	pop	r28
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_12>:
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
     2ba:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	e2 5b       	subi	r30, 0xB2	; 178
     2c6:	f9 4f       	sbci	r31, 0xF9	; 249
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 81       	ld	r18, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_12+0x46>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_12+0x42>
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	89 23       	and	r24, r25
     2e6:	85 b9       	out	0x05, r24	; 5
     2e8:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e2 5b       	subi	r30, 0xB2	; 178
     2f4:	f9 4f       	sbci	r31, 0xF9	; 249
     2f6:	01 90       	ld	r0, Z+
     2f8:	f0 81       	ld	r31, Z
     2fa:	e0 2d       	mov	r30, r0
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	81 ff       	sbrs	r24, 1
     300:	71 c0       	rjmp	.+226    	; 0x3e4 <__vector_12+0x150>
     302:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e2 5b       	subi	r30, 0xB2	; 178
     30e:	f9 4f       	sbci	r31, 0xF9	; 249
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	82 ff       	sbrs	r24, 2
     31a:	64 c0       	rjmp	.+200    	; 0x3e4 <__vector_12+0x150>
     31c:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e2 5b       	subi	r30, 0xB2	; 178
     328:	f9 4f       	sbci	r31, 0xF9	; 249
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	81 81       	ldd	r24, Z+1	; 0x01
     332:	8b 7f       	andi	r24, 0xFB	; 251
     334:	81 83       	std	Z+1, r24	; 0x01
     336:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	e2 5b       	subi	r30, 0xB2	; 178
     342:	f9 4f       	sbci	r31, 0xF9	; 249
     344:	01 90       	ld	r0, Z+
     346:	f0 81       	ld	r31, Z
     348:	e0 2d       	mov	r30, r0
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	81 83       	std	Z+1, r24	; 0x01
     350:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e2 5b       	subi	r30, 0xB2	; 178
     35c:	f9 4f       	sbci	r31, 0xF9	; 249
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	8a e5       	ldi	r24, 0x5A	; 90
     366:	84 83       	std	Z+4, r24	; 0x04
     368:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	e2 5b       	subi	r30, 0xB2	; 178
     374:	f9 4f       	sbci	r31, 0xF9	; 249
     376:	c0 81       	ld	r28, Z
     378:	d1 81       	ldd	r29, Z+1	; 0x01
     37a:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 5b       	subi	r30, 0xB2	; 178
     386:	f9 4f       	sbci	r31, 0xF9	; 249
     388:	80 81       	ld	r24, Z
     38a:	0e 94 21 08 	call	0x1042	; 0x1042 <calculate_angle_pulseUs>
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02
     392:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     396:	81 11       	cpse	r24, r1
     398:	0a c0       	rjmp	.+20     	; 0x3ae <__vector_12+0x11a>
     39a:	e8 ef       	ldi	r30, 0xF8	; 248
     39c:	f5 e0       	ldi	r31, 0x05	; 5
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	82 83       	std	Z+2, r24	; 0x02
     3a4:	82 e2       	ldi	r24, 0x22	; 34
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     3ac:	1b c0       	rjmp	.+54     	; 0x3e4 <__vector_12+0x150>
     3ae:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	51 f4       	brne	.+20     	; 0x3ca <__vector_12+0x136>
     3b6:	ee e6       	ldi	r30, 0x6E	; 110
     3b8:	f6 e0       	ldi	r31, 0x06	; 6
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	88 60       	ori	r24, 0x08	; 8
     3be:	82 83       	std	Z+2, r24	; 0x02
     3c0:	8b e3       	ldi	r24, 0x3B	; 59
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <__vector_12+0x150>
     3ca:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	49 f4       	brne	.+18     	; 0x3e4 <__vector_12+0x150>
     3d2:	e4 e5       	ldi	r30, 0x54	; 84
     3d4:	f6 e0       	ldi	r31, 0x06	; 6
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	82 83       	std	Z+2, r24	; 0x02
     3dc:	84 e5       	ldi	r24, 0x54	; 84
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     3e4:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <current_servo>
     3ee:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__vector_12+0x164>
     3f6:	91 c0       	rjmp	.+290    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     3f8:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e2 5b       	subi	r30, 0xB2	; 178
     404:	f9 4f       	sbci	r31, 0xF9	; 249
     406:	01 90       	ld	r0, Z+
     408:	f0 81       	ld	r31, Z
     40a:	e0 2d       	mov	r30, r0
     40c:	81 81       	ldd	r24, Z+1	; 0x01
     40e:	80 ff       	sbrs	r24, 0
     410:	2c c0       	rjmp	.+88     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     412:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	e2 5b       	subi	r30, 0xB2	; 178
     41e:	f9 4f       	sbci	r31, 0xF9	; 249
     420:	01 90       	ld	r0, Z+
     422:	f0 81       	ld	r31, Z
     424:	e0 2d       	mov	r30, r0
     426:	20 81       	ld	r18, Z
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	2a 95       	dec	r18
     434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     436:	95 b1       	in	r25, 0x05	; 5
     438:	89 2b       	or	r24, r25
     43a:	85 b9       	out	0x05, r24	; 5
     43c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     440:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     444:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e2 5b       	subi	r30, 0xB2	; 178
     450:	f9 4f       	sbci	r31, 0xF9	; 249
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	82 81       	ldd	r24, Z+2	; 0x02
     45a:	93 81       	ldd	r25, Z+3	; 0x03
     45c:	82 0f       	add	r24, r18
     45e:	93 1f       	adc	r25, r19
     460:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     464:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     468:	58 c0       	rjmp	.+176    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     46a:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	e2 5b       	subi	r30, 0xB2	; 178
     476:	f9 4f       	sbci	r31, 0xF9	; 249
     478:	01 90       	ld	r0, Z+
     47a:	f0 81       	ld	r31, Z
     47c:	e0 2d       	mov	r30, r0
     47e:	20 81       	ld	r18, Z
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	2a 95       	dec	r18
     48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48e:	80 95       	com	r24
     490:	90 95       	com	r25
     492:	95 b1       	in	r25, 0x05	; 5
     494:	89 23       	and	r24, r25
     496:	85 b9       	out	0x05, r24	; 5
     498:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <current_servo>
     4a2:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <current_servo>
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	c0 f5       	brcc	.+112    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     4aa:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	e2 5b       	subi	r30, 0xB2	; 178
     4b6:	f9 4f       	sbci	r31, 0xF9	; 249
     4b8:	01 90       	ld	r0, Z+
     4ba:	f0 81       	ld	r31, Z
     4bc:	e0 2d       	mov	r30, r0
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	80 ff       	sbrs	r24, 0
     4c2:	2b c0       	rjmp	.+86     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     4c4:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e2 5b       	subi	r30, 0xB2	; 178
     4d0:	f9 4f       	sbci	r31, 0xF9	; 249
     4d2:	01 90       	ld	r0, Z+
     4d4:	f0 81       	ld	r31, Z
     4d6:	e0 2d       	mov	r30, r0
     4d8:	20 81       	ld	r18, Z
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	2a 95       	dec	r18
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e8:	95 b1       	in	r25, 0x05	; 5
     4ea:	89 2b       	or	r24, r25
     4ec:	85 b9       	out	0x05, r24	; 5
     4ee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4f2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4f6:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <current_servo>
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	e2 5b       	subi	r30, 0xB2	; 178
     502:	f9 4f       	sbci	r31, 0xF9	; 249
     504:	01 90       	ld	r0, Z+
     506:	f0 81       	ld	r31, Z
     508:	e0 2d       	mov	r30, r0
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	93 81       	ldd	r25, Z+3	; 0x03
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     516:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <timer1_init>:
     540:	a4 e8       	ldi	r26, 0x84	; 132
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	11 96       	adiw	r26, 0x01	; 1
     546:	1c 92       	st	X, r1
     548:	1e 92       	st	-X, r1
     54a:	86 b3       	in	r24, 0x16	; 22
     54c:	80 62       	ori	r24, 0x20	; 32
     54e:	86 bb       	out	0x16, r24	; 22
     550:	ef e6       	ldi	r30, 0x6F	; 111
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	87 62       	ori	r24, 0x27	; 39
     558:	80 83       	st	Z, r24
     55a:	e1 e8       	ldi	r30, 0x81	; 129
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	80 64       	ori	r24, 0x40	; 64
     562:	80 83       	st	Z, r24
     564:	80 81       	ld	r24, Z
     566:	82 60       	ori	r24, 0x02	; 2
     568:	80 83       	st	Z, r24
     56a:	8d 91       	ld	r24, X+
     56c:	9c 91       	ld	r25, X
     56e:	80 5c       	subi	r24, 0xC0	; 192
     570:	93 46       	sbci	r25, 0x63	; 99
     572:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     576:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     57a:	08 95       	ret

0000057c <timer2_init>:
     57c:	e1 eb       	ldi	r30, 0xB1	; 177
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	87 60       	ori	r24, 0x07	; 7
     584:	80 83       	st	Z, r24
     586:	8b e9       	ldi	r24, 0x9B	; 155
     588:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     58c:	e0 e7       	ldi	r30, 0x70	; 112
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	82 60       	ori	r24, 0x02	; 2
     594:	80 83       	st	Z, r24
     596:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     59a:	08 95       	ret

0000059c <gpio_pins_init>:
     59c:	84 b1       	in	r24, 0x04	; 4
     59e:	80 62       	ori	r24, 0x20	; 32
     5a0:	84 b9       	out	0x04, r24	; 4
     5a2:	85 b1       	in	r24, 0x05	; 5
     5a4:	80 62       	ori	r24, 0x20	; 32
     5a6:	85 b9       	out	0x05, r24	; 5
     5a8:	8a b1       	in	r24, 0x0a	; 10
     5aa:	88 60       	ori	r24, 0x08	; 8
     5ac:	8a b9       	out	0x0a, r24	; 10
     5ae:	84 b1       	in	r24, 0x04	; 4
     5b0:	8e 7f       	andi	r24, 0xFE	; 254
     5b2:	84 b9       	out	0x04, r24	; 4
     5b4:	8a b1       	in	r24, 0x0a	; 10
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	8a b9       	out	0x0a, r24	; 10
     5ba:	84 b1       	in	r24, 0x04	; 4
     5bc:	82 60       	ori	r24, 0x02	; 2
     5be:	84 b9       	out	0x04, r24	; 4
     5c0:	84 b1       	in	r24, 0x04	; 4
     5c2:	84 60       	ori	r24, 0x04	; 4
     5c4:	84 b9       	out	0x04, r24	; 4
     5c6:	84 b1       	in	r24, 0x04	; 4
     5c8:	88 60       	ori	r24, 0x08	; 8
     5ca:	84 b9       	out	0x04, r24	; 4
     5cc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <tcrt_init>
     5d0:	8b b1       	in	r24, 0x0b	; 11
     5d2:	87 7f       	andi	r24, 0xF7	; 247
     5d4:	8b b9       	out	0x0b, r24	; 11
     5d6:	8b b1       	in	r24, 0x0b	; 11
     5d8:	8f 7e       	andi	r24, 0xEF	; 239
     5da:	8b b9       	out	0x0b, r24	; 11
     5dc:	08 95       	ret

000005de <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     600:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     604:	81 ff       	sbrs	r24, 1
     606:	c9 c0       	rjmp	.+402    	; 0x79a <__vector_7+0x1bc>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     608:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <ultraSensor+0xd>
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	51 f5       	brne	.+84     	; 0x664 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     610:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     614:	85 fd       	sbrc	r24, 5
     616:	0d c0       	rjmp	.+26     	; 0x632 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     618:	0e 94 75 09 	call	0x12ea	; 0x12ea <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     61c:	e3 e6       	ldi	r30, 0x63	; 99
     61e:	f6 e0       	ldi	r31, 0x06	; 6
     620:	80 81       	ld	r24, Z
     622:	81 60       	ori	r24, 0x01	; 1
     624:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     626:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     62a:	80 62       	ori	r24, 0x20	; 32
     62c:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
     630:	19 c0       	rjmp	.+50     	; 0x664 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     632:	0e 94 79 09 	call	0x12f2	; 0x12f2 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     636:	e3 e6       	ldi	r30, 0x63	; 99
     638:	f6 e0       	ldi	r31, 0x06	; 6
     63a:	80 81       	ld	r24, Z
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     640:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     644:	8d 7d       	andi	r24, 0xDD	; 221
     646:	88 60       	ori	r24, 0x08	; 8
     648:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     64c:	80 81       	ld	r24, Z
     64e:	8f 7d       	andi	r24, 0xDF	; 223
     650:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     658:	80 81       	ld	r24, Z
     65a:	80 61       	ori	r24, 0x10	; 16
     65c:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     65e:	80 81       	ld	r24, Z
     660:	8d 7f       	andi	r24, 0xFD	; 253
     662:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     664:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <ultraSensor+0xd>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	d1 f4       	brne	.+52     	; 0x6a0 <__vector_7+0xc2>
     66c:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <ultraSensor+0xc>
     670:	84 ff       	sbrs	r24, 4
     672:	16 c0       	rjmp	.+44     	; 0x6a0 <__vector_7+0xc2>
     674:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     678:	89 70       	andi	r24, 0x09	; 9
     67a:	88 30       	cpi	r24, 0x08	; 8
     67c:	89 f4       	brne	.+34     	; 0x6a0 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     67e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <veintems_counter>
     682:	81 11       	cpse	r24, r1
     684:	06 c0       	rjmp	.+12     	; 0x692 <__vector_7+0xb4>
				veintems_counter++;
     686:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <veintems_counter>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <veintems_counter>
     690:	07 c0       	rjmp	.+14     	; 0x6a0 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     692:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     696:	81 60       	ori	r24, 0x01	; 1
     698:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
				veintems_counter = 0;
     69c:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     6a0:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <ultraSensor+0xc>
     6a4:	85 fd       	sbrc	r24, 5
     6a6:	22 c0       	rjmp	.+68     	; 0x6ec <__vector_7+0x10e>
     6a8:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     6ac:	84 fd       	sbrc	r24, 4
     6ae:	1e c0       	rjmp	.+60     	; 0x6ec <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     6b0:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <wait_time>
     6b4:	87 30       	cpi	r24, 0x07	; 7
     6b6:	30 f4       	brcc	.+12     	; 0x6c4 <__vector_7+0xe6>
				wait_time++;
     6b8:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <wait_time>
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <wait_time>
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     6c4:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     6c8:	80 61       	ori	r24, 0x10	; 16
     6ca:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
				wait_time = 0;
     6ce:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     6d2:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <ultraSensor+0xc>
     6d6:	83 ff       	sbrs	r24, 3
     6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     6da:	60 91 33 06 	lds	r22, 0x0633	; 0x800633 <bandera2>
     6de:	66 fb       	bst	r22, 6
     6e0:	66 27       	eor	r22, r22
     6e2:	60 f9       	bld	r22, 0
     6e4:	87 e5       	ldi	r24, 0x57	; 87
     6e6:	96 e0       	ldi	r25, 0x06	; 6
     6e8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     6ec:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <diezMsCounter>
     6f0:	8a 30       	cpi	r24, 0x0A	; 10
     6f2:	30 f4       	brcc	.+12     	; 0x700 <__vector_7+0x122>
			diezMsCounter++;
     6f4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <diezMsCounter>
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <diezMsCounter>
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     700:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     704:	88 60       	ori	r24, 0x08	; 8
     706:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			diezMsCounter = 0;
     70a:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     70e:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     712:	86 ff       	sbrs	r24, 6
     714:	0e c0       	rjmp	.+28     	; 0x732 <__vector_7+0x154>
			if(btn_pressed_time == 255){
     716:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <btn_pressed_time>
     71a:	8f 3f       	cpi	r24, 0xFF	; 255
     71c:	29 f4       	brne	.+10     	; 0x728 <__vector_7+0x14a>
				BTN_OVF = 1;
     71e:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     722:	84 60       	ori	r24, 0x04	; 4
     724:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			}
			btn_pressed_time++;
     728:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <btn_pressed_time>
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     732:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <servoA+0x1>
     736:	81 ff       	sbrs	r24, 1
     738:	0d c0       	rjmp	.+26     	; 0x754 <__vector_7+0x176>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     73a:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <servoA+0x5>
     73e:	9a 30       	cpi	r25, 0x0A	; 10
     740:	20 f4       	brcc	.+8      	; 0x74a <__vector_7+0x16c>
				servoA.state_time++;  // Increment time spent in PUSH mode
     742:	9f 5f       	subi	r25, 0xFF	; 255
     744:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <servoA+0x5>
     748:	05 c0       	rjmp	.+10     	; 0x754 <__vector_7+0x176>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     74a:	e2 ef       	ldi	r30, 0xF2	; 242
     74c:	f5 e0       	ldi	r31, 0x05	; 5
     74e:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     750:	84 60       	ori	r24, 0x04	; 4
     752:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     754:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <servoB+0x1>
     758:	81 ff       	sbrs	r24, 1
     75a:	0d c0       	rjmp	.+26     	; 0x776 <__vector_7+0x198>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     75c:	90 91 6d 06 	lds	r25, 0x066D	; 0x80066d <servoB+0x5>
     760:	9a 30       	cpi	r25, 0x0A	; 10
     762:	20 f4       	brcc	.+8      	; 0x76c <__vector_7+0x18e>
				servoB.state_time++;  // Increment time spent in PUSH mode
     764:	9f 5f       	subi	r25, 0xFF	; 255
     766:	90 93 6d 06 	sts	0x066D, r25	; 0x80066d <servoB+0x5>
     76a:	05 c0       	rjmp	.+10     	; 0x776 <__vector_7+0x198>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     76c:	e8 e6       	ldi	r30, 0x68	; 104
     76e:	f6 e0       	ldi	r31, 0x06	; 6
     770:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     772:	84 60       	ori	r24, 0x04	; 4
     774:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     776:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     77a:	80 ff       	sbrs	r24, 0
     77c:	05 c0       	rjmp	.+10     	; 0x788 <__vector_7+0x1aa>
     77e:	83 fd       	sbrc	r24, 3
     780:	03 c0       	rjmp	.+6      	; 0x788 <__vector_7+0x1aa>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     782:	88 60       	ori	r24, 0x08	; 8
     784:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     788:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     78c:	80 ff       	sbrs	r24, 0
     78e:	05 c0       	rjmp	.+10     	; 0x79a <__vector_7+0x1bc>
     790:	83 fd       	sbrc	r24, 3
     792:	03 c0       	rjmp	.+6      	; 0x79a <__vector_7+0x1bc>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     794:	88 60       	ori	r24, 0x08	; 8
     796:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <IR_B>
// 		}
// 		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
// 			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
// 		}
	}
}
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <main>:
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     7bc:	82 e8       	ldi	r24, 0x82	; 130
     7be:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     7c2:	80 e8       	ldi	r24, 0x80	; 128
     7c4:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
	IR_CALIBRATED = 0;
     7c8:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 89 09 	call	0x1312	; 0x1312 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     7d4:	e1 e7       	ldi	r30, 0x71	; 113
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	8e e0       	ldi	r24, 0x0E	; 14
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	93 83       	std	Z+3, r25	; 0x03
     7de:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
	diezMsCounter = 0;
     7e8:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     7ec:	0e 94 ce 02 	call	0x59c	; 0x59c <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     7f0:	0e 94 a0 02 	call	0x540	; 0x540 <timer1_init>
	timer2_init();
     7f4:	0e 94 be 02 	call	0x57c	; 0x57c <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     7f8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     7fc:	63 e5       	ldi	r22, 0x53	; 83
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	87 e5       	ldi	r24, 0x57	; 87
     802:	96 e0       	ldi	r25, 0x06	; 6
     804:	0e 94 2b 0a 	call	0x1456	; 0x1456 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     808:	60 91 33 06 	lds	r22, 0x0633	; 0x800633 <bandera2>
     80c:	66 fb       	bst	r22, 6
     80e:	66 27       	eor	r22, r22
     810:	60 f9       	bld	r22, 0
     812:	87 e5       	ldi	r24, 0x57	; 87
     814:	96 e0       	ldi	r25, 0x06	; 6
     816:	0e 94 b4 09 	call	0x1368	; 0x1368 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     81a:	4b ef       	ldi	r20, 0xFB	; 251
     81c:	55 e0       	ldi	r21, 0x05	; 5
     81e:	67 e5       	ldi	r22, 0x57	; 87
     820:	76 e0       	ldi	r23, 0x06	; 6
     822:	89 e4       	ldi	r24, 0x49	; 73
     824:	96 e0       	ldi	r25, 0x06	; 6
     826:	0e 94 24 05 	call	0xa48	; 0xa48 <initDetector>
	initSorter(&SorterSystem);
     82a:	8a e1       	ldi	r24, 0x1A	; 26
     82c:	96 e0       	ldi	r25, 0x06	; 6
     82e:	0e 94 8b 05 	call	0xb16	; 0xb16 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     832:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     836:	82 60       	ori	r24, 0x02	; 2
     838:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     83c:	8f eb       	ldi	r24, 0xBF	; 191
     83e:	94 e0       	ldi	r25, 0x04	; 4
     840:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
	sei();
     844:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     846:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <bandera3>
     84a:	80 ff       	sbrs	r24, 0
     84c:	05 c0       	rjmp	.+10     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			irSensorsTask(&SorterSystem);
     84e:	8a e1       	ldi	r24, 0x1A	; 26
     850:	96 e0       	ldi	r25, 0x06	; 6
     852:	0e 94 6d 07 	call	0xeda	; 0xeda <irSensorsTask>
     856:	69 c0       	rjmp	.+210    	; 0x92a <__stack+0x2b>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     858:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <__data_end>
     85c:	81 11       	cpse	r24, r1
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		printf("Calibrando sensores IR...\n");
     860:	8d e6       	ldi	r24, 0x6D	; 109
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     868:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     86c:	80 ff       	sbrs	r24, 0
     86e:	03 c0       	rjmp	.+6      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     870:	84 60       	ori	r24, 0x04	; 4
     872:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     876:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     87a:	80 ff       	sbrs	r24, 0
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     87e:	84 60       	ori	r24, 0x04	; 4
     880:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     884:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <IR_C>
     888:	80 ff       	sbrs	r24, 0
     88a:	03 c0       	rjmp	.+6      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     88c:	84 60       	ori	r24, 0x04	; 4
     88e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     892:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <IR_U>
     896:	80 ff       	sbrs	r24, 0
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <IR_U>
		}
		init_done = true;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     8a6:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     8aa:	82 ff       	sbrs	r24, 2
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
		calibrateIRSensor(&IR_A);
     8ae:	8a e3       	ldi	r24, 0x3A	; 58
     8b0:	96 e0       	ldi	r25, 0x06	; 6
     8b2:	0e 94 b7 08 	call	0x116e	; 0x116e <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8b6:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     8ba:	82 ff       	sbrs	r24, 2
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
		calibrateIRSensor(&IR_B);
     8be:	83 ee       	ldi	r24, 0xE3	; 227
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 b7 08 	call	0x116e	; 0x116e <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8c6:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     8ca:	82 ff       	sbrs	r24, 2
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
		calibrateIRSensor(&IR_B);
     8ce:	83 ee       	ldi	r24, 0xE3	; 227
     8d0:	95 e0       	ldi	r25, 0x05	; 5
     8d2:	0e 94 b7 08 	call	0x116e	; 0x116e <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8d6:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     8da:	82 ff       	sbrs	r24, 2
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
		calibrateIRSensor(&IR_B);
     8de:	83 ee       	ldi	r24, 0xE3	; 227
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	0e 94 b7 08 	call	0x116e	; 0x116e <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     8e6:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     8ea:	82 fd       	sbrc	r24, 2
     8ec:	06 c0       	rjmp	.+12     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
     8ee:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
		calibrateIRSensor(&IR_B);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     8f2:	82 ff       	sbrs	r24, 2
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
	}
	return false; // Sigue calibrando
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0x1>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
     8fe:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     900:	88 23       	and	r24, r24
     902:	99 f0       	breq	.+38     	; 0x92a <__stack+0x2b>
				printf("Todos los sensores IR calibrados.\n");
     904:	87 e8       	ldi	r24, 0x87	; 135
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
				IR_CALIBRATED = 1;
     90c:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <bandera3>
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <bandera3>
				IR_A.calibrationCounter = 0;
     916:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     91a:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     91e:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     922:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <IR_U+0x9>
				initOutputs();
     926:	0e 94 3e 05 	call	0xa7c	; 0xa7c <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     92a:	6a e1       	ldi	r22, 0x1A	; 26
     92c:	76 e0       	ldi	r23, 0x06	; 6
     92e:	89 e4       	ldi	r24, 0x49	; 73
     930:	96 e0       	ldi	r25, 0x06	; 6
     932:	0e 94 3b 06 	call	0xc76	; 0xc76 <ultraSensorTask>
		servosTask();
     936:	0e 94 20 08 	call	0x1040	; 0x1040 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     93a:	4c 9b       	sbis	0x09, 4	; 9
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__stack+0x53>
     93e:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     942:	86 fd       	sbrc	r24, 6
     944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0x53>
		btn_pressed_time = 0;
     946:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <btn_pressed_time>
		BTN_PRESSED = 1;
     94a:	80 64       	ori	r24, 0x40	; 64
     94c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
     950:	28 c0       	rjmp	.+80     	; 0x9a2 <__stack+0xa3>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     952:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     956:	86 ff       	sbrs	r24, 6
     958:	24 c0       	rjmp	.+72     	; 0x9a2 <__stack+0xa3>
     95a:	4c 99       	sbic	0x09, 4	; 9
     95c:	22 c0       	rjmp	.+68     	; 0x9a2 <__stack+0xa3>
		BTN_PRESSED = 0;
     95e:	8f 7b       	andi	r24, 0xBF	; 191
     960:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     964:	82 ff       	sbrs	r24, 2
     966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x71>
			printf("Btn overflowed\n");
     968:	89 ea       	ldi	r24, 0xA9	; 169
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     970:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <btn_pressed_time>
     974:	8a 30       	cpi	r24, 0x0A	; 10
     976:	30 f4       	brcc	.+12     	; 0x984 <__stack+0x85>
     978:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     97c:	98 2f       	mov	r25, r24
     97e:	94 70       	andi	r25, 0x04	; 4
     980:	82 ff       	sbrs	r24, 2
     982:	06 c0       	rjmp	.+12     	; 0x990 <__stack+0x91>
			BTN_RELEASED = 1;
     984:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     990:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <btn_pressed_time>
			if(BTN_OVF){
     994:	99 23       	and	r25, r25
     996:	29 f0       	breq	.+10     	; 0x9a2 <__stack+0xa3>
				BTN_OVF = 0;
     998:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     9a2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     9a6:	84 ff       	sbrs	r24, 4
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__stack+0xbb>
			WAIT_TIME_TRIGGER_PASSED = 0;
     9aa:	8f 7e       	andi	r24, 0xEF	; 239
     9ac:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     9b0:	e3 e6       	ldi	r30, 0x63	; 99
     9b2:	f6 e0       	ldi	r31, 0x06	; 6
     9b4:	80 81       	ld	r24, Z
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     9ba:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     9be:	83 ff       	sbrs	r24, 3
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__stack+0xd3>
			ECHO_INTERVAL_FLAG = 0;
     9c2:	87 7f       	andi	r24, 0xF7	; 247
     9c4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			EMIT_TRIGGER = 1;
     9c8:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     9d2:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     9d6:	80 ff       	sbrs	r24, 0
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__stack+0xe1>
			BTN_RELEASED = 0; //TEST SERVO A
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     9e0:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <bandera3>
     9e4:	81 ff       	sbrs	r24, 1
     9e6:	2f cf       	rjmp	.-418    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			IR_READ_INTERRUPT = 0;
     9e8:	8d 7f       	andi	r24, 0xFD	; 253
     9ea:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <bandera3>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     9ee:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     9f2:	80 ff       	sbrs	r24, 0
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
     9f6:	82 ff       	sbrs	r24, 2
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x105>
     9fa:	83 fd       	sbrc	r24, 3
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__stack+0x105>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     9fe:	88 60       	ori	r24, 0x08	; 8
     a00:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     a04:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     a08:	80 ff       	sbrs	r24, 0
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <__stack+0x11b>
     a0c:	82 ff       	sbrs	r24, 2
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__stack+0x11b>
     a10:	83 fd       	sbrc	r24, 3
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <__stack+0x11b>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     a1a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <IR_C>
     a1e:	80 ff       	sbrs	r24, 0
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <__stack+0x131>
     a22:	82 ff       	sbrs	r24, 2
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <__stack+0x131>
     a26:	83 fd       	sbrc	r24, 3
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <__stack+0x131>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     a30:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <IR_U>
     a34:	80 ff       	sbrs	r24, 0
     a36:	07 cf       	rjmp	.-498    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     a38:	82 ff       	sbrs	r24, 2
     a3a:	05 cf       	rjmp	.-502    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     a3c:	83 fd       	sbrc	r24, 3
     a3e:	03 cf       	rjmp	.-506    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a40:	88 60       	ori	r24, 0x08	; 8
     a42:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <IR_U>
     a46:	ff ce       	rjmp	.-514    	; 0x846 <__DATA_REGION_LENGTH__+0x46>

00000a48 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <initDetector+0x6>
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	fc 01       	movw	r30, r24
     a54:	5a 83       	std	Y+2, r21	; 0x02
     a56:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     a58:	87 e5       	ldi	r24, 0x57	; 87
     a5a:	96 e0       	ldi	r25, 0x06	; 6
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	93 83       	std	Z+3, r25	; 0x03
     a66:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     a68:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     a6a:	88 eb       	ldi	r24, 0xB8	; 184
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
}
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	printf("Init servos\n");
}

void initOutputs(){
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     a80:	2a e5       	ldi	r18, 0x5A	; 90
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	82 ef       	ldi	r24, 0xF2	; 242
     a8e:	95 e0       	ldi	r25, 0x05	; 5
     a90:	0e 94 34 08 	call	0x1068	; 0x1068 <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     a94:	2a e5       	ldi	r18, 0x5A	; 90
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	42 e0       	ldi	r20, 0x02	; 2
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	88 e6       	ldi	r24, 0x68	; 104
     aa2:	96 e0       	ldi	r25, 0x06	; 6
     aa4:	0e 94 34 08 	call	0x1068	; 0x1068 <initServo>
	//initServo(&servoC, 2, SERVOC_PIN);
	servosArray[0] = &servoA;
     aa8:	ee e4       	ldi	r30, 0x4E	; 78
     aaa:	f6 e0       	ldi	r31, 0x06	; 6
     aac:	82 ef       	ldi	r24, 0xF2	; 242
     aae:	95 e0       	ldi	r25, 0x05	; 5
     ab0:	91 83       	std	Z+1, r25	; 0x01
     ab2:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     ab4:	88 e6       	ldi	r24, 0x68	; 104
     ab6:	96 e0       	ldi	r25, 0x06	; 6
     ab8:	93 83       	std	Z+3, r25	; 0x03
     aba:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     abc:	84 e3       	ldi	r24, 0x34	; 52
     abe:	96 e0       	ldi	r25, 0x06	; 6
     ac0:	95 83       	std	Z+5, r25	; 0x05
     ac2:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     ac4:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <current_servo>
	printf("Init servos\n");
     ac8:	89 ed       	ldi	r24, 0xD9	; 217
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     ad0:	c8 ef       	ldi	r28, 0xF8	; 248
     ad2:	d5 e0       	ldi	r29, 0x05	; 5
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     ad8:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <IR_A+0x8>
     adc:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     ade:	ae e6       	ldi	r26, 0x6E	; 110
     ae0:	b6 e0       	ldi	r27, 0x06	; 6
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	11 96       	adiw	r26, 0x01	; 1
     ae6:	8c 93       	st	X, r24
     ae8:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     aea:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <IR_B+0x8>
     aee:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     af0:	e4 e5       	ldi	r30, 0x54	; 84
     af2:	f6 e0       	ldi	r31, 0x06	; 6
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     af8:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <IR_C+0x8>
     afc:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     afe:	88 e0       	ldi	r24, 0x08	; 8
     b00:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     b06:	82 83       	std	Z+2, r24	; 0x02
	printf("Init outputs\n");
     b08:	85 ee       	ldi	r24, 0xE5	; 229
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     b16:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     b18:	8c e1       	ldi	r24, 0x1C	; 28
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     b20:	88 ef       	ldi	r24, 0xF8	; 248
     b22:	95 e0       	ldi	r25, 0x05	; 5
     b24:	93 83       	std	Z+3, r25	; 0x03
     b26:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     b28:	8e e6       	ldi	r24, 0x6E	; 110
     b2a:	96 e0       	ldi	r25, 0x06	; 6
     b2c:	95 83       	std	Z+5, r25	; 0x05
     b2e:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     b30:	84 e5       	ldi	r24, 0x54	; 84
     b32:	96 e0       	ldi	r25, 0x06	; 6
     b34:	97 83       	std	Z+7, r25	; 0x07
     b36:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     b38:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     b3c:	88 23       	and	r24, r24
     b3e:	44 f4       	brge	.+16     	; 0xb50 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     b40:	82 ef       	ldi	r24, 0xF2	; 242
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     b48:	84 e2       	ldi	r24, 0x24	; 36
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     b50:	08 95       	ret

00000b52 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     b52:	8e 3b       	cpi	r24, 0xBE	; 190
     b54:	98 f0       	brcs	.+38     	; 0xb7c <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     b56:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <bandera2>
     b5a:	99 23       	and	r25, r25
     b5c:	0c f0       	brlt	.+2      	; 0xb60 <classify_box+0xe>
     b5e:	83 c0       	rjmp	.+262    	; 0xc66 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     b60:	1f 92       	push	r1
     b62:	8f 93       	push	r24
     b64:	89 e4       	ldi	r24, 0x49	; 73
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
		}
		return NO_BOX;
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     b7c:	9e eb       	ldi	r25, 0xBE	; 190
     b7e:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     b80:	97 33       	cpi	r25, 0x37	; 55
     b82:	98 f4       	brcc	.+38     	; 0xbaa <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     b84:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     b88:	80 78       	andi	r24, 0x80	; 128
     b8a:	09 f4       	brne	.+2      	; 0xb8e <classify_box+0x3c>
     b8c:	73 c0       	rjmp	.+230    	; 0xc74 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     b8e:	1f 92       	push	r1
     b90:	9f 93       	push	r25
     b92:	89 e7       	ldi	r24, 0x79	; 121
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     baa:	db 01       	movw	r26, r22
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	80 81       	ld	r24, Z
     bb2:	98 17       	cp	r25, r24
     bb4:	b0 f0       	brcs	.+44     	; 0xbe2 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     bb8:	89 17       	cp	r24, r25
     bba:	98 f0       	brcs	.+38     	; 0xbe2 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     bbc:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     bc0:	88 23       	and	r24, r24
     bc2:	0c f0       	brlt	.+2      	; 0xbc6 <classify_box+0x74>
     bc4:	52 c0       	rjmp	.+164    	; 0xc6a <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     bc6:	1f 92       	push	r1
     bc8:	9f 93       	push	r25
     bca:	82 ea       	ldi	r24, 0xA2	; 162
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	98 17       	cp	r25, r24
     be6:	a8 f0       	brcs	.+42     	; 0xc12 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     be8:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     bea:	89 17       	cp	r24, r25
     bec:	90 f0       	brcs	.+36     	; 0xc12 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     bee:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     bf2:	88 23       	and	r24, r24
     bf4:	e4 f5       	brge	.+120    	; 0xc6e <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     bf6:	1f 92       	push	r1
     bf8:	9f 93       	push	r25
     bfa:	87 eb       	ldi	r24, 0xB7	; 183
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c12:	84 81       	ldd	r24, Z+4	; 0x04
     c14:	98 17       	cp	r25, r24
     c16:	a8 f0       	brcs	.+42     	; 0xc42 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     c18:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c1a:	89 17       	cp	r24, r25
     c1c:	90 f0       	brcs	.+36     	; 0xc42 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c1e:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     c22:	88 23       	and	r24, r24
     c24:	34 f5       	brge	.+76     	; 0xc72 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     c26:	1f 92       	push	r1
     c28:	9f 93       	push	r25
     c2a:	8c ec       	ldi	r24, 0xCC	; 204
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     c42:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     c46:	80 78       	andi	r24, 0x80	; 128
     c48:	a9 f0       	breq	.+42     	; 0xc74 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     c4a:	1f 92       	push	r1
     c4c:	9f 93       	push	r25
     c4e:	81 ee       	ldi	r24, 0xE1	; 225
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     c72:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     c74:	08 95       	ret

00000c76 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     c84:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     c88:	88 23       	and	r24, r24
     c8a:	a4 f5       	brge	.+104    	; 0xcf4 <ultraSensorTask+0x7e>
     c8c:	e8 81       	ld	r30, Y
     c8e:	f9 81       	ldd	r31, Y+1	; 0x01
     c90:	84 85       	ldd	r24, Z+12	; 0x0c
     c92:	85 ff       	sbrs	r24, 5
     c94:	2f c0       	rjmp	.+94     	; 0xcf4 <ultraSensorTask+0x7e>
     c96:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     c9a:	81 ff       	sbrs	r24, 1
     c9c:	2b c0       	rjmp	.+86     	; 0xcf4 <ultraSensorTask+0x7e>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     c9e:	cf 01       	movw	r24, r30
     ca0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <ultrasonic_start>
     ca4:	88 23       	and	r24, r24
     ca6:	c1 f0       	breq	.+48     	; 0xcd8 <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     ca8:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     cac:	86 ff       	sbrs	r24, 6
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     cb0:	8f e0       	ldi	r24, 0x0F	; 15
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     cb8:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     cbc:	8f 77       	andi	r24, 0x7F	; 127
     cbe:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     cc2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     ccc:	e8 81       	ld	r30, Y
     cce:	f9 81       	ldd	r31, Y+1	; 0x01
     cd0:	84 85       	ldd	r24, Z+12	; 0x0c
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	84 87       	std	Z+12, r24	; 0x0c
     cd6:	0e c0       	rjmp	.+28     	; 0xcf4 <ultraSensorTask+0x7e>
		}
		else
		{
			if (DEBUG_FLAGS)
     cd8:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     cdc:	86 ff       	sbrs	r24, 6
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
			}
			EMIT_FAILED = 1;
     ce8:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
			EMIT_TRIGGER = 0;
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     cf4:	88 81       	ld	r24, Y
     cf6:	99 81       	ldd	r25, Y+1	; 0x01
     cf8:	0e 94 95 0a 	call	0x152a	; 0x152a <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     cfc:	e8 81       	ld	r30, Y
     cfe:	f9 81       	ldd	r31, Y+1	; 0x01
     d00:	85 85       	ldd	r24, Z+13	; 0x0d
     d02:	85 30       	cpi	r24, 0x05	; 5
     d04:	09 f0       	breq	.+2      	; 0xd08 <ultraSensorTask+0x92>
     d06:	b2 c0       	rjmp	.+356    	; 0xe6c <ultraSensorTask+0x1f6>
     d08:	84 85       	ldd	r24, Z+12	; 0x0c
     d0a:	88 23       	and	r24, r24
     d0c:	0c f0       	brlt	.+2      	; 0xd10 <ultraSensorTask+0x9a>
     d0e:	ae c0       	rjmp	.+348    	; 0xe6c <ultraSensorTask+0x1f6>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     d10:	84 85       	ldd	r24, Z+12	; 0x0c
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     d16:	e8 81       	ld	r30, Y
     d18:	f9 81       	ldd	r31, Y+1	; 0x01
     d1a:	80 85       	ldd	r24, Z+8	; 0x08
     d1c:	91 85       	ldd	r25, Z+9	; 0x09
     d1e:	a2 85       	ldd	r26, Z+10	; 0x0a
     d20:	b3 85       	ldd	r27, Z+11	; 0x0b
     d22:	8f 3b       	cpi	r24, 0xBF	; 191
     d24:	91 05       	cpc	r25, r1
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	b0 f0       	brcs	.+44     	; 0xd58 <ultraSensorTask+0xe2>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     d32:	98 2f       	mov	r25, r24
     d34:	92 95       	swap	r25
     d36:	9f 70       	andi	r25, 0x0F	; 15
     d38:	92 30       	cpi	r25, 0x02	; 2
     d3a:	51 f4       	brne	.+20     	; 0xd50 <ultraSensorTask+0xda>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     d3c:	8f 70       	andi	r24, 0x0F	; 15
     d3e:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     d40:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     d44:	88 23       	and	r24, r24
     d46:	24 f4       	brge	.+8      	; 0xd50 <ultraSensorTask+0xda>
					printf("Sensor liberado de nuevo\n");
     d48:	8a e1       	ldi	r24, 0x1A	; 26
     d4a:	93 e0       	ldi	r25, 0x03	; 3
     d4c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	8f 70       	andi	r24, 0x0F	; 15
     d54:	8c 83       	std	Y+4, r24	; 0x04
     d56:	7e c0       	rjmp	.+252    	; 0xe54 <ultraSensorTask+0x1de>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	98 2f       	mov	r25, r24
     d5c:	92 95       	swap	r25
     d5e:	9f 70       	andi	r25, 0x0F	; 15
     d60:	09 f0       	breq	.+2      	; 0xd64 <ultraSensorTask+0xee>
     d62:	78 c0       	rjmp	.+240    	; 0xe54 <ultraSensorTask+0x1de>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     d6a:	80 85       	ldd	r24, Z+8	; 0x08
     d6c:	91 85       	ldd	r25, Z+9	; 0x09
     d6e:	a2 85       	ldd	r26, Z+10	; 0x0a
     d70:	b3 85       	ldd	r27, Z+11	; 0x0b
     d72:	b8 01       	movw	r22, r16
     d74:	0e 94 a9 05 	call	0xb52	; 0xb52 <classify_box>
     d78:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	f8 16       	cp	r15, r24
     d7e:	09 f4       	brne	.+2      	; 0xd82 <ultraSensorTask+0x10c>
     d80:	65 c0       	rjmp	.+202    	; 0xe4c <ultraSensorTask+0x1d6>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     d82:	e8 81       	ld	r30, Y
     d84:	f9 81       	ldd	r31, Y+1	; 0x01
     d86:	80 85       	ldd	r24, Z+8	; 0x08
     d88:	91 85       	ldd	r25, Z+9	; 0x09
     d8a:	a2 85       	ldd	r26, Z+10	; 0x0a
     d8c:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     d8e:	e1 e0       	ldi	r30, 0x01	; 1
     d90:	fe 16       	cp	r15, r30
     d92:	49 f0       	breq	.+18     	; 0xda6 <ultraSensorTask+0x130>
     d94:	fe 16       	cp	r15, r30
     d96:	b0 f0       	brcs	.+44     	; 0xdc4 <ultraSensorTask+0x14e>
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	ff 16       	cp	r15, r31
     d9c:	49 f0       	breq	.+18     	; 0xdb0 <ultraSensorTask+0x13a>
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	f8 16       	cp	r15, r24
     da2:	59 f0       	breq	.+22     	; 0xdba <ultraSensorTask+0x144>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <ultraSensorTask+0x158>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     da6:	83 e3       	ldi	r24, 0x33	; 51
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     dae:	13 c0       	rjmp	.+38     	; 0xdd6 <ultraSensorTask+0x160>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     db0:	8e e3       	ldi	r24, 0x3E	; 62
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <ultraSensorTask+0x160>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     dba:	89 e4       	ldi	r24, 0x49	; 73
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <ultraSensorTask+0x160>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     dc4:	84 e5       	ldi	r24, 0x54	; 84
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <ultraSensorTask+0x160>
						default: printf("Tipo no reconocido\n"); break;
     dce:	82 e6       	ldi	r24, 0x62	; 98
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     dd6:	f1 10       	cpse	r15, r1
     dd8:	0d c0       	rjmp	.+26     	; 0xdf4 <ultraSensorTask+0x17e>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     dda:	f8 01       	movw	r30, r16
     ddc:	80 89       	ldd	r24, Z+16	; 0x10
     dde:	91 89       	ldd	r25, Z+17	; 0x11
     de0:	a2 89       	ldd	r26, Z+18	; 0x12
     de2:	b3 89       	ldd	r27, Z+19	; 0x13
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	a1 1d       	adc	r26, r1
     de8:	b1 1d       	adc	r27, r1
     dea:	80 8b       	std	Z+16, r24	; 0x10
     dec:	91 8b       	std	Z+17, r25	; 0x11
     dee:	a2 8b       	std	Z+18, r26	; 0x12
     df0:	b3 8b       	std	Z+19, r27	; 0x13
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <ultraSensorTask+0x196>
					}
					else
					{
						sorter->stats.total_selected++;
     df4:	f8 01       	movw	r30, r16
     df6:	84 85       	ldd	r24, Z+12	; 0x0c
     df8:	95 85       	ldd	r25, Z+13	; 0x0d
     dfa:	a6 85       	ldd	r26, Z+14	; 0x0e
     dfc:	b7 85       	ldd	r27, Z+15	; 0x0f
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	a1 1d       	adc	r26, r1
     e02:	b1 1d       	adc	r27, r1
     e04:	84 87       	std	Z+12, r24	; 0x0c
     e06:	95 87       	std	Z+13, r25	; 0x0d
     e08:	a6 87       	std	Z+14, r26	; 0x0e
     e0a:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     e0c:	f8 01       	movw	r30, r16
     e0e:	80 85       	ldd	r24, Z+8	; 0x08
     e10:	91 85       	ldd	r25, Z+9	; 0x09
     e12:	a2 85       	ldd	r26, Z+10	; 0x0a
     e14:	b3 85       	ldd	r27, Z+11	; 0x0b
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	a1 1d       	adc	r26, r1
     e1a:	b1 1d       	adc	r27, r1
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     e24:	ef 2d       	mov	r30, r15
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	35 96       	adiw	r30, 0x05	; 5
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	e0 0f       	add	r30, r16
     e34:	f1 1f       	adc	r31, r17
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	a2 81       	ldd	r26, Z+2	; 0x02
     e3c:	b3 81       	ldd	r27, Z+3	; 0x03
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	a1 1d       	adc	r26, r1
     e42:	b1 1d       	adc	r27, r1
     e44:	80 83       	st	Z, r24
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	a2 83       	std	Z+2, r26	; 0x02
     e4a:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	8f 70       	andi	r24, 0x0F	; 15
     e50:	80 62       	ori	r24, 0x20	; 32
     e52:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     e54:	88 81       	ld	r24, Y
     e56:	99 81       	ldd	r25, Y+1	; 0x01
     e58:	0e 94 06 0a 	call	0x140c	; 0x140c <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     e5c:	e8 81       	ld	r30, Y
     e5e:	f9 81       	ldd	r31, Y+1	; 0x01
     e60:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     e62:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     e6c:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     e70:	80 ff       	sbrs	r24, 0
     e72:	2d c0       	rjmp	.+90     	; 0xece <ultraSensorTask+0x258>
	{
		if (DEBUG_FLAGS)
     e74:	86 ff       	sbrs	r24, 6
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <ultraSensorTask+0x20a>
		{
			printf("HCSR04 perdio ECHO\n");
     e78:	85 e7       	ldi	r24, 0x75	; 117
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}
		VEINTEMS_PASSED = 0;
     e80:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
		WAITING_ECHO = 0;
     e84:	8e 7f       	andi	r24, 0xFE	; 254
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     e8c:	e8 81       	ld	r30, Y
     e8e:	f9 81       	ldd	r31, Y+1	; 0x01
     e90:	84 85       	ldd	r24, Z+12	; 0x0c
     e92:	88 60       	ori	r24, 0x08	; 8
     e94:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     e96:	e8 81       	ld	r30, Y
     e98:	f9 81       	ldd	r31, Y+1	; 0x01
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     e9e:	60 91 33 06 	lds	r22, 0x0633	; 0x800633 <bandera2>
     ea2:	66 fb       	bst	r22, 6
     ea4:	66 27       	eor	r22, r22
     ea6:	60 f9       	bld	r22, 0
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	0e 94 4a 0a 	call	0x1494	; 0x1494 <ultrasonic_timeout_clear>
     eb0:	88 23       	and	r24, r24
     eb2:	41 f0       	breq	.+16     	; 0xec4 <ultraSensorTask+0x24e>
     eb4:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <bandera2>
     eb8:	86 ff       	sbrs	r24, 6
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <ultraSensorTask+0x24e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     ebc:	88 e8       	ldi	r24, 0x88	; 136
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     ec4:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <bandera>
     ec8:	80 68       	ori	r24, 0x80	; 128
     eca:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <bandera>
	}
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	08 95       	ret

00000eda <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
     eda:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     ede:	80 ff       	sbrs	r24, 0
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <irSensorsTask+0x1a>
     ee2:	83 ff       	sbrs	r24, 3
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <IR_A>
		tcrt_read(&IR_A);
     eec:	8a e3       	ldi	r24, 0x3A	; 58
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
     ef4:	8a e3       	ldi	r24, 0x3A	; 58
     ef6:	96 e0       	ldi	r25, 0x06	; 6
     ef8:	0e 94 27 09 	call	0x124e	; 0x124e <tcrt_is_box_detected>
     efc:	89 2b       	or	r24, r25
     efe:	01 f1       	breq	.+64     	; 0xf40 <irSensorsTask+0x66>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f00:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <IR_A>
     f04:	82 95       	swap	r24
     f06:	8f 70       	andi	r24, 0x0F	; 15
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	d1 f4       	brne	.+52     	; 0xf40 <irSensorsTask+0x66>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY)){
     f0c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <salidaA+0x2>
     f10:	83 ff       	sbrs	r24, 3
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <irSensorsTask+0x54>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
     f1a:	e2 ef       	ldi	r30, 0xF2	; 242
     f1c:	f5 e0       	ldi	r31, 0x05	; 5
     f1e:	81 81       	ldd	r24, Z+1	; 0x01
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
     f24:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
     f26:	8a ea       	ldi	r24, 0xAA	; 170
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f6 e0       	ldi	r31, 0x06	; 6
     f32:	80 81       	ld	r24, Z
     f34:	8f 70       	andi	r24, 0x0F	; 15
     f36:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
     f38:	8f ec       	ldi	r24, 0xCF	; 207
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     f40:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     f44:	80 ff       	sbrs	r24, 0
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <irSensorsTask+0x80>
     f48:	83 ff       	sbrs	r24, 3
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <irSensorsTask+0x80>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <IR_B>
		tcrt_read(&IR_B);
     f52:	83 ee       	ldi	r24, 0xE3	; 227
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	0e 94 f6 08 	call	0x11ec	; 0x11ec <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
     f5a:	83 ee       	ldi	r24, 0xE3	; 227
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	0e 94 27 09 	call	0x124e	; 0x124e <tcrt_is_box_detected>
     f62:	89 2b       	or	r24, r25
     f64:	01 f1       	breq	.+64     	; 0xfa6 <irSensorsTask+0xcc>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f66:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <IR_B>
     f6a:	82 95       	swap	r24
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	d1 f4       	brne	.+52     	; 0xfa6 <irSensorsTask+0xcc>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY)){
     f72:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <salidaB+0x2>
     f76:	83 ff       	sbrs	r24, 3
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <irSensorsTask+0xba>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
     f80:	e8 e6       	ldi	r30, 0x68	; 104
     f82:	f6 e0       	ldi	r31, 0x06	; 6
     f84:	81 81       	ldd	r24, Z+1	; 0x01
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
     f8a:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
     f8c:	8f ed       	ldi	r24, 0xDF	; 223
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
     f94:	e3 ee       	ldi	r30, 0xE3	; 227
     f96:	f5 e0       	ldi	r31, 0x05	; 5
     f98:	80 81       	ld	r24, Z
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     fa6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <IR_C>
     faa:	80 ff       	sbrs	r24, 0
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <irSensorsTask+0xe6>
     fae:	83 ff       	sbrs	r24, 3
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <irSensorsTask+0xe6>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
     fb2:	87 7f       	andi	r24, 0xF7	; 247
     fb4:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <IR_C>
		tcrt_read(&IR_C);
     fb8:	8b e0       	ldi	r24, 0x0B	; 11
     fba:	96 e0       	ldi	r25, 0x06	; 6
     fbc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
     fc0:	8b e0       	ldi	r24, 0x0B	; 11
     fc2:	96 e0       	ldi	r25, 0x06	; 6
     fc4:	0e 94 27 09 	call	0x124e	; 0x124e <tcrt_is_box_detected>
     fc8:	89 2b       	or	r24, r25
     fca:	99 f0       	breq	.+38     	; 0xff2 <irSensorsTask+0x118>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     fcc:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <IR_C>
     fd0:	98 2f       	mov	r25, r24
     fd2:	92 95       	swap	r25
     fd4:	9f 70       	andi	r25, 0x0F	; 15
     fd6:	92 30       	cpi	r25, 0x02	; 2
     fd8:	61 f4       	brne	.+24     	; 0xff2 <irSensorsTask+0x118>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
     fda:	ee e6       	ldi	r30, 0x6E	; 110
     fdc:	f6 e0       	ldi	r31, 0x06	; 6
     fde:	92 81       	ldd	r25, Z+2	; 0x02
     fe0:	92 60       	ori	r25, 0x02	; 2
     fe2:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
     fe4:	8f 70       	andi	r24, 0x0F	; 15
     fe6:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <IR_C>
			printf("Detecto en IR C\n");
     fea:	84 e1       	ldi	r24, 0x14	; 20
     fec:	94 e0       	ldi	r25, 0x04	; 4
     fee:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     ff2:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <IR_U>
     ff6:	80 ff       	sbrs	r24, 0
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <irSensorsTask+0x132>
     ffa:	83 ff       	sbrs	r24, 3
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <irSensorsTask+0x132>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <IR_U>
		tcrt_read(&IR_U);
    1004:	8b ef       	ldi	r24, 0xFB	; 251
    1006:	95 e0       	ldi	r25, 0x05	; 5
    1008:	0e 94 f6 08 	call	0x11ec	; 0x11ec <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    100c:	8b ef       	ldi	r24, 0xFB	; 251
    100e:	95 e0       	ldi	r25, 0x05	; 5
    1010:	0e 94 27 09 	call	0x124e	; 0x124e <tcrt_is_box_detected>
    1014:	89 2b       	or	r24, r25
    1016:	99 f0       	breq	.+38     	; 0x103e <irSensorsTask+0x164>
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1018:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <IR_U>
    101c:	98 2f       	mov	r25, r24
    101e:	92 95       	swap	r25
    1020:	9f 70       	andi	r25, 0x0F	; 15
    1022:	92 30       	cpi	r25, 0x02	; 2
    1024:	61 f4       	brne	.+24     	; 0x103e <irSensorsTask+0x164>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
    1026:	ee e6       	ldi	r30, 0x6E	; 110
    1028:	f6 e0       	ldi	r31, 0x06	; 6
    102a:	92 81       	ldd	r25, Z+2	; 0x02
    102c:	92 60       	ori	r25, 0x02	; 2
    102e:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);
    1030:	8f 70       	andi	r24, 0x0F	; 15
    1032:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <IR_U>
			printf("Detecto en IR U\n");
    1036:	84 e2       	ldi	r24, 0x24	; 36
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
    103e:	08 95       	ret

00001040 <servosTask>:
		}
	}
}

void servosTask() {
    1040:	08 95       	ret

00001042 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    1042:	85 3b       	cpi	r24, 0xB5	; 181
    1044:	08 f0       	brcs	.+2      	; 0x1048 <calculate_angle_pulseUs+0x6>
    1046:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	a0 ed       	ldi	r26, 0xD0	; 208
    104e:	b7 e0       	ldi	r27, 0x07	; 7
    1050:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
    1054:	24 eb       	ldi	r18, 0xB4	; 180
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodsi4>
}
    1060:	c9 01       	movw	r24, r18
    1062:	80 53       	subi	r24, 0x30	; 48
    1064:	98 4f       	sbci	r25, 0xF8	; 248
    1066:	08 95       	ret

00001068 <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	04 2f       	mov	r16, r20
    1074:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    1076:	1f 92       	push	r1
    1078:	6f 93       	push	r22
    107a:	84 e3       	ldi	r24, 0x34	; 52
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	9f 93       	push	r25
    1080:	8f 93       	push	r24
    1082:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
	servo->flags.byte = 0;
    1086:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    1088:	81 2f       	mov	r24, r17
    108a:	0e 94 21 08 	call	0x1042	; 0x1042 <calculate_angle_pulseUs>
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    1092:	08 83       	st	Y, r16
	servo->angle = startAngle;
    1094:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    1096:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    10b0:	87 b1       	in	r24, 0x07	; 7
    10b2:	80 7f       	andi	r24, 0xF0	; 240
    10b4:	87 b9       	out	0x07, r24	; 7
    10b6:	88 b1       	in	r24, 0x08	; 8
    10b8:	80 7f       	andi	r24, 0xF0	; 240
    10ba:	88 b9       	out	0x08, r24	; 8
    10bc:	80 e4       	ldi	r24, 0x40	; 64
    10be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    10c2:	86 e8       	ldi	r24, 0x86	; 134
    10c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10c8:	08 95       	ret

000010ca <tcrt_read_channel>:
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	a0 f4       	brcc	.+40     	; 0x10f6 <tcrt_read_channel+0x2c>
    10ce:	ec e7       	ldi	r30, 0x7C	; 124
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	90 81       	ld	r25, Z
    10d4:	90 7f       	andi	r25, 0xF0	; 240
    10d6:	89 2b       	or	r24, r25
    10d8:	80 83       	st	Z, r24
    10da:	ea e7       	ldi	r30, 0x7A	; 122
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 64       	ori	r24, 0x40	; 64
    10e2:	80 83       	st	Z, r24
    10e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10e8:	86 fd       	sbrc	r24, 6
    10ea:	fc cf       	rjmp	.-8      	; 0x10e4 <tcrt_read_channel+0x1a>
    10ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    10f4:	08 95       	ret
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	08 95       	ret

000010fc <TCRT_init_Handlers>:
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ea e3       	ldi	r30, 0x3A	; 58
    1102:	f6 e0       	ldi	r31, 0x06	; 6
    1104:	17 82       	std	Z+7, r1	; 0x07
    1106:	10 86       	std	Z+8, r1	; 0x08
    1108:	12 82       	std	Z+2, r1	; 0x02
    110a:	11 82       	std	Z+1, r1	; 0x01
    110c:	16 82       	std	Z+6, r1	; 0x06
    110e:	15 82       	std	Z+5, r1	; 0x05
    1110:	c4 e1       	ldi	r28, 0x14	; 20
    1112:	c6 87       	std	Z+14, r28	; 0x0e
    1114:	d1 e0       	ldi	r29, 0x01	; 1
    1116:	d0 83       	st	Z, r29
    1118:	83 e4       	ldi	r24, 0x43	; 67
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
    1120:	e3 ee       	ldi	r30, 0xE3	; 227
    1122:	f5 e0       	ldi	r31, 0x05	; 5
    1124:	d7 83       	std	Z+7, r29	; 0x07
    1126:	d0 87       	std	Z+8, r29	; 0x08
    1128:	12 82       	std	Z+2, r1	; 0x02
    112a:	11 82       	std	Z+1, r1	; 0x01
    112c:	16 82       	std	Z+6, r1	; 0x06
    112e:	15 82       	std	Z+5, r1	; 0x05
    1130:	c6 87       	std	Z+14, r28	; 0x0e
    1132:	d0 83       	st	Z, r29
    1134:	82 e5       	ldi	r24, 0x52	; 82
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	0e 94 4b 0b 	call	0x1696	; 0x1696 <puts>
    113c:	eb e0       	ldi	r30, 0x0B	; 11
    113e:	f6 e0       	ldi	r31, 0x06	; 6
    1140:	10 82       	st	Z, r1
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	87 83       	std	Z+7, r24	; 0x07
    1146:	80 87       	std	Z+8, r24	; 0x08
    1148:	12 82       	std	Z+2, r1	; 0x02
    114a:	11 82       	std	Z+1, r1	; 0x01
    114c:	16 82       	std	Z+6, r1	; 0x06
    114e:	15 82       	std	Z+5, r1	; 0x05
    1150:	c6 87       	std	Z+14, r28	; 0x0e
    1152:	eb ef       	ldi	r30, 0xFB	; 251
    1154:	f5 e0       	ldi	r31, 0x05	; 5
    1156:	10 82       	st	Z, r1
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	87 83       	std	Z+7, r24	; 0x07
    115c:	80 87       	std	Z+8, r24	; 0x08
    115e:	12 82       	std	Z+2, r1	; 0x02
    1160:	11 82       	std	Z+1, r1	; 0x01
    1162:	16 82       	std	Z+6, r1	; 0x06
    1164:	15 82       	std	Z+5, r1	; 0x05
    1166:	c6 87       	std	Z+14, r28	; 0x0e
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    1174:	88 81       	ld	r24, Y
    1176:	83 ff       	sbrs	r24, 3
    1178:	36 c0       	rjmp	.+108    	; 0x11e6 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    117a:	87 7f       	andi	r24, 0xF7	; 247
    117c:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	81 11       	cpse	r24, r1
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    1184:	1e 82       	std	Y+6, r1	; 0x06
    1186:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	0e 94 65 08 	call	0x10ca	; 0x10ca <tcrt_read_channel>
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	28 0f       	add	r18, r24
    1194:	39 1f       	adc	r19, r25
    1196:	3e 83       	std	Y+6, r19	; 0x06
    1198:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    119a:	99 85       	ldd	r25, Y+9	; 0x09
    119c:	9f 5f       	subi	r25, 0xFF	; 255
    119e:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    11a0:	9a 30       	cpi	r25, 0x0A	; 10
    11a2:	08 f1       	brcs	.+66     	; 0x11e6 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    11a4:	ad ec       	ldi	r26, 0xCD	; 205
    11a6:	bc ec       	ldi	r27, 0xCC	; 204
    11a8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	9c 83       	std	Y+4, r25	; 0x04
    11ba:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    11bc:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    11be:	28 81       	ld	r18, Y
    11c0:	2b 7f       	andi	r18, 0xFB	; 251
    11c2:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	1f 92       	push	r1
    11cc:	2f 93       	push	r18
    11ce:	81 e6       	ldi	r24, 0x61	; 97
    11d0:	94 e0       	ldi	r25, 0x04	; 4
    11d2:	9f 93       	push	r25
    11d4:	8f 93       	push	r24
    11d6:	0e 94 35 0b 	call	0x166a	; 0x166a <printf>
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
		}
	}
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    11f6:	8f 81       	ldd	r24, Y+7	; 0x07
    11f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <tcrt_read_channel>
	sensor->lastReading = lectura;
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    1200:	4a 85       	ldd	r20, Y+10	; 0x0a
    1202:	5b 85       	ldd	r21, Y+11	; 0x0b
    1204:	6c 85       	ldd	r22, Y+12	; 0x0c
    1206:	7d 85       	ldd	r23, Y+13	; 0x0d
    1208:	8a 01       	movw	r16, r20
    120a:	9b 01       	movw	r18, r22
    120c:	08 0f       	add	r16, r24
    120e:	19 1f       	adc	r17, r25
    1210:	21 1d       	adc	r18, r1
    1212:	31 1d       	adc	r19, r1
    1214:	c9 01       	movw	r24, r18
    1216:	b8 01       	movw	r22, r16
    1218:	0a 87       	std	Y+10, r16	; 0x0a
    121a:	1b 87       	std	Y+11, r17	; 0x0b
    121c:	2c 87       	std	Y+12, r18	; 0x0c
    121e:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    1220:	29 85       	ldd	r18, Y+9	; 0x09
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1226:	2a 30       	cpi	r18, 0x0A	; 10
    1228:	68 f0       	brcs	.+26     	; 0x1244 <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    122a:	2a e0       	ldi	r18, 0x0A	; 10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodsi4>
    1236:	3a 83       	std	Y+2, r19	; 0x02
    1238:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    123a:	1a 86       	std	Y+10, r1	; 0x0a
    123c:	1b 86       	std	Y+11, r1	; 0x0b
    123e:	1c 86       	std	Y+12, r1	; 0x0c
    1240:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1242:	19 86       	std	Y+9, r1	; 0x09
	}
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    125c:	ab 81       	ldd	r26, Y+3	; 0x03
    125e:	bc 81       	ldd	r27, Y+4	; 0x04
    1260:	8e 85       	ldd	r24, Y+14	; 0x0e
    1262:	0f 2e       	mov	r0, r31
    1264:	f4 e6       	ldi	r31, 0x64	; 100
    1266:	cf 2e       	mov	r12, r31
    1268:	d1 2c       	mov	r13, r1
    126a:	e1 2c       	mov	r14, r1
    126c:	f1 2c       	mov	r15, r1
    126e:	f0 2d       	mov	r31, r0
    1270:	a7 01       	movw	r20, r14
    1272:	96 01       	movw	r18, r12
    1274:	28 1b       	sub	r18, r24
    1276:	31 09       	sbc	r19, r1
    1278:	41 09       	sbc	r20, r1
    127a:	51 09       	sbc	r21, r1
    127c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__muluhisi3>
    1280:	a7 01       	movw	r20, r14
    1282:	96 01       	movw	r18, r12
    1284:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	6c 01       	movw	r12, r24
    128e:	e1 2c       	mov	r14, r1
    1290:	f1 2c       	mov	r15, r1
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	c2 16       	cp	r12, r18
    1296:	d3 06       	cpc	r13, r19
    1298:	e4 06       	cpc	r14, r20
    129a:	f5 06       	cpc	r15, r21
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <tcrt_is_box_detected+0x52>
    129e:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    12a0:	c2 16       	cp	r12, r18
    12a2:	d3 06       	cpc	r13, r19
    12a4:	e4 06       	cpc	r14, r20
    12a6:	f5 06       	cpc	r15, r21
    12a8:	50 f4       	brcc	.+20     	; 0x12be <tcrt_is_box_detected+0x70>
    12aa:	98 81       	ld	r25, Y
    12ac:	e9 2f       	mov	r30, r25
    12ae:	e2 95       	swap	r30
    12b0:	ef 70       	andi	r30, 0x0F	; 15
    12b2:	29 f4       	brne	.+10     	; 0x12be <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    12b4:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    12b6:	9f 70       	andi	r25, 0x0F	; 15
    12b8:	90 61       	ori	r25, 0x10	; 16
    12ba:	98 83       	st	Y, r25
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <tcrt_is_box_detected+0x8e>
	}
	else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    12be:	c2 16       	cp	r12, r18
    12c0:	d3 06       	cpc	r13, r19
    12c2:	e4 06       	cpc	r14, r20
    12c4:	f5 06       	cpc	r15, r21
    12c6:	50 f0       	brcs	.+20     	; 0x12dc <tcrt_is_box_detected+0x8e>
    12c8:	98 81       	ld	r25, Y
    12ca:	29 2f       	mov	r18, r25
    12cc:	22 95       	swap	r18
    12ce:	2f 70       	andi	r18, 0x0F	; 15
    12d0:	21 30       	cpi	r18, 0x01	; 1
    12d2:	21 f4       	brne	.+8      	; 0x12dc <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    12d4:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    12d6:	9d 70       	andi	r25, 0x0D	; 13
    12d8:	90 62       	ori	r25, 0x20	; 32
    12da:	98 83       	st	Y, r25
	}

	return box_now;
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	08 95       	ret

000012ea <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    12ea:	8b b1       	in	r24, 0x0b	; 11
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8b b9       	out	0x0b, r24	; 11
    12f0:	08 95       	ret

000012f2 <ultrasonic_hal_trigger_setLow>:
    12f2:	8b b1       	in	r24, 0x0b	; 11
    12f4:	87 7f       	andi	r24, 0xF7	; 247
    12f6:	8b b9       	out	0x0b, r24	; 11
    12f8:	08 95       	ret

000012fa <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    12fa:	e1 e8       	ldi	r30, 0x81	; 129
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	80 83       	st	Z, r24
    1304:	08 95       	ret

00001306 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    1306:	e1 e8       	ldi	r30, 0x81	; 129
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8f 7b       	andi	r24, 0xBF	; 191
    130e:	80 83       	st	Z, r24
    1310:	08 95       	ret

00001312 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    1312:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    1316:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    131a:	88 e1       	ldi	r24, 0x18	; 24
    131c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1320:	86 e0       	ldi	r24, 0x06	; 6
    1322:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1326:	08 95       	ret

00001328 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    1328:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    132c:	95 ff       	sbrs	r25, 5
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    1330:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1334:	08 95       	ret

00001336 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    1336:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    133a:	88 23       	and	r24, r24
    133c:	e4 f7       	brge	.-8      	; 0x1336 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    133e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1342:	08 95       	ret

00001344 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1344:	cf 93       	push	r28
    1346:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1348:	8a 30       	cpi	r24, 0x0A	; 10
    134a:	19 f4       	brne	.+6      	; 0x1352 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    134c:	8d e0       	ldi	r24, 0x0D	; 13
    134e:	0e 94 94 09 	call	0x1328	; 0x1328 <USART_Transmit>
	USART_Transmit(c);
    1352:	8c 2f       	mov	r24, r28
    1354:	0e 94 94 09 	call	0x1328	; 0x1328 <USART_Transmit>
	return 0;
}
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    1360:	0e 94 9b 09 	call	0x1336	; 0x1336 <USART_Receive>
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	08 95       	ret

00001368 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1368:	fc 01       	movw	r30, r24
    136a:	66 87       	std	Z+14, r22	; 0x0e
    136c:	08 95       	ret

0000136e <ultrasonic_calculate_distance>:
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	ae 81       	ldd	r26, Y+6	; 0x06
    137e:	bf 81       	ldd	r27, Y+7	; 0x07
    1380:	48 81       	ld	r20, Y
    1382:	59 81       	ldd	r21, Y+1	; 0x01
    1384:	6a 81       	ldd	r22, Y+2	; 0x02
    1386:	7b 81       	ldd	r23, Y+3	; 0x03
    1388:	8c 01       	movw	r16, r24
    138a:	9d 01       	movw	r18, r26
    138c:	04 1b       	sub	r16, r20
    138e:	15 0b       	sbc	r17, r21
    1390:	26 0b       	sbc	r18, r22
    1392:	37 0b       	sbc	r19, r23
    1394:	b9 01       	movw	r22, r18
    1396:	a8 01       	movw	r20, r16
    1398:	d9 01       	movw	r26, r18
    139a:	c8 01       	movw	r24, r16
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	aa 1f       	adc	r26, r26
    13aa:	bb 1f       	adc	r27, r27
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	aa 1f       	adc	r26, r26
    13b2:	bb 1f       	adc	r27, r27
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	aa 1f       	adc	r26, r26
    13ba:	bb 1f       	adc	r27, r27
    13bc:	8c 01       	movw	r16, r24
    13be:	9d 01       	movw	r18, r26
    13c0:	04 0f       	add	r16, r20
    13c2:	15 1f       	adc	r17, r21
    13c4:	26 1f       	adc	r18, r22
    13c6:	37 1f       	adc	r19, r23
    13c8:	c9 01       	movw	r24, r18
    13ca:	b8 01       	movw	r22, r16
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	20 e9       	ldi	r18, 0x90	; 144
    13d6:	31 e0       	ldi	r19, 0x01	; 1
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodsi4>
    13e0:	28 87       	std	Y+8, r18	; 0x08
    13e2:	39 87       	std	Y+9, r19	; 0x09
    13e4:	4a 87       	std	Y+10, r20	; 0x0a
    13e6:	5b 87       	std	Y+11, r21	; 0x0b
    13e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ea:	80 68       	ori	r24, 0x80	; 128
    13ec:	8c 87       	std	Y+12, r24	; 0x0c
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    13f8:	dc 01       	movw	r26, r24
    13fa:	1f 96       	adiw	r26, 0x0f	; 15
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    1400:	50 97       	sbiw	r26, 0x10	; 16
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	11 f0       	breq	.+4      	; 0x140a <ultrasonic_print+0x12>
    1406:	cb 01       	movw	r24, r22
		us->print_method(message);
    1408:	09 95       	icall
    140a:	08 95       	ret

0000140c <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1412:	18 82       	st	Y, r1
    1414:	19 82       	std	Y+1, r1	; 0x01
    1416:	1a 82       	std	Y+2, r1	; 0x02
    1418:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    141a:	1c 82       	std	Y+4, r1	; 0x04
    141c:	1d 82       	std	Y+5, r1	; 0x05
    141e:	1e 82       	std	Y+6, r1	; 0x06
    1420:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1422:	18 86       	std	Y+8, r1	; 0x08
    1424:	19 86       	std	Y+9, r1	; 0x09
    1426:	1a 86       	std	Y+10, r1	; 0x0a
    1428:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    142a:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    142c:	8c 85       	ldd	r24, Y+12	; 0x0c
    142e:	80 62       	ori	r24, 0x20	; 32
    1430:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1432:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1434:	0e 94 7d 09 	call	0x12fa	; 0x12fa <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	98 89       	ldd	r25, Y+16	; 0x10
    143c:	89 2b       	or	r24, r25
    143e:	41 f0       	breq	.+16     	; 0x1450 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1440:	8e 85       	ldd	r24, Y+14	; 0x0e
    1442:	88 23       	and	r24, r24
    1444:	29 f0       	breq	.+10     	; 0x1450 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1446:	6d e8       	ldi	r22, 0x8D	; 141
    1448:	74 e0       	ldi	r23, 0x04	; 4
    144a:	ce 01       	movw	r24, r28
    144c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
		}
	}
}
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ec 01       	movw	r28, r24
    1460:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1462:	0e 94 06 0a 	call	0x140c	; 0x140c <ultrasonic_init_flags>
	us->debugMode = true;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    146a:	01 15       	cp	r16, r1
    146c:	11 05       	cpc	r17, r1
    146e:	19 f4       	brne	.+6      	; 0x1476 <ultrasonic_init+0x20>
		us->print_method = NULL;
    1470:	18 8a       	std	Y+16, r1	; 0x10
    1472:	1f 86       	std	Y+15, r1	; 0x0f
    1474:	0a c0       	rjmp	.+20     	; 0x148a <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    1476:	18 8b       	std	Y+16, r17	; 0x10
    1478:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    147a:	8e 85       	ldd	r24, Y+14	; 0x0e
    147c:	88 23       	and	r24, r24
    147e:	29 f0       	breq	.+10     	; 0x148a <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1480:	6c ea       	ldi	r22, 0xAC	; 172
    1482:	74 e0       	ldi	r23, 0x04	; 4
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
		}
	}
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    149a:	fc 01       	movw	r30, r24
    149c:	25 85       	ldd	r18, Z+13	; 0x0d
    149e:	26 30       	cpi	r18, 0x06	; 6
    14a0:	71 f4       	brne	.+28     	; 0x14be <ultrasonic_timeout_clear+0x2a>
    14a2:	16 2f       	mov	r17, r22
    14a4:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    14a6:	0e 94 06 0a 	call	0x140c	; 0x140c <ultrasonic_init_flags>
		us->debugMode = state;
    14aa:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    14ac:	1e 85       	ldd	r17, Y+14	; 0x0e
    14ae:	11 23       	and	r17, r17
    14b0:	41 f0       	breq	.+16     	; 0x14c2 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    14b2:	68 e8       	ldi	r22, 0x88	; 136
    14b4:	73 e0       	ldi	r23, 0x03	; 3
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    14c2:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    14c4:	81 2f       	mov	r24, r17
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	08 95       	ret

000014ce <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    14ce:	cf 93       	push	r28
    14d0:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    14d2:	85 85       	ldd	r24, Z+13	; 0x0d
    14d4:	88 23       	and	r24, r24
    14d6:	19 f0       	breq	.+6      	; 0x14de <ultrasonic_start+0x10>
    14d8:	85 85       	ldd	r24, Z+13	; 0x0d
    14da:	85 30       	cpi	r24, 0x05	; 5
    14dc:	c1 f4       	brne	.+48     	; 0x150e <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    14de:	84 85       	ldd	r24, Z+12	; 0x0c
    14e0:	85 ff       	sbrs	r24, 5
    14e2:	0b c0       	rjmp	.+22     	; 0x14fa <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    14e8:	c6 85       	ldd	r28, Z+14	; 0x0e
    14ea:	cc 23       	and	r28, r28
    14ec:	d1 f0       	breq	.+52     	; 0x1522 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    14ee:	68 ec       	ldi	r22, 0xC8	; 200
    14f0:	74 e0       	ldi	r23, 0x04	; 4
    14f2:	cf 01       	movw	r24, r30
    14f4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
    14f8:	15 c0       	rjmp	.+42     	; 0x1524 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    14fa:	c6 85       	ldd	r28, Z+14	; 0x0e
    14fc:	cc 23       	and	r28, r28
    14fe:	91 f0       	breq	.+36     	; 0x1524 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1500:	67 ef       	ldi	r22, 0xF7	; 247
    1502:	74 e0       	ldi	r23, 0x04	; 4
    1504:	cf 01       	movw	r24, r30
    1506:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    150a:	c0 e0       	ldi	r28, 0x00	; 0
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    150e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1510:	cc 23       	and	r28, r28
    1512:	41 f0       	breq	.+16     	; 0x1524 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    1514:	6e e2       	ldi	r22, 0x2E	; 46
    1516:	75 e0       	ldi	r23, 0x05	; 5
    1518:	cf 01       	movw	r24, r30
    151a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
			}
	}
	return false;
    151e:	c0 e0       	ldi	r28, 0x00	; 0
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    1522:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    1524:	8c 2f       	mov	r24, r28
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
	switch (us->state)
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	71 f1       	breq	.+92     	; 0x1592 <ultrasonic_update+0x68>
    1536:	28 f4       	brcc	.+10     	; 0x1542 <ultrasonic_update+0x18>
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	49 f0       	breq	.+18     	; 0x154e <ultrasonic_update+0x24>
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	a1 f0       	breq	.+40     	; 0x1568 <ultrasonic_update+0x3e>
    1540:	55 c0       	rjmp	.+170    	; 0x15ec <ultrasonic_update+0xc2>
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	e1 f1       	breq	.+120    	; 0x15be <ultrasonic_update+0x94>
    1546:	86 30       	cpi	r24, 0x06	; 6
    1548:	09 f4       	brne	.+2      	; 0x154c <ultrasonic_update+0x22>
    154a:	4d c0       	rjmp	.+154    	; 0x15e6 <ultrasonic_update+0xbc>
    154c:	4f c0       	rjmp	.+158    	; 0x15ec <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    154e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1550:	81 ff       	sbrs	r24, 1
    1552:	4c c0       	rjmp	.+152    	; 0x15ec <ultrasonic_update+0xc2>
				if(us->debugMode){
    1554:	8e 85       	ldd	r24, Y+14	; 0x0e
    1556:	88 23       	and	r24, r24
    1558:	09 f4       	brne	.+2      	; 0x155c <ultrasonic_update+0x32>
    155a:	48 c0       	rjmp	.+144    	; 0x15ec <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    155c:	6b e5       	ldi	r22, 0x5B	; 91
    155e:	75 e0       	ldi	r23, 0x05	; 5
    1560:	ce 01       	movw	r24, r28
    1562:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
    1566:	42 c0       	rjmp	.+132    	; 0x15ec <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    1568:	8c 85       	ldd	r24, Y+12	; 0x0c
    156a:	84 fd       	sbrc	r24, 4
    156c:	0c c0       	rjmp	.+24     	; 0x1586 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    1572:	0e 94 83 09 	call	0x1306	; 0x1306 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    1576:	8e 85       	ldd	r24, Y+14	; 0x0e
    1578:	88 23       	and	r24, r24
    157a:	29 f0       	breq	.+10     	; 0x1586 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    157c:	6a e7       	ldi	r22, 0x7A	; 122
    157e:	75 e0       	ldi	r23, 0x05	; 5
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    1586:	8c 85       	ldd	r24, Y+12	; 0x0c
    1588:	83 ff       	sbrs	r24, 3
    158a:	30 c0       	rjmp	.+96     	; 0x15ec <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    158c:	86 e0       	ldi	r24, 0x06	; 6
    158e:	8d 87       	std	Y+13, r24	; 0x0d
    1590:	2d c0       	rjmp	.+90     	; 0x15ec <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    1592:	8c 85       	ldd	r24, Y+12	; 0x0c
    1594:	86 ff       	sbrs	r24, 6
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    159c:	8e 85       	ldd	r24, Y+14	; 0x0e
    159e:	88 23       	and	r24, r24
    15a0:	29 f0       	breq	.+10     	; 0x15ac <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    15a2:	67 e9       	ldi	r22, 0x97	; 151
    15a4:	75 e0       	ldi	r23, 0x05	; 5
    15a6:	ce 01       	movw	r24, r28
    15a8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    15ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    15b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b4:	83 ff       	sbrs	r24, 3
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    15b8:	86 e0       	ldi	r24, 0x06	; 6
    15ba:	8d 87       	std	Y+13, r24	; 0x0d
    15bc:	17 c0       	rjmp	.+46     	; 0x15ec <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    15be:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c0:	82 ff       	sbrs	r24, 2
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 b7 09 	call	0x136e	; 0x136e <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    15ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    15d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15d2:	88 23       	and	r24, r24
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    15d6:	6e ea       	ldi	r22, 0xAE	; 174
    15d8:	75 e0       	ldi	r23, 0x05	; 5
    15da:	ce 01       	movw	r24, r28
    15dc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    15e0:	85 e0       	ldi	r24, 0x05	; 5
    15e2:	8d 87       	std	Y+13, r24	; 0x0d
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    15e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e8:	88 60       	ori	r24, 0x08	; 8
    15ea:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <__udivmodsi4>:
    15f2:	a1 e2       	ldi	r26, 0x21	; 33
    15f4:	1a 2e       	mov	r1, r26
    15f6:	aa 1b       	sub	r26, r26
    15f8:	bb 1b       	sub	r27, r27
    15fa:	fd 01       	movw	r30, r26
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <__udivmodsi4_ep>

000015fe <__udivmodsi4_loop>:
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	ee 1f       	adc	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	a2 17       	cp	r26, r18
    1608:	b3 07       	cpc	r27, r19
    160a:	e4 07       	cpc	r30, r20
    160c:	f5 07       	cpc	r31, r21
    160e:	20 f0       	brcs	.+8      	; 0x1618 <__udivmodsi4_ep>
    1610:	a2 1b       	sub	r26, r18
    1612:	b3 0b       	sbc	r27, r19
    1614:	e4 0b       	sbc	r30, r20
    1616:	f5 0b       	sbc	r31, r21

00001618 <__udivmodsi4_ep>:
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	1a 94       	dec	r1
    1622:	69 f7       	brne	.-38     	; 0x15fe <__udivmodsi4_loop>
    1624:	60 95       	com	r22
    1626:	70 95       	com	r23
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	bd 01       	movw	r22, r26
    1632:	cf 01       	movw	r24, r30
    1634:	08 95       	ret

00001636 <__umulhisi3>:
    1636:	a2 9f       	mul	r26, r18
    1638:	b0 01       	movw	r22, r0
    163a:	b3 9f       	mul	r27, r19
    163c:	c0 01       	movw	r24, r0
    163e:	a3 9f       	mul	r26, r19
    1640:	70 0d       	add	r23, r0
    1642:	81 1d       	adc	r24, r1
    1644:	11 24       	eor	r1, r1
    1646:	91 1d       	adc	r25, r1
    1648:	b2 9f       	mul	r27, r18
    164a:	70 0d       	add	r23, r0
    164c:	81 1d       	adc	r24, r1
    164e:	11 24       	eor	r1, r1
    1650:	91 1d       	adc	r25, r1
    1652:	08 95       	ret

00001654 <__muluhisi3>:
    1654:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
    1658:	a5 9f       	mul	r26, r21
    165a:	90 0d       	add	r25, r0
    165c:	b4 9f       	mul	r27, r20
    165e:	90 0d       	add	r25, r0
    1660:	a4 9f       	mul	r26, r20
    1662:	80 0d       	add	r24, r0
    1664:	91 1d       	adc	r25, r1
    1666:	11 24       	eor	r1, r1
    1668:	08 95       	ret

0000166a <printf>:
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__prologue_saves__+0x20>
    1676:	ae 01       	movw	r20, r28
    1678:	4b 5f       	subi	r20, 0xFB	; 251
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	fa 01       	movw	r30, r20
    167e:	61 91       	ld	r22, Z+
    1680:	71 91       	ld	r23, Z+
    1682:	af 01       	movw	r20, r30
    1684:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <__iob+0x2>
    1688:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <__iob+0x3>
    168c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vfprintf>
    1690:	e2 e0       	ldi	r30, 0x02	; 2
    1692:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__epilogue_restores__+0x20>

00001696 <puts>:
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <__iob+0x2>
    16a2:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <__iob+0x3>
    16a6:	23 81       	ldd	r18, Z+3	; 0x03
    16a8:	21 ff       	sbrs	r18, 1
    16aa:	1b c0       	rjmp	.+54     	; 0x16e2 <puts+0x4c>
    16ac:	8c 01       	movw	r16, r24
    16ae:	d0 e0       	ldi	r29, 0x00	; 0
    16b0:	c0 e0       	ldi	r28, 0x00	; 0
    16b2:	f8 01       	movw	r30, r16
    16b4:	81 91       	ld	r24, Z+
    16b6:	8f 01       	movw	r16, r30
    16b8:	60 91 73 06 	lds	r22, 0x0673	; 0x800673 <__iob+0x2>
    16bc:	70 91 74 06 	lds	r23, 0x0674	; 0x800674 <__iob+0x3>
    16c0:	db 01       	movw	r26, r22
    16c2:	18 96       	adiw	r26, 0x08	; 8
    16c4:	ed 91       	ld	r30, X+
    16c6:	fc 91       	ld	r31, X
    16c8:	19 97       	sbiw	r26, 0x09	; 9
    16ca:	88 23       	and	r24, r24
    16cc:	31 f0       	breq	.+12     	; 0x16da <puts+0x44>
    16ce:	09 95       	icall
    16d0:	89 2b       	or	r24, r25
    16d2:	79 f3       	breq	.-34     	; 0x16b2 <puts+0x1c>
    16d4:	df ef       	ldi	r29, 0xFF	; 255
    16d6:	cf ef       	ldi	r28, 0xFF	; 255
    16d8:	ec cf       	rjmp	.-40     	; 0x16b2 <puts+0x1c>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	09 95       	icall
    16de:	89 2b       	or	r24, r25
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <puts+0x52>
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	9f ef       	ldi	r25, 0xFF	; 255
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <puts+0x56>
    16e8:	8d 2f       	mov	r24, r29
    16ea:	9c 2f       	mov	r25, r28
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <vfprintf>:
    16f6:	ab e0       	ldi	r26, 0x0B	; 11
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__prologue_saves__>
    1702:	6c 01       	movw	r12, r24
    1704:	7b 01       	movw	r14, r22
    1706:	8a 01       	movw	r16, r20
    1708:	fc 01       	movw	r30, r24
    170a:	17 82       	std	Z+7, r1	; 0x07
    170c:	16 82       	std	Z+6, r1	; 0x06
    170e:	83 81       	ldd	r24, Z+3	; 0x03
    1710:	81 ff       	sbrs	r24, 1
    1712:	cc c1       	rjmp	.+920    	; 0x1aac <vfprintf+0x3b6>
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	3c 01       	movw	r6, r24
    171a:	f6 01       	movw	r30, r12
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	f7 01       	movw	r30, r14
    1720:	93 fd       	sbrc	r25, 3
    1722:	85 91       	lpm	r24, Z+
    1724:	93 ff       	sbrs	r25, 3
    1726:	81 91       	ld	r24, Z+
    1728:	7f 01       	movw	r14, r30
    172a:	88 23       	and	r24, r24
    172c:	09 f4       	brne	.+2      	; 0x1730 <vfprintf+0x3a>
    172e:	ba c1       	rjmp	.+884    	; 0x1aa4 <vfprintf+0x3ae>
    1730:	85 32       	cpi	r24, 0x25	; 37
    1732:	39 f4       	brne	.+14     	; 0x1742 <vfprintf+0x4c>
    1734:	93 fd       	sbrc	r25, 3
    1736:	85 91       	lpm	r24, Z+
    1738:	93 ff       	sbrs	r25, 3
    173a:	81 91       	ld	r24, Z+
    173c:	7f 01       	movw	r14, r30
    173e:	85 32       	cpi	r24, 0x25	; 37
    1740:	29 f4       	brne	.+10     	; 0x174c <vfprintf+0x56>
    1742:	b6 01       	movw	r22, r12
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    174a:	e7 cf       	rjmp	.-50     	; 0x171a <vfprintf+0x24>
    174c:	91 2c       	mov	r9, r1
    174e:	21 2c       	mov	r2, r1
    1750:	31 2c       	mov	r3, r1
    1752:	ff e1       	ldi	r31, 0x1F	; 31
    1754:	f3 15       	cp	r31, r3
    1756:	d8 f0       	brcs	.+54     	; 0x178e <vfprintf+0x98>
    1758:	8b 32       	cpi	r24, 0x2B	; 43
    175a:	79 f0       	breq	.+30     	; 0x177a <vfprintf+0x84>
    175c:	38 f4       	brcc	.+14     	; 0x176c <vfprintf+0x76>
    175e:	80 32       	cpi	r24, 0x20	; 32
    1760:	79 f0       	breq	.+30     	; 0x1780 <vfprintf+0x8a>
    1762:	83 32       	cpi	r24, 0x23	; 35
    1764:	a1 f4       	brne	.+40     	; 0x178e <vfprintf+0x98>
    1766:	23 2d       	mov	r18, r3
    1768:	20 61       	ori	r18, 0x10	; 16
    176a:	1d c0       	rjmp	.+58     	; 0x17a6 <vfprintf+0xb0>
    176c:	8d 32       	cpi	r24, 0x2D	; 45
    176e:	61 f0       	breq	.+24     	; 0x1788 <vfprintf+0x92>
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	69 f4       	brne	.+26     	; 0x178e <vfprintf+0x98>
    1774:	23 2d       	mov	r18, r3
    1776:	21 60       	ori	r18, 0x01	; 1
    1778:	16 c0       	rjmp	.+44     	; 0x17a6 <vfprintf+0xb0>
    177a:	83 2d       	mov	r24, r3
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	38 2e       	mov	r3, r24
    1780:	e3 2d       	mov	r30, r3
    1782:	e4 60       	ori	r30, 0x04	; 4
    1784:	3e 2e       	mov	r3, r30
    1786:	2a c0       	rjmp	.+84     	; 0x17dc <vfprintf+0xe6>
    1788:	f3 2d       	mov	r31, r3
    178a:	f8 60       	ori	r31, 0x08	; 8
    178c:	1d c0       	rjmp	.+58     	; 0x17c8 <vfprintf+0xd2>
    178e:	37 fc       	sbrc	r3, 7
    1790:	2d c0       	rjmp	.+90     	; 0x17ec <vfprintf+0xf6>
    1792:	20 ed       	ldi	r18, 0xD0	; 208
    1794:	28 0f       	add	r18, r24
    1796:	2a 30       	cpi	r18, 0x0A	; 10
    1798:	40 f0       	brcs	.+16     	; 0x17aa <vfprintf+0xb4>
    179a:	8e 32       	cpi	r24, 0x2E	; 46
    179c:	b9 f4       	brne	.+46     	; 0x17cc <vfprintf+0xd6>
    179e:	36 fc       	sbrc	r3, 6
    17a0:	81 c1       	rjmp	.+770    	; 0x1aa4 <vfprintf+0x3ae>
    17a2:	23 2d       	mov	r18, r3
    17a4:	20 64       	ori	r18, 0x40	; 64
    17a6:	32 2e       	mov	r3, r18
    17a8:	19 c0       	rjmp	.+50     	; 0x17dc <vfprintf+0xe6>
    17aa:	36 fe       	sbrs	r3, 6
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <vfprintf+0xc4>
    17ae:	8a e0       	ldi	r24, 0x0A	; 10
    17b0:	98 9e       	mul	r9, r24
    17b2:	20 0d       	add	r18, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	92 2e       	mov	r9, r18
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <vfprintf+0xe6>
    17ba:	ea e0       	ldi	r30, 0x0A	; 10
    17bc:	2e 9e       	mul	r2, r30
    17be:	20 0d       	add	r18, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	22 2e       	mov	r2, r18
    17c4:	f3 2d       	mov	r31, r3
    17c6:	f0 62       	ori	r31, 0x20	; 32
    17c8:	3f 2e       	mov	r3, r31
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <vfprintf+0xe6>
    17cc:	8c 36       	cpi	r24, 0x6C	; 108
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <vfprintf+0xe2>
    17d0:	83 2d       	mov	r24, r3
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	38 2e       	mov	r3, r24
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0xe6>
    17d8:	88 36       	cpi	r24, 0x68	; 104
    17da:	41 f4       	brne	.+16     	; 0x17ec <vfprintf+0xf6>
    17dc:	f7 01       	movw	r30, r14
    17de:	93 fd       	sbrc	r25, 3
    17e0:	85 91       	lpm	r24, Z+
    17e2:	93 ff       	sbrs	r25, 3
    17e4:	81 91       	ld	r24, Z+
    17e6:	7f 01       	movw	r14, r30
    17e8:	81 11       	cpse	r24, r1
    17ea:	b3 cf       	rjmp	.-154    	; 0x1752 <vfprintf+0x5c>
    17ec:	98 2f       	mov	r25, r24
    17ee:	9f 7d       	andi	r25, 0xDF	; 223
    17f0:	95 54       	subi	r25, 0x45	; 69
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <vfprintf+0x10a>
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	9f e3       	ldi	r25, 0x3F	; 63
    17fc:	99 83       	std	Y+1, r25	; 0x01
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <vfprintf+0x124>
    1800:	83 36       	cpi	r24, 0x63	; 99
    1802:	31 f0       	breq	.+12     	; 0x1810 <vfprintf+0x11a>
    1804:	83 37       	cpi	r24, 0x73	; 115
    1806:	71 f0       	breq	.+28     	; 0x1824 <vfprintf+0x12e>
    1808:	83 35       	cpi	r24, 0x53	; 83
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x118>
    180c:	59 c0       	rjmp	.+178    	; 0x18c0 <vfprintf+0x1ca>
    180e:	21 c0       	rjmp	.+66     	; 0x1852 <vfprintf+0x15c>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	0e 5f       	subi	r16, 0xFE	; 254
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	88 24       	eor	r8, r8
    181c:	83 94       	inc	r8
    181e:	91 2c       	mov	r9, r1
    1820:	53 01       	movw	r10, r6
    1822:	13 c0       	rjmp	.+38     	; 0x184a <vfprintf+0x154>
    1824:	28 01       	movw	r4, r16
    1826:	f2 e0       	ldi	r31, 0x02	; 2
    1828:	4f 0e       	add	r4, r31
    182a:	51 1c       	adc	r5, r1
    182c:	f8 01       	movw	r30, r16
    182e:	a0 80       	ld	r10, Z
    1830:	b1 80       	ldd	r11, Z+1	; 0x01
    1832:	36 fe       	sbrs	r3, 6
    1834:	03 c0       	rjmp	.+6      	; 0x183c <vfprintf+0x146>
    1836:	69 2d       	mov	r22, r9
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <vfprintf+0x14a>
    183c:	6f ef       	ldi	r22, 0xFF	; 255
    183e:	7f ef       	ldi	r23, 0xFF	; 255
    1840:	c5 01       	movw	r24, r10
    1842:	0e 94 67 0d 	call	0x1ace	; 0x1ace <strnlen>
    1846:	4c 01       	movw	r8, r24
    1848:	82 01       	movw	r16, r4
    184a:	f3 2d       	mov	r31, r3
    184c:	ff 77       	andi	r31, 0x7F	; 127
    184e:	3f 2e       	mov	r3, r31
    1850:	16 c0       	rjmp	.+44     	; 0x187e <vfprintf+0x188>
    1852:	28 01       	movw	r4, r16
    1854:	22 e0       	ldi	r18, 0x02	; 2
    1856:	42 0e       	add	r4, r18
    1858:	51 1c       	adc	r5, r1
    185a:	f8 01       	movw	r30, r16
    185c:	a0 80       	ld	r10, Z
    185e:	b1 80       	ldd	r11, Z+1	; 0x01
    1860:	36 fe       	sbrs	r3, 6
    1862:	03 c0       	rjmp	.+6      	; 0x186a <vfprintf+0x174>
    1864:	69 2d       	mov	r22, r9
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x178>
    186a:	6f ef       	ldi	r22, 0xFF	; 255
    186c:	7f ef       	ldi	r23, 0xFF	; 255
    186e:	c5 01       	movw	r24, r10
    1870:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strnlen_P>
    1874:	4c 01       	movw	r8, r24
    1876:	f3 2d       	mov	r31, r3
    1878:	f0 68       	ori	r31, 0x80	; 128
    187a:	3f 2e       	mov	r3, r31
    187c:	82 01       	movw	r16, r4
    187e:	33 fc       	sbrc	r3, 3
    1880:	1b c0       	rjmp	.+54     	; 0x18b8 <vfprintf+0x1c2>
    1882:	82 2d       	mov	r24, r2
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 16       	cp	r8, r24
    1888:	99 06       	cpc	r9, r25
    188a:	b0 f4       	brcc	.+44     	; 0x18b8 <vfprintf+0x1c2>
    188c:	b6 01       	movw	r22, r12
    188e:	80 e2       	ldi	r24, 0x20	; 32
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1896:	2a 94       	dec	r2
    1898:	f4 cf       	rjmp	.-24     	; 0x1882 <vfprintf+0x18c>
    189a:	f5 01       	movw	r30, r10
    189c:	37 fc       	sbrc	r3, 7
    189e:	85 91       	lpm	r24, Z+
    18a0:	37 fe       	sbrs	r3, 7
    18a2:	81 91       	ld	r24, Z+
    18a4:	5f 01       	movw	r10, r30
    18a6:	b6 01       	movw	r22, r12
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    18ae:	21 10       	cpse	r2, r1
    18b0:	2a 94       	dec	r2
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	82 1a       	sub	r8, r18
    18b6:	91 08       	sbc	r9, r1
    18b8:	81 14       	cp	r8, r1
    18ba:	91 04       	cpc	r9, r1
    18bc:	71 f7       	brne	.-36     	; 0x189a <vfprintf+0x1a4>
    18be:	e8 c0       	rjmp	.+464    	; 0x1a90 <vfprintf+0x39a>
    18c0:	84 36       	cpi	r24, 0x64	; 100
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <vfprintf+0x1d2>
    18c4:	89 36       	cpi	r24, 0x69	; 105
    18c6:	41 f5       	brne	.+80     	; 0x1918 <vfprintf+0x222>
    18c8:	f8 01       	movw	r30, r16
    18ca:	37 fe       	sbrs	r3, 7
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <vfprintf+0x1e6>
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	0c 5f       	subi	r16, 0xFC	; 252
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <vfprintf+0x1f6>
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	07 2e       	mov	r0, r23
    18e2:	00 0c       	add	r0, r0
    18e4:	88 0b       	sbc	r24, r24
    18e6:	99 0b       	sbc	r25, r25
    18e8:	0e 5f       	subi	r16, 0xFE	; 254
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	f3 2d       	mov	r31, r3
    18ee:	ff 76       	andi	r31, 0x6F	; 111
    18f0:	3f 2e       	mov	r3, r31
    18f2:	97 ff       	sbrs	r25, 7
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <vfprintf+0x212>
    18f6:	90 95       	com	r25
    18f8:	80 95       	com	r24
    18fa:	70 95       	com	r23
    18fc:	61 95       	neg	r22
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	8f 4f       	sbci	r24, 0xFF	; 255
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	f0 68       	ori	r31, 0x80	; 128
    1906:	3f 2e       	mov	r3, r31
    1908:	2a e0       	ldi	r18, 0x0A	; 10
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	a3 01       	movw	r20, r6
    190e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__ultoa_invert>
    1912:	88 2e       	mov	r8, r24
    1914:	86 18       	sub	r8, r6
    1916:	45 c0       	rjmp	.+138    	; 0x19a2 <vfprintf+0x2ac>
    1918:	85 37       	cpi	r24, 0x75	; 117
    191a:	31 f4       	brne	.+12     	; 0x1928 <vfprintf+0x232>
    191c:	23 2d       	mov	r18, r3
    191e:	2f 7e       	andi	r18, 0xEF	; 239
    1920:	b2 2e       	mov	r11, r18
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	25 c0       	rjmp	.+74     	; 0x1972 <vfprintf+0x27c>
    1928:	93 2d       	mov	r25, r3
    192a:	99 7f       	andi	r25, 0xF9	; 249
    192c:	b9 2e       	mov	r11, r25
    192e:	8f 36       	cpi	r24, 0x6F	; 111
    1930:	c1 f0       	breq	.+48     	; 0x1962 <vfprintf+0x26c>
    1932:	18 f4       	brcc	.+6      	; 0x193a <vfprintf+0x244>
    1934:	88 35       	cpi	r24, 0x58	; 88
    1936:	79 f0       	breq	.+30     	; 0x1956 <vfprintf+0x260>
    1938:	b5 c0       	rjmp	.+362    	; 0x1aa4 <vfprintf+0x3ae>
    193a:	80 37       	cpi	r24, 0x70	; 112
    193c:	19 f0       	breq	.+6      	; 0x1944 <vfprintf+0x24e>
    193e:	88 37       	cpi	r24, 0x78	; 120
    1940:	21 f0       	breq	.+8      	; 0x194a <vfprintf+0x254>
    1942:	b0 c0       	rjmp	.+352    	; 0x1aa4 <vfprintf+0x3ae>
    1944:	e9 2f       	mov	r30, r25
    1946:	e0 61       	ori	r30, 0x10	; 16
    1948:	be 2e       	mov	r11, r30
    194a:	b4 fe       	sbrs	r11, 4
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <vfprintf+0x272>
    194e:	fb 2d       	mov	r31, r11
    1950:	f4 60       	ori	r31, 0x04	; 4
    1952:	bf 2e       	mov	r11, r31
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <vfprintf+0x272>
    1956:	34 fe       	sbrs	r3, 4
    1958:	0a c0       	rjmp	.+20     	; 0x196e <vfprintf+0x278>
    195a:	29 2f       	mov	r18, r25
    195c:	26 60       	ori	r18, 0x06	; 6
    195e:	b2 2e       	mov	r11, r18
    1960:	06 c0       	rjmp	.+12     	; 0x196e <vfprintf+0x278>
    1962:	28 e0       	ldi	r18, 0x08	; 8
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <vfprintf+0x27c>
    1968:	20 e1       	ldi	r18, 0x10	; 16
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <vfprintf+0x27c>
    196e:	20 e1       	ldi	r18, 0x10	; 16
    1970:	32 e0       	ldi	r19, 0x02	; 2
    1972:	f8 01       	movw	r30, r16
    1974:	b7 fe       	sbrs	r11, 7
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <vfprintf+0x290>
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0c 5f       	subi	r16, 0xFC	; 252
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <vfprintf+0x29c>
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	a3 01       	movw	r20, r6
    1994:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__ultoa_invert>
    1998:	88 2e       	mov	r8, r24
    199a:	86 18       	sub	r8, r6
    199c:	fb 2d       	mov	r31, r11
    199e:	ff 77       	andi	r31, 0x7F	; 127
    19a0:	3f 2e       	mov	r3, r31
    19a2:	36 fe       	sbrs	r3, 6
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <vfprintf+0x2ca>
    19a6:	23 2d       	mov	r18, r3
    19a8:	2e 7f       	andi	r18, 0xFE	; 254
    19aa:	a2 2e       	mov	r10, r18
    19ac:	89 14       	cp	r8, r9
    19ae:	58 f4       	brcc	.+22     	; 0x19c6 <vfprintf+0x2d0>
    19b0:	34 fe       	sbrs	r3, 4
    19b2:	0b c0       	rjmp	.+22     	; 0x19ca <vfprintf+0x2d4>
    19b4:	32 fc       	sbrc	r3, 2
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x2d4>
    19b8:	83 2d       	mov	r24, r3
    19ba:	8e 7e       	andi	r24, 0xEE	; 238
    19bc:	a8 2e       	mov	r10, r24
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <vfprintf+0x2d4>
    19c0:	b8 2c       	mov	r11, r8
    19c2:	a3 2c       	mov	r10, r3
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <vfprintf+0x2d6>
    19c6:	b8 2c       	mov	r11, r8
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <vfprintf+0x2d6>
    19ca:	b9 2c       	mov	r11, r9
    19cc:	a4 fe       	sbrs	r10, 4
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <vfprintf+0x2f8>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e8 0d       	add	r30, r8
    19d4:	f1 1d       	adc	r31, r1
    19d6:	80 81       	ld	r24, Z
    19d8:	80 33       	cpi	r24, 0x30	; 48
    19da:	21 f4       	brne	.+8      	; 0x19e4 <vfprintf+0x2ee>
    19dc:	9a 2d       	mov	r25, r10
    19de:	99 7e       	andi	r25, 0xE9	; 233
    19e0:	a9 2e       	mov	r10, r25
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <vfprintf+0x300>
    19e4:	a2 fe       	sbrs	r10, 2
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <vfprintf+0x2fe>
    19e8:	b3 94       	inc	r11
    19ea:	b3 94       	inc	r11
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <vfprintf+0x300>
    19ee:	8a 2d       	mov	r24, r10
    19f0:	86 78       	andi	r24, 0x86	; 134
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <vfprintf+0x300>
    19f4:	b3 94       	inc	r11
    19f6:	a3 fc       	sbrc	r10, 3
    19f8:	11 c0       	rjmp	.+34     	; 0x1a1c <vfprintf+0x326>
    19fa:	a0 fe       	sbrs	r10, 0
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x314>
    19fe:	b2 14       	cp	r11, r2
    1a00:	88 f4       	brcc	.+34     	; 0x1a24 <vfprintf+0x32e>
    1a02:	28 0c       	add	r2, r8
    1a04:	92 2c       	mov	r9, r2
    1a06:	9b 18       	sub	r9, r11
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <vfprintf+0x330>
    1a0a:	b2 14       	cp	r11, r2
    1a0c:	60 f4       	brcc	.+24     	; 0x1a26 <vfprintf+0x330>
    1a0e:	b6 01       	movw	r22, r12
    1a10:	80 e2       	ldi	r24, 0x20	; 32
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a18:	b3 94       	inc	r11
    1a1a:	f7 cf       	rjmp	.-18     	; 0x1a0a <vfprintf+0x314>
    1a1c:	b2 14       	cp	r11, r2
    1a1e:	18 f4       	brcc	.+6      	; 0x1a26 <vfprintf+0x330>
    1a20:	2b 18       	sub	r2, r11
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0x332>
    1a24:	98 2c       	mov	r9, r8
    1a26:	21 2c       	mov	r2, r1
    1a28:	a4 fe       	sbrs	r10, 4
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <vfprintf+0x356>
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	80 e3       	ldi	r24, 0x30	; 48
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a36:	a2 fe       	sbrs	r10, 2
    1a38:	17 c0       	rjmp	.+46     	; 0x1a68 <vfprintf+0x372>
    1a3a:	a1 fc       	sbrc	r10, 1
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <vfprintf+0x34e>
    1a3e:	88 e7       	ldi	r24, 0x78	; 120
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <vfprintf+0x352>
    1a44:	88 e5       	ldi	r24, 0x58	; 88
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <vfprintf+0x36e>
    1a4c:	8a 2d       	mov	r24, r10
    1a4e:	86 78       	andi	r24, 0x86	; 134
    1a50:	59 f0       	breq	.+22     	; 0x1a68 <vfprintf+0x372>
    1a52:	a1 fe       	sbrs	r10, 1
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <vfprintf+0x364>
    1a56:	8b e2       	ldi	r24, 0x2B	; 43
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <vfprintf+0x366>
    1a5a:	80 e2       	ldi	r24, 0x20	; 32
    1a5c:	a7 fc       	sbrc	r10, 7
    1a5e:	8d e2       	ldi	r24, 0x2D	; 45
    1a60:	b6 01       	movw	r22, r12
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a68:	89 14       	cp	r8, r9
    1a6a:	38 f4       	brcc	.+14     	; 0x1a7a <vfprintf+0x384>
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	80 e3       	ldi	r24, 0x30	; 48
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a76:	9a 94       	dec	r9
    1a78:	f7 cf       	rjmp	.-18     	; 0x1a68 <vfprintf+0x372>
    1a7a:	8a 94       	dec	r8
    1a7c:	f3 01       	movw	r30, r6
    1a7e:	e8 0d       	add	r30, r8
    1a80:	f1 1d       	adc	r31, r1
    1a82:	80 81       	ld	r24, Z
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a8c:	81 10       	cpse	r8, r1
    1a8e:	f5 cf       	rjmp	.-22     	; 0x1a7a <vfprintf+0x384>
    1a90:	22 20       	and	r2, r2
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <vfprintf+0x3a0>
    1a94:	42 ce       	rjmp	.-892    	; 0x171a <vfprintf+0x24>
    1a96:	b6 01       	movw	r22, r12
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1aa0:	2a 94       	dec	r2
    1aa2:	f6 cf       	rjmp	.-20     	; 0x1a90 <vfprintf+0x39a>
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	86 81       	ldd	r24, Z+6	; 0x06
    1aa8:	97 81       	ldd	r25, Z+7	; 0x07
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x3ba>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	2b 96       	adiw	r28, 0x0b	; 11
    1ab2:	e2 e1       	ldi	r30, 0x12	; 18
    1ab4:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__epilogue_restores__>

00001ab8 <strnlen_P>:
    1ab8:	fc 01       	movw	r30, r24
    1aba:	05 90       	lpm	r0, Z+
    1abc:	61 50       	subi	r22, 0x01	; 1
    1abe:	70 40       	sbci	r23, 0x00	; 0
    1ac0:	01 10       	cpse	r0, r1
    1ac2:	d8 f7       	brcc	.-10     	; 0x1aba <strnlen_P+0x2>
    1ac4:	80 95       	com	r24
    1ac6:	90 95       	com	r25
    1ac8:	8e 0f       	add	r24, r30
    1aca:	9f 1f       	adc	r25, r31
    1acc:	08 95       	ret

00001ace <strnlen>:
    1ace:	fc 01       	movw	r30, r24
    1ad0:	61 50       	subi	r22, 0x01	; 1
    1ad2:	70 40       	sbci	r23, 0x00	; 0
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	01 10       	cpse	r0, r1
    1ad8:	d8 f7       	brcc	.-10     	; 0x1ad0 <strnlen+0x2>
    1ada:	80 95       	com	r24
    1adc:	90 95       	com	r25
    1ade:	8e 0f       	add	r24, r30
    1ae0:	9f 1f       	adc	r25, r31
    1ae2:	08 95       	ret

00001ae4 <fputc>:
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	fb 01       	movw	r30, r22
    1aee:	23 81       	ldd	r18, Z+3	; 0x03
    1af0:	21 fd       	sbrc	r18, 1
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <fputc+0x16>
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <fputc+0x6e>
    1afa:	22 ff       	sbrs	r18, 2
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <fputc+0x46>
    1afe:	46 81       	ldd	r20, Z+6	; 0x06
    1b00:	57 81       	ldd	r21, Z+7	; 0x07
    1b02:	24 81       	ldd	r18, Z+4	; 0x04
    1b04:	35 81       	ldd	r19, Z+5	; 0x05
    1b06:	42 17       	cp	r20, r18
    1b08:	53 07       	cpc	r21, r19
    1b0a:	44 f4       	brge	.+16     	; 0x1b1c <fputc+0x38>
    1b0c:	a0 81       	ld	r26, Z
    1b0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b10:	9d 01       	movw	r18, r26
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	31 83       	std	Z+1, r19	; 0x01
    1b18:	20 83       	st	Z, r18
    1b1a:	8c 93       	st	X, r24
    1b1c:	26 81       	ldd	r18, Z+6	; 0x06
    1b1e:	37 81       	ldd	r19, Z+7	; 0x07
    1b20:	2f 5f       	subi	r18, 0xFF	; 255
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	37 83       	std	Z+7, r19	; 0x07
    1b26:	26 83       	std	Z+6, r18	; 0x06
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <fputc+0x6e>
    1b2a:	8b 01       	movw	r16, r22
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	fb 01       	movw	r30, r22
    1b30:	00 84       	ldd	r0, Z+8	; 0x08
    1b32:	f1 85       	ldd	r31, Z+9	; 0x09
    1b34:	e0 2d       	mov	r30, r0
    1b36:	09 95       	icall
    1b38:	89 2b       	or	r24, r25
    1b3a:	e1 f6       	brne	.-72     	; 0x1af4 <fputc+0x10>
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	16 96       	adiw	r26, 0x06	; 6
    1b40:	8d 91       	ld	r24, X+
    1b42:	9c 91       	ld	r25, X
    1b44:	17 97       	sbiw	r26, 0x07	; 7
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	17 96       	adiw	r26, 0x07	; 7
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
    1b4e:	16 97       	sbiw	r26, 0x06	; 6
    1b50:	ce 01       	movw	r24, r28
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <__ultoa_invert>:
    1b5c:	fa 01       	movw	r30, r20
    1b5e:	aa 27       	eor	r26, r26
    1b60:	28 30       	cpi	r18, 0x08	; 8
    1b62:	51 f1       	breq	.+84     	; 0x1bb8 <__ultoa_invert+0x5c>
    1b64:	20 31       	cpi	r18, 0x10	; 16
    1b66:	81 f1       	breq	.+96     	; 0x1bc8 <__ultoa_invert+0x6c>
    1b68:	e8 94       	clt
    1b6a:	6f 93       	push	r22
    1b6c:	6e 7f       	andi	r22, 0xFE	; 254
    1b6e:	6e 5f       	subi	r22, 0xFE	; 254
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	8f 4f       	sbci	r24, 0xFF	; 255
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	af 4f       	sbci	r26, 0xFF	; 255
    1b78:	b1 e0       	ldi	r27, 0x01	; 1
    1b7a:	3e d0       	rcall	.+124    	; 0x1bf8 <__ultoa_invert+0x9c>
    1b7c:	b4 e0       	ldi	r27, 0x04	; 4
    1b7e:	3c d0       	rcall	.+120    	; 0x1bf8 <__ultoa_invert+0x9c>
    1b80:	67 0f       	add	r22, r23
    1b82:	78 1f       	adc	r23, r24
    1b84:	89 1f       	adc	r24, r25
    1b86:	9a 1f       	adc	r25, r26
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	68 0f       	add	r22, r24
    1b8c:	79 1f       	adc	r23, r25
    1b8e:	8a 1f       	adc	r24, r26
    1b90:	91 1d       	adc	r25, r1
    1b92:	a1 1d       	adc	r26, r1
    1b94:	6a 0f       	add	r22, r26
    1b96:	71 1d       	adc	r23, r1
    1b98:	81 1d       	adc	r24, r1
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	20 d0       	rcall	.+64     	; 0x1be0 <__ultoa_invert+0x84>
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <__ultoa_invert+0x48>
    1ba2:	68 94       	set
    1ba4:	3f 91       	pop	r19
    1ba6:	2a e0       	ldi	r18, 0x0A	; 10
    1ba8:	26 9f       	mul	r18, r22
    1baa:	11 24       	eor	r1, r1
    1bac:	30 19       	sub	r19, r0
    1bae:	30 5d       	subi	r19, 0xD0	; 208
    1bb0:	31 93       	st	Z+, r19
    1bb2:	de f6       	brtc	.-74     	; 0x1b6a <__ultoa_invert+0xe>
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	08 95       	ret
    1bb8:	46 2f       	mov	r20, r22
    1bba:	47 70       	andi	r20, 0x07	; 7
    1bbc:	40 5d       	subi	r20, 0xD0	; 208
    1bbe:	41 93       	st	Z+, r20
    1bc0:	b3 e0       	ldi	r27, 0x03	; 3
    1bc2:	0f d0       	rcall	.+30     	; 0x1be2 <__ultoa_invert+0x86>
    1bc4:	c9 f7       	brne	.-14     	; 0x1bb8 <__ultoa_invert+0x5c>
    1bc6:	f6 cf       	rjmp	.-20     	; 0x1bb4 <__ultoa_invert+0x58>
    1bc8:	46 2f       	mov	r20, r22
    1bca:	4f 70       	andi	r20, 0x0F	; 15
    1bcc:	40 5d       	subi	r20, 0xD0	; 208
    1bce:	4a 33       	cpi	r20, 0x3A	; 58
    1bd0:	18 f0       	brcs	.+6      	; 0x1bd8 <__ultoa_invert+0x7c>
    1bd2:	49 5d       	subi	r20, 0xD9	; 217
    1bd4:	31 fd       	sbrc	r19, 1
    1bd6:	40 52       	subi	r20, 0x20	; 32
    1bd8:	41 93       	st	Z+, r20
    1bda:	02 d0       	rcall	.+4      	; 0x1be0 <__ultoa_invert+0x84>
    1bdc:	a9 f7       	brne	.-22     	; 0x1bc8 <__ultoa_invert+0x6c>
    1bde:	ea cf       	rjmp	.-44     	; 0x1bb4 <__ultoa_invert+0x58>
    1be0:	b4 e0       	ldi	r27, 0x04	; 4
    1be2:	a6 95       	lsr	r26
    1be4:	97 95       	ror	r25
    1be6:	87 95       	ror	r24
    1be8:	77 95       	ror	r23
    1bea:	67 95       	ror	r22
    1bec:	ba 95       	dec	r27
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__ultoa_invert+0x86>
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	61 05       	cpc	r22, r1
    1bf4:	71 05       	cpc	r23, r1
    1bf6:	08 95       	ret
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	0a 2e       	mov	r0, r26
    1bfe:	06 94       	lsr	r0
    1c00:	57 95       	ror	r21
    1c02:	47 95       	ror	r20
    1c04:	37 95       	ror	r19
    1c06:	27 95       	ror	r18
    1c08:	ba 95       	dec	r27
    1c0a:	c9 f7       	brne	.-14     	; 0x1bfe <__ultoa_invert+0xa2>
    1c0c:	62 0f       	add	r22, r18
    1c0e:	73 1f       	adc	r23, r19
    1c10:	84 1f       	adc	r24, r20
    1c12:	95 1f       	adc	r25, r21
    1c14:	a0 1d       	adc	r26, r0
    1c16:	08 95       	ret

00001c18 <__prologue_saves__>:
    1c18:	2f 92       	push	r2
    1c1a:	3f 92       	push	r3
    1c1c:	4f 92       	push	r4
    1c1e:	5f 92       	push	r5
    1c20:	6f 92       	push	r6
    1c22:	7f 92       	push	r7
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	ca 1b       	sub	r28, r26
    1c42:	db 0b       	sbc	r29, r27
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	09 94       	ijmp

00001c50 <__epilogue_restores__>:
    1c50:	2a 88       	ldd	r2, Y+18	; 0x12
    1c52:	39 88       	ldd	r3, Y+17	; 0x11
    1c54:	48 88       	ldd	r4, Y+16	; 0x10
    1c56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c62:	b9 84       	ldd	r11, Y+9	; 0x09
    1c64:	c8 84       	ldd	r12, Y+8	; 0x08
    1c66:	df 80       	ldd	r13, Y+7	; 0x07
    1c68:	ee 80       	ldd	r14, Y+6	; 0x06
    1c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c70:	aa 81       	ldd	r26, Y+2	; 0x02
    1c72:	b9 81       	ldd	r27, Y+1	; 0x01
    1c74:	ce 0f       	add	r28, r30
    1c76:	d1 1d       	adc	r29, r1
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	ed 01       	movw	r28, r26
    1c84:	08 95       	ret

00001c86 <_exit>:
    1c86:	f8 94       	cli

00001c88 <__stop_program>:
    1c88:	ff cf       	rjmp	.-2      	; 0x1c88 <__stop_program>
