
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005dc  00800100  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  008006dc  008006dc  00002bea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042ce  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001613  00000000  00000000  000071fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000239b  00000000  00000000  00008811  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  0000abac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a9  00000000  00000000  0000b47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001db3  00000000  00000000  0000c525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_7>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_10>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_11>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_12>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_18>
      4c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_19>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	42 74       	andi	r20, 0x42	; 66
      6a:	6e 20       	and	r6, r14
      6c:	6f 76       	andi	r22, 0x6F	; 111
      6e:	65 72       	andi	r22, 0x25	; 37
      70:	66 6c       	ori	r22, 0xC6	; 198
      72:	6f 77       	andi	r22, 0x7F	; 127
      74:	65 64       	ori	r22, 0x45	; 69
      76:	0a 00       	.word	0x000a	; ????

00000078 <__c.2329>:
      78:	43 61 6c 69 62 72 61 6e 64 6f 20 73 65 6e 73 6f     Calibrando senso
      88:	72 65 73 20 49 52 2e 2e 2e 0a 00                    res IR.....

00000093 <__c.2357>:
      93:	53 65 6e 64 20 64 6f 6e 65 00                       Send done.

0000009d <__c.2355>:
      9d:	53 65 6e 64 00                                      Send.

000000a2 <__c.2351>:
      a2:	50 72 6f 63 65 73 61 72 20 69 6e 66 6f 0a 00        Procesar info..

000000b1 <__c.2347>:
      b1:	54 6f 64 6f 73 20 6c 6f 73 20 73 65 6e 73 6f 72     Todos los sensor
      c1:	65 73 20 49 52 20 63 61 6c 69 62 72 61 64 6f 73     es IR calibrados
      d1:	2e 0a 00                                            ...

000000d4 <__c.2345>:
      d4:	49 6e 69 63 69 61 64 6f 0a 00                       Iniciado..

000000de <__c.2290>:
      de:	43 6b 73 20 76 61 6c 69 64 6f 0a 00                 Cks valido..

000000ea <__c.2288>:
      ea:	43 6b 73 20 69 6e 76 61 6c 69 64 6f 0a 00           Cks invalido..

000000f8 <__c.2286>:
      f8:	4c 65 6e 67 74 68 20 6d 61 79 6f 72 20 61 20 32     Length mayor a 2
     108:	34 2c 20 73 65 20 70 65 72 64 65 72 69 61 20 64     4, se perderia d
     118:	61 74 61 20 64 65 6c 20 62 75 66 66 65 72 0a 00     ata del buffer..

00000128 <__c.2284>:
     128:	43 6f 6d 61 6e 64 6f 20 69 6e 76 61 6c 69 64 6f     Comando invalido
     138:	0a 00                                               ..

0000013a <__c.2282>:
     13a:	54 6f 6b 65 6e 20 69 6e 76 61 6c 69 64 6f 0a 00     Token invalido..

0000014a <__c.2268>:
     14a:	43 6b 73 20 69 6e 76 61 6c 69 64 6f 0a 00           Cks invalido..

00000158 <__c.2266>:
     158:	43 6b 73 20 76 61 6c 69 64 6f 0a 00                 Cks valido..

00000164 <__c.2259>:
     164:	50 61 79 6c 6f 61 64 20 65 6e 20 48 65 78 3a 0a     Payload en Hex:.
	...

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	16 e0       	ldi	r17, 0x06	; 6
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	ea e7       	ldi	r30, 0x7A	; 122
     18a:	f5 e2       	ldi	r31, 0x25	; 37
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	ac 3d       	cpi	r26, 0xDC	; 220
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	27 e0       	ldi	r18, 0x07	; 7
     19a:	ac ed       	ldi	r26, 0xDC	; 220
     19c:	b6 e0       	ldi	r27, 0x06	; 6
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a9 3a       	cpi	r26, 0xA9	; 169
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 09 05 	call	0xa12	; 0xa12 <main>
     1ac:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <printfWrapper>:
// 	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
// 	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
// }

void printfWrapper(const char* message) {
	printf("%s\n", message);
     1b4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
     1b8:	08 95       	ret

000001ba <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	ef 93       	push	r30
     1d2:	ff 93       	push	r31
	// Verificamos el estado actual del sensor
	switch (ultraSensor.state)
     1d4:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <ultraSensor+0xd>
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	19 f0       	breq	.+6      	; 0x1e2 <__vector_10+0x28>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	19 f1       	breq	.+70     	; 0x226 <__vector_10+0x6c>
     1e0:	3f c0       	rjmp	.+126    	; 0x260 <__vector_10+0xa6>
	{
		case ULTRA_WAIT_RISING:
		{
			if(ultraSensor.ECHO_RISING){
     1e2:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <ultraSensor+0xc>
     1e6:	84 ff       	sbrs	r24, 4
     1e8:	3b c0       	rjmp	.+118    	; 0x260 <__vector_10+0xa6>
				ultraSensor.echo_init_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno init time
     1ea:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     1ee:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     1f2:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <ovf_count>
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	dc 01       	movw	r26, r24
     1fe:	99 27       	eor	r25, r25
     200:	88 27       	eor	r24, r24
     202:	82 0f       	add	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	a1 1d       	adc	r26, r1
     208:	b1 1d       	adc	r27, r1
     20a:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <ultraSensor>
     20e:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <ultraSensor+0x1>
     212:	a0 93 55 07 	sts	0x0755, r26	; 0x800755 <ultraSensor+0x2>
     216:	b0 93 56 07 	sts	0x0756, r27	; 0x800756 <ultraSensor+0x3>
				ultraSensor.ECHO_RISING = 0; //Bajo la bandera para marcar que llene init time
     21a:	ef e5       	ldi	r30, 0x5F	; 95
     21c:	f7 e0       	ldi	r31, 0x07	; 7
     21e:	80 81       	ld	r24, Z
     220:	8f 7e       	andi	r24, 0xEF	; 239
     222:	80 83       	st	Z, r24
     224:	1d c0       	rjmp	.+58     	; 0x260 <__vector_10+0xa6>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			ultraSensor.echo_finish_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno finish time
     226:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     22a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     22e:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <ovf_count>
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	dc 01       	movw	r26, r24
     23a:	99 27       	eor	r25, r25
     23c:	88 27       	eor	r24, r24
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19
     242:	a1 1d       	adc	r26, r1
     244:	b1 1d       	adc	r27, r1
     246:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <ultraSensor+0x4>
     24a:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <ultraSensor+0x5>
     24e:	a0 93 59 07 	sts	0x0759, r26	; 0x800759 <ultraSensor+0x6>
     252:	b0 93 5a 07 	sts	0x075A, r27	; 0x80075a <ultraSensor+0x7>
			ultraSensor.ECHO_RECEIVED = 1; //Esto lo pone en modo de calcular
     256:	ef e5       	ldi	r30, 0x5F	; 95
     258:	f7 e0       	ldi	r31, 0x07	; 7
     25a:	80 81       	ld	r24, Z
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	80 83       	st	Z, r24
			break;
		}
	}
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti

0000027a <__vector_13>:


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
     286:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <ovf_count>
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <ovf_count>
}
     290:	8f 91       	pop	r24
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	2f 93       	push	r18
     2b0:	3f 93       	push	r19
     2b2:	4f 93       	push	r20
     2b4:	5f 93       	push	r21
     2b6:	6f 93       	push	r22
     2b8:	7f 93       	push	r23
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
     2c2:	cf 93       	push	r28
     2c4:	ef 93       	push	r30
     2c6:	ff 93       	push	r31
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
     2c8:	e8 e8       	ldi	r30, 0x88	; 136
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	91 81       	ldd	r25, Z+1	; 0x01
     2d0:	80 5c       	subi	r24, 0xC0	; 192
     2d2:	93 46       	sbci	r25, 0x63	; 99
     2d4:	91 83       	std	Z+1, r25	; 0x01
     2d6:	80 83       	st	Z, r24
	IR_READ_INTERRUPT = 1;
     2d8:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     2dc:	80 61       	ori	r24, 0x10	; 16
     2de:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	45 c0       	rjmp	.+138    	; 0x370 <__vector_11+0xd4>
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
     2e6:	ec 2e       	mov	r14, r28
     2e8:	f1 2c       	mov	r15, r1
     2ea:	f7 01       	movw	r30, r14
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e7 5b       	subi	r30, 0xB7	; 183
     2f2:	f8 4f       	sbci	r31, 0xF8	; 248
     2f4:	00 81       	ld	r16, Z
     2f6:	11 81       	ldd	r17, Z+1	; 0x01
     2f8:	f8 01       	movw	r30, r16
     2fa:	81 81       	ldd	r24, Z+1	; 0x01
     2fc:	80 ff       	sbrs	r24, 0
     2fe:	37 c0       	rjmp	.+110    	; 0x36e <__vector_11+0xd2>
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	81 ff       	sbrs	r24, 1
     304:	08 c0       	rjmp	.+16     	; 0x316 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
     306:	81 81       	ldd	r24, Z+1	; 0x01
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     308:	82 fd       	sbrc	r24, 2
     30a:	05 c0       	rjmp	.+10     	; 0x316 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
				// If in push mode, use maximum pulse
				servosArray[i]->pulse_us = SERVO_MAX_PULSE;
     30c:	80 ea       	ldi	r24, 0xA0	; 160
     30e:	9f e0       	ldi	r25, 0x0F	; 15
     310:	93 83       	std	Z+3, r25	; 0x03
     312:	82 83       	std	Z+2, r24	; 0x02
     314:	07 c0       	rjmp	.+14     	; 0x324 <__vector_11+0x88>
				//printf("ISR COMPA PUSH %d...\n", servosArray[i]->pin);
				} else {
				// Otherwise use the angle setting
				servosArray[i]->pulse_us = calculate_angle_pulseUs(servosArray[i]->angle);
     316:	f8 01       	movw	r30, r16
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <calculate_angle_pulseUs>
     31e:	f8 01       	movw	r30, r16
     320:	93 83       	std	Z+3, r25	; 0x03
     322:	82 83       	std	Z+2, r24	; 0x02
			}

			// Set the pin high immediately if it's the first servo
			if (i == 0) {
     324:	c1 11       	cpse	r28, r1
     326:	23 c0       	rjmp	.+70     	; 0x36e <__vector_11+0xd2>
				PORTB |= (1 << servosArray[i]->pin);
     328:	f7 01       	movw	r30, r14
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	e7 5b       	subi	r30, 0xB7	; 183
     330:	f8 4f       	sbci	r31, 0xF8	; 248
     332:	a0 81       	ld	r26, Z
     334:	b1 81       	ldd	r27, Z+1	; 0x01
     336:	2c 91       	ld	r18, X
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_11+0xa6>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	2a 95       	dec	r18
     344:	e2 f7       	brpl	.-8      	; 0x33e <__vector_11+0xa2>
     346:	95 b1       	in	r25, 0x05	; 5
     348:	89 2b       	or	r24, r25
     34a:	85 b9       	out	0x05, r24	; 5
				// Schedule turn-off with Compare B
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
     34c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     350:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     366:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				current_servo = 0; // Mark this as the active servo
     36a:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <current_servo>
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
	IR_READ_INTERRUPT = 1;
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     36e:	cf 5f       	subi	r28, 0xFF	; 255
     370:	c3 30       	cpi	r28, 0x03	; 3
     372:	08 f4       	brcc	.+2      	; 0x376 <__vector_11+0xda>
     374:	b8 cf       	rjmp	.-144    	; 0x2e6 <__vector_11+0x4a>
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
				current_servo = 0; // Mark this as the active servo
			}
		}
	}
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	cf 91       	pop	r28
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
     3c8:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e7 5b       	subi	r30, 0xB7	; 183
     3d4:	f8 4f       	sbci	r31, 0xF8	; 248
     3d6:	01 90       	ld	r0, Z+
     3d8:	f0 81       	ld	r31, Z
     3da:	e0 2d       	mov	r30, r0
     3dc:	20 81       	ld	r18, Z
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <__vector_12+0x46>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	2a 95       	dec	r18
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <__vector_12+0x42>
     3ec:	80 95       	com	r24
     3ee:	90 95       	com	r25
     3f0:	95 b1       	in	r25, 0x05	; 5
     3f2:	89 23       	and	r24, r25
     3f4:	85 b9       	out	0x05, r24	; 5
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     3f6:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	e7 5b       	subi	r30, 0xB7	; 183
     402:	f8 4f       	sbci	r31, 0xF8	; 248
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	81 81       	ldd	r24, Z+1	; 0x01
     40c:	81 ff       	sbrs	r24, 1
     40e:	6b c0       	rjmp	.+214    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
     410:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	e7 5b       	subi	r30, 0xB7	; 183
     41c:	f8 4f       	sbci	r31, 0xF8	; 248
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	81 81       	ldd	r24, Z+1	; 0x01
ISR(TIMER1_COMPB_vect) {
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     426:	82 ff       	sbrs	r24, 2
     428:	5e c0       	rjmp	.+188    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
		
		// Clear the push and reset flags
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_RESET);
     42a:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e7 5b       	subi	r30, 0xB7	; 183
     436:	f8 4f       	sbci	r31, 0xF8	; 248
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	8b 7f       	andi	r24, 0xFB	; 251
     442:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_PUSH);
     444:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e7 5b       	subi	r30, 0xB7	; 183
     450:	f8 4f       	sbci	r31, 0xF8	; 248
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	81 83       	std	Z+1, r24	; 0x01
		// Return to idle angle
		servosArray[current_servo]->angle = SERVO_IDLE_ANGLE;
     45e:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e7 5b       	subi	r30, 0xB7	; 183
     46a:	f8 4f       	sbci	r31, 0xF8	; 248
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	8a e5       	ldi	r24, 0x5A	; 90
     474:	84 83       	std	Z+4, r24	; 0x04
		servosArray[current_servo]->pulse_us = calculate_angle_pulseUs(servosArray[current_servo]->angle);
     476:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e7 5b       	subi	r30, 0xB7	; 183
     482:	f8 4f       	sbci	r31, 0xF8	; 248
     484:	c0 81       	ld	r28, Z
     486:	d1 81       	ldd	r29, Z+1	; 0x01
     488:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	e7 5b       	subi	r30, 0xB7	; 183
     494:	f8 4f       	sbci	r31, 0xF8	; 248
     496:	01 90       	ld	r0, Z+
     498:	f0 81       	ld	r31, Z
     49a:	e0 2d       	mov	r30, r0
     49c:	84 81       	ldd	r24, Z+4	; 0x04
     49e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <calculate_angle_pulseUs>
     4a2:	9b 83       	std	Y+3, r25	; 0x03
     4a4:	8a 83       	std	Y+2, r24	; 0x02
		if(current_servo == 0){
     4a6:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     4aa:	81 11       	cpse	r24, r1
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			SET_FLAG(salidaA.flags, OUTPUT_READY);
     4ae:	e8 ef       	ldi	r30, 0xF8	; 248
     4b0:	f6 e0       	ldi	r31, 0x06	; 6
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaA.flags, OUTPUT_BUSY);
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	82 83       	std	Z+2, r24	; 0x02
     4ba:	15 c0       	rjmp	.+42     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			//printf("Volvio a posicion IDLE A\n");
		}else if(current_servo == 1){
     4bc:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			SET_FLAG(salidaB.flags, OUTPUT_READY);
     4c4:	ef e9       	ldi	r30, 0x9F	; 159
     4c6:	f7 e0       	ldi	r31, 0x07	; 7
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaB.flags, OUTPUT_BUSY);
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	82 83       	std	Z+2, r24	; 0x02
     4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			//printf("Volvio a posicion IDLE B\n");
		}else if(current_servo == 2){
     4d2:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	31 f4       	brne	.+12     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			SET_FLAG(salidaC.flags, OUTPUT_READY);
     4da:	ef e4       	ldi	r30, 0x4F	; 79
     4dc:	f7 e0       	ldi	r31, 0x07	; 7
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaC.flags, OUTPUT_BUSY);
     4e2:	8e 7f       	andi	r24, 0xFE	; 254
     4e4:	82 83       	std	Z+2, r24	; 0x02
			//printf("Volvio a posicion IDLE C\n");
		}
	}
	
	// Move to next servo, but only if there are more servos to process in this frame
	current_servo++;
     4e6:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     4ea:	8f 5f       	subi	r24, 0xFF	; 255
     4ec:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <current_servo>
	if (current_servo < NUM_OUTPUTS) {
     4f0:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f8:	91 c0       	rjmp	.+290    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
		// If there are more servos to process, activate the next one
		if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     4fa:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e7 5b       	subi	r30, 0xB7	; 183
     506:	f8 4f       	sbci	r31, 0xF8	; 248
     508:	01 90       	ld	r0, Z+
     50a:	f0 81       	ld	r31, Z
     50c:	e0 2d       	mov	r30, r0
     50e:	81 81       	ldd	r24, Z+1	; 0x01
     510:	80 ff       	sbrs	r24, 0
     512:	2c c0       	rjmp	.+88     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
			// Turn on the pin for the next servo
			PORTB |= (1 << servosArray[current_servo]->pin);
     514:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	e7 5b       	subi	r30, 0xB7	; 183
     520:	f8 4f       	sbci	r31, 0xF8	; 248
     522:	01 90       	ld	r0, Z+
     524:	f0 81       	ld	r31, Z
     526:	e0 2d       	mov	r30, r0
     528:	20 81       	ld	r18, Z
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	2a 95       	dec	r18
     536:	e2 f7       	brpl	.-8      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     538:	95 b1       	in	r25, 0x05	; 5
     53a:	89 2b       	or	r24, r25
     53c:	85 b9       	out	0x05, r24	; 5
			// Schedule turn-off
			OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     53e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     542:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     546:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	e7 5b       	subi	r30, 0xB7	; 183
     552:	f8 4f       	sbci	r31, 0xF8	; 248
     554:	01 90       	ld	r0, Z+
     556:	f0 81       	ld	r31, Z
     558:	e0 2d       	mov	r30, r0
     55a:	82 81       	ldd	r24, Z+2	; 0x02
     55c:	93 81       	ldd	r25, Z+3	; 0x03
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     566:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     56a:	58 c0       	rjmp	.+176    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
			} else {
			// If the next servo isn't enabled, skip to the one after
			// This is a recursive call to COMPB logic without the actual interrupt
			PORTB &= ~(1 << servosArray[current_servo]->pin); // Make sure the pin is low
     56c:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e7 5b       	subi	r30, 0xB7	; 183
     578:	f8 4f       	sbci	r31, 0xF8	; 248
     57a:	01 90       	ld	r0, Z+
     57c:	f0 81       	ld	r31, Z
     57e:	e0 2d       	mov	r30, r0
     580:	20 81       	ld	r18, Z
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	02 c0       	rjmp	.+4      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	2a 95       	dec	r18
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
     590:	80 95       	com	r24
     592:	90 95       	com	r25
     594:	95 b1       	in	r25, 0x05	; 5
     596:	89 23       	and	r24, r25
     598:	85 b9       	out	0x05, r24	; 5
			current_servo++;
     59a:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <current_servo>
			// Continue checking for the next enabled servo
			if (current_servo < NUM_OUTPUTS && IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     5a4:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <current_servo>
     5a8:	83 30       	cpi	r24, 0x03	; 3
     5aa:	c0 f5       	brcc	.+112    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     5ac:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	e7 5b       	subi	r30, 0xB7	; 183
     5b8:	f8 4f       	sbci	r31, 0xF8	; 248
     5ba:	01 90       	ld	r0, Z+
     5bc:	f0 81       	ld	r31, Z
     5be:	e0 2d       	mov	r30, r0
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	2b c0       	rjmp	.+86     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
				PORTB |= (1 << servosArray[current_servo]->pin);
     5c6:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	e7 5b       	subi	r30, 0xB7	; 183
     5d2:	f8 4f       	sbci	r31, 0xF8	; 248
     5d4:	01 90       	ld	r0, Z+
     5d6:	f0 81       	ld	r31, Z
     5d8:	e0 2d       	mov	r30, r0
     5da:	20 81       	ld	r18, Z
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	2a 95       	dec	r18
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     5ea:	95 b1       	in	r25, 0x05	; 5
     5ec:	89 2b       	or	r24, r25
     5ee:	85 b9       	out	0x05, r24	; 5
				OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     5f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     5f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     5f8:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <current_servo>
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	e7 5b       	subi	r30, 0xB7	; 183
     604:	f8 4f       	sbci	r31, 0xF8	; 248
     606:	01 90       	ld	r0, Z+
     608:	f0 81       	ld	r31, Z
     60a:	e0 2d       	mov	r30, r0
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     618:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}
		}
	}
	// If current_servo >= NUM_OUTPUTS, we've processed all servos for this frame
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_18>:

ISR(USART_RX_vect)
{
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	4f 93       	push	r20
     652:	5f 93       	push	r21
     654:	6f 93       	push	r22
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
	uint8_t received_byte = UDR0;  // Lee el byte recibido
     65e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Calcular el próximo índice de escritura en el buffer circular
	uint8_t next_indexW = (protocolService.indexW + 1) % PROTOCOL_BUFFER_SIZE;
     662:	20 91 6a 07 	lds	r18, 0x076A	; 0x80076a <protocolService>
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	c9 01       	movw	r24, r18
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	8f 71       	andi	r24, 0x1F	; 31
     66e:	90 78       	andi	r25, 0x80	; 128
     670:	99 23       	and	r25, r25
     672:	24 f4       	brge	.+8      	; 0x67c <__vector_18+0x3a>
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	80 6e       	ori	r24, 0xE0	; 224
     678:	9f 6f       	ori	r25, 0xFF	; 255
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	48 2f       	mov	r20, r24

	// Verifica si el buffer está lleno: si el próximo índice de escritura es igual al índice de lectura
	if (next_indexW == protocolService.indexR) {
     67e:	50 91 6b 07 	lds	r21, 0x076B	; 0x80076b <protocolService+0x1>
     682:	85 13       	cpse	r24, r21
     684:	08 c0       	rjmp	.+16     	; 0x696 <__vector_18+0x54>
		// El buffer está lleno; activa la bandera para procesar datos antes de sobrescribir
			if (!(IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA))) {
     686:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     68a:	81 fd       	sbrc	r24, 1
     68c:	19 c0       	rjmp	.+50     	; 0x6c0 <__vector_18+0x7e>
				// Si la bandera de procesamiento no está activa, no se debe sobreescribir
				SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <protocolService+0x2a>
     694:	15 c0       	rjmp	.+42     	; 0x6c0 <__vector_18+0x7e>
			}
		// Opcional: podrías descartar el byte recibido
		} else {
		// Hay espacio: copia el byte en el buffer
		protocolService.buffer[protocolService.indexW] = received_byte;
     696:	f9 01       	movw	r30, r18
     698:	e6 59       	subi	r30, 0x96	; 150
     69a:	f8 4f       	sbci	r31, 0xF8	; 248
     69c:	62 83       	std	Z+2, r22	; 0x02
		protocolService.indexW = next_indexW;
     69e:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <protocolService>

		// Calcular la cantidad de bytes disponibles en el buffer (caso circular)
		uint8_t available;
		if (protocolService.indexW >= protocolService.indexR) {
     6a2:	85 17       	cp	r24, r21
     6a4:	10 f0       	brcs	.+4      	; 0x6aa <__vector_18+0x68>
			available = protocolService.indexW - protocolService.indexR;
     6a6:	45 1b       	sub	r20, r21
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__vector_18+0x6c>
			} else {
			available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
     6aa:	45 1b       	sub	r20, r21
     6ac:	40 5e       	subi	r20, 0xE0	; 224
		}

		// Si hay al menos 6 bytes (mínimo para un paquete) disponibles, activa processData
        if (available >= PROTOCOL_MIN_BYTE_COUNT && !IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA)) {
     6ae:	46 30       	cpi	r20, 0x06	; 6
     6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__vector_18+0x7e>
     6b2:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     6b6:	81 fd       	sbrc	r24, 1
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <__vector_18+0x7e>
	        SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <protocolService+0x2a>
        }
	}
}
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	6f 91       	pop	r22
     6ca:	5f 91       	pop	r21
     6cc:	4f 91       	pop	r20
     6ce:	3f 91       	pop	r19
     6d0:	2f 91       	pop	r18
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_19>:


ISR(USART_UDRE_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
	// Si aún hay datos en el buffer...
	if (protocolService.indexR != protocolService.indexW) {
     6f2:	aa e6       	ldi	r26, 0x6A	; 106
     6f4:	b7 e0       	ldi	r27, 0x07	; 7
     6f6:	11 96       	adiw	r26, 0x01	; 1
     6f8:	ec 91       	ld	r30, X
     6fa:	11 97       	sbiw	r26, 0x01	; 1
     6fc:	8c 91       	ld	r24, X
     6fe:	e8 17       	cp	r30, r24
     700:	a9 f0       	breq	.+42     	; 0x72c <__vector_19+0x50>
		// Enviar el siguiente byte
		UDR0 = protocolService.buffer[protocolService.indexR];
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e6 59       	subi	r30, 0x96	; 150
     706:	f8 4f       	sbci	r31, 0xF8	; 248
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
     70e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <protocolService+0x1>
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	8f 71       	andi	r24, 0x1F	; 31
     718:	90 78       	andi	r25, 0x80	; 128
     71a:	99 23       	and	r25, r25
     71c:	24 f4       	brge	.+8      	; 0x726 <__vector_19+0x4a>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	80 6e       	ori	r24, 0xE0	; 224
     722:	9f 6f       	ori	r25, 0xFF	; 255
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <protocolService+0x1>
     72a:	05 c0       	rjmp	.+10     	; 0x736 <__vector_19+0x5a>
		} else {
		// Si el buffer está vacío, deshabilitar la interrupción para no seguir disparando
		UCSR0B &= ~(1 << UDRIE0);
     72c:	e1 ec       	ldi	r30, 0xC1	; 193
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	8f 7d       	andi	r24, 0xDF	; 223
     734:	80 83       	st	Z, r24
	}
}
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <timer1_init>:
/* Timer1 and External Interrupt Functions ---------------------------------*/

void timer1_init()
{
	// Reset the timer counter
	TCNT1 = 0;
     74c:	a4 e8       	ldi	r26, 0x84	; 132
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	11 96       	adiw	r26, 0x01	; 1
     752:	1c 92       	st	X, r1
     754:	1e 92       	st	-X, r1
	// Clear input capture flag
	TIFR1 |= (1 << ICF1);
     756:	86 b3       	in	r24, 0x16	; 22
     758:	80 62       	ori	r24, 0x20	; 32
     75a:	86 bb       	out	0x16, r24	; 22
	// Enable input capture interrupt and overflow interrupt
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
     75c:	ef e6       	ldi	r30, 0x6F	; 111
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	87 62       	ori	r24, 0x27	; 39
     764:	80 83       	st	Z, r24
	// Set to capture rising edge initially
	TCCR1B |= (1 << ICES1);
     766:	e1 e8       	ldi	r30, 0x81	; 129
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	80 83       	st	Z, r24
	// Set prescaler to 8 for adequate timing resolution
	TCCR1B |= (1 << CS11);  // Prescaler = 8
     770:	80 81       	ld	r24, Z
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 83       	st	Z, r24
	OCR1A = TCNT1 + SERVO_FRAME_PERIOD; // Primera interrupción en 20ms desde ya
     776:	8d 91       	ld	r24, X+
     778:	9c 91       	ld	r25, X
     77a:	80 5c       	subi	r24, 0xC0	; 192
     77c:	93 46       	sbci	r25, 0x63	; 99
     77e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     782:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     786:	08 95       	ret

00000788 <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler de 1024
     788:	e1 eb       	ldi	r30, 0xB1	; 177
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	87 60       	ori	r24, 0x07	; 7
     790:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
     792:	8b e9       	ldi	r24, 0x9B	; 155
     794:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
     798:	e0 e7       	ldi	r30, 0x70	; 112
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	82 60       	ori	r24, 0x02	; 2
     7a0:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
     7a2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     7a6:	08 95       	ret

000007a8 <gpio_pins_init>:
	// El prescaler se configurará cuando necesitemos iniciar el timer
}

void gpio_pins_init() {
	DDRB |= (1 << LED_BUILTIN_PIN);   // LED pin salida
     7a8:	84 b1       	in	r24, 0x04	; 4
     7aa:	80 62       	ori	r24, 0x20	; 32
     7ac:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED_BUILTIN_PIN);  // LED HIGH
     7ae:	85 b1       	in	r24, 0x05	; 5
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1 << TRIGGER_PIN);       // TRIGGER pin salida
     7b4:	8a b1       	in	r24, 0x0a	; 10
     7b6:	88 60       	ori	r24, 0x08	; 8
     7b8:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << ECHO_PIN);         // ECHO pin como entrada
     7ba:	84 b1       	in	r24, 0x04	; 4
     7bc:	8e 7f       	andi	r24, 0xFE	; 254
     7be:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BUTTON_PIN);       // BUTTON pin como entrada
     7c0:	8a b1       	in	r24, 0x0a	; 10
     7c2:	8f 7e       	andi	r24, 0xEF	; 239
     7c4:	8a b9       	out	0x0a, r24	; 10
	
	//Inicializar las salidas de servos
	DDRB |= (1 << SERVOA_PIN); // SERVOA_PIN como salida
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOB_PIN); // SERVOB_PIN como salida
     7cc:	84 b1       	in	r24, 0x04	; 4
     7ce:	84 60       	ori	r24, 0x04	; 4
     7d0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOC_PIN); // SERVOC_PIN como salida
     7d2:	84 b1       	in	r24, 0x04	; 4
     7d4:	88 60       	ori	r24, 0x08	; 8
     7d6:	84 b9       	out	0x04, r24	; 4
	
	tcrt_init(); //Despues haremos esto para todos los sensores, modularizando
     7d8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <tcrt_init>
	
	// Poner en bajo estos pines para asegurarnos
	PORTD &= ~(1 << TRIGGER_PIN);
     7dc:	8b b1       	in	r24, 0x0b	; 11
     7de:	87 7f       	andi	r24, 0xF7	; 247
     7e0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << BUTTON_PIN);
     7e2:	8b b1       	in	r24, 0x0b	; 11
     7e4:	8f 7e       	andi	r24, 0xEF	; 239
     7e6:	8b b9       	out	0x0b, r24	; 11
     7e8:	08 95       	ret

000007ea <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     80c:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     810:	81 ff       	sbrs	r24, 1
     812:	ee c0       	rjmp	.+476    	; 0x9f0 <__stack+0xf1>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     814:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <ultraSensor+0xd>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	51 f5       	brne	.+84     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
			if(!TRIGGER_ACTIVE) {
     81c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     820:	85 fd       	sbrc	r24, 5
     822:	0d c0       	rjmp	.+26     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     824:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     828:	ef e5       	ldi	r30, 0x5F	; 95
     82a:	f7 e0       	ldi	r31, 0x07	; 7
     82c:	80 81       	ld	r24, Z
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     832:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
     83c:	19 c0       	rjmp	.+50     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     83e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     842:	ef e5       	ldi	r30, 0x5F	; 95
     844:	f7 e0       	ldi	r31, 0x07	; 7
     846:	80 81       	ld	r24, Z
     848:	82 60       	ori	r24, 0x02	; 2
     84a:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     84c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     850:	8d 7d       	andi	r24, 0xDD	; 221
     852:	88 60       	ori	r24, 0x08	; 8
     854:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     858:	80 81       	ld	r24, Z
     85a:	8f 7d       	andi	r24, 0xDF	; 223
     85c:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     864:	80 81       	ld	r24, Z
     866:	80 61       	ori	r24, 0x10	; 16
     868:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     86a:	80 81       	ld	r24, Z
     86c:	8d 7f       	andi	r24, 0xFD	; 253
     86e:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     870:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <ultraSensor+0xd>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	d1 f4       	brne	.+52     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     878:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <ultraSensor+0xc>
     87c:	84 ff       	sbrs	r24, 4
     87e:	16 c0       	rjmp	.+44     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     880:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     884:	89 70       	andi	r24, 0x09	; 9
     886:	88 30       	cpi	r24, 0x08	; 8
     888:	89 f4       	brne	.+34     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     88a:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <veintems_counter>
     88e:	81 11       	cpse	r24, r1
     890:	06 c0       	rjmp	.+12     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
				veintems_counter++;
     892:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <veintems_counter>
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <veintems_counter>
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
				} else {
				VEINTEMS_PASSED = 1;
     89e:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
				veintems_counter = 0;
     8a8:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     8ac:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <ultraSensor+0xc>
     8b0:	85 fd       	sbrc	r24, 5
     8b2:	22 c0       	rjmp	.+68     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8b4:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     8b8:	84 fd       	sbrc	r24, 4
     8ba:	1e c0       	rjmp	.+60     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     8bc:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <wait_time>
     8c0:	87 30       	cpi	r24, 0x07	; 7
     8c2:	30 f4       	brcc	.+12     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
				wait_time++;
     8c4:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <wait_time>
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <wait_time>
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     8d0:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     8d4:	80 61       	ori	r24, 0x10	; 16
     8d6:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
				wait_time = 0;
     8da:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     8de:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <ultraSensor+0xc>
     8e2:	83 ff       	sbrs	r24, 3
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     8e6:	60 91 2e 07 	lds	r22, 0x072E	; 0x80072e <bandera2>
     8ea:	66 fb       	bst	r22, 6
     8ec:	66 27       	eor	r22, r22
     8ee:	60 f9       	bld	r22, 0
     8f0:	83 e5       	ldi	r24, 0x53	; 83
     8f2:	97 e0       	ldi	r25, 0x07	; 7
     8f4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     8f8:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <diezMsCounter>
     8fc:	8a 30       	cpi	r24, 0x0A	; 10
     8fe:	30 f4       	brcc	.+12     	; 0x90c <__stack+0xd>
			diezMsCounter++;
     900:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <diezMsCounter>
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <diezMsCounter>
     90a:	07 c0       	rjmp	.+14     	; 0x91a <__stack+0x1b>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     90c:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     910:	88 60       	ori	r24, 0x08	; 8
     912:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			diezMsCounter = 0;
     916:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     91a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     91e:	86 ff       	sbrs	r24, 6
     920:	0e c0       	rjmp	.+28     	; 0x93e <__stack+0x3f>
			if(btn_pressed_time == 255){
     922:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <btn_pressed_time>
     926:	8f 3f       	cpi	r24, 0xFF	; 255
     928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
				BTN_OVF = 1;
     92a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     92e:	84 60       	ori	r24, 0x04	; 4
     930:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			}
			btn_pressed_time++;
     934:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <btn_pressed_time>
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     93e:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <servoA+0x1>
     942:	81 ff       	sbrs	r24, 1
     944:	0d c0       	rjmp	.+26     	; 0x960 <__stack+0x61>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     946:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <servoA+0x5>
     94a:	9a 30       	cpi	r25, 0x0A	; 10
     94c:	20 f4       	brcc	.+8      	; 0x956 <__stack+0x57>
				servoA.state_time++;  // Increment time spent in PUSH mode
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <servoA+0x5>
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     956:	e2 ef       	ldi	r30, 0xF2	; 242
     958:	f6 e0       	ldi	r31, 0x06	; 6
     95a:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     95c:	84 60       	ori	r24, 0x04	; 4
     95e:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     960:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <servoB+0x1>
     964:	81 ff       	sbrs	r24, 1
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x83>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     968:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <servoB+0x5>
     96c:	9a 30       	cpi	r25, 0x0A	; 10
     96e:	20 f4       	brcc	.+8      	; 0x978 <__stack+0x79>
				servoB.state_time++;  // Increment time spent in PUSH mode
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <servoB+0x5>
     976:	05 c0       	rjmp	.+10     	; 0x982 <__stack+0x83>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     978:	e4 e6       	ldi	r30, 0x64	; 100
     97a:	f7 e0       	ldi	r31, 0x07	; 7
     97c:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     97e:	84 60       	ori	r24, 0x04	; 4
     980:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     982:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <servoC+0x1>
     986:	81 ff       	sbrs	r24, 1
     988:	0d c0       	rjmp	.+26     	; 0x9a4 <__stack+0xa5>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     98a:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <servoC+0x5>
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	20 f4       	brcc	.+8      	; 0x99a <__stack+0x9b>
				servoC.state_time++;  // Increment time spent in PUSH mode
     992:	9f 5f       	subi	r25, 0xFF	; 255
     994:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <servoC+0x5>
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <__stack+0xa5>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     99a:	ef e2       	ldi	r30, 0x2F	; 47
     99c:	f7 e0       	ldi	r31, 0x07	; 7
     99e:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     9a0:	84 60       	ori	r24, 0x04	; 4
     9a2:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9a4:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
     9a8:	80 ff       	sbrs	r24, 0
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__stack+0xb7>
     9ac:	83 fd       	sbrc	r24, 3
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     9b0:	88 60       	ori	r24, 0x08	; 8
     9b2:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9b6:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
     9ba:	80 ff       	sbrs	r24, 0
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <__stack+0xc9>
     9be:	83 fd       	sbrc	r24, 3
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <__stack+0xc9>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     9c2:	88 60       	ori	r24, 0x08	; 8
     9c4:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9c8:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
     9cc:	80 ff       	sbrs	r24, 0
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <__stack+0xdf>
     9d0:	83 fd       	sbrc	r24, 3
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <__stack+0xdf>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     9d4:	ec ef       	ldi	r30, 0xFC	; 252
     9d6:	f6 e0       	ldi	r31, 0x06	; 6
     9d8:	80 81       	ld	r24, Z
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9de:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
     9e2:	80 ff       	sbrs	r24, 0
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0xf1>
     9e6:	83 fd       	sbrc	r24, 3
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0xf1>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     9ea:	88 60       	ori	r24, 0x08	; 8
     9ec:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <IR_U>
		}
	}
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <main>:
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     a12:	80 e8       	ldi	r24, 0x80	; 128
     a14:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
	IR_CALIBRATED = 0;	
     a18:	82 e8       	ldi	r24, 0x82	; 130
     a1a:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
	OUTPUT_A_HAS_CONFIG = 0; //POR AHORA
	OUTPUT_B_HAS_CONFIG = 0; //POR AHORA
	OUTPUT_C_HAS_CONFIG = 0; //POR AHORA
     a1e:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     a2a:	e3 ea       	ldi	r30, 0xA3	; 163
     a2c:	f7 e0       	ldi	r31, 0x07	; 7
     a2e:	8e e0       	ldi	r24, 0x0E	; 14
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	93 83       	std	Z+3, r25	; 0x03
     a34:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
	initProtocolService(&protocolService);
     a3e:	8a e6       	ldi	r24, 0x6A	; 106
     a40:	97 e0       	ldi	r25, 0x07	; 7
     a42:	0e 94 0d 0b 	call	0x161a	; 0x161a <initProtocolService>
	diezMsCounter = 0;
     a46:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     a4a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     a4e:	0e 94 a6 03 	call	0x74c	; 0x74c <timer1_init>
	timer2_init();
     a52:	0e 94 c4 03 	call	0x788	; 0x788 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     a56:	0e 94 c1 0c 	call	0x1982	; 0x1982 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     a5a:	6a ed       	ldi	r22, 0xDA	; 218
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	83 e5       	ldi	r24, 0x53	; 83
     a60:	97 e0       	ldi	r25, 0x07	; 7
     a62:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     a66:	60 91 2e 07 	lds	r22, 0x072E	; 0x80072e <bandera2>
     a6a:	66 fb       	bst	r22, 6
     a6c:	66 27       	eor	r22, r22
     a6e:	60 f9       	bld	r22, 0
     a70:	83 e5       	ldi	r24, 0x53	; 83
     a72:	97 e0       	ldi	r25, 0x07	; 7
     a74:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     a78:	4c ef       	ldi	r20, 0xFC	; 252
     a7a:	56 e0       	ldi	r21, 0x06	; 6
     a7c:	63 e5       	ldi	r22, 0x53	; 83
     a7e:	77 e0       	ldi	r23, 0x07	; 7
     a80:	84 e4       	ldi	r24, 0x44	; 68
     a82:	97 e0       	ldi	r25, 0x07	; 7
     a84:	0e 94 e6 06 	call	0xdcc	; 0xdcc <initDetector>
	initSorter(&SorterSystem);
     a88:	8b e1       	ldi	r24, 0x1B	; 27
     a8a:	97 e0       	ldi	r25, 0x07	; 7
     a8c:	0e 94 75 07 	call	0xeea	; 0xeea <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     a90:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
	//Imprime iniciado
	printf_P(PSTR("Iniciado\n"));
     a9a:	84 ed       	ldi	r24, 0xD4	; 212
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
	sei();
     aa6:	78 94       	sei
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
	while (1)
	{ 
		if(IR_CALIBRATED){
     aac:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     ab0:	85 ff       	sbrs	r24, 5
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <main+0xac>
			irSensorsTask(&SorterSystem);
     ab4:	8b e1       	ldi	r24, 0x1B	; 27
     ab6:	97 e0       	ldi	r25, 0x07	; 7
     ab8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <irSensorsTask>
     abc:	7d c0       	rjmp	.+250    	; 0xbb8 <main+0x1a6>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     abe:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <__data_end>
     ac2:	81 11       	cpse	r24, r1
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <main+0x102>
		printf_P(PSTR("Calibrando sensores IR...\n"));
     ac6:	88 e7       	ldi	r24, 0x78	; 120
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     ad2:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	80 ff       	sbrs	r24, 0
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <main+0xd2>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     ade:	84 60       	ori	r24, 0x04	; 4
     ae0:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     ae4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
     ae8:	80 ff       	sbrs	r24, 0
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <main+0xe0>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     aec:	84 60       	ori	r24, 0x04	; 4
     aee:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     af2:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
     af6:	80 ff       	sbrs	r24, 0
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <main+0xee>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     b00:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
     b04:	80 ff       	sbrs	r24, 0
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <main+0xfc>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <IR_U>
		}
		init_done = true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     b14:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
     b18:	82 ff       	sbrs	r24, 2
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <main+0x112>
		calibrateIRSensor(&IR_A);
     b1c:	85 e3       	ldi	r24, 0x35	; 53
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     b24:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
     b28:	82 ff       	sbrs	r24, 2
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <main+0x122>
		calibrateIRSensor(&IR_B);
     b2c:	83 ee       	ldi	r24, 0xE3	; 227
     b2e:	96 e0       	ldi	r25, 0x06	; 6
     b30:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     b34:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
     b38:	82 ff       	sbrs	r24, 2
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <main+0x132>
		calibrateIRSensor(&IR_C);
     b3c:	8c e0       	ldi	r24, 0x0C	; 12
     b3e:	97 e0       	ldi	r25, 0x07	; 7
     b40:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     b44:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
     b48:	82 ff       	sbrs	r24, 2
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <main+0x142>
		calibrateIRSensor(&IR_U);
     b4c:	8c ef       	ldi	r24, 0xFC	; 252
     b4e:	96 e0       	ldi	r25, 0x06	; 6
     b50:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     b54:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
     b58:	82 fd       	sbrc	r24, 2
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <main+0x166>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     b5c:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     b60:	82 fd       	sbrc	r24, 2
     b62:	0c c0       	rjmp	.+24     	; 0xb7c <main+0x16a>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     b64:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     b68:	82 fd       	sbrc	r24, 2
     b6a:	0a c0       	rjmp	.+20     	; 0xb80 <main+0x16e>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     b6c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     b70:	82 ff       	sbrs	r24, 2
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <main+0x172>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	07 c0       	rjmp	.+14     	; 0xb86 <main+0x174>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <main+0x174>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <main+0x174>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <main+0x174>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     b84:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     b86:	88 23       	and	r24, r24
     b88:	b9 f0       	breq	.+46     	; 0xbb8 <main+0x1a6>
				printf_P(PSTR("Todos los sensores IR calibrados.\n"));
     b8a:	81 eb       	ldi	r24, 0xB1	; 177
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
				IR_CALIBRATED = 1;
     b96:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     b9a:	80 62       	ori	r24, 0x20	; 32
     b9c:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
				IR_A.calibrationCounter = 0;
     ba0:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     ba4:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     ba8:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     bac:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <IR_U+0x9>
				initOutputs();
     bb0:	0e 94 00 07 	call	0xe00	; 0xe00 <initOutputs>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     bb8:	6b e1       	ldi	r22, 0x1B	; 27
     bba:	77 e0       	ldi	r23, 0x07	; 7
     bbc:	84 e4       	ldi	r24, 0x44	; 68
     bbe:	97 e0       	ldi	r25, 0x07	; 7
     bc0:	0e 94 25 08 	call	0x104a	; 0x104a <ultraSensorTask>
		servosTask();
     bc4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     bc8:	4c 9b       	sbis	0x09, 4	; 9
     bca:	0a c0       	rjmp	.+20     	; 0xbe0 <main+0x1ce>
     bcc:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     bd0:	86 fd       	sbrc	r24, 6
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <main+0x1ce>
		btn_pressed_time = 0;
     bd4:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <btn_pressed_time>
		BTN_PRESSED = 1;
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
     bde:	2c c0       	rjmp	.+88     	; 0xc38 <main+0x226>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     be0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     be4:	86 ff       	sbrs	r24, 6
     be6:	28 c0       	rjmp	.+80     	; 0xc38 <main+0x226>
     be8:	4c 99       	sbic	0x09, 4	; 9
     bea:	26 c0       	rjmp	.+76     	; 0xc38 <main+0x226>
		BTN_PRESSED = 0;
     bec:	8f 7b       	andi	r24, 0xBF	; 191
     bee:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     bf2:	82 ff       	sbrs	r24, 2
     bf4:	08 c0       	rjmp	.+16     	; 0xc06 <main+0x1f4>
			printf_P(PSTR("Btn overflowed\n"));
     bf6:	88 e6       	ldi	r24, 0x68	; 104
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	9f 93       	push	r25
     bfc:	8f 93       	push	r24
     bfe:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     c06:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <btn_pressed_time>
     c0a:	8a 30       	cpi	r24, 0x0A	; 10
     c0c:	30 f4       	brcc	.+12     	; 0xc1a <main+0x208>
     c0e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     c12:	98 2f       	mov	r25, r24
     c14:	94 70       	andi	r25, 0x04	; 4
     c16:	82 ff       	sbrs	r24, 2
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <main+0x214>
			BTN_RELEASED = 1;
     c1a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <main+0x226>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     c26:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <btn_pressed_time>
			if(BTN_OVF){
     c2a:	99 23       	and	r25, r25
     c2c:	29 f0       	breq	.+10     	; 0xc38 <main+0x226>
				BTN_OVF = 0;
     c2e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     c32:	8b 7f       	andi	r24, 0xFB	; 251
     c34:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if (IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA) && !IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)) {
     c38:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     c3c:	81 ff       	sbrs	r24, 1
     c3e:	1a c0       	rjmp	.+52     	; 0xc74 <main+0x262>
     c40:	80 fd       	sbrc	r24, 0
     c42:	18 c0       	rjmp	.+48     	; 0xc74 <main+0x262>
			printf_P(PSTR("Procesar info\n"));
     c44:	82 ea       	ldi	r24, 0xA2	; 162
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9f 93       	push	r25
     c4a:	8f 93       	push	r24
     c4c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
			if (process_protocol_buffer()) {
     c50:	0e 94 a6 0a 	call	0x154c	; 0x154c <process_protocol_buffer>
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	88 23       	and	r24, r24
     c5a:	39 f0       	breq	.+14     	; 0xc6a <main+0x258>
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_HEADER);
     c5c:	ea e6       	ldi	r30, 0x6A	; 106
     c5e:	f7 e0       	ldi	r31, 0x07	; 7
     c60:	82 a5       	ldd	r24, Z+42	; 0x2a
     c62:	8f 70       	andi	r24, 0x0F	; 15
				SET_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     c64:	81 61       	ori	r24, 0x11	; 17
     c66:	82 a7       	std	Z+42, r24	; 0x2a
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <main+0x262>
			} else {
				SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     c6a:	ea e6       	ldi	r30, 0x6A	; 106
     c6c:	f7 e0       	ldi	r31, 0x07	; 7
     c6e:	82 a5       	ldd	r24, Z+42	; 0x2a
     c70:	84 60       	ori	r24, 0x04	; 4
     c72:	82 a7       	std	Z+42, r24	; 0x2a
			}
		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_RESET)){
     c74:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     c78:	82 ff       	sbrs	r24, 2
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <main+0x27a>
			protocolService.indexR = protocolService.indexW;
     c7c:	ea e6       	ldi	r30, 0x6A	; 106
     c7e:	f7 e0       	ldi	r31, 0x07	; 7
     c80:	90 81       	ld	r25, Z
     c82:	91 83       	std	Z+1, r25	; 0x01
			CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
			CLEAR_FLAG(protocolService.flags, PROTOSERV_RESET);
			CLEAR_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
     c84:	88 70       	andi	r24, 0x08	; 8
     c86:	82 a7       	std	Z+42, r24	; 0x2a
			clear_receive_pck();
     c88:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <clear_receive_pck>
		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)){
     c8c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     c90:	80 ff       	sbrs	r24, 0
     c92:	22 c0       	rjmp	.+68     	; 0xcd8 <main+0x2c6>
			if(validatePck()){
     c94:	0e 94 c3 0b 	call	0x1786	; 0x1786 <validatePck>
     c98:	88 23       	and	r24, r24
     c9a:	c1 f0       	breq	.+48     	; 0xccc <main+0x2ba>
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_VALIDATED);
     c9c:	ca e6       	ldi	r28, 0x6A	; 106
     c9e:	d7 e0       	ldi	r29, 0x07	; 7
     ca0:	8a a5       	ldd	r24, Y+42	; 0x2a
     ca2:	8f 70       	andi	r24, 0x0F	; 15
     ca4:	80 68       	ori	r24, 0x80	; 128
     ca6:	8a a7       	std	Y+42, r24	; 0x2a
				protocolService.receivePck.cmd = (uint8_t)getResponseCommand(protocolService.receivePck.cmd); //Asignar comando de respuesta
     ca8:	89 a9       	ldd	r24, Y+49	; 0x31
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <getResponseCommand>
     cb0:	89 ab       	std	Y+49, r24	; 0x31
				SET_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
     cb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb4:	98 60       	ori	r25, 0x08	; 8
     cb6:	9a a7       	std	Y+42, r25	; 0x2a
				createPck(protocolService.receivePck.cmd, NULL, 0); //Sin respuesta, deberia enviar el payload si quisiera agregar algo
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 88 0b 	call	0x1710	; 0x1710 <createPck>
				CLEAR_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
     cc2:	8a a5       	ldd	r24, Y+42	; 0x2a
				CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND);
     cc4:	86 70       	andi	r24, 0x06	; 6
     cc6:	80 69       	ori	r24, 0x90	; 144
     cc8:	8a a7       	std	Y+42, r24	; 0x2a
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <main+0x2c6>
			}else{
				CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     ccc:	ea e6       	ldi	r30, 0x6A	; 106
     cce:	f7 e0       	ldi	r31, 0x07	; 7
     cd0:	82 a5       	ldd	r24, Z+42	; 0x2a
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
				SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	82 a7       	std	Z+42, r24	; 0x2a
			}
		}
		if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND){
     cd8:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	89 30       	cpi	r24, 0x09	; 9
     ce2:	71 f4       	brne	.+28     	; 0xd00 <main+0x2ee>
			printf_P(PSTR("Send"));
     ce4:	8d e9       	ldi	r24, 0x9D	; 157
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND_DONE);
     cf0:	ea e6       	ldi	r30, 0x6A	; 106
     cf2:	f7 e0       	ldi	r31, 0x07	; 7
     cf4:	82 a5       	ldd	r24, Z+42	; 0x2a
     cf6:	8f 70       	andi	r24, 0x0F	; 15
     cf8:	80 6a       	ori	r24, 0xA0	; 160
     cfa:	82 a7       	std	Z+42, r24	; 0x2a
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
		}
		if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND_DONE){
     d00:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <protocolService+0x2a>
     d04:	82 95       	swap	r24
     d06:	8f 70       	andi	r24, 0x0F	; 15
     d08:	8a 30       	cpi	r24, 0x0A	; 10
     d0a:	69 f4       	brne	.+26     	; 0xd26 <main+0x314>
			printf_P(PSTR("Send done"));
     d0c:	83 e9       	ldi	r24, 0x93	; 147
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
     d18:	ea e6       	ldi	r30, 0x6A	; 106
     d1a:	f7 e0       	ldi	r31, 0x07	; 7
     d1c:	82 a5       	ldd	r24, Z+42	; 0x2a
     d1e:	8f 70       	andi	r24, 0x0F	; 15
     d20:	82 a7       	std	Z+42, r24	; 0x2a
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     d26:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     d2a:	84 ff       	sbrs	r24, 4
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <main+0x32c>
			WAIT_TIME_TRIGGER_PASSED = 0;
     d2e:	8f 7e       	andi	r24, 0xEF	; 239
     d30:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     d34:	ef e5       	ldi	r30, 0x5F	; 95
     d36:	f7 e0       	ldi	r31, 0x07	; 7
     d38:	80 81       	ld	r24, Z
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     d3e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     d42:	83 ff       	sbrs	r24, 3
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <main+0x344>
			ECHO_INTERVAL_FLAG = 0;
     d46:	87 7f       	andi	r24, 0xF7	; 247
     d48:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			EMIT_TRIGGER = 1;
     d4c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     d50:	82 60       	ori	r24, 0x02	; 2
     d52:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     d56:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     d5a:	80 ff       	sbrs	r24, 0
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <main+0x352>
			BTN_RELEASED = 0; 
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
		}
		if(IR_READ_INTERRUPT){
     d64:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
     d68:	84 ff       	sbrs	r24, 4
     d6a:	a0 ce       	rjmp	.-704    	; 0xaac <main+0x9a>
			IR_READ_INTERRUPT = 0;
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     d72:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
     d76:	80 ff       	sbrs	r24, 0
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <main+0x376>
     d7a:	82 ff       	sbrs	r24, 2
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <main+0x376>
     d7e:	83 fd       	sbrc	r24, 3
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <main+0x376>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     d88:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
     d8c:	80 ff       	sbrs	r24, 0
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <main+0x38c>
     d90:	82 ff       	sbrs	r24, 2
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <main+0x38c>
     d94:	83 fd       	sbrc	r24, 3
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <main+0x38c>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d98:	88 60       	ori	r24, 0x08	; 8
     d9a:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     d9e:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
     da2:	80 ff       	sbrs	r24, 0
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <main+0x3a2>
     da6:	82 ff       	sbrs	r24, 2
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <main+0x3a2>
     daa:	83 fd       	sbrc	r24, 3
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <main+0x3a2>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     db4:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
     db8:	80 ff       	sbrs	r24, 0
     dba:	78 ce       	rjmp	.-784    	; 0xaac <main+0x9a>
     dbc:	82 ff       	sbrs	r24, 2
     dbe:	76 ce       	rjmp	.-788    	; 0xaac <main+0x9a>
     dc0:	83 fd       	sbrc	r24, 3
     dc2:	74 ce       	rjmp	.-792    	; 0xaac <main+0x9a>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     dc4:	88 60       	ori	r24, 0x08	; 8
     dc6:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <IR_U>
     dca:	70 ce       	rjmp	.-800    	; 0xaac <main+0x9a>

00000dcc <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <initDetector+0x6>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	fc 01       	movw	r30, r24
     dd8:	5a 83       	std	Y+2, r21	; 0x02
     dda:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     ddc:	83 e5       	ldi	r24, 0x53	; 83
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	93 83       	std	Z+3, r25	; 0x03
     dea:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     dec:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     dee:	82 e2       	ldi	r24, 0x22	; 34
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     e04:	2a e5       	ldi	r18, 0x5A	; 90
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	82 ef       	ldi	r24, 0xF2	; 242
     e12:	96 e0       	ldi	r25, 0x06	; 6
     e14:	0e 94 77 0c 	call	0x18ee	; 0x18ee <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     e18:	2a e5       	ldi	r18, 0x5A	; 90
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	42 e0       	ldi	r20, 0x02	; 2
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	84 e6       	ldi	r24, 0x64	; 100
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	0e 94 77 0c 	call	0x18ee	; 0x18ee <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     e2c:	e9 e4       	ldi	r30, 0x49	; 73
     e2e:	f7 e0       	ldi	r31, 0x07	; 7
     e30:	82 ef       	ldi	r24, 0xF2	; 242
     e32:	96 e0       	ldi	r25, 0x06	; 6
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     e38:	84 e6       	ldi	r24, 0x64	; 100
     e3a:	97 e0       	ldi	r25, 0x07	; 7
     e3c:	93 83       	std	Z+3, r25	; 0x03
     e3e:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     e40:	8f e2       	ldi	r24, 0x2F	; 47
     e42:	97 e0       	ldi	r25, 0x07	; 7
     e44:	95 83       	std	Z+5, r25	; 0x05
     e46:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     e48:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <current_servo>
}

void initOutputs(){
	initServos();
	//TODO Fn para leer EEPROM
	if(OUTPUT_A_HAS_CONFIG){
     e4c:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <bandera3>
     e50:	80 ff       	sbrs	r24, 0
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <initOutputs+0x5e>
		printf("Salida A find setting\n");
     e54:	83 e4       	ldi	r24, 0x43	; 67
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <initOutputs+0x6c>
	}else{
		printf("Salida A no setting\n");
     e5e:	89 e5       	ldi	r24, 0x59	; 89
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		salidaA.boxType = OUTPUT_A_DEFAULT_BOX_TYPE;
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <salidaA+0x3>
	}
	if(OUTPUT_B_HAS_CONFIG){
     e6c:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <bandera3>
     e70:	81 ff       	sbrs	r24, 1
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <initOutputs+0x7e>
		printf("Salida B find setting\n");
     e74:	8d e6       	ldi	r24, 0x6D	; 109
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <initOutputs+0x8c>
	}else{
		printf("Salida B no setting\n");
     e7e:	83 e8       	ldi	r24, 0x83	; 131
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		salidaB.boxType = OUTPUT_B_DEFAULT_BOX_TYPE;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <salidaB+0x3>
		
	}
	if(OUTPUT_C_HAS_CONFIG){
     e8c:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <bandera3>
     e90:	83 ff       	sbrs	r24, 3
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <initOutputs+0x9e>
		printf("Salida C find setting\n");
     e94:	87 e9       	ldi	r24, 0x97	; 151
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <initOutputs+0xac>
	}else{
		printf("Salida C no setting\n");
     e9e:	8d ea       	ldi	r24, 0xAD	; 173
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		salidaC.boxType = OUTPUT_C_DEFAULT_BOX_TYPE;
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <salidaC+0x3>
	}
	salidaA.actuator_pin = SERVOA_PIN;
     eac:	c8 ef       	ldi	r28, 0xF8	; 248
     eae:	d6 e0       	ldi	r29, 0x06	; 6
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     eb4:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <IR_A+0x8>
     eb8:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     eba:	af e9       	ldi	r26, 0x9F	; 159
     ebc:	b7 e0       	ldi	r27, 0x07	; 7
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     ec6:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <IR_B+0x8>
     eca:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     ecc:	ef e4       	ldi	r30, 0x4F	; 79
     ece:	f7 e0       	ldi	r31, 0x07	; 7
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     ed4:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <IR_C+0x8>
     ed8:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     ede:	12 96       	adiw	r26, 0x02	; 2
     ee0:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     ee2:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     eea:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     eec:	8c e1       	ldi	r24, 0x1C	; 28
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     ef4:	88 ef       	ldi	r24, 0xF8	; 248
     ef6:	96 e0       	ldi	r25, 0x06	; 6
     ef8:	93 83       	std	Z+3, r25	; 0x03
     efa:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     efc:	8f e9       	ldi	r24, 0x9F	; 159
     efe:	97 e0       	ldi	r25, 0x07	; 7
     f00:	95 83       	std	Z+5, r25	; 0x05
     f02:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     f04:	8f e4       	ldi	r24, 0x4F	; 79
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	97 83       	std	Z+7, r25	; 0x07
     f0a:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     f0c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     f10:	88 23       	and	r24, r24
     f12:	44 f4       	brge	.+16     	; 0xf24 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     f14:	81 ec       	ldi	r24, 0xC1	; 193
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     f1c:	83 ef       	ldi	r24, 0xF3	; 243
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
     f24:	08 95       	ret

00000f26 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     f26:	8e 3b       	cpi	r24, 0xBE	; 190
     f28:	98 f0       	brcs	.+38     	; 0xf50 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     f2a:	90 91 2e 07 	lds	r25, 0x072E	; 0x80072e <bandera2>
     f2e:	99 23       	and	r25, r25
     f30:	0c f0       	brlt	.+2      	; 0xf34 <classify_box+0xe>
     f32:	83 c0       	rjmp	.+262    	; 0x103a <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     f34:	1f 92       	push	r1
     f36:	8f 93       	push	r24
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	9f 93       	push	r25
     f3e:	8f 93       	push	r24
     f40:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
		}
		return NO_BOX;
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     f50:	9e eb       	ldi	r25, 0xBE	; 190
     f52:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     f54:	97 33       	cpi	r25, 0x37	; 55
     f56:	98 f4       	brcc	.+38     	; 0xf7e <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     f58:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     f5c:	80 78       	andi	r24, 0x80	; 128
     f5e:	09 f4       	brne	.+2      	; 0xf62 <classify_box+0x3c>
     f60:	73 c0       	rjmp	.+230    	; 0x1048 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     f62:	1f 92       	push	r1
     f64:	9f 93       	push	r25
     f66:	88 e4       	ldi	r24, 0x48	; 72
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	9f 93       	push	r25
     f6c:	8f 93       	push	r24
     f6e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     f7e:	db 01       	movw	r26, r22
     f80:	ed 91       	ld	r30, X+
     f82:	fc 91       	ld	r31, X
     f84:	80 81       	ld	r24, Z
     f86:	98 17       	cp	r25, r24
     f88:	b0 f0       	brcs	.+44     	; 0xfb6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     f8a:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     f8c:	89 17       	cp	r24, r25
     f8e:	98 f0       	brcs	.+38     	; 0xfb6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f90:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     f94:	88 23       	and	r24, r24
     f96:	0c f0       	brlt	.+2      	; 0xf9a <classify_box+0x74>
     f98:	52 c0       	rjmp	.+164    	; 0x103e <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     f9a:	1f 92       	push	r1
     f9c:	9f 93       	push	r25
     f9e:	81 e7       	ldi	r24, 0x71	; 113
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	98 17       	cp	r25, r24
     fba:	a8 f0       	brcs	.+42     	; 0xfe6 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     fbc:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     fbe:	89 17       	cp	r24, r25
     fc0:	90 f0       	brcs	.+36     	; 0xfe6 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     fc2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     fc6:	88 23       	and	r24, r24
     fc8:	e4 f5       	brge	.+120    	; 0x1042 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     fca:	1f 92       	push	r1
     fcc:	9f 93       	push	r25
     fce:	86 e8       	ldi	r24, 0x86	; 134
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	9f 93       	push	r25
     fd4:	8f 93       	push	r24
     fd6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     fe6:	84 81       	ldd	r24, Z+4	; 0x04
     fe8:	98 17       	cp	r25, r24
     fea:	a8 f0       	brcs	.+42     	; 0x1016 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     fec:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     fee:	89 17       	cp	r24, r25
     ff0:	90 f0       	brcs	.+36     	; 0x1016 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     ff2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
     ff6:	88 23       	and	r24, r24
     ff8:	34 f5       	brge	.+76     	; 0x1046 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     ffa:	1f 92       	push	r1
     ffc:	9f 93       	push	r25
     ffe:	8b e9       	ldi	r24, 0x9B	; 155
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	9f 93       	push	r25
    1004:	8f 93       	push	r24
    1006:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
    1016:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    101a:	80 78       	andi	r24, 0x80	; 128
    101c:	a9 f0       	breq	.+42     	; 0x1048 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
    101e:	1f 92       	push	r1
    1020:	9f 93       	push	r25
    1022:	80 eb       	ldi	r24, 0xB0	; 176
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	9f 93       	push	r25
    1028:	8f 93       	push	r24
    102a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
    1046:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
    1048:	08 95       	ret

0000104a <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
    1058:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
    105c:	88 23       	and	r24, r24
    105e:	bc f5       	brge	.+110    	; 0x10ce <ultraSensorTask+0x84>
    1060:	e8 81       	ld	r30, Y
    1062:	f9 81       	ldd	r31, Y+1	; 0x01
    1064:	84 85       	ldd	r24, Z+12	; 0x0c
    1066:	85 ff       	sbrs	r24, 5
    1068:	32 c0       	rjmp	.+100    	; 0x10ce <ultraSensorTask+0x84>
    106a:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    106e:	81 ff       	sbrs	r24, 1
    1070:	2e c0       	rjmp	.+92     	; 0x10ce <ultraSensorTask+0x84>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	81 ff       	sbrs	r24, 1
    1076:	2b c0       	rjmp	.+86     	; 0x10ce <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
    1078:	cf 01       	movw	r24, r30
    107a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <ultrasonic_start>
    107e:	88 23       	and	r24, r24
    1080:	c1 f0       	breq	.+48     	; 0x10b2 <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
    1082:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    1086:	86 ff       	sbrs	r24, 6
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
    108a:	8e ed       	ldi	r24, 0xDE	; 222
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
    1092:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
    1096:	8f 77       	andi	r24, 0x7F	; 127
    1098:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
    109c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
    10a6:	e8 81       	ld	r30, Y
    10a8:	f9 81       	ldd	r31, Y+1	; 0x01
    10aa:	84 85       	ldd	r24, Z+12	; 0x0c
    10ac:	8f 7d       	andi	r24, 0xDF	; 223
    10ae:	84 87       	std	Z+12, r24	; 0x0c
    10b0:	0e c0       	rjmp	.+28     	; 0x10ce <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
    10b2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    10b6:	86 ff       	sbrs	r24, 6
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
    10ba:	89 ed       	ldi	r24, 0xD9	; 217
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
			}
			EMIT_FAILED = 1;
    10c2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
			EMIT_TRIGGER = 0;
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
    10ce:	88 81       	ld	r24, Y
    10d0:	99 81       	ldd	r25, Y+1	; 0x01
    10d2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
    10d6:	e8 81       	ld	r30, Y
    10d8:	f9 81       	ldd	r31, Y+1	; 0x01
    10da:	85 85       	ldd	r24, Z+13	; 0x0d
    10dc:	85 30       	cpi	r24, 0x05	; 5
    10de:	09 f0       	breq	.+2      	; 0x10e2 <ultraSensorTask+0x98>
    10e0:	c9 c0       	rjmp	.+402    	; 0x1274 <ultraSensorTask+0x22a>
    10e2:	84 85       	ldd	r24, Z+12	; 0x0c
    10e4:	88 23       	and	r24, r24
    10e6:	0c f0       	brlt	.+2      	; 0x10ea <ultraSensorTask+0xa0>
    10e8:	c5 c0       	rjmp	.+394    	; 0x1274 <ultraSensorTask+0x22a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
    10ea:	84 85       	ldd	r24, Z+12	; 0x0c
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	80 85       	ldd	r24, Z+8	; 0x08
    10f6:	91 85       	ldd	r25, Z+9	; 0x09
    10f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    10fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    10fc:	8f 3b       	cpi	r24, 0xBF	; 191
    10fe:	91 05       	cpc	r25, r1
    1100:	a1 05       	cpc	r26, r1
    1102:	b1 05       	cpc	r27, r1
    1104:	b0 f0       	brcs	.+44     	; 0x1132 <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
    110c:	98 2f       	mov	r25, r24
    110e:	92 95       	swap	r25
    1110:	9f 70       	andi	r25, 0x0F	; 15
    1112:	92 30       	cpi	r25, 0x02	; 2
    1114:	51 f4       	brne	.+20     	; 0x112a <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
    1116:	8f 70       	andi	r24, 0x0F	; 15
    1118:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
    111a:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    111e:	88 23       	and	r24, r24
    1120:	24 f4       	brge	.+8      	; 0x112a <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
    1122:	89 ee       	ldi	r24, 0xE9	; 233
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	8f 70       	andi	r24, 0x0F	; 15
    112e:	8c 83       	std	Y+4, r24	; 0x04
    1130:	95 c0       	rjmp	.+298    	; 0x125c <ultraSensorTask+0x212>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	98 2f       	mov	r25, r24
    1136:	92 95       	swap	r25
    1138:	9f 70       	andi	r25, 0x0F	; 15
    113a:	09 f0       	breq	.+2      	; 0x113e <ultraSensorTask+0xf4>
    113c:	8f c0       	rjmp	.+286    	; 0x125c <ultraSensorTask+0x212>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
    113e:	8f 70       	andi	r24, 0x0F	; 15
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
    1144:	80 85       	ldd	r24, Z+8	; 0x08
    1146:	91 85       	ldd	r25, Z+9	; 0x09
    1148:	a2 85       	ldd	r26, Z+10	; 0x0a
    114a:	b3 85       	ldd	r27, Z+11	; 0x0b
    114c:	b8 01       	movw	r22, r16
    114e:	0e 94 93 07 	call	0xf26	; 0xf26 <classify_box>
    1152:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	f8 16       	cp	r15, r24
    1158:	09 f4       	brne	.+2      	; 0x115c <ultraSensorTask+0x112>
    115a:	7c c0       	rjmp	.+248    	; 0x1254 <ultraSensorTask+0x20a>
				{
					if(salidaA.boxType == tipo){
    115c:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <salidaA+0x3>
    1160:	f8 12       	cpse	r15, r24
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <ultraSensorTask+0x12e>
						SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
    1164:	e8 ef       	ldi	r30, 0xF8	; 248
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	81 60       	ori	r24, 0x01	; 1
    116c:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida A busy\n");
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    1176:	20 c0       	rjmp	.+64     	; 0x11b8 <ultraSensorTask+0x16e>
					}else if(salidaB.boxType == tipo){
    1178:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <salidaB+0x3>
    117c:	f8 12       	cpse	r15, r24
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <ultraSensorTask+0x14a>
						SET_FLAG(salidaB.flags, OUTPUT_BUSY);
    1180:	ef e9       	ldi	r30, 0x9F	; 159
    1182:	f7 e0       	ldi	r31, 0x07	; 7
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida B busy\n");
    118a:	80 e1       	ldi	r24, 0x10	; 16
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    1192:	12 c0       	rjmp	.+36     	; 0x11b8 <ultraSensorTask+0x16e>
					}else if(salidaC.boxType == tipo){
    1194:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <salidaC+0x3>
    1198:	f8 12       	cpse	r15, r24
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <ultraSensorTask+0x166>
						SET_FLAG(salidaC.flags, OUTPUT_BUSY);
    119c:	ef e4       	ldi	r30, 0x4F	; 79
    119e:	f7 e0       	ldi	r31, 0x07	; 7
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida C busy\n");
    11a6:	8e e1       	ldi	r24, 0x1E	; 30
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <ultraSensorTask+0x16e>
					}else{
						printf("BOX_DISCARDED\n");
    11b0:	8c e2       	ldi	r24, 0x2C	; 44
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
					}
					switch (tipo)
    11b8:	e1 e0       	ldi	r30, 0x01	; 1
    11ba:	fe 16       	cp	r15, r30
    11bc:	49 f0       	breq	.+18     	; 0x11d0 <ultraSensorTask+0x186>
    11be:	fe 16       	cp	r15, r30
    11c0:	40 f1       	brcs	.+80     	; 0x1212 <ultraSensorTask+0x1c8>
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	ff 16       	cp	r15, r31
    11c6:	79 f0       	breq	.+30     	; 0x11e6 <ultraSensorTask+0x19c>
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	f8 16       	cp	r15, r24
    11cc:	b9 f0       	breq	.+46     	; 0x11fc <ultraSensorTask+0x1b2>
    11ce:	2c c0       	rjmp	.+88     	; 0x1228 <ultraSensorTask+0x1de>
					{
						case BOX_SIZE_A:
						printf("BOX_SIZE_A\n");
    11d0:	8a e3       	ldi	r24, 0x3A	; 58
    11d2:	93 e0       	ldi	r25, 0x03	; 3
    11d4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
						sorter->stats.total_by_type_array[0]++;
    11d8:	f8 01       	movw	r30, r16
    11da:	82 85       	ldd	r24, Z+10	; 0x0a
    11dc:	93 85       	ldd	r25, Z+11	; 0x0b
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	93 87       	std	Z+11, r25	; 0x0b
    11e2:	82 87       	std	Z+10, r24	; 0x0a
						break;
    11e4:	25 c0       	rjmp	.+74     	; 0x1230 <ultraSensorTask+0x1e6>
						case BOX_SIZE_B:
						printf("BOX_SIZE_B\n");
    11e6:	85 e4       	ldi	r24, 0x45	; 69
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
						sorter->stats.total_by_type_array[1]++;
    11ee:	f8 01       	movw	r30, r16
    11f0:	84 85       	ldd	r24, Z+12	; 0x0c
    11f2:	95 85       	ldd	r25, Z+13	; 0x0d
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	95 87       	std	Z+13, r25	; 0x0d
    11f8:	84 87       	std	Z+12, r24	; 0x0c
						break;
    11fa:	1a c0       	rjmp	.+52     	; 0x1230 <ultraSensorTask+0x1e6>
						case BOX_SIZE_C:
						printf("BOX_SIZE_C\n");
    11fc:	80 e5       	ldi	r24, 0x50	; 80
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
						sorter->stats.total_by_type_array[2]++;
    1204:	f8 01       	movw	r30, r16
    1206:	86 85       	ldd	r24, Z+14	; 0x0e
    1208:	97 85       	ldd	r25, Z+15	; 0x0f
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	97 87       	std	Z+15, r25	; 0x0f
    120e:	86 87       	std	Z+14, r24	; 0x0e
						break;
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <ultraSensorTask+0x1e6>
						case BOX_DISCARDED:
						printf("BOX_DISCARDED\n");
    1212:	8c e2       	ldi	r24, 0x2C	; 44
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
						sorter->stats.total_discarded++;
    121a:	f8 01       	movw	r30, r16
    121c:	80 89       	ldd	r24, Z+16	; 0x10
    121e:	91 89       	ldd	r25, Z+17	; 0x11
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	91 8b       	std	Z+17, r25	; 0x11
    1224:	80 8b       	std	Z+16, r24	; 0x10
						break;
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <ultraSensorTask+0x1e6>
						default:
						printf("Tipo no reconocido\n");
    1228:	8b e5       	ldi	r24, 0x5B	; 91
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
						break;
					}
					sorter->stats.total_measured++;
    1230:	f8 01       	movw	r30, r16
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	91 85       	ldd	r25, Z+9	; 0x09
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	91 87       	std	Z+9, r25	; 0x09
    123a:	80 87       	std	Z+8, r24	; 0x08
					printf("Contadas: %u\n", sorter->stats.total_measured);
    123c:	9f 93       	push	r25
    123e:	8f 93       	push	r24
    1240:	8e e6       	ldi	r24, 0x6E	; 110
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	9f 93       	push	r25
    1246:	8f 93       	push	r24
    1248:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
					// TODO: Aggregar cola para poder manejar las cajas
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	8f 70       	andi	r24, 0x0F	; 15
    1258:	80 62       	ori	r24, 0x20	; 32
    125a:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
    125c:	88 81       	ld	r24, Y
    125e:	99 81       	ldd	r25, Y+1	; 0x01
    1260:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
    1264:	e8 81       	ld	r30, Y
    1266:	f9 81       	ldd	r31, Y+1	; 0x01
    1268:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
    126a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
    1274:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    1278:	80 ff       	sbrs	r24, 0
    127a:	2d c0       	rjmp	.+90     	; 0x12d6 <ultraSensorTask+0x28c>
	{
		if (DEBUG_FLAGS)
    127c:	86 ff       	sbrs	r24, 6
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <ultraSensorTask+0x23e>
		{
			printf("HCSR04 perdio ECHO\n");
    1280:	8c e7       	ldi	r24, 0x7C	; 124
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		}
		VEINTEMS_PASSED = 0;
    1288:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
		WAITING_ECHO = 0;
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	87 7f       	andi	r24, 0xF7	; 247
    1290:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
    1294:	e8 81       	ld	r30, Y
    1296:	f9 81       	ldd	r31, Y+1	; 0x01
    1298:	84 85       	ldd	r24, Z+12	; 0x0c
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
    129e:	e8 81       	ld	r30, Y
    12a0:	f9 81       	ldd	r31, Y+1	; 0x01
    12a2:	86 e0       	ldi	r24, 0x06	; 6
    12a4:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
    12a6:	60 91 2e 07 	lds	r22, 0x072E	; 0x80072e <bandera2>
    12aa:	66 fb       	bst	r22, 6
    12ac:	66 27       	eor	r22, r22
    12ae:	60 f9       	bld	r22, 0
    12b0:	88 81       	ld	r24, Y
    12b2:	99 81       	ldd	r25, Y+1	; 0x01
    12b4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ultrasonic_timeout_clear>
    12b8:	88 23       	and	r24, r24
    12ba:	41 f0       	breq	.+16     	; 0x12cc <ultraSensorTask+0x282>
    12bc:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <bandera2>
    12c0:	86 ff       	sbrs	r24, 6
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <ultraSensorTask+0x282>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
    12c4:	8f e8       	ldi	r24, 0x8F	; 143
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		}

		ULTRASONIC_ENABLE = 1;
    12cc:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <bandera>
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <bandera>
	}
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	08 95       	ret

000012e2 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
    12e2:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
    12e6:	80 ff       	sbrs	r24, 0
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <irSensorsTask+0x1a>
    12ea:	83 ff       	sbrs	r24, 3
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
    12ee:	87 7f       	andi	r24, 0xF7	; 247
    12f0:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <IR_A>
		tcrt_read(&IR_A);
    12f4:	85 e3       	ldi	r24, 0x35	; 53
    12f6:	97 e0       	ldi	r25, 0x07	; 7
    12f8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
    12fc:	85 e3       	ldi	r24, 0x35	; 53
    12fe:	97 e0       	ldi	r25, 0x07	; 7
    1300:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <tcrt_is_box_detected>
    1304:	89 2b       	or	r24, r25
    1306:	11 f1       	breq	.+68     	; 0x134c <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1308:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <IR_A>
    130c:	82 95       	swap	r24
    130e:	8f 70       	andi	r24, 0x0F	; 15
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	e1 f4       	brne	.+56     	; 0x134c <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
    1314:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <salidaA+0x2>
    1318:	83 ff       	sbrs	r24, 3
    131a:	0f c0       	rjmp	.+30     	; 0x133a <irSensorsTask+0x58>
    131c:	80 ff       	sbrs	r24, 0
    131e:	0d c0       	rjmp	.+26     	; 0x133a <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
    1326:	e2 ef       	ldi	r30, 0xF2	; 242
    1328:	f6 e0       	ldi	r31, 0x06	; 6
    132a:	81 81       	ldd	r24, Z+1	; 0x01
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
    1330:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
    1332:	81 eb       	ldi	r24, 0xB1	; 177
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
    133a:	e5 e3       	ldi	r30, 0x35	; 53
    133c:	f7 e0       	ldi	r31, 0x07	; 7
    133e:	80 81       	ld	r24, Z
    1340:	8f 70       	andi	r24, 0x0F	; 15
    1342:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
    1344:	86 ed       	ldi	r24, 0xD6	; 214
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    134c:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
    1350:	80 ff       	sbrs	r24, 0
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <irSensorsTask+0x84>
    1354:	83 ff       	sbrs	r24, 3
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
    1358:	87 7f       	andi	r24, 0xF7	; 247
    135a:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <IR_B>
		tcrt_read(&IR_B);
    135e:	83 ee       	ldi	r24, 0xE3	; 227
    1360:	96 e0       	ldi	r25, 0x06	; 6
    1362:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
    1366:	83 ee       	ldi	r24, 0xE3	; 227
    1368:	96 e0       	ldi	r25, 0x06	; 6
    136a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <tcrt_is_box_detected>
    136e:	89 2b       	or	r24, r25
    1370:	11 f1       	breq	.+68     	; 0x13b6 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1372:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <IR_B>
    1376:	82 95       	swap	r24
    1378:	8f 70       	andi	r24, 0x0F	; 15
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	e1 f4       	brne	.+56     	; 0x13b6 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
    137e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <salidaB+0x2>
    1382:	83 ff       	sbrs	r24, 3
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <irSensorsTask+0xc2>
    1386:	80 ff       	sbrs	r24, 0
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
    1390:	e4 e6       	ldi	r30, 0x64	; 100
    1392:	f7 e0       	ldi	r31, 0x07	; 7
    1394:	81 81       	ldd	r24, Z+1	; 0x01
    1396:	82 60       	ori	r24, 0x02	; 2
    1398:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
    139a:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
    139c:	86 ee       	ldi	r24, 0xE6	; 230
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    13a4:	e3 ee       	ldi	r30, 0xE3	; 227
    13a6:	f6 e0       	ldi	r31, 0x06	; 6
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    13ae:	8b e0       	ldi	r24, 0x0B	; 11
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    13b6:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
    13ba:	80 ff       	sbrs	r24, 0
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <irSensorsTask+0xee>
    13be:	83 ff       	sbrs	r24, 3
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    13c2:	87 7f       	andi	r24, 0xF7	; 247
    13c4:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <IR_C>
		tcrt_read(&IR_C);
    13c8:	8c e0       	ldi	r24, 0x0C	; 12
    13ca:	97 e0       	ldi	r25, 0x07	; 7
    13cc:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    13d0:	8c e0       	ldi	r24, 0x0C	; 12
    13d2:	97 e0       	ldi	r25, 0x07	; 7
    13d4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <tcrt_is_box_detected>
    13d8:	89 2b       	or	r24, r25
    13da:	11 f1       	breq	.+68     	; 0x1420 <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    13dc:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <IR_C>
    13e0:	82 95       	swap	r24
    13e2:	8f 70       	andi	r24, 0x0F	; 15
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	e1 f4       	brne	.+56     	; 0x1420 <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    13e8:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <salidaC+0x2>
    13ec:	83 ff       	sbrs	r24, 3
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <irSensorsTask+0x12c>
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    13f4:	87 7f       	andi	r24, 0xF7	; 247
    13f6:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    13fa:	ef e2       	ldi	r30, 0x2F	; 47
    13fc:	f7 e0       	ldi	r31, 0x07	; 7
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1404:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1406:	8b e1       	ldi	r24, 0x1B	; 27
    1408:	94 e0       	ldi	r25, 0x04	; 4
    140a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    140e:	ec e0       	ldi	r30, 0x0C	; 12
    1410:	f7 e0       	ldi	r31, 0x07	; 7
    1412:	80 81       	ld	r24, Z
    1414:	8f 70       	andi	r24, 0x0F	; 15
    1416:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1418:	80 e4       	ldi	r24, 0x40	; 64
    141a:	94 e0       	ldi	r25, 0x04	; 4
    141c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    1420:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <IR_U>
    1424:	80 ff       	sbrs	r24, 0
    1426:	09 c0       	rjmp	.+18     	; 0x143a <irSensorsTask+0x158>
    1428:	83 ff       	sbrs	r24, 3
    142a:	07 c0       	rjmp	.+14     	; 0x143a <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    142c:	87 7f       	andi	r24, 0xF7	; 247
    142e:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <IR_U>
		tcrt_read(&IR_U);
    1432:	8c ef       	ldi	r24, 0xFC	; 252
    1434:	96 e0       	ldi	r25, 0x06	; 6
    1436:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    143a:	8c ef       	ldi	r24, 0xFC	; 252
    143c:	96 e0       	ldi	r25, 0x06	; 6
    143e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <tcrt_is_box_detected>
    1442:	89 2b       	or	r24, r25
    1444:	e1 f0       	breq	.+56     	; 0x147e <irSensorsTask+0x19c>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    1446:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <IR_U>
    144a:	89 2f       	mov	r24, r25
    144c:	82 95       	swap	r24
    144e:	8f 70       	andi	r24, 0x0F	; 15
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	41 f4       	brne	.+16     	; 0x1464 <irSensorsTask+0x182>
    1454:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <hcsr04Detector+0x4>
    1458:	21 fd       	sbrc	r18, 1
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <irSensorsTask+0x182>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    145c:	22 60       	ori	r18, 0x02	; 2
    145e:	20 93 48 07 	sts	0x0748, r18	; 0x800748 <hcsr04Detector+0x4>
    1462:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	b9 f4       	brne	.+46     	; 0x1496 <irSensorsTask+0x1b4>
    1468:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <hcsr04Detector+0x4>
    146c:	81 ff       	sbrs	r24, 1
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <irSensorsTask+0x1b4>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			//printf("IR U detecto: la caja salió\n");
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <hcsr04Detector+0x4>
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    1476:	9f 70       	andi	r25, 0x0F	; 15
    1478:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <IR_U>
    147c:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    147e:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <hcsr04Detector+0x4>
    1482:	81 ff       	sbrs	r24, 1
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <irSensorsTask+0x1b4>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    1486:	8d 7f       	andi	r24, 0xFD	; 253
    1488:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    148c:	ec ef       	ldi	r30, 0xFC	; 252
    148e:	f6 e0       	ldi	r31, 0x06	; 6
    1490:	80 81       	ld	r24, Z
    1492:	8f 70       	andi	r24, 0x0F	; 15
    1494:	80 83       	st	Z, r24
    1496:	08 95       	ret

00001498 <servosTask>:
				//printf("IR U Idle again\n");
			}
	}
}

void servosTask() {
    1498:	08 95       	ret

0000149a <verify_header>:
}

bool verify_header() {
	// Verificar si hay al menos 4 bytes disponibles
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    149a:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <protocolService+0x1>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	e6 59       	subi	r30, 0x96	; 150
    14a4:	f8 4f       	sbci	r31, 0xF8	; 248
    14a6:	42 81       	ldd	r20, Z+2	; 0x02
    14a8:	45 35       	cpi	r20, 0x55	; 85
    14aa:	09 f0       	breq	.+2      	; 0x14ae <verify_header+0x14>
    14ac:	4b c0       	rjmp	.+150    	; 0x1544 <verify_header+0xaa>
		return false; // No es un header candidato.
	}

	// Calcular los índices para los 4 bytes del header, considerando el buffer circular.
	uint8_t idx0 = protocolService.indexR;
	uint8_t idx1 = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    14ae:	9c 01       	movw	r18, r24
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	2f 71       	andi	r18, 0x1F	; 31
    14b6:	30 78       	andi	r19, 0x80	; 128
    14b8:	33 23       	and	r19, r19
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <verify_header+0x2e>
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	31 09       	sbc	r19, r1
    14c0:	20 6e       	ori	r18, 0xE0	; 224
    14c2:	3f 6f       	ori	r19, 0xFF	; 255
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	f9 01       	movw	r30, r18
	uint8_t idx2 = (protocolService.indexR + 2) % PROTOCOL_BUFFER_SIZE;
    14ca:	9c 01       	movw	r18, r24
    14cc:	2e 5f       	subi	r18, 0xFE	; 254
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	2f 71       	andi	r18, 0x1F	; 31
    14d2:	30 78       	andi	r19, 0x80	; 128
    14d4:	33 23       	and	r19, r19
    14d6:	34 f4       	brge	.+12     	; 0x14e4 <verify_header+0x4a>
    14d8:	21 50       	subi	r18, 0x01	; 1
    14da:	31 09       	sbc	r19, r1
    14dc:	20 6e       	ori	r18, 0xE0	; 224
    14de:	3f 6f       	ori	r19, 0xFF	; 255
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t idx3 = (protocolService.indexR + 3) % PROTOCOL_BUFFER_SIZE;
    14e4:	03 96       	adiw	r24, 0x03	; 3
    14e6:	8f 71       	andi	r24, 0x1F	; 31
    14e8:	90 78       	andi	r25, 0x80	; 128
    14ea:	99 23       	and	r25, r25
    14ec:	24 f4       	brge	.+8      	; 0x14f6 <verify_header+0x5c>
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	80 6e       	ori	r24, 0xE0	; 224
    14f2:	9f 6f       	ori	r25, 0xFF	; 255
    14f4:	01 96       	adiw	r24, 0x01	; 1

	// Calcular la suma ponderada de los 4 bytes usando pesos: 4, 3, 2, 1
	uint16_t sum = 0;
	sum += (uint16_t)protocolService.buffer[idx0] * 4;  // 'U'
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	44 0f       	add	r20, r20
    14fa:	55 1f       	adc	r21, r21
    14fc:	44 0f       	add	r20, r20
    14fe:	55 1f       	adc	r21, r21
	sum += (uint16_t)protocolService.buffer[idx1] * 3;  // 'N'
    1500:	ff 27       	eor	r31, r31
    1502:	e6 59       	subi	r30, 0x96	; 150
    1504:	f8 4f       	sbci	r31, 0xF8	; 248
    1506:	62 81       	ldd	r22, Z+2	; 0x02
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	fb 01       	movw	r30, r22
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	6e 0f       	add	r22, r30
    1512:	7f 1f       	adc	r23, r31
    1514:	46 0f       	add	r20, r22
    1516:	57 1f       	adc	r21, r23
	sum += (uint16_t)protocolService.buffer[idx2] * 2;  // 'E'
    1518:	33 27       	eor	r19, r19
    151a:	f9 01       	movw	r30, r18
    151c:	e6 59       	subi	r30, 0x96	; 150
    151e:	f8 4f       	sbci	r31, 0xF8	; 248
    1520:	22 81       	ldd	r18, Z+2	; 0x02
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	42 0f       	add	r20, r18
    152a:	53 1f       	adc	r21, r19
	sum += (uint16_t)protocolService.buffer[idx3] * 1;  // 'R'
    152c:	fc 01       	movw	r30, r24
    152e:	ff 27       	eor	r31, r31
    1530:	e6 59       	subi	r30, 0x96	; 150
    1532:	f8 4f       	sbci	r31, 0xF8	; 248
    1534:	22 81       	ldd	r18, Z+2	; 0x02
	
	// Reducir a 8 bits: tomar los 8 bits menos significativos
	uint8_t computed = (uint8_t)(sum & 0xFF);
    1536:	42 0f       	add	r20, r18

	// Comparar con el valor esperado
	if (computed == EXPECTED_HEADER_SUM) {
    1538:	4a 31       	cpi	r20, 0x1A	; 26
    153a:	31 f4       	brne	.+12     	; 0x1548 <verify_header+0xae>
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
    153c:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <protocolService+0x1>
		return true;  // La cabecera es válida.
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	08 95       	ret
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
		return false; // No es un header candidato.
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 95       	ret
	if (computed == EXPECTED_HEADER_SUM) {
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
		return true;  // La cabecera es válida.
	} else {
		// No coincide; descartar este header.
		return false;
    1548:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    154a:	08 95       	ret

0000154c <process_protocol_buffer>:

bool process_protocol_buffer() {
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    154c:	ea e6       	ldi	r30, 0x6A	; 106
    154e:	f7 e0       	ldi	r31, 0x07	; 7
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	89 17       	cp	r24, r25
    1556:	10 f0       	brcs	.+4      	; 0x155c <process_protocol_buffer+0x10>
		available = protocolService.indexW - protocolService.indexR;
    1558:	89 1b       	sub	r24, r25
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <process_protocol_buffer+0x14>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    155c:	89 1b       	sub	r24, r25
    155e:	80 5e       	subi	r24, 0xE0	; 224
	}

	if (available < PROTOCOL_MIN_BYTE_COUNT) {
    1560:	86 30       	cpi	r24, 0x06	; 6
    1562:	78 f4       	brcc	.+30     	; 0x1582 <process_protocol_buffer+0x36>
		printf("Menos de %u bytes en buffer\n", PROTOCOL_MIN_BYTE_COUNT);
    1564:	1f 92       	push	r1
    1566:	86 e0       	ldi	r24, 0x06	; 6
    1568:	8f 93       	push	r24
    156a:	80 e5       	ldi	r24, 0x50	; 80
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	9f 93       	push	r25
    1570:	8f 93       	push	r24
    1572:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
		return false;
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	08 95       	ret
	}
	
	if (verify_header()) {
    1582:	0e 94 4d 0a 	call	0x149a	; 0x149a <verify_header>
		// Se continúa procesando el paquete...
		return true;
		} else {
		return false;
	}
}
    1586:	08 95       	ret

00001588 <getResponseCommand>:

Command getResponseCommand(Command req) {
    1588:	cf 93       	push	r28
	uint8_t reqValue = (uint8_t)req;
	uint8_t responseValue;
	
	switch(reqValue) {
    158a:	80 3c       	cpi	r24, 0xC0	; 192
    158c:	a9 f0       	breq	.+42     	; 0x15b8 <getResponseCommand+0x30>
    158e:	38 f4       	brcc	.+14     	; 0x159e <getResponseCommand+0x16>
    1590:	81 3b       	cpi	r24, 0xB1	; 177
    1592:	81 f0       	breq	.+32     	; 0x15b4 <getResponseCommand+0x2c>
    1594:	82 3b       	cpi	r24, 0xB2	; 178
    1596:	f1 f0       	breq	.+60     	; 0x15d4 <getResponseCommand+0x4c>
    1598:	80 3a       	cpi	r24, 0xA0	; 160
    159a:	d1 f4       	brne	.+52     	; 0x15d0 <getResponseCommand+0x48>
    159c:	17 c0       	rjmp	.+46     	; 0x15cc <getResponseCommand+0x44>
    159e:	80 3f       	cpi	r24, 0xF0	; 240
    15a0:	99 f0       	breq	.+38     	; 0x15c8 <getResponseCommand+0x40>
    15a2:	18 f4       	brcc	.+6      	; 0x15aa <getResponseCommand+0x22>
    15a4:	81 3c       	cpi	r24, 0xC1	; 193
    15a6:	51 f0       	breq	.+20     	; 0x15bc <getResponseCommand+0x34>
    15a8:	13 c0       	rjmp	.+38     	; 0x15d0 <getResponseCommand+0x48>
    15aa:	81 3f       	cpi	r24, 0xF1	; 241
    15ac:	49 f0       	breq	.+18     	; 0x15c0 <getResponseCommand+0x38>
    15ae:	82 3f       	cpi	r24, 0xF2	; 242
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <getResponseCommand+0x3c>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <getResponseCommand+0x48>
		case CMD_START:
		responseValue = CMD_RESPONSE_START;
    15b4:	c1 e0       	ldi	r28, 0x01	; 1
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <getResponseCommand+0x4e>
		case CMD_STOP:
		responseValue = CMD_RESPONSE_STOP;
		break;
		
		case CMD_SET_CONFIG:
		responseValue = CMD_RESPONSE_SET_CONFIG;
    15b8:	c3 e0       	ldi	r28, 0x03	; 3
		break;
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <getResponseCommand+0x4e>
		
		case CMD_GET_CONFIG:
		responseValue = CMD_RESPONSE_GET_CONFIG;
    15bc:	c4 e0       	ldi	r28, 0x04	; 4
		break;
    15be:	0b c0       	rjmp	.+22     	; 0x15d6 <getResponseCommand+0x4e>
		
		case CMD_GET_STATS:
		responseValue = CMD_RESPONSE_GET_STATS;
    15c0:	c6 e0       	ldi	r28, 0x06	; 6
		break;
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <getResponseCommand+0x4e>
		
		case CMD_CLEAR_STATS:
		responseValue = CMD_RESPONSE_CLEAR_STATS;
    15c4:	c5 e0       	ldi	r28, 0x05	; 5
		break;
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <getResponseCommand+0x4e>
		
		case CMD_GET_FIRMWARE:
		responseValue = CMD_RESPONSE_GET_FIRMWARE;
    15c8:	c7 e0       	ldi	r28, 0x07	; 7
		break;
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <getResponseCommand+0x4e>
		
		case CMD_ALIVE:
		responseValue = CMD_RESPONSE_RESPONSE_ALIVE;
    15cc:	c9 e0       	ldi	r28, 0x09	; 9
		break;
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <getResponseCommand+0x4e>
		
		default:
		responseValue = CMD_INVALID;
    15d0:	c0 ee       	ldi	r28, 0xE0	; 224
		break;
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <getResponseCommand+0x4e>
		case CMD_START:
		responseValue = CMD_RESPONSE_START;
		break;
		
		case CMD_STOP:
		responseValue = CMD_RESPONSE_STOP;
    15d4:	c2 e0       	ldi	r28, 0x02	; 2
		default:
		responseValue = CMD_INVALID;
		break;
	}
	
	printf("DEBUG: Request: 0x%X -> Response: 0x%X\n", reqValue, responseValue);
    15d6:	1f 92       	push	r1
    15d8:	cf 93       	push	r28
    15da:	1f 92       	push	r1
    15dc:	8f 93       	push	r24
    15de:	8d e6       	ldi	r24, 0x6D	; 109
    15e0:	94 e0       	ldi	r25, 0x04	; 4
    15e2:	9f 93       	push	r25
    15e4:	8f 93       	push	r24
    15e6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
	return (Command)responseValue;
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
}
    15f6:	8c 2f       	mov	r24, r28
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <clear_receive_pck>:

void clear_receive_pck(){
	protocolService.receivePck.checksum = 0;
    15fc:	ea e6       	ldi	r30, 0x6A	; 106
    15fe:	f7 e0       	ldi	r31, 0x07	; 7
    1600:	14 aa       	std	Z+52, r1	; 0x34
	protocolService.receivePck.cmd = 0;
    1602:	11 aa       	std	Z+49, r1	; 0x31
	protocolService.receivePck.length = 0;
    1604:	17 a6       	std	Z+47, r1	; 0x2f
	protocolService.receivePck.token = 0;
    1606:	10 aa       	std	Z+48, r1	; 0x30
	protocolService.receivePck.payload[0] = NULL;
    1608:	a2 a9       	ldd	r26, Z+50	; 0x32
    160a:	b3 a9       	ldd	r27, Z+51	; 0x33
    160c:	1c 92       	st	X, r1
	protocolService.receivePck.header[0] = NULL;
    160e:	13 a6       	std	Z+43, r1	; 0x2b
	printf("Paquete RCV cleared \n");
    1610:	85 e9       	ldi	r24, 0x95	; 149
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    1618:	08 95       	ret

0000161a <initProtocolService>:
#include "protocol_utils.h"
#include "../usart/usart_utils.h"
#include <avr/pgmspace.h>


void initProtocolService(ProtocolService* service){
    161a:	fc 01       	movw	r30, r24
	service->buffer[0] = NULL;
    161c:	12 82       	std	Z+2, r1	; 0x02
	service->indexR = 0;
    161e:	11 82       	std	Z+1, r1	; 0x01
	service->indexW = 0;
    1620:	10 82       	st	Z, r1
	service->flags.byte = 0;
    1622:	12 a6       	std	Z+42, r1	; 0x2a
	clear_receive_pck();
    1624:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <clear_receive_pck>
	printf("Init protocol service\n");
    1628:	8a ea       	ldi	r24, 0xAA	; 170
    162a:	94 e0       	ldi	r25, 0x04	; 4
    162c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    1630:	08 95       	ret

00001632 <calculatePayload>:
	protocolService.receivePck.payload[0] = NULL;
	protocolService.receivePck.header[0] = NULL;
	printf("Paquete RCV cleared \n");
}

uint8_t calculatePayload() {
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
	checksum ^= 'N';  // XOR de 'N'
	checksum ^= 'E';  // XOR de 'E'
	checksum ^= 'R';  // XOR de 'R'
	
	// Sumar el byte de LENGTH
	checksum ^= protocolService.receivePck.length;
    163a:	ea e6       	ldi	r30, 0x6A	; 106
    163c:	f7 e0       	ldi	r31, 0x07	; 7
    163e:	07 a5       	ldd	r16, Z+47	; 0x2f
	
	// Sumar el byte de TOKEN (usamos el valor de PROTOCOL_TOKEN)
	checksum ^= PROTOCOL_TOKEN;
    1640:	86 e3       	ldi	r24, 0x36	; 54
    1642:	08 27       	eor	r16, r24
	
	// Sumar el byte de CMD
	checksum ^= protocolService.receivePck.cmd;
    1644:	81 a9       	ldd	r24, Z+49	; 0x31
    1646:	08 27       	eor	r16, r24
	
	// Imprimir los valores del payload
	printf_P(PSTR("Payload en Hex:\n"));
    1648:	84 e6       	ldi	r24, 0x64	; 100
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	9f 93       	push	r25
    164e:	8f 93       	push	r24
    1650:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	1d c0       	rjmp	.+58     	; 0x1698 <calculatePayload+0x66>
		uint8_t payload_byte = *(protocolService.receivePck.payload + i);
    165e:	e0 91 9c 07 	lds	r30, 0x079C	; 0x80079c <protocolService+0x32>
    1662:	f0 91 9d 07 	lds	r31, 0x079D	; 0x80079d <protocolService+0x33>
    1666:	ec 0f       	add	r30, r28
    1668:	fd 1f       	adc	r31, r29
    166a:	10 81       	ld	r17, Z
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
    166c:	1f 92       	push	r1
    166e:	1f 93       	push	r17
    1670:	1f 92       	push	r1
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	80 ec       	ldi	r24, 0xC0	; 192
    167a:	94 e0       	ldi	r25, 0x04	; 4
    167c:	9f 93       	push	r25
    167e:	8f 93       	push	r24
    1680:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
		checksum ^= payload_byte;  // XOR de cada byte del payload
    1684:	01 27       	eor	r16, r17
	checksum ^= protocolService.receivePck.cmd;
	
	// Imprimir los valores del payload
	printf_P(PSTR("Payload en Hex:\n"));
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    1686:	21 96       	adiw	r28, 0x01	; 1
    1688:	8d b7       	in	r24, 0x3d	; 61
    168a:	9e b7       	in	r25, 0x3e	; 62
    168c:	08 96       	adiw	r24, 0x08	; 8
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	9e bf       	out	0x3e, r25	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	8d bf       	out	0x3d, r24	; 61
    1698:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <protocolService+0x2f>
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	c8 17       	cp	r28, r24
    16a0:	d9 07       	cpc	r29, r25
    16a2:	ec f2       	brlt	.-70     	; 0x165e <calculatePayload+0x2c>
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
		checksum ^= payload_byte;  // XOR de cada byte del payload
	}
	
	// Imprimir el checksum calculado en hexadecimal
	printf("CHECKSUM CALC %02X\n", checksum);
    16a4:	1f 92       	push	r1
    16a6:	0f 93       	push	r16
    16a8:	8f ed       	ldi	r24, 0xDF	; 223
    16aa:	94 e0       	ldi	r25, 0x04	; 4
    16ac:	9f 93       	push	r25
    16ae:	8f 93       	push	r24
    16b0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
	
	// Imprimir el checksum esperado
	printf("CHECKSUM ESPERADO: %02X\n", protocolService.receivePck.checksum);
    16b4:	ca e6       	ldi	r28, 0x6A	; 106
    16b6:	d7 e0       	ldi	r29, 0x07	; 7
    16b8:	8c a9       	ldd	r24, Y+52	; 0x34
    16ba:	1f 92       	push	r1
    16bc:	8f 93       	push	r24
    16be:	83 ef       	ldi	r24, 0xF3	; 243
    16c0:	94 e0       	ldi	r25, 0x04	; 4
    16c2:	9f 93       	push	r25
    16c4:	8f 93       	push	r24
    16c6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
	
	// Comparar el checksum calculado con el esperado
	if (checksum == protocolService.receivePck.checksum) {
    16ca:	8c a9       	ldd	r24, Y+52	; 0x34
    16cc:	2d b7       	in	r18, 0x3d	; 61
    16ce:	3e b7       	in	r19, 0x3e	; 62
    16d0:	28 5f       	subi	r18, 0xF8	; 248
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	3e bf       	out	0x3e, r19	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	2d bf       	out	0x3d, r18	; 61
    16de:	08 13       	cpse	r16, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <calculatePayload+0xc2>
		printf_P(PSTR("Cks valido\n"));
    16e2:	88 e5       	ldi	r24, 0x58	; 88
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <calculatePayload+0xd2>
		} else {
		printf_P(PSTR("Cks invalido\n"));
    16f4:	8a e4       	ldi	r24, 0x4A	; 74
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	9f 93       	push	r25
    16fa:	8f 93       	push	r24
    16fc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
	}
	
	// Devuelve el checksum calculado
	return checksum;
}
    1704:	80 2f       	mov	r24, r16
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <createPck>:

void createPck(uint8_t cmd, uint8_t* payload, uint8_t payloadLength) {
	// Fill the header with 'UNER'
	protocolService.receivePck.header[0] = 'U';
    1710:	ea e6       	ldi	r30, 0x6A	; 106
    1712:	f7 e0       	ldi	r31, 0x07	; 7
    1714:	95 e5       	ldi	r25, 0x55	; 85
    1716:	93 a7       	std	Z+43, r25	; 0x2b
	protocolService.receivePck.header[1] = 'N';
    1718:	9e e4       	ldi	r25, 0x4E	; 78
    171a:	94 a7       	std	Z+44, r25	; 0x2c
	protocolService.receivePck.header[2] = 'E';
    171c:	95 e4       	ldi	r25, 0x45	; 69
    171e:	95 a7       	std	Z+45, r25	; 0x2d
	protocolService.receivePck.header[3] = 'R';
    1720:	92 e5       	ldi	r25, 0x52	; 82
    1722:	96 a7       	std	Z+46, r25	; 0x2e
	
	// Set the length field to the payload length
	protocolService.receivePck.length = payloadLength;
    1724:	47 a7       	std	Z+47, r20	; 0x2f
	
	// Set the token
	protocolService.receivePck.token = PROTOCOL_TOKEN; // Assuming PROTOCOL_TOKEN is defined as 0x3A
    1726:	9a e3       	ldi	r25, 0x3A	; 58
    1728:	90 ab       	std	Z+48, r25	; 0x30
	
	// Set the command
	protocolService.receivePck.cmd = cmd;
    172a:	81 ab       	std	Z+49, r24	; 0x31
	
	if(payload != NULL){
    172c:	61 15       	cp	r22, r1
    172e:	71 05       	cpc	r23, r1
    1730:	21 f0       	breq	.+8      	; 0x173a <createPck+0x2a>
		protocolService.receivePck.payload = payload;	
    1732:	70 93 9d 07 	sts	0x079D, r23	; 0x80079d <protocolService+0x33>
    1736:	60 93 9c 07 	sts	0x079C, r22	; 0x80079c <protocolService+0x32>
	checksum ^= protocolService.receivePck.header[1]; // 'N'
	checksum ^= protocolService.receivePck.header[2]; // 'E'
	checksum ^= protocolService.receivePck.header[3]; // 'R'
	
	// XOR with length
	checksum ^= protocolService.receivePck.length;
    173a:	9c e0       	ldi	r25, 0x0C	; 12
    173c:	94 27       	eor	r25, r20
	
	// XOR with token
	checksum ^= protocolService.receivePck.token;
    173e:	2a e3       	ldi	r18, 0x3A	; 58
    1740:	92 27       	eor	r25, r18
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
    1742:	98 27       	eor	r25, r24
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	0a c0       	rjmp	.+20     	; 0x175e <createPck+0x4e>
		checksum ^= *(protocolService.receivePck.payload + i);
    174a:	e0 91 9c 07 	lds	r30, 0x079C	; 0x80079c <protocolService+0x32>
    174e:	f0 91 9d 07 	lds	r31, 0x079D	; 0x80079d <protocolService+0x33>
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	50 81       	ld	r21, Z
    1758:	95 27       	eor	r25, r21
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	64 2f       	mov	r22, r20
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	26 17       	cp	r18, r22
    1764:	37 07       	cpc	r19, r23
    1766:	8c f3       	brlt	.-30     	; 0x174a <createPck+0x3a>
		checksum ^= *(protocolService.receivePck.payload + i);
	}
	
	// Set the checksum field
	protocolService.receivePck.checksum = checksum;
    1768:	90 93 9e 07 	sts	0x079E, r25	; 0x80079e <protocolService+0x34>
	printf("Valor CMD paquete creado %x \n", protocolService.receivePck.cmd);
    176c:	1f 92       	push	r1
    176e:	8f 93       	push	r24
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	95 e0       	ldi	r25, 0x05	; 5
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
    1778:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	08 95       	ret

00001786 <validatePck>:

bool validatePck(){
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
	NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_LEN);
    178a:	aa e6       	ldi	r26, 0x6A	; 106
    178c:	b7 e0       	ldi	r27, 0x07	; 7
    178e:	9a 96       	adiw	r26, 0x2a	; 42
    1790:	8c 91       	ld	r24, X
    1792:	9a 97       	sbiw	r26, 0x2a	; 42
	protocolService.indexR++; //Poner en dinde deberia estar length
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	ec 91       	ld	r30, X
    1798:	11 97       	sbiw	r26, 0x01	; 1
    179a:	ef 5f       	subi	r30, 0xFF	; 255
	protocolService.receivePck.length = protocolService.buffer[protocolService.indexR];
    179c:	ce 2f       	mov	r28, r30
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	c6 59       	subi	r28, 0x96	; 150
    17a2:	d8 4f       	sbci	r29, 0xF8	; 248
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	9f 96       	adiw	r26, 0x2f	; 47
    17a8:	9c 93       	st	X, r25
    17aa:	9f 97       	sbiw	r26, 0x2f	; 47
	NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_TOKEN);
    17ac:	8f 70       	andi	r24, 0x0F	; 15
    17ae:	80 63       	ori	r24, 0x30	; 48
    17b0:	9a 96       	adiw	r26, 0x2a	; 42
    17b2:	8c 93       	st	X, r24
    17b4:	9a 97       	sbiw	r26, 0x2a	; 42
	protocolService.indexR++; //Donde deberia estar token
    17b6:	ef 5f       	subi	r30, 0xFF	; 255
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	ec 93       	st	X, r30
	if (protocolService.buffer[protocolService.indexR] != PROTOCOL_TOKEN){
    17bc:	ae 2f       	mov	r26, r30
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	a6 59       	subi	r26, 0x96	; 150
    17c2:	b8 4f       	sbci	r27, 0xF8	; 248
    17c4:	12 96       	adiw	r26, 0x02	; 2
    17c6:	2c 91       	ld	r18, X
    17c8:	2a 33       	cpi	r18, 0x3A	; 58
    17ca:	51 f0       	breq	.+20     	; 0x17e0 <validatePck+0x5a>
		printf_P(PSTR("Token invalido\n"));
    17cc:	8a e3       	ldi	r24, 0x3A	; 58
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	9f 93       	push	r25
    17d2:	8f 93       	push	r24
    17d4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
		return false;
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	71 c0       	rjmp	.+226    	; 0x18c2 <validatePck+0x13c>
		}else{ //Token valido
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CMD);
    17e0:	aa e6       	ldi	r26, 0x6A	; 106
    17e2:	b7 e0       	ldi	r27, 0x07	; 7
    17e4:	8f 70       	andi	r24, 0x0F	; 15
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	9a 96       	adiw	r26, 0x2a	; 42
    17ea:	8c 93       	st	X, r24
    17ec:	9a 97       	sbiw	r26, 0x2a	; 42
		protocolService.indexR++; //Donde deberia estar CMD
    17ee:	ef 5f       	subi	r30, 0xFF	; 255
    17f0:	11 96       	adiw	r26, 0x01	; 1
    17f2:	ec 93       	st	X, r30
    17f4:	11 97       	sbiw	r26, 0x01	; 1
		protocolService.receivePck.cmd = protocolService.buffer[protocolService.indexR];
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	e6 59       	subi	r30, 0x96	; 150
    17fa:	f8 4f       	sbci	r31, 0xF8	; 248
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	d1 96       	adiw	r26, 0x31	; 49
    1800:	8c 93       	st	X, r24
		if(protocolService.receivePck.cmd == CMD_INVALID){
    1802:	80 3e       	cpi	r24, 0xE0	; 224
    1804:	51 f4       	brne	.+20     	; 0x181a <validatePck+0x94>
			printf_P(PSTR("Comando invalido\n"));
    1806:	88 e2       	ldi	r24, 0x28	; 40
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	9f 93       	push	r25
    180c:	8f 93       	push	r24
    180e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
			return false;
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	54 c0       	rjmp	.+168    	; 0x18c2 <validatePck+0x13c>
			}else{
			printf("Length %u", protocolService.receivePck.length);
    181a:	1f 92       	push	r1
    181c:	9f 93       	push	r25
    181e:	8a e2       	ldi	r24, 0x2A	; 42
    1820:	95 e0       	ldi	r25, 0x05	; 5
    1822:	9f 93       	push	r25
    1824:	8f 93       	push	r24
    1826:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
			if(protocolService.receivePck.length > PROTOCOL_MAX_BYTE_COUNT){ //Nunca deberia ser mayor a 24, porque + UNER+len+:+cmd == 32 y es el size del buffer
    182a:	20 91 99 07 	lds	r18, 0x0799	; 0x800799 <protocolService+0x2f>
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	29 31       	cpi	r18, 0x19	; 25
    1838:	50 f0       	brcs	.+20     	; 0x184e <validatePck+0xc8>
				printf_P(PSTR("Length mayor a 24, se perderia data del buffer\n"));
    183a:	88 ef       	ldi	r24, 0xF8	; 248
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9f 93       	push	r25
    1840:	8f 93       	push	r24
    1842:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
				return false;
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	3a c0       	rjmp	.+116    	; 0x18c2 <validatePck+0x13c>
			}
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_PAYLOAD);
    184e:	ea e6       	ldi	r30, 0x6A	; 106
    1850:	f7 e0       	ldi	r31, 0x07	; 7
    1852:	82 a5       	ldd	r24, Z+42	; 0x2a
    1854:	8f 70       	andi	r24, 0x0F	; 15
    1856:	80 65       	ori	r24, 0x50	; 80
    1858:	82 a7       	std	Z+42, r24	; 0x2a
			protocolService.indexR++; //Donde deberia estar el Payload
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	9f 5f       	subi	r25, 0xFF	; 255
    185e:	91 83       	std	Z+1, r25	; 0x01
			protocolService.receivePck.payload = &protocolService.buffer[protocolService.indexR]; //Apunta a la direccion de memoria del primer elemento, esto deberia seguir hasta minimo 2, osea esta direccion y la siguiente
    1860:	49 2f       	mov	r20, r25
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	44 59       	subi	r20, 0x94	; 148
    1866:	58 4f       	sbci	r21, 0xF8	; 248
    1868:	53 ab       	std	Z+51, r21	; 0x33
    186a:	42 ab       	std	Z+50, r20	; 0x32
			if(protocolService.receivePck.length > 0){
    186c:	22 23       	and	r18, r18
    186e:	21 f0       	breq	.+8      	; 0x1878 <validatePck+0xf2>
				protocolService.indexR += (protocolService.receivePck.length-1); //Si es 0 no pasa nada porque daria lo mismo la suma
    1870:	92 0f       	add	r25, r18
    1872:	91 50       	subi	r25, 0x01	; 1
    1874:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <protocolService+0x1>
			}
			protocolService.indexR++; //Donde deberia estar cks
    1878:	ca e6       	ldi	r28, 0x6A	; 106
    187a:	d7 e0       	ldi	r29, 0x07	; 7
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	ef 5f       	subi	r30, 0xFF	; 255
    1880:	e9 83       	std	Y+1, r30	; 0x01
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CHK);
			protocolService.receivePck.checksum = protocolService.buffer[protocolService.indexR];
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	e6 59       	subi	r30, 0x96	; 150
    1886:	f8 4f       	sbci	r31, 0xF8	; 248
    1888:	92 81       	ldd	r25, Z+2	; 0x02
    188a:	9c ab       	std	Y+52, r25	; 0x34
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_CALCULATING_CHK);
    188c:	8f 70       	andi	r24, 0x0F	; 15
    188e:	80 67       	ori	r24, 0x70	; 112
    1890:	8a a7       	std	Y+42, r24	; 0x2a
			if(calculatePayload() != protocolService.receivePck.checksum){
    1892:	0e 94 19 0b 	call	0x1632	; 0x1632 <calculatePayload>
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	89 17       	cp	r24, r25
    189a:	51 f0       	breq	.+20     	; 0x18b0 <validatePck+0x12a>
				printf_P(PSTR("Cks invalido\n"));
    189c:	8a ee       	ldi	r24, 0xEA	; 234
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9f 93       	push	r25
    18a2:	8f 93       	push	r24
    18a4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
				return false;
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <validatePck+0x13c>
			}else{
				printf_P(PSTR("Cks valido\n"));
    18b0:	8e ed       	ldi	r24, 0xDE	; 222
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <printf_P>
				return true;
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    18c8:	85 3b       	cpi	r24, 0xB5	; 181
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <calculate_angle_pulseUs+0x6>
    18cc:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	a0 ed       	ldi	r26, 0xD0	; 208
    18d4:	b7 e0       	ldi	r27, 0x07	; 7
    18d6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__umulhisi3>
    18da:	24 eb       	ldi	r18, 0xB4	; 180
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
}
    18e6:	c9 01       	movw	r24, r18
    18e8:	80 53       	subi	r24, 0x30	; 48
    18ea:	98 4f       	sbci	r25, 0xF8	; 248
    18ec:	08 95       	ret

000018ee <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	ec 01       	movw	r28, r24
    18f8:	04 2f       	mov	r16, r20
    18fa:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    18fc:	1f 92       	push	r1
    18fe:	6f 93       	push	r22
    1900:	84 e3       	ldi	r24, 0x34	; 52
    1902:	95 e0       	ldi	r25, 0x05	; 5
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
	servo->flags.byte = 0;
    190c:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    190e:	81 2f       	mov	r24, r17
    1910:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <calculate_angle_pulseUs>
    1914:	9b 83       	std	Y+3, r25	; 0x03
    1916:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    1918:	08 83       	st	Y, r16
	servo->angle = startAngle;
    191a:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    191c:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    1936:	87 b1       	in	r24, 0x07	; 7
    1938:	80 7f       	andi	r24, 0xF0	; 240
    193a:	87 b9       	out	0x07, r24	; 7
    193c:	88 b1       	in	r24, 0x08	; 8
    193e:	80 7f       	andi	r24, 0xF0	; 240
    1940:	88 b9       	out	0x08, r24	; 8
    1942:	80 e4       	ldi	r24, 0x40	; 64
    1944:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1948:	86 e8       	ldi	r24, 0x86	; 134
    194a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    194e:	08 95       	ret

00001950 <tcrt_read_channel>:
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	a0 f4       	brcc	.+40     	; 0x197c <tcrt_read_channel+0x2c>
    1954:	ec e7       	ldi	r30, 0x7C	; 124
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	90 81       	ld	r25, Z
    195a:	90 7f       	andi	r25, 0xF0	; 240
    195c:	89 2b       	or	r24, r25
    195e:	80 83       	st	Z, r24
    1960:	ea e7       	ldi	r30, 0x7A	; 122
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 64       	ori	r24, 0x40	; 64
    1968:	80 83       	st	Z, r24
    196a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    196e:	86 fd       	sbrc	r24, 6
    1970:	fc cf       	rjmp	.-8      	; 0x196a <tcrt_read_channel+0x1a>
    1972:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1976:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    197a:	08 95       	ret
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	08 95       	ret

00001982 <TCRT_init_Handlers>:
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f7 e0       	ldi	r31, 0x07	; 7
    198a:	17 82       	std	Z+7, r1	; 0x07
    198c:	10 86       	std	Z+8, r1	; 0x08
    198e:	12 82       	std	Z+2, r1	; 0x02
    1990:	11 82       	std	Z+1, r1	; 0x01
    1992:	16 82       	std	Z+6, r1	; 0x06
    1994:	15 82       	std	Z+5, r1	; 0x05
    1996:	d4 e1       	ldi	r29, 0x14	; 20
    1998:	d6 87       	std	Z+14, r29	; 0x0e
    199a:	c1 e0       	ldi	r28, 0x01	; 1
    199c:	c0 83       	st	Z, r28
    199e:	83 e4       	ldi	r24, 0x43	; 67
    19a0:	95 e0       	ldi	r25, 0x05	; 5
    19a2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    19a6:	e3 ee       	ldi	r30, 0xE3	; 227
    19a8:	f6 e0       	ldi	r31, 0x06	; 6
    19aa:	10 82       	st	Z, r1
    19ac:	c7 83       	std	Z+7, r28	; 0x07
    19ae:	c0 87       	std	Z+8, r28	; 0x08
    19b0:	12 82       	std	Z+2, r1	; 0x02
    19b2:	11 82       	std	Z+1, r1	; 0x01
    19b4:	16 82       	std	Z+6, r1	; 0x06
    19b6:	15 82       	std	Z+5, r1	; 0x05
    19b8:	d6 87       	std	Z+14, r29	; 0x0e
    19ba:	ec e0       	ldi	r30, 0x0C	; 12
    19bc:	f7 e0       	ldi	r31, 0x07	; 7
    19be:	10 82       	st	Z, r1
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	87 83       	std	Z+7, r24	; 0x07
    19c4:	80 87       	std	Z+8, r24	; 0x08
    19c6:	12 82       	std	Z+2, r1	; 0x02
    19c8:	11 82       	std	Z+1, r1	; 0x01
    19ca:	16 82       	std	Z+6, r1	; 0x06
    19cc:	15 82       	std	Z+5, r1	; 0x05
    19ce:	d6 87       	std	Z+14, r29	; 0x0e
    19d0:	ec ef       	ldi	r30, 0xFC	; 252
    19d2:	f6 e0       	ldi	r31, 0x06	; 6
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	87 83       	std	Z+7, r24	; 0x07
    19d8:	80 87       	std	Z+8, r24	; 0x08
    19da:	12 82       	std	Z+2, r1	; 0x02
    19dc:	11 82       	std	Z+1, r1	; 0x01
    19de:	16 82       	std	Z+6, r1	; 0x06
    19e0:	15 82       	std	Z+5, r1	; 0x05
    19e2:	d6 87       	std	Z+14, r29	; 0x0e
    19e4:	c0 83       	st	Z, r28
    19e6:	82 e5       	ldi	r24, 0x52	; 82
    19e8:	95 e0       	ldi	r25, 0x05	; 5
    19ea:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <puts>
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    19fa:	88 81       	ld	r24, Y
    19fc:	83 ff       	sbrs	r24, 3
    19fe:	36 c0       	rjmp	.+108    	; 0x1a6c <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    1a00:	87 7f       	andi	r24, 0xF7	; 247
    1a02:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	81 11       	cpse	r24, r1
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    1a0a:	1e 82       	std	Y+6, r1	; 0x06
    1a0c:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    1a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a10:	0e 94 a8 0c 	call	0x1950	; 0x1950 <tcrt_read_channel>
    1a14:	2d 81       	ldd	r18, Y+5	; 0x05
    1a16:	3e 81       	ldd	r19, Y+6	; 0x06
    1a18:	28 0f       	add	r18, r24
    1a1a:	39 1f       	adc	r19, r25
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    1a20:	99 85       	ldd	r25, Y+9	; 0x09
    1a22:	9f 5f       	subi	r25, 0xFF	; 255
    1a24:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    1a26:	9a 30       	cpi	r25, 0x0A	; 10
    1a28:	08 f1       	brcs	.+66     	; 0x1a6c <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    1a2a:	ad ec       	ldi	r26, 0xCD	; 205
    1a2c:	bc ec       	ldi	r27, 0xCC	; 204
    1a2e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__umulhisi3>
    1a32:	96 95       	lsr	r25
    1a34:	87 95       	ror	r24
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1a42:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1a44:	28 81       	ld	r18, Y
    1a46:	2b 7f       	andi	r18, 0xFB	; 251
    1a48:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    1a4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a4c:	9f 93       	push	r25
    1a4e:	8f 93       	push	r24
    1a50:	1f 92       	push	r1
    1a52:	2f 93       	push	r18
    1a54:	81 e6       	ldi	r24, 0x61	; 97
    1a56:	95 e0       	ldi	r25, 0x05	; 5
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <printf>
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
		}
	}
}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    1a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <tcrt_read_channel>
	sensor->lastReading = lectura;
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    1a86:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a88:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a8a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a8c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a8e:	8a 01       	movw	r16, r20
    1a90:	9b 01       	movw	r18, r22
    1a92:	08 0f       	add	r16, r24
    1a94:	19 1f       	adc	r17, r25
    1a96:	21 1d       	adc	r18, r1
    1a98:	31 1d       	adc	r19, r1
    1a9a:	c9 01       	movw	r24, r18
    1a9c:	b8 01       	movw	r22, r16
    1a9e:	0a 87       	std	Y+10, r16	; 0x0a
    1aa0:	1b 87       	std	Y+11, r17	; 0x0b
    1aa2:	2c 87       	std	Y+12, r18	; 0x0c
    1aa4:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    1aa6:	29 85       	ldd	r18, Y+9	; 0x09
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1aac:	2a 30       	cpi	r18, 0x0A	; 10
    1aae:	68 f0       	brcs	.+26     	; 0x1aca <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
    1abc:	3a 83       	std	Y+2, r19	; 0x02
    1abe:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1ac0:	1a 86       	std	Y+10, r1	; 0x0a
    1ac2:	1b 86       	std	Y+11, r1	; 0x0b
    1ac4:	1c 86       	std	Y+12, r1	; 0x0c
    1ac6:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1ac8:	19 86       	std	Y+9, r1	; 0x09
	}
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1ae2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ae4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ae6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	f4 e6       	ldi	r31, 0x64	; 100
    1aec:	cf 2e       	mov	r12, r31
    1aee:	d1 2c       	mov	r13, r1
    1af0:	e1 2c       	mov	r14, r1
    1af2:	f1 2c       	mov	r15, r1
    1af4:	f0 2d       	mov	r31, r0
    1af6:	a7 01       	movw	r20, r14
    1af8:	96 01       	movw	r18, r12
    1afa:	28 1b       	sub	r18, r24
    1afc:	31 09       	sbc	r19, r1
    1afe:	41 09       	sbc	r20, r1
    1b00:	51 09       	sbc	r21, r1
    1b02:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__muluhisi3>
    1b06:	a7 01       	movw	r20, r14
    1b08:	96 01       	movw	r18, r12
    1b0a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	6c 01       	movw	r12, r24
    1b14:	e1 2c       	mov	r14, r1
    1b16:	f1 2c       	mov	r15, r1
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	c2 16       	cp	r12, r18
    1b1c:	d3 06       	cpc	r13, r19
    1b1e:	e4 06       	cpc	r14, r20
    1b20:	f5 06       	cpc	r15, r21
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <tcrt_is_box_detected+0x52>
    1b24:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    1b26:	c2 16       	cp	r12, r18
    1b28:	d3 06       	cpc	r13, r19
    1b2a:	e4 06       	cpc	r14, r20
    1b2c:	f5 06       	cpc	r15, r21
    1b2e:	50 f4       	brcc	.+20     	; 0x1b44 <tcrt_is_box_detected+0x70>
    1b30:	98 81       	ld	r25, Y
    1b32:	e9 2f       	mov	r30, r25
    1b34:	e2 95       	swap	r30
    1b36:	ef 70       	andi	r30, 0x0F	; 15
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    1b3a:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    1b3c:	9f 70       	andi	r25, 0x0F	; 15
    1b3e:	90 61       	ori	r25, 0x10	; 16
    1b40:	98 83       	st	Y, r25
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    1b44:	c2 16       	cp	r12, r18
    1b46:	d3 06       	cpc	r13, r19
    1b48:	e4 06       	cpc	r14, r20
    1b4a:	f5 06       	cpc	r15, r21
    1b4c:	50 f0       	brcs	.+20     	; 0x1b62 <tcrt_is_box_detected+0x8e>
    1b4e:	98 81       	ld	r25, Y
    1b50:	29 2f       	mov	r18, r25
    1b52:	22 95       	swap	r18
    1b54:	2f 70       	andi	r18, 0x0F	; 15
    1b56:	21 30       	cpi	r18, 0x01	; 1
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    1b5a:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    1b5c:	9d 70       	andi	r25, 0x0D	; 13
    1b5e:	90 62       	ori	r25, 0x20	; 32
    1b60:	98 83       	st	Y, r25
	}

	return box_now;
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	08 95       	ret

00001b70 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    1b70:	8b b1       	in	r24, 0x0b	; 11
    1b72:	88 60       	ori	r24, 0x08	; 8
    1b74:	8b b9       	out	0x0b, r24	; 11
    1b76:	08 95       	ret

00001b78 <ultrasonic_hal_trigger_setLow>:
    1b78:	8b b1       	in	r24, 0x0b	; 11
    1b7a:	87 7f       	andi	r24, 0xF7	; 247
    1b7c:	8b b9       	out	0x0b, r24	; 11
    1b7e:	08 95       	ret

00001b80 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    1b80:	e1 e8       	ldi	r30, 0x81	; 129
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	80 83       	st	Z, r24
    1b8a:	08 95       	ret

00001b8c <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    1b8c:	e1 e8       	ldi	r30, 0x81	; 129
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	80 83       	st	Z, r24
    1b96:	08 95       	ret

00001b98 <USART_Init>:
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
}
    1b98:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1b9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1ba0:	88 e9       	ldi	r24, 0x98	; 152
    1ba2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1ba6:	86 e0       	ldi	r24, 0x06	; 6
    1ba8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1bac:	08 95       	ret

00001bae <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1bae:	cf 93       	push	r28
    1bb0:	c8 2f       	mov	r28, r24
	// Si se desea manejar la nueva línea con retorno de carro:
	if (c == '\n')
    1bb2:	8a 30       	cpi	r24, 0x0A	; 10
    1bb4:	19 f4       	brne	.+6      	; 0x1bbc <USART_putchar+0xe>
	USART_putchar('\r', stream);
    1bb6:	8d e0       	ldi	r24, 0x0D	; 13
    1bb8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <USART_putchar>
	
	// Esperar a que el buffer de transmisión (hardware) esté vacío
	while (!(UCSR0A & (1 << UDRE0)))
    1bbc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1bc0:	85 ff       	sbrs	r24, 5
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <USART_putchar+0xe>
	;  // Espera activa
	
	// Enviar el carácter
	UDR0 = c;
    1bc4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <USART_getchar>:


int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
    1bd0:	ea e6       	ldi	r30, 0x6A	; 106
    1bd2:	f7 e0       	ldi	r31, 0x07	; 7
    1bd4:	21 81       	ldd	r18, Z+1	; 0x01
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 17       	cp	r18, r24
    1bda:	a9 f0       	breq	.+42     	; 0x1c06 <USART_getchar+0x36>
	return -1;
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	f9 01       	movw	r30, r18
    1be0:	e6 59       	subi	r30, 0x96	; 150
    1be2:	f8 4f       	sbci	r31, 0xF8	; 248
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	2f 71       	andi	r18, 0x1F	; 31
    1bec:	30 78       	andi	r19, 0x80	; 128
    1bee:	33 23       	and	r19, r19
    1bf0:	34 f4       	brge	.+12     	; 0x1bfe <USART_getchar+0x2e>
    1bf2:	21 50       	subi	r18, 0x01	; 1
    1bf4:	31 09       	sbc	r19, r1
    1bf6:	20 6e       	ori	r18, 0xE0	; 224
    1bf8:	3f 6f       	ori	r19, 0xFF	; 255
    1bfa:	2f 5f       	subi	r18, 0xFF	; 255
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	20 93 6b 07 	sts	0x076B, r18	; 0x80076b <protocolService+0x1>
	return data;
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	08 95       	ret

int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
	return -1;
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	return data;
}
    1c0a:	08 95       	ret

00001c0c <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	66 87       	std	Z+14, r22	; 0x0e
    1c10:	08 95       	ret

00001c12 <ultrasonic_calculate_distance>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	ae 81       	ldd	r26, Y+6	; 0x06
    1c22:	bf 81       	ldd	r27, Y+7	; 0x07
    1c24:	48 81       	ld	r20, Y
    1c26:	59 81       	ldd	r21, Y+1	; 0x01
    1c28:	6a 81       	ldd	r22, Y+2	; 0x02
    1c2a:	7b 81       	ldd	r23, Y+3	; 0x03
    1c2c:	8c 01       	movw	r16, r24
    1c2e:	9d 01       	movw	r18, r26
    1c30:	04 1b       	sub	r16, r20
    1c32:	15 0b       	sbc	r17, r21
    1c34:	26 0b       	sbc	r18, r22
    1c36:	37 0b       	sbc	r19, r23
    1c38:	b9 01       	movw	r22, r18
    1c3a:	a8 01       	movw	r20, r16
    1c3c:	d9 01       	movw	r26, r18
    1c3e:	c8 01       	movw	r24, r16
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	aa 1f       	adc	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	aa 1f       	adc	r26, r26
    1c56:	bb 1f       	adc	r27, r27
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	aa 1f       	adc	r26, r26
    1c5e:	bb 1f       	adc	r27, r27
    1c60:	8c 01       	movw	r16, r24
    1c62:	9d 01       	movw	r18, r26
    1c64:	04 0f       	add	r16, r20
    1c66:	15 1f       	adc	r17, r21
    1c68:	26 1f       	adc	r18, r22
    1c6a:	37 1f       	adc	r19, r23
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	b8 01       	movw	r22, r16
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	20 e9       	ldi	r18, 0x90	; 144
    1c7a:	31 e0       	ldi	r19, 0x01	; 1
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
    1c84:	28 87       	std	Y+8, r18	; 0x08
    1c86:	39 87       	std	Y+9, r19	; 0x09
    1c88:	4a 87       	std	Y+10, r20	; 0x0a
    1c8a:	5b 87       	std	Y+11, r21	; 0x0b
    1c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c8e:	80 68       	ori	r24, 0x80	; 128
    1c90:	8c 87       	std	Y+12, r24	; 0x0c
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

00001c9c <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	1f 96       	adiw	r26, 0x0f	; 15
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	50 97       	sbiw	r26, 0x10	; 16
    1ca6:	30 97       	sbiw	r30, 0x00	; 0
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <ultrasonic_print+0x12>
    1caa:	cb 01       	movw	r24, r22
		us->print_method(message);
    1cac:	09 95       	icall
    1cae:	08 95       	ret

00001cb0 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1cb6:	18 82       	st	Y, r1
    1cb8:	19 82       	std	Y+1, r1	; 0x01
    1cba:	1a 82       	std	Y+2, r1	; 0x02
    1cbc:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    1cbe:	1c 82       	std	Y+4, r1	; 0x04
    1cc0:	1d 82       	std	Y+5, r1	; 0x05
    1cc2:	1e 82       	std	Y+6, r1	; 0x06
    1cc4:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1cc6:	18 86       	std	Y+8, r1	; 0x08
    1cc8:	19 86       	std	Y+9, r1	; 0x09
    1cca:	1a 86       	std	Y+10, r1	; 0x0a
    1ccc:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    1cce:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cd2:	80 62       	ori	r24, 0x20	; 32
    1cd4:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1cd6:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1cd8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cde:	98 89       	ldd	r25, Y+16	; 0x10
    1ce0:	89 2b       	or	r24, r25
    1ce2:	41 f0       	breq	.+16     	; 0x1cf4 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce6:	88 23       	and	r24, r24
    1ce8:	29 f0       	breq	.+10     	; 0x1cf4 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1cea:	6d e8       	ldi	r22, 0x8D	; 141
    1cec:	75 e0       	ldi	r23, 0x05	; 5
    1cee:	ce 01       	movw	r24, r28
    1cf0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
		}
	}
}
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	ec 01       	movw	r28, r24
    1d04:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1d06:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ultrasonic_init_flags>
	us->debugMode = true;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    1d0e:	01 15       	cp	r16, r1
    1d10:	11 05       	cpc	r17, r1
    1d12:	19 f4       	brne	.+6      	; 0x1d1a <ultrasonic_init+0x20>
		us->print_method = NULL;
    1d14:	18 8a       	std	Y+16, r1	; 0x10
    1d16:	1f 86       	std	Y+15, r1	; 0x0f
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    1d1a:	18 8b       	std	Y+16, r17	; 0x10
    1d1c:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    1d1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d20:	88 23       	and	r24, r24
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1d24:	6c ea       	ldi	r22, 0xAC	; 172
    1d26:	75 e0       	ldi	r23, 0x05	; 5
    1d28:	ce 01       	movw	r24, r28
    1d2a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
		}
	}
}
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	08 95       	ret

00001d38 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    1d3e:	fc 01       	movw	r30, r24
    1d40:	25 85       	ldd	r18, Z+13	; 0x0d
    1d42:	26 30       	cpi	r18, 0x06	; 6
    1d44:	71 f4       	brne	.+28     	; 0x1d62 <ultrasonic_timeout_clear+0x2a>
    1d46:	16 2f       	mov	r17, r22
    1d48:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    1d4a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ultrasonic_init_flags>
		us->debugMode = state;
    1d4e:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    1d50:	1e 85       	ldd	r17, Y+14	; 0x0e
    1d52:	11 23       	and	r17, r17
    1d54:	41 f0       	breq	.+16     	; 0x1d66 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    1d56:	6f e8       	ldi	r22, 0x8F	; 143
    1d58:	73 e0       	ldi	r23, 0x03	; 3
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    1d62:	10 e0       	ldi	r17, 0x00	; 0
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    1d66:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    1d68:	81 2f       	mov	r24, r17
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	08 95       	ret

00001d72 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    1d72:	cf 93       	push	r28
    1d74:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    1d76:	85 85       	ldd	r24, Z+13	; 0x0d
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <ultrasonic_start+0x10>
    1d7c:	85 85       	ldd	r24, Z+13	; 0x0d
    1d7e:	85 30       	cpi	r24, 0x05	; 5
    1d80:	c1 f4       	brne	.+48     	; 0x1db2 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    1d82:	84 85       	ldd	r24, Z+12	; 0x0c
    1d84:	85 ff       	sbrs	r24, 5
    1d86:	0b c0       	rjmp	.+22     	; 0x1d9e <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    1d8c:	c6 85       	ldd	r28, Z+14	; 0x0e
    1d8e:	cc 23       	and	r28, r28
    1d90:	d1 f0       	breq	.+52     	; 0x1dc6 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    1d92:	68 ec       	ldi	r22, 0xC8	; 200
    1d94:	75 e0       	ldi	r23, 0x05	; 5
    1d96:	cf 01       	movw	r24, r30
    1d98:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
    1d9c:	15 c0       	rjmp	.+42     	; 0x1dc8 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    1d9e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1da0:	cc 23       	and	r28, r28
    1da2:	91 f0       	breq	.+36     	; 0x1dc8 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1da4:	67 ef       	ldi	r22, 0xF7	; 247
    1da6:	75 e0       	ldi	r23, 0x05	; 5
    1da8:	cf 01       	movw	r24, r30
    1daa:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    1dae:	c0 e0       	ldi	r28, 0x00	; 0
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    1db2:	c6 85       	ldd	r28, Z+14	; 0x0e
    1db4:	cc 23       	and	r28, r28
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    1db8:	6e e2       	ldi	r22, 0x2E	; 46
    1dba:	76 e0       	ldi	r23, 0x06	; 6
    1dbc:	cf 01       	movw	r24, r30
    1dbe:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
			}
	}
	return false;
    1dc2:	c0 e0       	ldi	r28, 0x00	; 0
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    1dc6:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    1dc8:	8c 2f       	mov	r24, r28
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
	switch (us->state)
    1dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	71 f1       	breq	.+92     	; 0x1e36 <ultrasonic_update+0x68>
    1dda:	28 f4       	brcc	.+10     	; 0x1de6 <ultrasonic_update+0x18>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	49 f0       	breq	.+18     	; 0x1df2 <ultrasonic_update+0x24>
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	a1 f0       	breq	.+40     	; 0x1e0c <ultrasonic_update+0x3e>
    1de4:	55 c0       	rjmp	.+170    	; 0x1e90 <ultrasonic_update+0xc2>
    1de6:	84 30       	cpi	r24, 0x04	; 4
    1de8:	e1 f1       	breq	.+120    	; 0x1e62 <ultrasonic_update+0x94>
    1dea:	86 30       	cpi	r24, 0x06	; 6
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <ultrasonic_update+0x22>
    1dee:	4d c0       	rjmp	.+154    	; 0x1e8a <ultrasonic_update+0xbc>
    1df0:	4f c0       	rjmp	.+158    	; 0x1e90 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1df2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1df4:	81 ff       	sbrs	r24, 1
    1df6:	4c c0       	rjmp	.+152    	; 0x1e90 <ultrasonic_update+0xc2>
				if(us->debugMode){
    1df8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <ultrasonic_update+0x32>
    1dfe:	48 c0       	rjmp	.+144    	; 0x1e90 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1e00:	6b e5       	ldi	r22, 0x5B	; 91
    1e02:	76 e0       	ldi	r23, 0x06	; 6
    1e04:	ce 01       	movw	r24, r28
    1e06:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
    1e0a:	42 c0       	rjmp	.+132    	; 0x1e90 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    1e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e0e:	84 fd       	sbrc	r24, 4
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    1e16:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    1e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1c:	88 23       	and	r24, r24
    1e1e:	29 f0       	breq	.+10     	; 0x1e2a <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    1e20:	6a e7       	ldi	r22, 0x7A	; 122
    1e22:	76 e0       	ldi	r23, 0x06	; 6
    1e24:	ce 01       	movw	r24, r28
    1e26:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    1e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2c:	83 ff       	sbrs	r24, 3
    1e2e:	30 c0       	rjmp	.+96     	; 0x1e90 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	8d 87       	std	Y+13, r24	; 0x0d
    1e34:	2d c0       	rjmp	.+90     	; 0x1e90 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    1e36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e38:	86 ff       	sbrs	r24, 6
    1e3a:	0d c0       	rjmp	.+26     	; 0x1e56 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    1e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e42:	88 23       	and	r24, r24
    1e44:	29 f0       	breq	.+10     	; 0x1e50 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    1e46:	67 e9       	ldi	r22, 0x97	; 151
    1e48:	76 e0       	ldi	r23, 0x06	; 6
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    1e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e52:	84 60       	ori	r24, 0x04	; 4
    1e54:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    1e56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e58:	83 ff       	sbrs	r24, 3
    1e5a:	1a c0       	rjmp	.+52     	; 0x1e90 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1e5c:	86 e0       	ldi	r24, 0x06	; 6
    1e5e:	8d 87       	std	Y+13, r24	; 0x0d
    1e60:	17 c0       	rjmp	.+46     	; 0x1e90 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    1e62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e64:	82 ff       	sbrs	r24, 2
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    1e68:	ce 01       	movw	r24, r28
    1e6a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    1e6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e70:	8b 7f       	andi	r24, 0xFB	; 251
    1e72:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	88 23       	and	r24, r24
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    1e7a:	6e ea       	ldi	r22, 0xAE	; 174
    1e7c:	76 e0       	ldi	r23, 0x06	; 6
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    1e84:	85 e0       	ldi	r24, 0x05	; 5
    1e86:	8d 87       	std	Y+13, r24	; 0x0d
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    1e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e8c:	88 60       	ori	r24, 0x08	; 8
    1e8e:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <__udivmodsi4>:
    1e96:	a1 e2       	ldi	r26, 0x21	; 33
    1e98:	1a 2e       	mov	r1, r26
    1e9a:	aa 1b       	sub	r26, r26
    1e9c:	bb 1b       	sub	r27, r27
    1e9e:	fd 01       	movw	r30, r26
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <__udivmodsi4_ep>

00001ea2 <__udivmodsi4_loop>:
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	ee 1f       	adc	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	a2 17       	cp	r26, r18
    1eac:	b3 07       	cpc	r27, r19
    1eae:	e4 07       	cpc	r30, r20
    1eb0:	f5 07       	cpc	r31, r21
    1eb2:	20 f0       	brcs	.+8      	; 0x1ebc <__udivmodsi4_ep>
    1eb4:	a2 1b       	sub	r26, r18
    1eb6:	b3 0b       	sbc	r27, r19
    1eb8:	e4 0b       	sbc	r30, r20
    1eba:	f5 0b       	sbc	r31, r21

00001ebc <__udivmodsi4_ep>:
    1ebc:	66 1f       	adc	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	1a 94       	dec	r1
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <__udivmodsi4_loop>
    1ec8:	60 95       	com	r22
    1eca:	70 95       	com	r23
    1ecc:	80 95       	com	r24
    1ece:	90 95       	com	r25
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	bd 01       	movw	r22, r26
    1ed6:	cf 01       	movw	r24, r30
    1ed8:	08 95       	ret

00001eda <__umulhisi3>:
    1eda:	a2 9f       	mul	r26, r18
    1edc:	b0 01       	movw	r22, r0
    1ede:	b3 9f       	mul	r27, r19
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	a3 9f       	mul	r26, r19
    1ee4:	70 0d       	add	r23, r0
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	11 24       	eor	r1, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	b2 9f       	mul	r27, r18
    1eee:	70 0d       	add	r23, r0
    1ef0:	81 1d       	adc	r24, r1
    1ef2:	11 24       	eor	r1, r1
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	08 95       	ret

00001ef8 <__muluhisi3>:
    1ef8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__umulhisi3>
    1efc:	a5 9f       	mul	r26, r21
    1efe:	90 0d       	add	r25, r0
    1f00:	b4 9f       	mul	r27, r20
    1f02:	90 0d       	add	r25, r0
    1f04:	a4 9f       	mul	r26, r20
    1f06:	80 0d       	add	r24, r0
    1f08:	91 1d       	adc	r25, r1
    1f0a:	11 24       	eor	r1, r1
    1f0c:	08 95       	ret

00001f0e <printf>:
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ed e8       	ldi	r30, 0x8D	; 141
    1f14:	ff e0       	ldi	r31, 0x0F	; 15
    1f16:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__prologue_saves__+0x20>
    1f1a:	ae 01       	movw	r20, r28
    1f1c:	4b 5f       	subi	r20, 0xFB	; 251
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	fa 01       	movw	r30, r20
    1f22:	61 91       	ld	r22, Z+
    1f24:	71 91       	ld	r23, Z+
    1f26:	af 01       	movw	r20, r30
    1f28:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <__iob+0x2>
    1f2c:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <__iob+0x3>
    1f30:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <vfprintf>
    1f34:	e2 e0       	ldi	r30, 0x02	; 2
    1f36:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__epilogue_restores__+0x20>

00001f3a <printf_P>:
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1f40:	ff e0       	ldi	r31, 0x0F	; 15
    1f42:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__prologue_saves__+0x1c>
    1f46:	ae 01       	movw	r20, r28
    1f48:	49 5f       	subi	r20, 0xF9	; 249
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	da 01       	movw	r26, r20
    1f4e:	6d 91       	ld	r22, X+
    1f50:	7d 91       	ld	r23, X+
    1f52:	ad 01       	movw	r20, r26
    1f54:	03 ea       	ldi	r16, 0xA3	; 163
    1f56:	17 e0       	ldi	r17, 0x07	; 7
    1f58:	f8 01       	movw	r30, r16
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	dc 01       	movw	r26, r24
    1f60:	13 96       	adiw	r26, 0x03	; 3
    1f62:	2c 91       	ld	r18, X
    1f64:	13 97       	sbiw	r26, 0x03	; 3
    1f66:	28 60       	ori	r18, 0x08	; 8
    1f68:	13 96       	adiw	r26, 0x03	; 3
    1f6a:	2c 93       	st	X, r18
    1f6c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <vfprintf>
    1f70:	d8 01       	movw	r26, r16
    1f72:	12 96       	adiw	r26, 0x02	; 2
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	13 97       	sbiw	r26, 0x03	; 3
    1f7a:	23 81       	ldd	r18, Z+3	; 0x03
    1f7c:	27 7f       	andi	r18, 0xF7	; 247
    1f7e:	23 83       	std	Z+3, r18	; 0x03
    1f80:	e4 e0       	ldi	r30, 0x04	; 4
    1f82:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__epilogue_restores__+0x1c>

00001f86 <puts>:
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	e0 91 a5 07 	lds	r30, 0x07A5	; 0x8007a5 <__iob+0x2>
    1f92:	f0 91 a6 07 	lds	r31, 0x07A6	; 0x8007a6 <__iob+0x3>
    1f96:	23 81       	ldd	r18, Z+3	; 0x03
    1f98:	21 ff       	sbrs	r18, 1
    1f9a:	1b c0       	rjmp	.+54     	; 0x1fd2 <puts+0x4c>
    1f9c:	8c 01       	movw	r16, r24
    1f9e:	d0 e0       	ldi	r29, 0x00	; 0
    1fa0:	c0 e0       	ldi	r28, 0x00	; 0
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	81 91       	ld	r24, Z+
    1fa6:	8f 01       	movw	r16, r30
    1fa8:	60 91 a5 07 	lds	r22, 0x07A5	; 0x8007a5 <__iob+0x2>
    1fac:	70 91 a6 07 	lds	r23, 0x07A6	; 0x8007a6 <__iob+0x3>
    1fb0:	db 01       	movw	r26, r22
    1fb2:	18 96       	adiw	r26, 0x08	; 8
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	19 97       	sbiw	r26, 0x09	; 9
    1fba:	88 23       	and	r24, r24
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <puts+0x44>
    1fbe:	09 95       	icall
    1fc0:	89 2b       	or	r24, r25
    1fc2:	79 f3       	breq	.-34     	; 0x1fa2 <puts+0x1c>
    1fc4:	df ef       	ldi	r29, 0xFF	; 255
    1fc6:	cf ef       	ldi	r28, 0xFF	; 255
    1fc8:	ec cf       	rjmp	.-40     	; 0x1fa2 <puts+0x1c>
    1fca:	8a e0       	ldi	r24, 0x0A	; 10
    1fcc:	09 95       	icall
    1fce:	89 2b       	or	r24, r25
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <puts+0x52>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	9f ef       	ldi	r25, 0xFF	; 255
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <puts+0x56>
    1fd8:	8d 2f       	mov	r24, r29
    1fda:	9c 2f       	mov	r25, r28
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <vfprintf>:
    1fe6:	ab e0       	ldi	r26, 0x0B	; 11
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e9 ef       	ldi	r30, 0xF9	; 249
    1fec:	ff e0       	ldi	r31, 0x0F	; 15
    1fee:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__>
    1ff2:	6c 01       	movw	r12, r24
    1ff4:	7b 01       	movw	r14, r22
    1ff6:	8a 01       	movw	r16, r20
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	17 82       	std	Z+7, r1	; 0x07
    1ffc:	16 82       	std	Z+6, r1	; 0x06
    1ffe:	83 81       	ldd	r24, Z+3	; 0x03
    2000:	81 ff       	sbrs	r24, 1
    2002:	cc c1       	rjmp	.+920    	; 0x239c <vfprintf+0x3b6>
    2004:	ce 01       	movw	r24, r28
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	3c 01       	movw	r6, r24
    200a:	f6 01       	movw	r30, r12
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	f7 01       	movw	r30, r14
    2010:	93 fd       	sbrc	r25, 3
    2012:	85 91       	lpm	r24, Z+
    2014:	93 ff       	sbrs	r25, 3
    2016:	81 91       	ld	r24, Z+
    2018:	7f 01       	movw	r14, r30
    201a:	88 23       	and	r24, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <vfprintf+0x3a>
    201e:	ba c1       	rjmp	.+884    	; 0x2394 <vfprintf+0x3ae>
    2020:	85 32       	cpi	r24, 0x25	; 37
    2022:	39 f4       	brne	.+14     	; 0x2032 <vfprintf+0x4c>
    2024:	93 fd       	sbrc	r25, 3
    2026:	85 91       	lpm	r24, Z+
    2028:	93 ff       	sbrs	r25, 3
    202a:	81 91       	ld	r24, Z+
    202c:	7f 01       	movw	r14, r30
    202e:	85 32       	cpi	r24, 0x25	; 37
    2030:	29 f4       	brne	.+10     	; 0x203c <vfprintf+0x56>
    2032:	b6 01       	movw	r22, r12
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    203a:	e7 cf       	rjmp	.-50     	; 0x200a <vfprintf+0x24>
    203c:	91 2c       	mov	r9, r1
    203e:	21 2c       	mov	r2, r1
    2040:	31 2c       	mov	r3, r1
    2042:	ff e1       	ldi	r31, 0x1F	; 31
    2044:	f3 15       	cp	r31, r3
    2046:	d8 f0       	brcs	.+54     	; 0x207e <vfprintf+0x98>
    2048:	8b 32       	cpi	r24, 0x2B	; 43
    204a:	79 f0       	breq	.+30     	; 0x206a <vfprintf+0x84>
    204c:	38 f4       	brcc	.+14     	; 0x205c <vfprintf+0x76>
    204e:	80 32       	cpi	r24, 0x20	; 32
    2050:	79 f0       	breq	.+30     	; 0x2070 <vfprintf+0x8a>
    2052:	83 32       	cpi	r24, 0x23	; 35
    2054:	a1 f4       	brne	.+40     	; 0x207e <vfprintf+0x98>
    2056:	23 2d       	mov	r18, r3
    2058:	20 61       	ori	r18, 0x10	; 16
    205a:	1d c0       	rjmp	.+58     	; 0x2096 <vfprintf+0xb0>
    205c:	8d 32       	cpi	r24, 0x2D	; 45
    205e:	61 f0       	breq	.+24     	; 0x2078 <vfprintf+0x92>
    2060:	80 33       	cpi	r24, 0x30	; 48
    2062:	69 f4       	brne	.+26     	; 0x207e <vfprintf+0x98>
    2064:	23 2d       	mov	r18, r3
    2066:	21 60       	ori	r18, 0x01	; 1
    2068:	16 c0       	rjmp	.+44     	; 0x2096 <vfprintf+0xb0>
    206a:	83 2d       	mov	r24, r3
    206c:	82 60       	ori	r24, 0x02	; 2
    206e:	38 2e       	mov	r3, r24
    2070:	e3 2d       	mov	r30, r3
    2072:	e4 60       	ori	r30, 0x04	; 4
    2074:	3e 2e       	mov	r3, r30
    2076:	2a c0       	rjmp	.+84     	; 0x20cc <vfprintf+0xe6>
    2078:	f3 2d       	mov	r31, r3
    207a:	f8 60       	ori	r31, 0x08	; 8
    207c:	1d c0       	rjmp	.+58     	; 0x20b8 <vfprintf+0xd2>
    207e:	37 fc       	sbrc	r3, 7
    2080:	2d c0       	rjmp	.+90     	; 0x20dc <vfprintf+0xf6>
    2082:	20 ed       	ldi	r18, 0xD0	; 208
    2084:	28 0f       	add	r18, r24
    2086:	2a 30       	cpi	r18, 0x0A	; 10
    2088:	40 f0       	brcs	.+16     	; 0x209a <vfprintf+0xb4>
    208a:	8e 32       	cpi	r24, 0x2E	; 46
    208c:	b9 f4       	brne	.+46     	; 0x20bc <vfprintf+0xd6>
    208e:	36 fc       	sbrc	r3, 6
    2090:	81 c1       	rjmp	.+770    	; 0x2394 <vfprintf+0x3ae>
    2092:	23 2d       	mov	r18, r3
    2094:	20 64       	ori	r18, 0x40	; 64
    2096:	32 2e       	mov	r3, r18
    2098:	19 c0       	rjmp	.+50     	; 0x20cc <vfprintf+0xe6>
    209a:	36 fe       	sbrs	r3, 6
    209c:	06 c0       	rjmp	.+12     	; 0x20aa <vfprintf+0xc4>
    209e:	8a e0       	ldi	r24, 0x0A	; 10
    20a0:	98 9e       	mul	r9, r24
    20a2:	20 0d       	add	r18, r0
    20a4:	11 24       	eor	r1, r1
    20a6:	92 2e       	mov	r9, r18
    20a8:	11 c0       	rjmp	.+34     	; 0x20cc <vfprintf+0xe6>
    20aa:	ea e0       	ldi	r30, 0x0A	; 10
    20ac:	2e 9e       	mul	r2, r30
    20ae:	20 0d       	add	r18, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	22 2e       	mov	r2, r18
    20b4:	f3 2d       	mov	r31, r3
    20b6:	f0 62       	ori	r31, 0x20	; 32
    20b8:	3f 2e       	mov	r3, r31
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <vfprintf+0xe6>
    20bc:	8c 36       	cpi	r24, 0x6C	; 108
    20be:	21 f4       	brne	.+8      	; 0x20c8 <vfprintf+0xe2>
    20c0:	83 2d       	mov	r24, r3
    20c2:	80 68       	ori	r24, 0x80	; 128
    20c4:	38 2e       	mov	r3, r24
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0xe6>
    20c8:	88 36       	cpi	r24, 0x68	; 104
    20ca:	41 f4       	brne	.+16     	; 0x20dc <vfprintf+0xf6>
    20cc:	f7 01       	movw	r30, r14
    20ce:	93 fd       	sbrc	r25, 3
    20d0:	85 91       	lpm	r24, Z+
    20d2:	93 ff       	sbrs	r25, 3
    20d4:	81 91       	ld	r24, Z+
    20d6:	7f 01       	movw	r14, r30
    20d8:	81 11       	cpse	r24, r1
    20da:	b3 cf       	rjmp	.-154    	; 0x2042 <vfprintf+0x5c>
    20dc:	98 2f       	mov	r25, r24
    20de:	9f 7d       	andi	r25, 0xDF	; 223
    20e0:	95 54       	subi	r25, 0x45	; 69
    20e2:	93 30       	cpi	r25, 0x03	; 3
    20e4:	28 f4       	brcc	.+10     	; 0x20f0 <vfprintf+0x10a>
    20e6:	0c 5f       	subi	r16, 0xFC	; 252
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	9f e3       	ldi	r25, 0x3F	; 63
    20ec:	99 83       	std	Y+1, r25	; 0x01
    20ee:	0d c0       	rjmp	.+26     	; 0x210a <vfprintf+0x124>
    20f0:	83 36       	cpi	r24, 0x63	; 99
    20f2:	31 f0       	breq	.+12     	; 0x2100 <vfprintf+0x11a>
    20f4:	83 37       	cpi	r24, 0x73	; 115
    20f6:	71 f0       	breq	.+28     	; 0x2114 <vfprintf+0x12e>
    20f8:	83 35       	cpi	r24, 0x53	; 83
    20fa:	09 f0       	breq	.+2      	; 0x20fe <vfprintf+0x118>
    20fc:	59 c0       	rjmp	.+178    	; 0x21b0 <vfprintf+0x1ca>
    20fe:	21 c0       	rjmp	.+66     	; 0x2142 <vfprintf+0x15c>
    2100:	f8 01       	movw	r30, r16
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0e 5f       	subi	r16, 0xFE	; 254
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	88 24       	eor	r8, r8
    210c:	83 94       	inc	r8
    210e:	91 2c       	mov	r9, r1
    2110:	53 01       	movw	r10, r6
    2112:	13 c0       	rjmp	.+38     	; 0x213a <vfprintf+0x154>
    2114:	28 01       	movw	r4, r16
    2116:	f2 e0       	ldi	r31, 0x02	; 2
    2118:	4f 0e       	add	r4, r31
    211a:	51 1c       	adc	r5, r1
    211c:	f8 01       	movw	r30, r16
    211e:	a0 80       	ld	r10, Z
    2120:	b1 80       	ldd	r11, Z+1	; 0x01
    2122:	36 fe       	sbrs	r3, 6
    2124:	03 c0       	rjmp	.+6      	; 0x212c <vfprintf+0x146>
    2126:	69 2d       	mov	r22, r9
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <vfprintf+0x14a>
    212c:	6f ef       	ldi	r22, 0xFF	; 255
    212e:	7f ef       	ldi	r23, 0xFF	; 255
    2130:	c5 01       	movw	r24, r10
    2132:	0e 94 df 11 	call	0x23be	; 0x23be <strnlen>
    2136:	4c 01       	movw	r8, r24
    2138:	82 01       	movw	r16, r4
    213a:	f3 2d       	mov	r31, r3
    213c:	ff 77       	andi	r31, 0x7F	; 127
    213e:	3f 2e       	mov	r3, r31
    2140:	16 c0       	rjmp	.+44     	; 0x216e <vfprintf+0x188>
    2142:	28 01       	movw	r4, r16
    2144:	22 e0       	ldi	r18, 0x02	; 2
    2146:	42 0e       	add	r4, r18
    2148:	51 1c       	adc	r5, r1
    214a:	f8 01       	movw	r30, r16
    214c:	a0 80       	ld	r10, Z
    214e:	b1 80       	ldd	r11, Z+1	; 0x01
    2150:	36 fe       	sbrs	r3, 6
    2152:	03 c0       	rjmp	.+6      	; 0x215a <vfprintf+0x174>
    2154:	69 2d       	mov	r22, r9
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	02 c0       	rjmp	.+4      	; 0x215e <vfprintf+0x178>
    215a:	6f ef       	ldi	r22, 0xFF	; 255
    215c:	7f ef       	ldi	r23, 0xFF	; 255
    215e:	c5 01       	movw	r24, r10
    2160:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <strnlen_P>
    2164:	4c 01       	movw	r8, r24
    2166:	f3 2d       	mov	r31, r3
    2168:	f0 68       	ori	r31, 0x80	; 128
    216a:	3f 2e       	mov	r3, r31
    216c:	82 01       	movw	r16, r4
    216e:	33 fc       	sbrc	r3, 3
    2170:	1b c0       	rjmp	.+54     	; 0x21a8 <vfprintf+0x1c2>
    2172:	82 2d       	mov	r24, r2
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	88 16       	cp	r8, r24
    2178:	99 06       	cpc	r9, r25
    217a:	b0 f4       	brcc	.+44     	; 0x21a8 <vfprintf+0x1c2>
    217c:	b6 01       	movw	r22, r12
    217e:	80 e2       	ldi	r24, 0x20	; 32
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2186:	2a 94       	dec	r2
    2188:	f4 cf       	rjmp	.-24     	; 0x2172 <vfprintf+0x18c>
    218a:	f5 01       	movw	r30, r10
    218c:	37 fc       	sbrc	r3, 7
    218e:	85 91       	lpm	r24, Z+
    2190:	37 fe       	sbrs	r3, 7
    2192:	81 91       	ld	r24, Z+
    2194:	5f 01       	movw	r10, r30
    2196:	b6 01       	movw	r22, r12
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    219e:	21 10       	cpse	r2, r1
    21a0:	2a 94       	dec	r2
    21a2:	21 e0       	ldi	r18, 0x01	; 1
    21a4:	82 1a       	sub	r8, r18
    21a6:	91 08       	sbc	r9, r1
    21a8:	81 14       	cp	r8, r1
    21aa:	91 04       	cpc	r9, r1
    21ac:	71 f7       	brne	.-36     	; 0x218a <vfprintf+0x1a4>
    21ae:	e8 c0       	rjmp	.+464    	; 0x2380 <vfprintf+0x39a>
    21b0:	84 36       	cpi	r24, 0x64	; 100
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <vfprintf+0x1d2>
    21b4:	89 36       	cpi	r24, 0x69	; 105
    21b6:	41 f5       	brne	.+80     	; 0x2208 <vfprintf+0x222>
    21b8:	f8 01       	movw	r30, r16
    21ba:	37 fe       	sbrs	r3, 7
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <vfprintf+0x1e6>
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	0c 5f       	subi	r16, 0xFC	; 252
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	08 c0       	rjmp	.+16     	; 0x21dc <vfprintf+0x1f6>
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	07 2e       	mov	r0, r23
    21d2:	00 0c       	add	r0, r0
    21d4:	88 0b       	sbc	r24, r24
    21d6:	99 0b       	sbc	r25, r25
    21d8:	0e 5f       	subi	r16, 0xFE	; 254
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	f3 2d       	mov	r31, r3
    21de:	ff 76       	andi	r31, 0x6F	; 111
    21e0:	3f 2e       	mov	r3, r31
    21e2:	97 ff       	sbrs	r25, 7
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <vfprintf+0x212>
    21e6:	90 95       	com	r25
    21e8:	80 95       	com	r24
    21ea:	70 95       	com	r23
    21ec:	61 95       	neg	r22
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	f0 68       	ori	r31, 0x80	; 128
    21f6:	3f 2e       	mov	r3, r31
    21f8:	2a e0       	ldi	r18, 0x0A	; 10
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	a3 01       	movw	r20, r6
    21fe:	0e 94 26 12 	call	0x244c	; 0x244c <__ultoa_invert>
    2202:	88 2e       	mov	r8, r24
    2204:	86 18       	sub	r8, r6
    2206:	45 c0       	rjmp	.+138    	; 0x2292 <vfprintf+0x2ac>
    2208:	85 37       	cpi	r24, 0x75	; 117
    220a:	31 f4       	brne	.+12     	; 0x2218 <vfprintf+0x232>
    220c:	23 2d       	mov	r18, r3
    220e:	2f 7e       	andi	r18, 0xEF	; 239
    2210:	b2 2e       	mov	r11, r18
    2212:	2a e0       	ldi	r18, 0x0A	; 10
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	25 c0       	rjmp	.+74     	; 0x2262 <vfprintf+0x27c>
    2218:	93 2d       	mov	r25, r3
    221a:	99 7f       	andi	r25, 0xF9	; 249
    221c:	b9 2e       	mov	r11, r25
    221e:	8f 36       	cpi	r24, 0x6F	; 111
    2220:	c1 f0       	breq	.+48     	; 0x2252 <vfprintf+0x26c>
    2222:	18 f4       	brcc	.+6      	; 0x222a <vfprintf+0x244>
    2224:	88 35       	cpi	r24, 0x58	; 88
    2226:	79 f0       	breq	.+30     	; 0x2246 <vfprintf+0x260>
    2228:	b5 c0       	rjmp	.+362    	; 0x2394 <vfprintf+0x3ae>
    222a:	80 37       	cpi	r24, 0x70	; 112
    222c:	19 f0       	breq	.+6      	; 0x2234 <vfprintf+0x24e>
    222e:	88 37       	cpi	r24, 0x78	; 120
    2230:	21 f0       	breq	.+8      	; 0x223a <vfprintf+0x254>
    2232:	b0 c0       	rjmp	.+352    	; 0x2394 <vfprintf+0x3ae>
    2234:	e9 2f       	mov	r30, r25
    2236:	e0 61       	ori	r30, 0x10	; 16
    2238:	be 2e       	mov	r11, r30
    223a:	b4 fe       	sbrs	r11, 4
    223c:	0d c0       	rjmp	.+26     	; 0x2258 <vfprintf+0x272>
    223e:	fb 2d       	mov	r31, r11
    2240:	f4 60       	ori	r31, 0x04	; 4
    2242:	bf 2e       	mov	r11, r31
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <vfprintf+0x272>
    2246:	34 fe       	sbrs	r3, 4
    2248:	0a c0       	rjmp	.+20     	; 0x225e <vfprintf+0x278>
    224a:	29 2f       	mov	r18, r25
    224c:	26 60       	ori	r18, 0x06	; 6
    224e:	b2 2e       	mov	r11, r18
    2250:	06 c0       	rjmp	.+12     	; 0x225e <vfprintf+0x278>
    2252:	28 e0       	ldi	r18, 0x08	; 8
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <vfprintf+0x27c>
    2258:	20 e1       	ldi	r18, 0x10	; 16
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <vfprintf+0x27c>
    225e:	20 e1       	ldi	r18, 0x10	; 16
    2260:	32 e0       	ldi	r19, 0x02	; 2
    2262:	f8 01       	movw	r30, r16
    2264:	b7 fe       	sbrs	r11, 7
    2266:	07 c0       	rjmp	.+14     	; 0x2276 <vfprintf+0x290>
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	0c 5f       	subi	r16, 0xFC	; 252
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	06 c0       	rjmp	.+12     	; 0x2282 <vfprintf+0x29c>
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 5f       	subi	r16, 0xFE	; 254
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	a3 01       	movw	r20, r6
    2284:	0e 94 26 12 	call	0x244c	; 0x244c <__ultoa_invert>
    2288:	88 2e       	mov	r8, r24
    228a:	86 18       	sub	r8, r6
    228c:	fb 2d       	mov	r31, r11
    228e:	ff 77       	andi	r31, 0x7F	; 127
    2290:	3f 2e       	mov	r3, r31
    2292:	36 fe       	sbrs	r3, 6
    2294:	0d c0       	rjmp	.+26     	; 0x22b0 <vfprintf+0x2ca>
    2296:	23 2d       	mov	r18, r3
    2298:	2e 7f       	andi	r18, 0xFE	; 254
    229a:	a2 2e       	mov	r10, r18
    229c:	89 14       	cp	r8, r9
    229e:	58 f4       	brcc	.+22     	; 0x22b6 <vfprintf+0x2d0>
    22a0:	34 fe       	sbrs	r3, 4
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <vfprintf+0x2d4>
    22a4:	32 fc       	sbrc	r3, 2
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <vfprintf+0x2d4>
    22a8:	83 2d       	mov	r24, r3
    22aa:	8e 7e       	andi	r24, 0xEE	; 238
    22ac:	a8 2e       	mov	r10, r24
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <vfprintf+0x2d4>
    22b0:	b8 2c       	mov	r11, r8
    22b2:	a3 2c       	mov	r10, r3
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <vfprintf+0x2d6>
    22b6:	b8 2c       	mov	r11, r8
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <vfprintf+0x2d6>
    22ba:	b9 2c       	mov	r11, r9
    22bc:	a4 fe       	sbrs	r10, 4
    22be:	0f c0       	rjmp	.+30     	; 0x22de <vfprintf+0x2f8>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e8 0d       	add	r30, r8
    22c4:	f1 1d       	adc	r31, r1
    22c6:	80 81       	ld	r24, Z
    22c8:	80 33       	cpi	r24, 0x30	; 48
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <vfprintf+0x2ee>
    22cc:	9a 2d       	mov	r25, r10
    22ce:	99 7e       	andi	r25, 0xE9	; 233
    22d0:	a9 2e       	mov	r10, r25
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <vfprintf+0x300>
    22d4:	a2 fe       	sbrs	r10, 2
    22d6:	06 c0       	rjmp	.+12     	; 0x22e4 <vfprintf+0x2fe>
    22d8:	b3 94       	inc	r11
    22da:	b3 94       	inc	r11
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <vfprintf+0x300>
    22de:	8a 2d       	mov	r24, r10
    22e0:	86 78       	andi	r24, 0x86	; 134
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <vfprintf+0x300>
    22e4:	b3 94       	inc	r11
    22e6:	a3 fc       	sbrc	r10, 3
    22e8:	11 c0       	rjmp	.+34     	; 0x230c <vfprintf+0x326>
    22ea:	a0 fe       	sbrs	r10, 0
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <vfprintf+0x314>
    22ee:	b2 14       	cp	r11, r2
    22f0:	88 f4       	brcc	.+34     	; 0x2314 <vfprintf+0x32e>
    22f2:	28 0c       	add	r2, r8
    22f4:	92 2c       	mov	r9, r2
    22f6:	9b 18       	sub	r9, r11
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <vfprintf+0x330>
    22fa:	b2 14       	cp	r11, r2
    22fc:	60 f4       	brcc	.+24     	; 0x2316 <vfprintf+0x330>
    22fe:	b6 01       	movw	r22, r12
    2300:	80 e2       	ldi	r24, 0x20	; 32
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2308:	b3 94       	inc	r11
    230a:	f7 cf       	rjmp	.-18     	; 0x22fa <vfprintf+0x314>
    230c:	b2 14       	cp	r11, r2
    230e:	18 f4       	brcc	.+6      	; 0x2316 <vfprintf+0x330>
    2310:	2b 18       	sub	r2, r11
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x332>
    2314:	98 2c       	mov	r9, r8
    2316:	21 2c       	mov	r2, r1
    2318:	a4 fe       	sbrs	r10, 4
    231a:	10 c0       	rjmp	.+32     	; 0x233c <vfprintf+0x356>
    231c:	b6 01       	movw	r22, r12
    231e:	80 e3       	ldi	r24, 0x30	; 48
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2326:	a2 fe       	sbrs	r10, 2
    2328:	17 c0       	rjmp	.+46     	; 0x2358 <vfprintf+0x372>
    232a:	a1 fc       	sbrc	r10, 1
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <vfprintf+0x34e>
    232e:	88 e7       	ldi	r24, 0x78	; 120
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x352>
    2334:	88 e5       	ldi	r24, 0x58	; 88
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	b6 01       	movw	r22, r12
    233a:	0c c0       	rjmp	.+24     	; 0x2354 <vfprintf+0x36e>
    233c:	8a 2d       	mov	r24, r10
    233e:	86 78       	andi	r24, 0x86	; 134
    2340:	59 f0       	breq	.+22     	; 0x2358 <vfprintf+0x372>
    2342:	a1 fe       	sbrs	r10, 1
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x364>
    2346:	8b e2       	ldi	r24, 0x2B	; 43
    2348:	01 c0       	rjmp	.+2      	; 0x234c <vfprintf+0x366>
    234a:	80 e2       	ldi	r24, 0x20	; 32
    234c:	a7 fc       	sbrc	r10, 7
    234e:	8d e2       	ldi	r24, 0x2D	; 45
    2350:	b6 01       	movw	r22, r12
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2358:	89 14       	cp	r8, r9
    235a:	38 f4       	brcc	.+14     	; 0x236a <vfprintf+0x384>
    235c:	b6 01       	movw	r22, r12
    235e:	80 e3       	ldi	r24, 0x30	; 48
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2366:	9a 94       	dec	r9
    2368:	f7 cf       	rjmp	.-18     	; 0x2358 <vfprintf+0x372>
    236a:	8a 94       	dec	r8
    236c:	f3 01       	movw	r30, r6
    236e:	e8 0d       	add	r30, r8
    2370:	f1 1d       	adc	r31, r1
    2372:	80 81       	ld	r24, Z
    2374:	b6 01       	movw	r22, r12
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    237c:	81 10       	cpse	r8, r1
    237e:	f5 cf       	rjmp	.-22     	; 0x236a <vfprintf+0x384>
    2380:	22 20       	and	r2, r2
    2382:	09 f4       	brne	.+2      	; 0x2386 <vfprintf+0x3a0>
    2384:	42 ce       	rjmp	.-892    	; 0x200a <vfprintf+0x24>
    2386:	b6 01       	movw	r22, r12
    2388:	80 e2       	ldi	r24, 0x20	; 32
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <fputc>
    2390:	2a 94       	dec	r2
    2392:	f6 cf       	rjmp	.-20     	; 0x2380 <vfprintf+0x39a>
    2394:	f6 01       	movw	r30, r12
    2396:	86 81       	ldd	r24, Z+6	; 0x06
    2398:	97 81       	ldd	r25, Z+7	; 0x07
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x3ba>
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	9f ef       	ldi	r25, 0xFF	; 255
    23a0:	2b 96       	adiw	r28, 0x0b	; 11
    23a2:	e2 e1       	ldi	r30, 0x12	; 18
    23a4:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__>

000023a8 <strnlen_P>:
    23a8:	fc 01       	movw	r30, r24
    23aa:	05 90       	lpm	r0, Z+
    23ac:	61 50       	subi	r22, 0x01	; 1
    23ae:	70 40       	sbci	r23, 0x00	; 0
    23b0:	01 10       	cpse	r0, r1
    23b2:	d8 f7       	brcc	.-10     	; 0x23aa <strnlen_P+0x2>
    23b4:	80 95       	com	r24
    23b6:	90 95       	com	r25
    23b8:	8e 0f       	add	r24, r30
    23ba:	9f 1f       	adc	r25, r31
    23bc:	08 95       	ret

000023be <strnlen>:
    23be:	fc 01       	movw	r30, r24
    23c0:	61 50       	subi	r22, 0x01	; 1
    23c2:	70 40       	sbci	r23, 0x00	; 0
    23c4:	01 90       	ld	r0, Z+
    23c6:	01 10       	cpse	r0, r1
    23c8:	d8 f7       	brcc	.-10     	; 0x23c0 <strnlen+0x2>
    23ca:	80 95       	com	r24
    23cc:	90 95       	com	r25
    23ce:	8e 0f       	add	r24, r30
    23d0:	9f 1f       	adc	r25, r31
    23d2:	08 95       	ret

000023d4 <fputc>:
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	fb 01       	movw	r30, r22
    23de:	23 81       	ldd	r18, Z+3	; 0x03
    23e0:	21 fd       	sbrc	r18, 1
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <fputc+0x16>
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	2c c0       	rjmp	.+88     	; 0x2442 <fputc+0x6e>
    23ea:	22 ff       	sbrs	r18, 2
    23ec:	16 c0       	rjmp	.+44     	; 0x241a <fputc+0x46>
    23ee:	46 81       	ldd	r20, Z+6	; 0x06
    23f0:	57 81       	ldd	r21, Z+7	; 0x07
    23f2:	24 81       	ldd	r18, Z+4	; 0x04
    23f4:	35 81       	ldd	r19, Z+5	; 0x05
    23f6:	42 17       	cp	r20, r18
    23f8:	53 07       	cpc	r21, r19
    23fa:	44 f4       	brge	.+16     	; 0x240c <fputc+0x38>
    23fc:	a0 81       	ld	r26, Z
    23fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2400:	9d 01       	movw	r18, r26
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	31 83       	std	Z+1, r19	; 0x01
    2408:	20 83       	st	Z, r18
    240a:	8c 93       	st	X, r24
    240c:	26 81       	ldd	r18, Z+6	; 0x06
    240e:	37 81       	ldd	r19, Z+7	; 0x07
    2410:	2f 5f       	subi	r18, 0xFF	; 255
    2412:	3f 4f       	sbci	r19, 0xFF	; 255
    2414:	37 83       	std	Z+7, r19	; 0x07
    2416:	26 83       	std	Z+6, r18	; 0x06
    2418:	14 c0       	rjmp	.+40     	; 0x2442 <fputc+0x6e>
    241a:	8b 01       	movw	r16, r22
    241c:	ec 01       	movw	r28, r24
    241e:	fb 01       	movw	r30, r22
    2420:	00 84       	ldd	r0, Z+8	; 0x08
    2422:	f1 85       	ldd	r31, Z+9	; 0x09
    2424:	e0 2d       	mov	r30, r0
    2426:	09 95       	icall
    2428:	89 2b       	or	r24, r25
    242a:	e1 f6       	brne	.-72     	; 0x23e4 <fputc+0x10>
    242c:	d8 01       	movw	r26, r16
    242e:	16 96       	adiw	r26, 0x06	; 6
    2430:	8d 91       	ld	r24, X+
    2432:	9c 91       	ld	r25, X
    2434:	17 97       	sbiw	r26, 0x07	; 7
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	17 96       	adiw	r26, 0x07	; 7
    243a:	9c 93       	st	X, r25
    243c:	8e 93       	st	-X, r24
    243e:	16 97       	sbiw	r26, 0x06	; 6
    2440:	ce 01       	movw	r24, r28
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	08 95       	ret

0000244c <__ultoa_invert>:
    244c:	fa 01       	movw	r30, r20
    244e:	aa 27       	eor	r26, r26
    2450:	28 30       	cpi	r18, 0x08	; 8
    2452:	51 f1       	breq	.+84     	; 0x24a8 <__ultoa_invert+0x5c>
    2454:	20 31       	cpi	r18, 0x10	; 16
    2456:	81 f1       	breq	.+96     	; 0x24b8 <__ultoa_invert+0x6c>
    2458:	e8 94       	clt
    245a:	6f 93       	push	r22
    245c:	6e 7f       	andi	r22, 0xFE	; 254
    245e:	6e 5f       	subi	r22, 0xFE	; 254
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	8f 4f       	sbci	r24, 0xFF	; 255
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	af 4f       	sbci	r26, 0xFF	; 255
    2468:	b1 e0       	ldi	r27, 0x01	; 1
    246a:	3e d0       	rcall	.+124    	; 0x24e8 <__ultoa_invert+0x9c>
    246c:	b4 e0       	ldi	r27, 0x04	; 4
    246e:	3c d0       	rcall	.+120    	; 0x24e8 <__ultoa_invert+0x9c>
    2470:	67 0f       	add	r22, r23
    2472:	78 1f       	adc	r23, r24
    2474:	89 1f       	adc	r24, r25
    2476:	9a 1f       	adc	r25, r26
    2478:	a1 1d       	adc	r26, r1
    247a:	68 0f       	add	r22, r24
    247c:	79 1f       	adc	r23, r25
    247e:	8a 1f       	adc	r24, r26
    2480:	91 1d       	adc	r25, r1
    2482:	a1 1d       	adc	r26, r1
    2484:	6a 0f       	add	r22, r26
    2486:	71 1d       	adc	r23, r1
    2488:	81 1d       	adc	r24, r1
    248a:	91 1d       	adc	r25, r1
    248c:	a1 1d       	adc	r26, r1
    248e:	20 d0       	rcall	.+64     	; 0x24d0 <__ultoa_invert+0x84>
    2490:	09 f4       	brne	.+2      	; 0x2494 <__ultoa_invert+0x48>
    2492:	68 94       	set
    2494:	3f 91       	pop	r19
    2496:	2a e0       	ldi	r18, 0x0A	; 10
    2498:	26 9f       	mul	r18, r22
    249a:	11 24       	eor	r1, r1
    249c:	30 19       	sub	r19, r0
    249e:	30 5d       	subi	r19, 0xD0	; 208
    24a0:	31 93       	st	Z+, r19
    24a2:	de f6       	brtc	.-74     	; 0x245a <__ultoa_invert+0xe>
    24a4:	cf 01       	movw	r24, r30
    24a6:	08 95       	ret
    24a8:	46 2f       	mov	r20, r22
    24aa:	47 70       	andi	r20, 0x07	; 7
    24ac:	40 5d       	subi	r20, 0xD0	; 208
    24ae:	41 93       	st	Z+, r20
    24b0:	b3 e0       	ldi	r27, 0x03	; 3
    24b2:	0f d0       	rcall	.+30     	; 0x24d2 <__ultoa_invert+0x86>
    24b4:	c9 f7       	brne	.-14     	; 0x24a8 <__ultoa_invert+0x5c>
    24b6:	f6 cf       	rjmp	.-20     	; 0x24a4 <__ultoa_invert+0x58>
    24b8:	46 2f       	mov	r20, r22
    24ba:	4f 70       	andi	r20, 0x0F	; 15
    24bc:	40 5d       	subi	r20, 0xD0	; 208
    24be:	4a 33       	cpi	r20, 0x3A	; 58
    24c0:	18 f0       	brcs	.+6      	; 0x24c8 <__ultoa_invert+0x7c>
    24c2:	49 5d       	subi	r20, 0xD9	; 217
    24c4:	31 fd       	sbrc	r19, 1
    24c6:	40 52       	subi	r20, 0x20	; 32
    24c8:	41 93       	st	Z+, r20
    24ca:	02 d0       	rcall	.+4      	; 0x24d0 <__ultoa_invert+0x84>
    24cc:	a9 f7       	brne	.-22     	; 0x24b8 <__ultoa_invert+0x6c>
    24ce:	ea cf       	rjmp	.-44     	; 0x24a4 <__ultoa_invert+0x58>
    24d0:	b4 e0       	ldi	r27, 0x04	; 4
    24d2:	a6 95       	lsr	r26
    24d4:	97 95       	ror	r25
    24d6:	87 95       	ror	r24
    24d8:	77 95       	ror	r23
    24da:	67 95       	ror	r22
    24dc:	ba 95       	dec	r27
    24de:	c9 f7       	brne	.-14     	; 0x24d2 <__ultoa_invert+0x86>
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	61 05       	cpc	r22, r1
    24e4:	71 05       	cpc	r23, r1
    24e6:	08 95       	ret
    24e8:	9b 01       	movw	r18, r22
    24ea:	ac 01       	movw	r20, r24
    24ec:	0a 2e       	mov	r0, r26
    24ee:	06 94       	lsr	r0
    24f0:	57 95       	ror	r21
    24f2:	47 95       	ror	r20
    24f4:	37 95       	ror	r19
    24f6:	27 95       	ror	r18
    24f8:	ba 95       	dec	r27
    24fa:	c9 f7       	brne	.-14     	; 0x24ee <__ultoa_invert+0xa2>
    24fc:	62 0f       	add	r22, r18
    24fe:	73 1f       	adc	r23, r19
    2500:	84 1f       	adc	r24, r20
    2502:	95 1f       	adc	r25, r21
    2504:	a0 1d       	adc	r26, r0
    2506:	08 95       	ret

00002508 <__prologue_saves__>:
    2508:	2f 92       	push	r2
    250a:	3f 92       	push	r3
    250c:	4f 92       	push	r4
    250e:	5f 92       	push	r5
    2510:	6f 92       	push	r6
    2512:	7f 92       	push	r7
    2514:	8f 92       	push	r8
    2516:	9f 92       	push	r9
    2518:	af 92       	push	r10
    251a:	bf 92       	push	r11
    251c:	cf 92       	push	r12
    251e:	df 92       	push	r13
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	ca 1b       	sub	r28, r26
    2532:	db 0b       	sbc	r29, r27
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	09 94       	ijmp

00002540 <__epilogue_restores__>:
    2540:	2a 88       	ldd	r2, Y+18	; 0x12
    2542:	39 88       	ldd	r3, Y+17	; 0x11
    2544:	48 88       	ldd	r4, Y+16	; 0x10
    2546:	5f 84       	ldd	r5, Y+15	; 0x0f
    2548:	6e 84       	ldd	r6, Y+14	; 0x0e
    254a:	7d 84       	ldd	r7, Y+13	; 0x0d
    254c:	8c 84       	ldd	r8, Y+12	; 0x0c
    254e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2550:	aa 84       	ldd	r10, Y+10	; 0x0a
    2552:	b9 84       	ldd	r11, Y+9	; 0x09
    2554:	c8 84       	ldd	r12, Y+8	; 0x08
    2556:	df 80       	ldd	r13, Y+7	; 0x07
    2558:	ee 80       	ldd	r14, Y+6	; 0x06
    255a:	fd 80       	ldd	r15, Y+5	; 0x05
    255c:	0c 81       	ldd	r16, Y+4	; 0x04
    255e:	1b 81       	ldd	r17, Y+3	; 0x03
    2560:	aa 81       	ldd	r26, Y+2	; 0x02
    2562:	b9 81       	ldd	r27, Y+1	; 0x01
    2564:	ce 0f       	add	r28, r30
    2566:	d1 1d       	adc	r29, r1
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	ed 01       	movw	r28, r26
    2574:	08 95       	ret

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
