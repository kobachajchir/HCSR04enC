
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004fc  00800100  00001eda  00001f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  008005fc  008005fc  0000246a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d90  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001530  00000000  00000000  00006518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f5b  00000000  00000000  00007a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  000099a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e90  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001673  00000000  00000000  0000af70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000c5e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_18>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ed       	ldi	r30, 0xDA	; 218
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3f       	cpi	r26, 0xFC	; 252
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ac ef       	ldi	r26, 0xFC	; 252
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3b       	cpi	r26, 0xBB	; 187
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <main>
      9e:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// 	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
// 	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
// }

void printfWrapper(const char* message) {
	printf("%s\n", message);
      a6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
	// Verificamos el estado actual del sensor
	switch (ultraSensor.state)
      c6:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
	{
		case ULTRA_WAIT_RISING:
		{
			if(ultraSensor.ECHO_RISING){
      d4:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
				ultraSensor.echo_init_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno init time
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <ultraSensor>
     100:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <ultraSensor+0x1>
     104:	a0 93 79 06 	sts	0x0679, r26	; 0x800679 <ultraSensor+0x2>
     108:	b0 93 7a 06 	sts	0x067A, r27	; 0x80067a <ultraSensor+0x3>
				ultraSensor.ECHO_RISING = 0; //Bajo la bandera para marcar que llene init time
     10c:	e3 e8       	ldi	r30, 0x83	; 131
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			ultraSensor.echo_finish_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno finish time
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <ultraSensor+0x4>
     13c:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <ultraSensor+0x5>
     140:	a0 93 7d 06 	sts	0x067D, r26	; 0x80067d <ultraSensor+0x6>
     144:	b0 93 7e 06 	sts	0x067E, r27	; 0x80067e <ultraSensor+0x7>
			ultraSensor.ECHO_RECEIVED = 1; //Esto lo pone en modo de calcular
     148:	e3 e8       	ldi	r30, 0x83	; 131
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
			break;
		}
	}
}
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
     178:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <ovf_count>
}
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
	IR_READ_INTERRUPT = 1;
     1ca:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	45 c0       	rjmp	.+138    	; 0x262 <__vector_11+0xd4>
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	e2 59       	subi	r30, 0x92	; 146
     1e4:	f9 4f       	sbci	r31, 0xF9	; 249
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__vector_11+0xd2>
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
				// If in push mode, use maximum pulse
				servosArray[i]->pulse_us = SERVO_MAX_PULSE;
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_11+0x88>
				//printf("ISR COMPA PUSH %d...\n", servosArray[i]->pin);
				} else {
				// Otherwise use the angle setting
				servosArray[i]->pulse_us = calculate_angle_pulseUs(servosArray[i]->angle);
     208:	f8 01       	movw	r30, r16
     20a:	84 81       	ldd	r24, Z+4	; 0x04
     20c:	0e 94 3a 09 	call	0x1274	; 0x1274 <calculate_angle_pulseUs>
     210:	f8 01       	movw	r30, r16
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
			}

			// Set the pin high immediately if it's the first servo
			if (i == 0) {
     216:	c1 11       	cpse	r28, r1
     218:	23 c0       	rjmp	.+70     	; 0x260 <__vector_11+0xd2>
				PORTB |= (1 << servosArray[i]->pin);
     21a:	f7 01       	movw	r30, r14
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e2 59       	subi	r30, 0x92	; 146
     222:	f9 4f       	sbci	r31, 0xF9	; 249
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	2c 91       	ld	r18, X
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
				// Schedule turn-off with Compare B
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	01 90       	ld	r0, Z+
     248:	f0 81       	ld	r31, Z
     24a:	e0 2d       	mov	r30, r0
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				current_servo = 0; // Mark this as the active servo
     25c:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <current_servo>
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
	IR_READ_INTERRUPT = 1;
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     260:	cf 5f       	subi	r28, 0xFF	; 255
     262:	c3 30       	cpi	r28, 0x03	; 3
     264:	08 f4       	brcc	.+2      	; 0x268 <__vector_11+0xda>
     266:	b8 cf       	rjmp	.-144    	; 0x1d8 <__vector_11+0x4a>
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
				current_servo = 0; // Mark this as the active servo
			}
		}
	}
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	cf 91       	pop	r28
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
     2ba:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	e2 59       	subi	r30, 0x92	; 146
     2c6:	f9 4f       	sbci	r31, 0xF9	; 249
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 81       	ld	r18, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_12+0x46>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_12+0x42>
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	89 23       	and	r24, r25
     2e6:	85 b9       	out	0x05, r24	; 5
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     2e8:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e2 59       	subi	r30, 0x92	; 146
     2f4:	f9 4f       	sbci	r31, 0xF9	; 249
     2f6:	01 90       	ld	r0, Z+
     2f8:	f0 81       	ld	r31, Z
     2fa:	e0 2d       	mov	r30, r0
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	81 ff       	sbrs	r24, 1
     300:	6b c0       	rjmp	.+214    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
     302:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e2 59       	subi	r30, 0x92	; 146
     30e:	f9 4f       	sbci	r31, 0xF9	; 249
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	81 81       	ldd	r24, Z+1	; 0x01
ISR(TIMER1_COMPB_vect) {
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     318:	82 ff       	sbrs	r24, 2
     31a:	5e c0       	rjmp	.+188    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
		
		// Clear the push and reset flags
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_RESET);
     31c:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e2 59       	subi	r30, 0x92	; 146
     328:	f9 4f       	sbci	r31, 0xF9	; 249
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	81 81       	ldd	r24, Z+1	; 0x01
     332:	8b 7f       	andi	r24, 0xFB	; 251
     334:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_PUSH);
     336:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	e2 59       	subi	r30, 0x92	; 146
     342:	f9 4f       	sbci	r31, 0xF9	; 249
     344:	01 90       	ld	r0, Z+
     346:	f0 81       	ld	r31, Z
     348:	e0 2d       	mov	r30, r0
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	81 83       	std	Z+1, r24	; 0x01
		// Return to idle angle
		servosArray[current_servo]->angle = SERVO_IDLE_ANGLE;
     350:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e2 59       	subi	r30, 0x92	; 146
     35c:	f9 4f       	sbci	r31, 0xF9	; 249
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	8a e5       	ldi	r24, 0x5A	; 90
     366:	84 83       	std	Z+4, r24	; 0x04
		servosArray[current_servo]->pulse_us = calculate_angle_pulseUs(servosArray[current_servo]->angle);
     368:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	e2 59       	subi	r30, 0x92	; 146
     374:	f9 4f       	sbci	r31, 0xF9	; 249
     376:	c0 81       	ld	r28, Z
     378:	d1 81       	ldd	r29, Z+1	; 0x01
     37a:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 59       	subi	r30, 0x92	; 146
     386:	f9 4f       	sbci	r31, 0xF9	; 249
     388:	01 90       	ld	r0, Z+
     38a:	f0 81       	ld	r31, Z
     38c:	e0 2d       	mov	r30, r0
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	0e 94 3a 09 	call	0x1274	; 0x1274 <calculate_angle_pulseUs>
     394:	9b 83       	std	Y+3, r25	; 0x03
     396:	8a 83       	std	Y+2, r24	; 0x02
		if(current_servo == 0){
     398:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     39c:	81 11       	cpse	r24, r1
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <__vector_12+0x11a>
			SET_FLAG(salidaA.flags, OUTPUT_READY);
     3a0:	e8 e1       	ldi	r30, 0x18	; 24
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaA.flags, OUTPUT_BUSY);
     3a8:	8e 7f       	andi	r24, 0xFE	; 254
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE A\n");
		}else if(current_servo == 1){
     3ae:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	39 f4       	brne	.+14     	; 0x3c4 <__vector_12+0x130>
			SET_FLAG(salidaB.flags, OUTPUT_READY);
     3b6:	e2 eb       	ldi	r30, 0xB2	; 178
     3b8:	f6 e0       	ldi	r31, 0x06	; 6
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaB.flags, OUTPUT_BUSY);
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	82 83       	std	Z+2, r24	; 0x02
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE B\n");
		}else if(current_servo == 2){
     3c4:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <__vector_12+0x144>
			SET_FLAG(salidaC.flags, OUTPUT_READY);
     3cc:	e4 e7       	ldi	r30, 0x74	; 116
     3ce:	f6 e0       	ldi	r31, 0x06	; 6
     3d0:	82 81       	ldd	r24, Z+2	; 0x02
     3d2:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaC.flags, OUTPUT_BUSY);
     3d4:	8e 7f       	andi	r24, 0xFE	; 254
     3d6:	82 83       	std	Z+2, r24	; 0x02
			//printf("Volvio a posicion IDLE C\n");
		}
	}
	
	// Move to next servo, but only if there are more servos to process in this frame
	current_servo++;
     3d8:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <current_servo>
	if (current_servo < NUM_OUTPUTS) {
     3e2:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <__vector_12+0x158>
     3ea:	91 c0       	rjmp	.+290    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		// If there are more servos to process, activate the next one
		if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     3ec:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	e2 59       	subi	r30, 0x92	; 146
     3f8:	f9 4f       	sbci	r31, 0xF9	; 249
     3fa:	01 90       	ld	r0, Z+
     3fc:	f0 81       	ld	r31, Z
     3fe:	e0 2d       	mov	r30, r0
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	80 ff       	sbrs	r24, 0
     404:	2c c0       	rjmp	.+88     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			// Turn on the pin for the next servo
			PORTB |= (1 << servosArray[current_servo]->pin);
     406:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	e2 59       	subi	r30, 0x92	; 146
     412:	f9 4f       	sbci	r31, 0xF9	; 249
     414:	01 90       	ld	r0, Z+
     416:	f0 81       	ld	r31, Z
     418:	e0 2d       	mov	r30, r0
     41a:	20 81       	ld	r18, Z
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	2a 95       	dec	r18
     428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42a:	95 b1       	in	r25, 0x05	; 5
     42c:	89 2b       	or	r24, r25
     42e:	85 b9       	out	0x05, r24	; 5
			// Schedule turn-off
			OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     430:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     434:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     438:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	e2 59       	subi	r30, 0x92	; 146
     444:	f9 4f       	sbci	r31, 0xF9	; 249
     446:	01 90       	ld	r0, Z+
     448:	f0 81       	ld	r31, Z
     44a:	e0 2d       	mov	r30, r0
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     458:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     45c:	58 c0       	rjmp	.+176    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			} else {
			// If the next servo isn't enabled, skip to the one after
			// This is a recursive call to COMPB logic without the actual interrupt
			PORTB &= ~(1 << servosArray[current_servo]->pin); // Make sure the pin is low
     45e:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e2 59       	subi	r30, 0x92	; 146
     46a:	f9 4f       	sbci	r31, 0xF9	; 249
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	20 81       	ld	r18, Z
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	2a 95       	dec	r18
     480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     482:	80 95       	com	r24
     484:	90 95       	com	r25
     486:	95 b1       	in	r25, 0x05	; 5
     488:	89 23       	and	r24, r25
     48a:	85 b9       	out	0x05, r24	; 5
			current_servo++;
     48c:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <current_servo>
			// Continue checking for the next enabled servo
			if (current_servo < NUM_OUTPUTS && IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     496:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <current_servo>
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	c0 f5       	brcc	.+112    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     49e:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e2 59       	subi	r30, 0x92	; 146
     4aa:	f9 4f       	sbci	r31, 0xF9	; 249
     4ac:	01 90       	ld	r0, Z+
     4ae:	f0 81       	ld	r31, Z
     4b0:	e0 2d       	mov	r30, r0
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
     4b4:	80 ff       	sbrs	r24, 0
     4b6:	2b c0       	rjmp	.+86     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
				PORTB |= (1 << servosArray[current_servo]->pin);
     4b8:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	e2 59       	subi	r30, 0x92	; 146
     4c4:	f9 4f       	sbci	r31, 0xF9	; 249
     4c6:	01 90       	ld	r0, Z+
     4c8:	f0 81       	ld	r31, Z
     4ca:	e0 2d       	mov	r30, r0
     4cc:	20 81       	ld	r18, Z
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	2a 95       	dec	r18
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4dc:	95 b1       	in	r25, 0x05	; 5
     4de:	89 2b       	or	r24, r25
     4e0:	85 b9       	out	0x05, r24	; 5
				OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     4e2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4e6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4ea:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <current_servo>
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	e2 59       	subi	r30, 0x92	; 146
     4f6:	f9 4f       	sbci	r31, 0xF9	; 249
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	93 81       	ldd	r25, Z+3	; 0x03
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     50a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}
		}
	}
	// If current_servo >= NUM_OUTPUTS, we've processed all servos for this frame
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_18>:

ISR(USART_RX_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	uint8_t received_byte = UDR0;  // Lee el byte recibido
     54e:	50 91 c6 00 	lds	r21, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Calcular el próximo índice de escritura en el buffer circular
	uint8_t next_indexW = (protocolService.indexW + 1) % PROTOCOL_BUFFER_SIZE;
     552:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <protocolService>
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	c9 01       	movw	r24, r18
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	8f 71       	andi	r24, 0x1F	; 31
     55e:	90 78       	andi	r25, 0x80	; 128
     560:	99 23       	and	r25, r25
     562:	24 f4       	brge	.+8      	; 0x56c <__vector_18+0x38>
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	80 6e       	ori	r24, 0xE0	; 224
     568:	9f 6f       	ori	r25, 0xFF	; 255
     56a:	01 96       	adiw	r24, 0x01	; 1

	// Verifica si el buffer está lleno (es decir, si next_indexW alcanzaría indexR)
	if (next_indexW == protocolService.indexR) { //Que el proximo sean iguales y no este procesando nada
     56c:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <protocolService+0x1>
     570:	48 13       	cpse	r20, r24
     572:	04 c0       	rjmp	.+8      	; 0x57c <__vector_18+0x48>
		// El buffer está lleno; activar la bandera para procesar datos antes de sobrescribir
		protocolService.processData = true;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <protocolService+0x23>
     57a:	06 c0       	rjmp	.+12     	; 0x588 <__vector_18+0x54>
		// Opcional: puedes descartar el byte recibido o almacenarlo en un buffer temporal
		} else {
		// Hay espacio, copia el byte en el buffer
		protocolService.buffer[protocolService.indexW] = received_byte;
     57c:	f9 01       	movw	r30, r18
     57e:	e2 57       	subi	r30, 0x72	; 114
     580:	f9 4f       	sbci	r31, 0xF9	; 249
     582:	52 83       	std	Z+2, r21	; 0x02
		// Actualiza el índice de escritura
		protocolService.indexW = next_indexW;
     584:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <protocolService>
	}
}
     588:	ff 91       	pop	r31
     58a:	ef 91       	pop	r30
     58c:	9f 91       	pop	r25
     58e:	8f 91       	pop	r24
     590:	5f 91       	pop	r21
     592:	4f 91       	pop	r20
     594:	3f 91       	pop	r19
     596:	2f 91       	pop	r18
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_19>:

ISR(USART_UDRE_vect)
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	// Si aún hay datos en el buffer...
	if (protocolService.indexR != protocolService.indexW) {
     5b8:	ae e8       	ldi	r26, 0x8E	; 142
     5ba:	b6 e0       	ldi	r27, 0x06	; 6
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	ec 91       	ld	r30, X
     5c0:	11 97       	sbiw	r26, 0x01	; 1
     5c2:	8c 91       	ld	r24, X
     5c4:	e8 17       	cp	r30, r24
     5c6:	a9 f0       	breq	.+42     	; 0x5f2 <__vector_19+0x50>
		// Enviar el siguiente byte
		UDR0 = protocolService.buffer[protocolService.indexR];
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	e2 57       	subi	r30, 0x72	; 114
     5cc:	f9 4f       	sbci	r31, 0xF9	; 249
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
     5d4:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <protocolService+0x1>
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	8f 71       	andi	r24, 0x1F	; 31
     5de:	90 78       	andi	r25, 0x80	; 128
     5e0:	99 23       	and	r25, r25
     5e2:	24 f4       	brge	.+8      	; 0x5ec <__vector_19+0x4a>
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	80 6e       	ori	r24, 0xE0	; 224
     5e8:	9f 6f       	ori	r25, 0xFF	; 255
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <protocolService+0x1>
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__vector_19+0x5a>
		} else {
		// Si el buffer está vacío, deshabilitar la interrupción para no seguir disparando
		UCSR0B &= ~(1 << UDRIE0);
     5f2:	e1 ec       	ldi	r30, 0xC1	; 193
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7d       	andi	r24, 0xDF	; 223
     5fa:	80 83       	st	Z, r24
	}
}
     5fc:	ff 91       	pop	r31
     5fe:	ef 91       	pop	r30
     600:	bf 91       	pop	r27
     602:	af 91       	pop	r26
     604:	9f 91       	pop	r25
     606:	8f 91       	pop	r24
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <timer1_init>:
/* Timer1 and External Interrupt Functions ---------------------------------*/

void timer1_init()
{
	// Reset the timer counter
	TCNT1 = 0;
     612:	a4 e8       	ldi	r26, 0x84	; 132
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	1c 92       	st	X, r1
     61a:	1e 92       	st	-X, r1
	// Clear input capture flag
	TIFR1 |= (1 << ICF1);
     61c:	86 b3       	in	r24, 0x16	; 22
     61e:	80 62       	ori	r24, 0x20	; 32
     620:	86 bb       	out	0x16, r24	; 22
	// Enable input capture interrupt and overflow interrupt
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
     622:	ef e6       	ldi	r30, 0x6F	; 111
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	87 62       	ori	r24, 0x27	; 39
     62a:	80 83       	st	Z, r24
	// Set to capture rising edge initially
	TCCR1B |= (1 << ICES1);
     62c:	e1 e8       	ldi	r30, 0x81	; 129
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	80 64       	ori	r24, 0x40	; 64
     634:	80 83       	st	Z, r24
	// Set prescaler to 8 for adequate timing resolution
	TCCR1B |= (1 << CS11);  // Prescaler = 8
     636:	80 81       	ld	r24, Z
     638:	82 60       	ori	r24, 0x02	; 2
     63a:	80 83       	st	Z, r24
	OCR1A = TCNT1 + SERVO_FRAME_PERIOD; // Primera interrupción en 20ms desde ya
     63c:	8d 91       	ld	r24, X+
     63e:	9c 91       	ld	r25, X
     640:	80 5c       	subi	r24, 0xC0	; 192
     642:	93 46       	sbci	r25, 0x63	; 99
     644:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     648:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     64c:	08 95       	ret

0000064e <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler de 1024
     64e:	e1 eb       	ldi	r30, 0xB1	; 177
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	87 60       	ori	r24, 0x07	; 7
     656:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
     658:	8b e9       	ldi	r24, 0x9B	; 155
     65a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
     65e:	e0 e7       	ldi	r30, 0x70	; 112
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
     668:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     66c:	08 95       	ret

0000066e <gpio_pins_init>:
	// El prescaler se configurará cuando necesitemos iniciar el timer
}

void gpio_pins_init() {
	DDRB |= (1 << LED_BUILTIN_PIN);   // LED pin salida
     66e:	84 b1       	in	r24, 0x04	; 4
     670:	80 62       	ori	r24, 0x20	; 32
     672:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED_BUILTIN_PIN);  // LED HIGH
     674:	85 b1       	in	r24, 0x05	; 5
     676:	80 62       	ori	r24, 0x20	; 32
     678:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1 << TRIGGER_PIN);       // TRIGGER pin salida
     67a:	8a b1       	in	r24, 0x0a	; 10
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << ECHO_PIN);         // ECHO pin como entrada
     680:	84 b1       	in	r24, 0x04	; 4
     682:	8e 7f       	andi	r24, 0xFE	; 254
     684:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BUTTON_PIN);       // BUTTON pin como entrada
     686:	8a b1       	in	r24, 0x0a	; 10
     688:	8f 7e       	andi	r24, 0xEF	; 239
     68a:	8a b9       	out	0x0a, r24	; 10
	
	//Inicializar las salidas de servos
	DDRB |= (1 << SERVOA_PIN); // SERVOA_PIN como salida
     68c:	84 b1       	in	r24, 0x04	; 4
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOB_PIN); // SERVOB_PIN como salida
     692:	84 b1       	in	r24, 0x04	; 4
     694:	84 60       	ori	r24, 0x04	; 4
     696:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOC_PIN); // SERVOC_PIN como salida
     698:	84 b1       	in	r24, 0x04	; 4
     69a:	88 60       	ori	r24, 0x08	; 8
     69c:	84 b9       	out	0x04, r24	; 4
	
	tcrt_init(); //Despues haremos esto para todos los sensores, modularizando
     69e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tcrt_init>
	
	// Poner en bajo estos pines para asegurarnos
	PORTD &= ~(1 << TRIGGER_PIN);
     6a2:	8b b1       	in	r24, 0x0b	; 11
     6a4:	87 7f       	andi	r24, 0xF7	; 247
     6a6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << BUTTON_PIN);
     6a8:	8b b1       	in	r24, 0x0b	; 11
     6aa:	8f 7e       	andi	r24, 0xEF	; 239
     6ac:	8b b9       	out	0x0b, r24	; 11
     6ae:	08 95       	ret

000006b0 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	2f 93       	push	r18
     6bc:	3f 93       	push	r19
     6be:	4f 93       	push	r20
     6c0:	5f 93       	push	r21
     6c2:	6f 93       	push	r22
     6c4:	7f 93       	push	r23
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	af 93       	push	r26
     6cc:	bf 93       	push	r27
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     6d2:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     6d6:	81 ff       	sbrs	r24, 1
     6d8:	ee c0       	rjmp	.+476    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     6da:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <ultraSensor+0xd>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	51 f5       	brne	.+84     	; 0x736 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     6e2:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     6e6:	85 fd       	sbrc	r24, 5
     6e8:	0d c0       	rjmp	.+26     	; 0x704 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     6ea:	0e 94 8e 0a 	call	0x151c	; 0x151c <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     6ee:	e3 e8       	ldi	r30, 0x83	; 131
     6f0:	f6 e0       	ldi	r31, 0x06	; 6
     6f2:	80 81       	ld	r24, Z
     6f4:	81 60       	ori	r24, 0x01	; 1
     6f6:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     6f8:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     6fc:	80 62       	ori	r24, 0x20	; 32
     6fe:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
     702:	19 c0       	rjmp	.+50     	; 0x736 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     704:	0e 94 92 0a 	call	0x1524	; 0x1524 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     708:	e3 e8       	ldi	r30, 0x83	; 131
     70a:	f6 e0       	ldi	r31, 0x06	; 6
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     712:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     716:	8d 7d       	andi	r24, 0xDD	; 221
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     71e:	80 81       	ld	r24, Z
     720:	8f 7d       	andi	r24, 0xDF	; 223
     722:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     72a:	80 81       	ld	r24, Z
     72c:	80 61       	ori	r24, 0x10	; 16
     72e:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     730:	80 81       	ld	r24, Z
     732:	8d 7f       	andi	r24, 0xFD	; 253
     734:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     736:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <ultraSensor+0xd>
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	d1 f4       	brne	.+52     	; 0x772 <__vector_7+0xc2>
     73e:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <ultraSensor+0xc>
     742:	84 ff       	sbrs	r24, 4
     744:	16 c0       	rjmp	.+44     	; 0x772 <__vector_7+0xc2>
     746:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     74a:	89 70       	andi	r24, 0x09	; 9
     74c:	88 30       	cpi	r24, 0x08	; 8
     74e:	89 f4       	brne	.+34     	; 0x772 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     750:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <veintems_counter>
     754:	81 11       	cpse	r24, r1
     756:	06 c0       	rjmp	.+12     	; 0x764 <__vector_7+0xb4>
				veintems_counter++;
     758:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <veintems_counter>
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <veintems_counter>
     762:	07 c0       	rjmp	.+14     	; 0x772 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     764:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
				veintems_counter = 0;
     76e:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     772:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <ultraSensor+0xc>
     776:	85 fd       	sbrc	r24, 5
     778:	22 c0       	rjmp	.+68     	; 0x7be <__vector_7+0x10e>
     77a:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     77e:	84 fd       	sbrc	r24, 4
     780:	1e c0       	rjmp	.+60     	; 0x7be <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     782:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <wait_time>
     786:	87 30       	cpi	r24, 0x07	; 7
     788:	30 f4       	brcc	.+12     	; 0x796 <__vector_7+0xe6>
				wait_time++;
     78a:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <wait_time>
     78e:	8f 5f       	subi	r24, 0xFF	; 255
     790:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <wait_time>
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     796:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
				wait_time = 0;
     7a0:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     7a4:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <ultraSensor+0xc>
     7a8:	83 ff       	sbrs	r24, 3
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     7ac:	60 91 53 06 	lds	r22, 0x0653	; 0x800653 <bandera2>
     7b0:	66 fb       	bst	r22, 6
     7b2:	66 27       	eor	r22, r22
     7b4:	60 f9       	bld	r22, 0
     7b6:	87 e7       	ldi	r24, 0x77	; 119
     7b8:	96 e0       	ldi	r25, 0x06	; 6
     7ba:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     7be:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <diezMsCounter>
     7c2:	8a 30       	cpi	r24, 0x0A	; 10
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <__vector_7+0x122>
			diezMsCounter++;
     7c6:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <diezMsCounter>
     7ca:	8f 5f       	subi	r24, 0xFF	; 255
     7cc:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <diezMsCounter>
     7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     7d2:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			diezMsCounter = 0;
     7dc:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     7e0:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     7e4:	86 ff       	sbrs	r24, 6
     7e6:	0e c0       	rjmp	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			if(btn_pressed_time == 255){
     7e8:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <btn_pressed_time>
     7ec:	8f 3f       	cpi	r24, 0xFF	; 255
     7ee:	29 f4       	brne	.+10     	; 0x7fa <__vector_7+0x14a>
				BTN_OVF = 1;
     7f0:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     7f4:	84 60       	ori	r24, 0x04	; 4
     7f6:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			}
			btn_pressed_time++;
     7fa:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <btn_pressed_time>
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     804:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <servoA+0x1>
     808:	81 ff       	sbrs	r24, 1
     80a:	0d c0       	rjmp	.+26     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     80c:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <servoA+0x5>
     810:	9a 30       	cpi	r25, 0x0A	; 10
     812:	20 f4       	brcc	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
				servoA.state_time++;  // Increment time spent in PUSH mode
     814:	9f 5f       	subi	r25, 0xFF	; 255
     816:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <servoA+0x5>
     81a:	05 c0       	rjmp	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     81c:	e2 e1       	ldi	r30, 0x12	; 18
     81e:	f6 e0       	ldi	r31, 0x06	; 6
     820:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     822:	84 60       	ori	r24, 0x04	; 4
     824:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     826:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <servoB+0x1>
     82a:	81 ff       	sbrs	r24, 1
     82c:	0d c0       	rjmp	.+26     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     82e:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <servoB+0x5>
     832:	9a 30       	cpi	r25, 0x0A	; 10
     834:	20 f4       	brcc	.+8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
				servoB.state_time++;  // Increment time spent in PUSH mode
     836:	9f 5f       	subi	r25, 0xFF	; 255
     838:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <servoB+0x5>
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     83e:	e8 e8       	ldi	r30, 0x88	; 136
     840:	f6 e0       	ldi	r31, 0x06	; 6
     842:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     844:	84 60       	ori	r24, 0x04	; 4
     846:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     848:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <servoC+0x1>
     84c:	81 ff       	sbrs	r24, 1
     84e:	0d c0       	rjmp	.+26     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     850:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <servoC+0x5>
     854:	9a 30       	cpi	r25, 0x0A	; 10
     856:	20 f4       	brcc	.+8      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
				servoC.state_time++;  // Increment time spent in PUSH mode
     858:	9f 5f       	subi	r25, 0xFF	; 255
     85a:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <servoC+0x5>
     85e:	05 c0       	rjmp	.+10     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     860:	e4 e5       	ldi	r30, 0x54	; 84
     862:	f6 e0       	ldi	r31, 0x06	; 6
     864:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     866:	84 60       	ori	r24, 0x04	; 4
     868:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     86a:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
     86e:	80 ff       	sbrs	r24, 0
     870:	05 c0       	rjmp	.+10     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     872:	83 fd       	sbrc	r24, 3
     874:	03 c0       	rjmp	.+6      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     876:	88 60       	ori	r24, 0x08	; 8
     878:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     87c:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
     880:	80 ff       	sbrs	r24, 0
     882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     884:	83 fd       	sbrc	r24, 3
     886:	03 c0       	rjmp	.+6      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     88e:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
     892:	80 ff       	sbrs	r24, 0
     894:	07 c0       	rjmp	.+14     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     896:	83 fd       	sbrc	r24, 3
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     89a:	eb e1       	ldi	r30, 0x1B	; 27
     89c:	f6 e0       	ldi	r31, 0x06	; 6
     89e:	80 81       	ld	r24, Z
     8a0:	88 60       	ori	r24, 0x08	; 8
     8a2:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8a4:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
     8a8:	80 ff       	sbrs	r24, 0
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     8ac:	83 fd       	sbrc	r24, 3
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     8b0:	88 60       	ori	r24, 0x08	; 8
     8b2:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <IR_U>
		}
	}
}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <main>:
int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
     8d8:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <bandera3>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
	IR_CALIBRATED = 0;
     8e2:	82 e8       	ldi	r24, 0x82	; 130
     8e4:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     8e8:	88 e0       	ldi	r24, 0x08	; 8
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     8f0:	e5 eb       	ldi	r30, 0xB5	; 181
     8f2:	f6 e0       	ldi	r31, 0x06	; 6
     8f4:	8e e0       	ldi	r24, 0x0E	; 14
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	93 83       	std	Z+3, r25	; 0x03
     8fa:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	80 83       	st	Z, r24
	initProtocolService(&protocolService);
     904:	8e e8       	ldi	r24, 0x8E	; 142
     906:	96 e0       	ldi	r25, 0x06	; 6
     908:	0e 94 fd 08 	call	0x11fa	; 0x11fa <initProtocolService>
	diezMsCounter = 0;
     90c:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     910:	0e 94 37 03 	call	0x66e	; 0x66e <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     914:	0e 94 09 03 	call	0x612	; 0x612 <timer1_init>
	timer2_init();
     918:	0e 94 27 03 	call	0x64e	; 0x64e <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     91c:	0e 94 97 09 	call	0x132e	; 0x132e <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     920:	63 e5       	ldi	r22, 0x53	; 83
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	87 e7       	ldi	r24, 0x77	; 119
     926:	96 e0       	ldi	r25, 0x06	; 6
     928:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     92c:	60 91 53 06 	lds	r22, 0x0653	; 0x800653 <bandera2>
     930:	66 fb       	bst	r22, 6
     932:	66 27       	eor	r22, r22
     934:	60 f9       	bld	r22, 0
     936:	87 e7       	ldi	r24, 0x77	; 119
     938:	96 e0       	ldi	r25, 0x06	; 6
     93a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     93e:	4b e1       	ldi	r20, 0x1B	; 27
     940:	56 e0       	ldi	r21, 0x06	; 6
     942:	67 e7       	ldi	r22, 0x77	; 119
     944:	76 e0       	ldi	r23, 0x06	; 6
     946:	89 e6       	ldi	r24, 0x69	; 105
     948:	96 e0       	ldi	r25, 0x06	; 6
     94a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <initDetector>
	initSorter(&SorterSystem);
     94e:	8a e3       	ldi	r24, 0x3A	; 58
     950:	96 e0       	ldi	r25, 0x06	; 6
     952:	0e 94 2d 06 	call	0xc5a	; 0xc5a <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     956:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     960:	8e ed       	ldi	r24, 0xDE	; 222
     962:	94 e0       	ldi	r25, 0x04	; 4
     964:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
	sei();
     968:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     96a:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     96e:	85 ff       	sbrs	r24, 5
     970:	05 c0       	rjmp	.+10     	; 0x97c <__stack+0x7d>
			irSensorsTask(&SorterSystem);
     972:	8a e3       	ldi	r24, 0x3A	; 58
     974:	96 e0       	ldi	r25, 0x06	; 6
     976:	0e 94 21 08 	call	0x1042	; 0x1042 <irSensorsTask>
     97a:	75 c0       	rjmp	.+234    	; 0xa66 <__stack+0x167>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     97c:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <__data_end>
     980:	81 11       	cpse	r24, r1
     982:	23 c0       	rjmp	.+70     	; 0x9ca <__stack+0xcb>
		printf("Calibrando sensores IR...\n");
     984:	82 e2       	ldi	r24, 0x22	; 34
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     98c:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
     990:	80 ff       	sbrs	r24, 0
     992:	03 c0       	rjmp	.+6      	; 0x99a <__stack+0x9b>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     994:	84 60       	ori	r24, 0x04	; 4
     996:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     99a:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
     99e:	80 ff       	sbrs	r24, 0
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__stack+0xa9>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     9a2:	84 60       	ori	r24, 0x04	; 4
     9a4:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     9a8:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
     9ac:	80 ff       	sbrs	r24, 0
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     9b0:	84 60       	ori	r24, 0x04	; 4
     9b2:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     9b6:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
     9ba:	80 ff       	sbrs	r24, 0
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0xc5>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     9be:	84 60       	ori	r24, 0x04	; 4
     9c0:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <IR_U>
		}
		init_done = true;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     9ca:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
     9ce:	82 ff       	sbrs	r24, 2
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0xdb>
		calibrateIRSensor(&IR_A);
     9d2:	8a e5       	ldi	r24, 0x5A	; 90
     9d4:	96 e0       	ldi	r25, 0x06	; 6
     9d6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     9da:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
     9de:	82 ff       	sbrs	r24, 2
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0xeb>
		calibrateIRSensor(&IR_B);
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	96 e0       	ldi	r25, 0x06	; 6
     9e6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     9ea:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
     9ee:	82 ff       	sbrs	r24, 2
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__stack+0xfb>
		calibrateIRSensor(&IR_C);
     9f2:	8b e2       	ldi	r24, 0x2B	; 43
     9f4:	96 e0       	ldi	r25, 0x06	; 6
     9f6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     9fa:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
     9fe:	82 ff       	sbrs	r24, 2
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x10b>
		calibrateIRSensor(&IR_U);
     a02:	8b e1       	ldi	r24, 0x1B	; 27
     a04:	96 e0       	ldi	r25, 0x06	; 6
     a06:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a0a:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
     a0e:	82 fd       	sbrc	r24, 2
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <__stack+0x12f>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a12:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a16:	82 fd       	sbrc	r24, 2
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <__stack+0x133>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a1a:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a1e:	82 fd       	sbrc	r24, 2
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__stack+0x137>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     a22:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a26:	82 ff       	sbrs	r24, 2
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <__stack+0x13b>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <__stack+0x13d>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <__stack+0x13d>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <__stack+0x13d>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <__stack+0x13d>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     a3a:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     a3c:	88 23       	and	r24, r24
     a3e:	99 f0       	breq	.+38     	; 0xa66 <__stack+0x167>
				printf("Todos los sensores IR calibrados.\n");
     a40:	8c e3       	ldi	r24, 0x3C	; 60
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
				IR_CALIBRATED = 1;
     a48:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
				IR_A.calibrationCounter = 0;
     a52:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     a56:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     a5a:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     a5e:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <IR_U+0x9>
				initOutputs();
     a62:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     a66:	6a e3       	ldi	r22, 0x3A	; 58
     a68:	76 e0       	ldi	r23, 0x06	; 6
     a6a:	89 e6       	ldi	r24, 0x69	; 105
     a6c:	96 e0       	ldi	r25, 0x06	; 6
     a6e:	0e 94 dd 06 	call	0xdba	; 0xdba <ultraSensorTask>
		servosTask();
     a72:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     a76:	4c 9b       	sbis	0x09, 4	; 9
     a78:	0a c0       	rjmp	.+20     	; 0xa8e <__stack+0x18f>
     a7a:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     a7e:	86 fd       	sbrc	r24, 6
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <__stack+0x18f>
		btn_pressed_time = 0;
     a82:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <btn_pressed_time>
		BTN_PRESSED = 1;
     a86:	80 64       	ori	r24, 0x40	; 64
     a88:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
     a8c:	28 c0       	rjmp	.+80     	; 0xade <__stack+0x1df>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     a8e:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     a92:	86 ff       	sbrs	r24, 6
     a94:	24 c0       	rjmp	.+72     	; 0xade <__stack+0x1df>
     a96:	4c 99       	sbic	0x09, 4	; 9
     a98:	22 c0       	rjmp	.+68     	; 0xade <__stack+0x1df>
		BTN_PRESSED = 0;
     a9a:	8f 7b       	andi	r24, 0xBF	; 191
     a9c:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     aa0:	82 ff       	sbrs	r24, 2
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <__stack+0x1ad>
			printf("Btn overflowed\n");
     aa4:	8e e5       	ldi	r24, 0x5E	; 94
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     aac:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <btn_pressed_time>
     ab0:	8a 30       	cpi	r24, 0x0A	; 10
     ab2:	30 f4       	brcc	.+12     	; 0xac0 <__stack+0x1c1>
     ab4:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     ab8:	98 2f       	mov	r25, r24
     aba:	94 70       	andi	r25, 0x04	; 4
     abc:	82 ff       	sbrs	r24, 2
     abe:	06 c0       	rjmp	.+12     	; 0xacc <__stack+0x1cd>
			BTN_RELEASED = 1;
     ac0:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
     aca:	09 c0       	rjmp	.+18     	; 0xade <__stack+0x1df>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     acc:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <btn_pressed_time>
			if(BTN_OVF){
     ad0:	99 23       	and	r25, r25
     ad2:	29 f0       	breq	.+10     	; 0xade <__stack+0x1df>
				BTN_OVF = 0;
     ad4:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     ad8:	8b 7f       	andi	r24, 0xFB	; 251
     ada:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if(protocolService.processData){
     ade:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <protocolService+0x23>
     ae2:	88 23       	and	r24, r24
     ae4:	41 f0       	breq	.+16     	; 0xaf6 <__stack+0x1f7>
			printf("Procesar info\n");
     ae6:	8d e6       	ldi	r24, 0x6D	; 109
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			if(process_protocol_buffer()){
     aee:	0e 94 1d 09 	call	0x123a	; 0x123a <process_protocol_buffer>
				
			}else{
				
			}
			protocolService.processData = false;
     af2:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <protocolService+0x23>
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     af6:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     afa:	84 ff       	sbrs	r24, 4
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <__stack+0x20f>
			WAIT_TIME_TRIGGER_PASSED = 0;
     afe:	8f 7e       	andi	r24, 0xEF	; 239
     b00:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     b04:	e3 e8       	ldi	r30, 0x83	; 131
     b06:	f6 e0       	ldi	r31, 0x06	; 6
     b08:	80 81       	ld	r24, Z
     b0a:	80 62       	ori	r24, 0x20	; 32
     b0c:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     b0e:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     b12:	83 ff       	sbrs	r24, 3
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <__stack+0x227>
			ECHO_INTERVAL_FLAG = 0;
     b16:	87 7f       	andi	r24, 0xF7	; 247
     b18:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			EMIT_TRIGGER = 1;
     b1c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     b26:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     b2a:	80 ff       	sbrs	r24, 0
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <__stack+0x235>
			BTN_RELEASED = 0; //TEST SERVO A
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     b34:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     b38:	84 ff       	sbrs	r24, 4
     b3a:	17 cf       	rjmp	.-466    	; 0x96a <__stack+0x6b>
			IR_READ_INTERRUPT = 0;
     b3c:	8f 7e       	andi	r24, 0xEF	; 239
     b3e:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     b42:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
     b46:	80 ff       	sbrs	r24, 0
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <__stack+0x259>
     b4a:	82 ff       	sbrs	r24, 2
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <__stack+0x259>
     b4e:	83 fd       	sbrc	r24, 3
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <__stack+0x259>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     b58:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
     b5c:	80 ff       	sbrs	r24, 0
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <__stack+0x26f>
     b60:	82 ff       	sbrs	r24, 2
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <__stack+0x26f>
     b64:	83 fd       	sbrc	r24, 3
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <__stack+0x26f>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     b6e:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
     b72:	80 ff       	sbrs	r24, 0
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <__stack+0x285>
     b76:	82 ff       	sbrs	r24, 2
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__stack+0x285>
     b7a:	83 fd       	sbrc	r24, 3
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <__stack+0x285>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     b84:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
     b88:	80 ff       	sbrs	r24, 0
     b8a:	ef ce       	rjmp	.-546    	; 0x96a <__stack+0x6b>
     b8c:	82 ff       	sbrs	r24, 2
     b8e:	ed ce       	rjmp	.-550    	; 0x96a <__stack+0x6b>
     b90:	83 fd       	sbrc	r24, 3
     b92:	eb ce       	rjmp	.-554    	; 0x96a <__stack+0x6b>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <IR_U>
     b9a:	e7 ce       	rjmp	.-562    	; 0x96a <__stack+0x6b>

00000b9c <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <initDetector+0x6>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	fc 01       	movw	r30, r24
     ba8:	5a 83       	std	Y+2, r21	; 0x02
     baa:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     bac:	87 e7       	ldi	r24, 0x77	; 119
     bae:	96 e0       	ldi	r25, 0x06	; 6
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	93 83       	std	Z+3, r25	; 0x03
     bba:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     bbc:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     bbe:	8b e7       	ldi	r24, 0x7B	; 123
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     bd4:	2a e5       	ldi	r18, 0x5A	; 90
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	82 e1       	ldi	r24, 0x12	; 18
     be2:	96 e0       	ldi	r25, 0x06	; 6
     be4:	0e 94 4d 09 	call	0x129a	; 0x129a <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     be8:	2a e5       	ldi	r18, 0x5A	; 90
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	42 e0       	ldi	r20, 0x02	; 2
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	88 e8       	ldi	r24, 0x88	; 136
     bf6:	96 e0       	ldi	r25, 0x06	; 6
     bf8:	0e 94 4d 09 	call	0x129a	; 0x129a <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     bfc:	ee e6       	ldi	r30, 0x6E	; 110
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	82 e1       	ldi	r24, 0x12	; 18
     c02:	96 e0       	ldi	r25, 0x06	; 6
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     c08:	88 e8       	ldi	r24, 0x88	; 136
     c0a:	96 e0       	ldi	r25, 0x06	; 6
     c0c:	93 83       	std	Z+3, r25	; 0x03
     c0e:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     c10:	84 e5       	ldi	r24, 0x54	; 84
     c12:	96 e0       	ldi	r25, 0x06	; 6
     c14:	95 83       	std	Z+5, r25	; 0x05
     c16:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     c18:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <current_servo>
	//printf("Init servos\n");
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     c1c:	c8 e1       	ldi	r28, 0x18	; 24
     c1e:	d6 e0       	ldi	r29, 0x06	; 6
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     c24:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <IR_A+0x8>
     c28:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     c2a:	a2 eb       	ldi	r26, 0xB2	; 178
     c2c:	b6 e0       	ldi	r27, 0x06	; 6
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	8c 93       	st	X, r24
     c34:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     c36:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <IR_B+0x8>
     c3a:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     c3c:	e4 e7       	ldi	r30, 0x74	; 116
     c3e:	f6 e0       	ldi	r31, 0x06	; 6
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     c44:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <IR_C+0x8>
     c48:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     c52:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     c5a:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     c5c:	8c e1       	ldi	r24, 0x1C	; 28
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	91 83       	std	Z+1, r25	; 0x01
     c62:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     c64:	88 e1       	ldi	r24, 0x18	; 24
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	93 83       	std	Z+3, r25	; 0x03
     c6a:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     c6c:	82 eb       	ldi	r24, 0xB2	; 178
     c6e:	96 e0       	ldi	r25, 0x06	; 6
     c70:	95 83       	std	Z+5, r25	; 0x05
     c72:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     c74:	84 e7       	ldi	r24, 0x74	; 116
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	97 83       	std	Z+7, r25	; 0x07
     c7a:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     c7c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     c80:	88 23       	and	r24, r24
     c82:	44 f4       	brge	.+16     	; 0xc94 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     c84:	8c e9       	ldi	r24, 0x9C	; 156
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     c8c:	8e ec       	ldi	r24, 0xCE	; 206
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
     c94:	08 95       	ret

00000c96 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     c96:	8e 3b       	cpi	r24, 0xBE	; 190
     c98:	98 f0       	brcs	.+38     	; 0xcc0 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     c9a:	90 91 53 06 	lds	r25, 0x0653	; 0x800653 <bandera2>
     c9e:	99 23       	and	r25, r25
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <classify_box+0xe>
     ca2:	83 c0       	rjmp	.+262    	; 0xdaa <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     ca4:	1f 92       	push	r1
     ca6:	8f 93       	push	r24
     ca8:	83 ef       	ldi	r24, 0xF3	; 243
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
		}
		return NO_BOX;
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     cc0:	9e eb       	ldi	r25, 0xBE	; 190
     cc2:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     cc4:	97 33       	cpi	r25, 0x37	; 55
     cc6:	98 f4       	brcc	.+38     	; 0xcee <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     cc8:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     ccc:	80 78       	andi	r24, 0x80	; 128
     cce:	09 f4       	brne	.+2      	; 0xcd2 <classify_box+0x3c>
     cd0:	73 c0       	rjmp	.+230    	; 0xdb8 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     cd2:	1f 92       	push	r1
     cd4:	9f 93       	push	r25
     cd6:	83 e2       	ldi	r24, 0x23	; 35
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     cee:	db 01       	movw	r26, r22
     cf0:	ed 91       	ld	r30, X+
     cf2:	fc 91       	ld	r31, X
     cf4:	80 81       	ld	r24, Z
     cf6:	98 17       	cp	r25, r24
     cf8:	b0 f0       	brcs	.+44     	; 0xd26 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     cfa:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     cfc:	89 17       	cp	r24, r25
     cfe:	98 f0       	brcs	.+38     	; 0xd26 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     d00:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     d04:	88 23       	and	r24, r24
     d06:	0c f0       	brlt	.+2      	; 0xd0a <classify_box+0x74>
     d08:	52 c0       	rjmp	.+164    	; 0xdae <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     d0a:	1f 92       	push	r1
     d0c:	9f 93       	push	r25
     d0e:	8c e4       	ldi	r24, 0x4C	; 76
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	98 17       	cp	r25, r24
     d2a:	a8 f0       	brcs	.+42     	; 0xd56 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     d2e:	89 17       	cp	r24, r25
     d30:	90 f0       	brcs	.+36     	; 0xd56 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     d32:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     d36:	88 23       	and	r24, r24
     d38:	e4 f5       	brge	.+120    	; 0xdb2 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     d3a:	1f 92       	push	r1
     d3c:	9f 93       	push	r25
     d3e:	81 e6       	ldi	r24, 0x61	; 97
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     d56:	84 81       	ldd	r24, Z+4	; 0x04
     d58:	98 17       	cp	r25, r24
     d5a:	a8 f0       	brcs	.+42     	; 0xd86 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     d5c:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     d5e:	89 17       	cp	r24, r25
     d60:	90 f0       	brcs	.+36     	; 0xd86 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     d62:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     d66:	88 23       	and	r24, r24
     d68:	34 f5       	brge	.+76     	; 0xdb6 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     d6a:	1f 92       	push	r1
     d6c:	9f 93       	push	r25
     d6e:	86 e7       	ldi	r24, 0x76	; 118
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     d86:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     d8a:	80 78       	andi	r24, 0x80	; 128
     d8c:	a9 f0       	breq	.+42     	; 0xdb8 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     d8e:	1f 92       	push	r1
     d90:	9f 93       	push	r25
     d92:	8b e8       	ldi	r24, 0x8B	; 139
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     db6:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     db8:	08 95       	ret

00000dba <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
     dc6:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
     dc8:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     dcc:	88 23       	and	r24, r24
     dce:	bc f5       	brge	.+110    	; 0xe3e <ultraSensorTask+0x84>
     dd0:	e8 81       	ld	r30, Y
     dd2:	f9 81       	ldd	r31, Y+1	; 0x01
     dd4:	84 85       	ldd	r24, Z+12	; 0x0c
     dd6:	85 ff       	sbrs	r24, 5
     dd8:	32 c0       	rjmp	.+100    	; 0xe3e <ultraSensorTask+0x84>
     dda:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     dde:	81 ff       	sbrs	r24, 1
     de0:	2e c0       	rjmp	.+92     	; 0xe3e <ultraSensorTask+0x84>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	81 ff       	sbrs	r24, 1
     de6:	2b c0       	rjmp	.+86     	; 0xe3e <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     de8:	cf 01       	movw	r24, r30
     dea:	0e 94 8f 0b 	call	0x171e	; 0x171e <ultrasonic_start>
     dee:	88 23       	and	r24, r24
     df0:	c1 f0       	breq	.+48     	; 0xe22 <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
     df2:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     df6:	86 ff       	sbrs	r24, 6
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
     dfa:	89 eb       	ldi	r24, 0xB9	; 185
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     e02:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     e0c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     e10:	8d 7f       	andi	r24, 0xFD	; 253
     e12:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     e16:	e8 81       	ld	r30, Y
     e18:	f9 81       	ldd	r31, Y+1	; 0x01
     e1a:	84 85       	ldd	r24, Z+12	; 0x0c
     e1c:	8f 7d       	andi	r24, 0xDF	; 223
     e1e:	84 87       	std	Z+12, r24	; 0x0c
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
     e22:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     e26:	86 ff       	sbrs	r24, 6
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
     e2a:	84 eb       	ldi	r24, 0xB4	; 180
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			}
			EMIT_FAILED = 1;
     e32:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
			EMIT_TRIGGER = 0;
     e36:	84 60       	ori	r24, 0x04	; 4
     e38:	8d 7f       	andi	r24, 0xFD	; 253
     e3a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     e3e:	88 81       	ld	r24, Y
     e40:	99 81       	ldd	r25, Y+1	; 0x01
     e42:	0e 94 bd 0b 	call	0x177a	; 0x177a <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     e46:	e8 81       	ld	r30, Y
     e48:	f9 81       	ldd	r31, Y+1	; 0x01
     e4a:	85 85       	ldd	r24, Z+13	; 0x0d
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	09 f0       	breq	.+2      	; 0xe52 <ultraSensorTask+0x98>
     e50:	c1 c0       	rjmp	.+386    	; 0xfd4 <ultraSensorTask+0x21a>
     e52:	84 85       	ldd	r24, Z+12	; 0x0c
     e54:	88 23       	and	r24, r24
     e56:	0c f0       	brlt	.+2      	; 0xe5a <ultraSensorTask+0xa0>
     e58:	bd c0       	rjmp	.+378    	; 0xfd4 <ultraSensorTask+0x21a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     e5a:	84 85       	ldd	r24, Z+12	; 0x0c
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     e60:	e8 81       	ld	r30, Y
     e62:	f9 81       	ldd	r31, Y+1	; 0x01
     e64:	80 85       	ldd	r24, Z+8	; 0x08
     e66:	91 85       	ldd	r25, Z+9	; 0x09
     e68:	a2 85       	ldd	r26, Z+10	; 0x0a
     e6a:	b3 85       	ldd	r27, Z+11	; 0x0b
     e6c:	8f 3b       	cpi	r24, 0xBF	; 191
     e6e:	91 05       	cpc	r25, r1
     e70:	a1 05       	cpc	r26, r1
     e72:	b1 05       	cpc	r27, r1
     e74:	b0 f0       	brcs	.+44     	; 0xea2 <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     e7c:	98 2f       	mov	r25, r24
     e7e:	92 95       	swap	r25
     e80:	9f 70       	andi	r25, 0x0F	; 15
     e82:	92 30       	cpi	r25, 0x02	; 2
     e84:	51 f4       	brne	.+20     	; 0xe9a <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     e8a:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     e8e:	88 23       	and	r24, r24
     e90:	24 f4       	brge	.+8      	; 0xe9a <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
     e92:	84 ec       	ldi	r24, 0xC4	; 196
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	8c 83       	std	Y+4, r24	; 0x04
     ea0:	8d c0       	rjmp	.+282    	; 0xfbc <ultraSensorTask+0x202>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	98 2f       	mov	r25, r24
     ea6:	92 95       	swap	r25
     ea8:	9f 70       	andi	r25, 0x0F	; 15
     eaa:	09 f0       	breq	.+2      	; 0xeae <ultraSensorTask+0xf4>
     eac:	87 c0       	rjmp	.+270    	; 0xfbc <ultraSensorTask+0x202>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     eae:	8f 70       	andi	r24, 0x0F	; 15
     eb0:	80 61       	ori	r24, 0x10	; 16
     eb2:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     eb4:	80 85       	ldd	r24, Z+8	; 0x08
     eb6:	91 85       	ldd	r25, Z+9	; 0x09
     eb8:	a2 85       	ldd	r26, Z+10	; 0x0a
     eba:	b3 85       	ldd	r27, Z+11	; 0x0b
     ebc:	b8 01       	movw	r22, r16
     ebe:	0e 94 4b 06 	call	0xc96	; 0xc96 <classify_box>
     ec2:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	f8 16       	cp	r15, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <ultraSensorTask+0x112>
     eca:	74 c0       	rjmp	.+232    	; 0xfb4 <ultraSensorTask+0x1fa>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     ecc:	e8 81       	ld	r30, Y
     ece:	f9 81       	ldd	r31, Y+1	; 0x01
     ed0:	80 85       	ldd	r24, Z+8	; 0x08
     ed2:	91 85       	ldd	r25, Z+9	; 0x09
     ed4:	a2 85       	ldd	r26, Z+10	; 0x0a
     ed6:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     ed8:	e1 e0       	ldi	r30, 0x01	; 1
     eda:	fe 16       	cp	r15, r30
     edc:	49 f0       	breq	.+18     	; 0xef0 <ultraSensorTask+0x136>
     ede:	fe 16       	cp	r15, r30
     ee0:	28 f1       	brcs	.+74     	; 0xf2c <ultraSensorTask+0x172>
     ee2:	f2 e0       	ldi	r31, 0x02	; 2
     ee4:	ff 16       	cp	r15, r31
     ee6:	71 f0       	breq	.+28     	; 0xf04 <ultraSensorTask+0x14a>
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	f8 16       	cp	r15, r24
     eec:	a9 f0       	breq	.+42     	; 0xf18 <ultraSensorTask+0x15e>
     eee:	23 c0       	rjmp	.+70     	; 0xf36 <ultraSensorTask+0x17c>
					{
						case BOX_SIZE_A: 
							printf("BOX_SIZE_A\n");
     ef0:	8d ed       	ldi	r24, 0xDD	; 221
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
							SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
     ef8:	e8 e1       	ldi	r30, 0x18	; 24
     efa:	f6 e0       	ldi	r31, 0x06	; 6
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	82 83       	std	Z+2, r24	; 0x02
							break;
     f02:	1d c0       	rjmp	.+58     	; 0xf3e <ultraSensorTask+0x184>
						case BOX_SIZE_B: 
							printf("BOX_SIZE_B\n");
     f04:	88 ee       	ldi	r24, 0xE8	; 232
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
							SET_FLAG(salidaB.flags, OUTPUT_BUSY);
     f0c:	e2 eb       	ldi	r30, 0xB2	; 178
     f0e:	f6 e0       	ldi	r31, 0x06	; 6
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	81 60       	ori	r24, 0x01	; 1
     f14:	82 83       	std	Z+2, r24	; 0x02
							break;
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <ultraSensorTask+0x184>
						case BOX_SIZE_C:
							printf("BOX_SIZE_C\n");
     f18:	83 ef       	ldi	r24, 0xF3	; 243
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
							SET_FLAG(salidaC.flags, OUTPUT_BUSY);
     f20:	e4 e7       	ldi	r30, 0x74	; 116
     f22:	f6 e0       	ldi	r31, 0x06	; 6
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	82 83       	std	Z+2, r24	; 0x02
							break;
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <ultraSensorTask+0x184>
						case BOX_DISCARDED:
							printf("BOX_DISCARDED\n");
     f2c:	8e ef       	ldi	r24, 0xFE	; 254
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
							break;
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <ultraSensorTask+0x184>
						default: 
							printf("Tipo no reconocido\n");
     f36:	8c e0       	ldi	r24, 0x0C	; 12
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
							break;
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     f3e:	f1 10       	cpse	r15, r1
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <ultraSensorTask+0x1a2>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     f42:	f8 01       	movw	r30, r16
     f44:	80 89       	ldd	r24, Z+16	; 0x10
     f46:	91 89       	ldd	r25, Z+17	; 0x11
     f48:	a2 89       	ldd	r26, Z+18	; 0x12
     f4a:	b3 89       	ldd	r27, Z+19	; 0x13
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a1 1d       	adc	r26, r1
     f50:	b1 1d       	adc	r27, r1
     f52:	80 8b       	std	Z+16, r24	; 0x10
     f54:	91 8b       	std	Z+17, r25	; 0x11
     f56:	a2 8b       	std	Z+18, r26	; 0x12
     f58:	b3 8b       	std	Z+19, r27	; 0x13
     f5a:	0c c0       	rjmp	.+24     	; 0xf74 <ultraSensorTask+0x1ba>
					}
					else
					{
						sorter->stats.total_selected++;
     f5c:	f8 01       	movw	r30, r16
     f5e:	84 85       	ldd	r24, Z+12	; 0x0c
     f60:	95 85       	ldd	r25, Z+13	; 0x0d
     f62:	a6 85       	ldd	r26, Z+14	; 0x0e
     f64:	b7 85       	ldd	r27, Z+15	; 0x0f
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	a1 1d       	adc	r26, r1
     f6a:	b1 1d       	adc	r27, r1
     f6c:	84 87       	std	Z+12, r24	; 0x0c
     f6e:	95 87       	std	Z+13, r25	; 0x0d
     f70:	a6 87       	std	Z+14, r26	; 0x0e
     f72:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     f74:	f8 01       	movw	r30, r16
     f76:	80 85       	ldd	r24, Z+8	; 0x08
     f78:	91 85       	ldd	r25, Z+9	; 0x09
     f7a:	a2 85       	ldd	r26, Z+10	; 0x0a
     f7c:	b3 85       	ldd	r27, Z+11	; 0x0b
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	a1 1d       	adc	r26, r1
     f82:	b1 1d       	adc	r27, r1
     f84:	80 87       	std	Z+8, r24	; 0x08
     f86:	91 87       	std	Z+9, r25	; 0x09
     f88:	a2 87       	std	Z+10, r26	; 0x0a
     f8a:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     f8c:	ef 2d       	mov	r30, r15
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	35 96       	adiw	r30, 0x05	; 5
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e0 0f       	add	r30, r16
     f9c:	f1 1f       	adc	r31, r17
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	a2 81       	ldd	r26, Z+2	; 0x02
     fa4:	b3 81       	ldd	r27, Z+3	; 0x03
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	a2 83       	std	Z+2, r26	; 0x02
     fb2:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	8f 70       	andi	r24, 0x0F	; 15
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     fbc:	88 81       	ld	r24, Y
     fbe:	99 81       	ldd	r25, Y+1	; 0x01
     fc0:	0e 94 2e 0b 	call	0x165c	; 0x165c <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     fc4:	e8 81       	ld	r30, Y
     fc6:	f9 81       	ldd	r31, Y+1	; 0x01
     fc8:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     fca:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     fd4:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
     fd8:	80 ff       	sbrs	r24, 0
     fda:	2d c0       	rjmp	.+90     	; 0x1036 <ultraSensorTask+0x27c>
	{
		if (DEBUG_FLAGS)
     fdc:	86 ff       	sbrs	r24, 6
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <ultraSensorTask+0x22e>
		{
			printf("HCSR04 perdio ECHO\n");
     fe0:	8f e1       	ldi	r24, 0x1F	; 31
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}
		VEINTEMS_PASSED = 0;
     fe8:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
		WAITING_ECHO = 0;
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	87 7f       	andi	r24, 0xF7	; 247
     ff0:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     ff4:	e8 81       	ld	r30, Y
     ff6:	f9 81       	ldd	r31, Y+1	; 0x01
     ff8:	84 85       	ldd	r24, Z+12	; 0x0c
     ffa:	88 60       	ori	r24, 0x08	; 8
     ffc:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	86 e0       	ldi	r24, 0x06	; 6
    1004:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
    1006:	60 91 53 06 	lds	r22, 0x0653	; 0x800653 <bandera2>
    100a:	66 fb       	bst	r22, 6
    100c:	66 27       	eor	r22, r22
    100e:	60 f9       	bld	r22, 0
    1010:	88 81       	ld	r24, Y
    1012:	99 81       	ldd	r25, Y+1	; 0x01
    1014:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <ultrasonic_timeout_clear>
    1018:	88 23       	and	r24, r24
    101a:	41 f0       	breq	.+16     	; 0x102c <ultraSensorTask+0x272>
    101c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <bandera2>
    1020:	86 ff       	sbrs	r24, 6
    1022:	04 c0       	rjmp	.+8      	; 0x102c <ultraSensorTask+0x272>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
    1024:	82 e3       	ldi	r24, 0x32	; 50
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}

		ULTRASONIC_ENABLE = 1;
    102c:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <bandera>
    1030:	80 68       	ori	r24, 0x80	; 128
    1032:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <bandera>
	}
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	08 95       	ret

00001042 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
    1042:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
    1046:	80 ff       	sbrs	r24, 0
    1048:	09 c0       	rjmp	.+18     	; 0x105c <irSensorsTask+0x1a>
    104a:	83 ff       	sbrs	r24, 3
    104c:	07 c0       	rjmp	.+14     	; 0x105c <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
    104e:	87 7f       	andi	r24, 0xF7	; 247
    1050:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <IR_A>
		tcrt_read(&IR_A);
    1054:	8a e5       	ldi	r24, 0x5A	; 90
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	0e 94 0f 0a 	call	0x141e	; 0x141e <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
    105c:	8a e5       	ldi	r24, 0x5A	; 90
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	0e 94 40 0a 	call	0x1480	; 0x1480 <tcrt_is_box_detected>
    1064:	89 2b       	or	r24, r25
    1066:	11 f1       	breq	.+68     	; 0x10ac <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1068:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <IR_A>
    106c:	82 95       	swap	r24
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	e1 f4       	brne	.+56     	; 0x10ac <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
    1074:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <salidaA+0x2>
    1078:	83 ff       	sbrs	r24, 3
    107a:	0f c0       	rjmp	.+30     	; 0x109a <irSensorsTask+0x58>
    107c:	80 ff       	sbrs	r24, 0
    107e:	0d c0       	rjmp	.+26     	; 0x109a <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
    1086:	e2 e1       	ldi	r30, 0x12	; 18
    1088:	f6 e0       	ldi	r31, 0x06	; 6
    108a:	81 81       	ldd	r24, Z+1	; 0x01
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
    1090:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
    1092:	84 e5       	ldi	r24, 0x54	; 84
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
    109a:	ea e5       	ldi	r30, 0x5A	; 90
    109c:	f6 e0       	ldi	r31, 0x06	; 6
    109e:	80 81       	ld	r24, Z
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
    10a4:	89 e7       	ldi	r24, 0x79	; 121
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    10ac:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
    10b0:	80 ff       	sbrs	r24, 0
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <irSensorsTask+0x84>
    10b4:	83 ff       	sbrs	r24, 3
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
    10b8:	87 7f       	andi	r24, 0xF7	; 247
    10ba:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <IR_B>
		tcrt_read(&IR_B);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	96 e0       	ldi	r25, 0x06	; 6
    10c2:	0e 94 0f 0a 	call	0x141e	; 0x141e <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	0e 94 40 0a 	call	0x1480	; 0x1480 <tcrt_is_box_detected>
    10ce:	89 2b       	or	r24, r25
    10d0:	11 f1       	breq	.+68     	; 0x1116 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    10d2:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <IR_B>
    10d6:	82 95       	swap	r24
    10d8:	8f 70       	andi	r24, 0x0F	; 15
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	e1 f4       	brne	.+56     	; 0x1116 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
    10de:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <salidaB+0x2>
    10e2:	83 ff       	sbrs	r24, 3
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <irSensorsTask+0xc2>
    10e6:	80 ff       	sbrs	r24, 0
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
    10ea:	87 7f       	andi	r24, 0xF7	; 247
    10ec:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
    10f0:	e8 e8       	ldi	r30, 0x88	; 136
    10f2:	f6 e0       	ldi	r31, 0x06	; 6
    10f4:	81 81       	ldd	r24, Z+1	; 0x01
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
    10fa:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
    10fc:	89 e8       	ldi	r24, 0x89	; 137
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    1104:	e3 e0       	ldi	r30, 0x03	; 3
    1106:	f6 e0       	ldi	r31, 0x06	; 6
    1108:	80 81       	ld	r24, Z
    110a:	8f 70       	andi	r24, 0x0F	; 15
    110c:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    110e:	8e ea       	ldi	r24, 0xAE	; 174
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    1116:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
    111a:	80 ff       	sbrs	r24, 0
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <irSensorsTask+0xee>
    111e:	83 ff       	sbrs	r24, 3
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <IR_C>
		tcrt_read(&IR_C);
    1128:	8b e2       	ldi	r24, 0x2B	; 43
    112a:	96 e0       	ldi	r25, 0x06	; 6
    112c:	0e 94 0f 0a 	call	0x141e	; 0x141e <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    1130:	8b e2       	ldi	r24, 0x2B	; 43
    1132:	96 e0       	ldi	r25, 0x06	; 6
    1134:	0e 94 40 0a 	call	0x1480	; 0x1480 <tcrt_is_box_detected>
    1138:	89 2b       	or	r24, r25
    113a:	11 f1       	breq	.+68     	; 0x1180 <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    113c:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <IR_C>
    1140:	82 95       	swap	r24
    1142:	8f 70       	andi	r24, 0x0F	; 15
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	e1 f4       	brne	.+56     	; 0x1180 <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    1148:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <salidaC+0x2>
    114c:	83 ff       	sbrs	r24, 3
    114e:	0f c0       	rjmp	.+30     	; 0x116e <irSensorsTask+0x12c>
    1150:	80 ff       	sbrs	r24, 0
    1152:	0d c0       	rjmp	.+26     	; 0x116e <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    1154:	87 7f       	andi	r24, 0xF7	; 247
    1156:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    115a:	e4 e5       	ldi	r30, 0x54	; 84
    115c:	f6 e0       	ldi	r31, 0x06	; 6
    115e:	81 81       	ldd	r24, Z+1	; 0x01
    1160:	82 60       	ori	r24, 0x02	; 2
    1162:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1164:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1166:	8e eb       	ldi	r24, 0xBE	; 190
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    116e:	eb e2       	ldi	r30, 0x2B	; 43
    1170:	f6 e0       	ldi	r31, 0x06	; 6
    1172:	80 81       	ld	r24, Z
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1178:	83 ee       	ldi	r24, 0xE3	; 227
    117a:	93 e0       	ldi	r25, 0x03	; 3
    117c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    1180:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <IR_U>
    1184:	80 ff       	sbrs	r24, 0
    1186:	09 c0       	rjmp	.+18     	; 0x119a <irSensorsTask+0x158>
    1188:	83 ff       	sbrs	r24, 3
    118a:	07 c0       	rjmp	.+14     	; 0x119a <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    118c:	87 7f       	andi	r24, 0xF7	; 247
    118e:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <IR_U>
		tcrt_read(&IR_U);
    1192:	8b e1       	ldi	r24, 0x1B	; 27
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	0e 94 0f 0a 	call	0x141e	; 0x141e <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    119a:	8b e1       	ldi	r24, 0x1B	; 27
    119c:	96 e0       	ldi	r25, 0x06	; 6
    119e:	0e 94 40 0a 	call	0x1480	; 0x1480 <tcrt_is_box_detected>
    11a2:	89 2b       	or	r24, r25
    11a4:	e1 f0       	breq	.+56     	; 0x11de <irSensorsTask+0x19c>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    11a6:	90 91 1b 06 	lds	r25, 0x061B	; 0x80061b <IR_U>
    11aa:	89 2f       	mov	r24, r25
    11ac:	82 95       	swap	r24
    11ae:	8f 70       	andi	r24, 0x0F	; 15
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <irSensorsTask+0x182>
    11b4:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <hcsr04Detector+0x4>
    11b8:	21 fd       	sbrc	r18, 1
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <irSensorsTask+0x182>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    11bc:	22 60       	ori	r18, 0x02	; 2
    11be:	20 93 6d 06 	sts	0x066D, r18	; 0x80066d <hcsr04Detector+0x4>
    11c2:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	b9 f4       	brne	.+46     	; 0x11f6 <irSensorsTask+0x1b4>
    11c8:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <hcsr04Detector+0x4>
    11cc:	81 ff       	sbrs	r24, 1
    11ce:	13 c0       	rjmp	.+38     	; 0x11f6 <irSensorsTask+0x1b4>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			//printf("IR U detecto: la caja salió\n");
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    11d0:	8d 7f       	andi	r24, 0xFD	; 253
    11d2:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <hcsr04Detector+0x4>
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    11d6:	9f 70       	andi	r25, 0x0F	; 15
    11d8:	90 93 1b 06 	sts	0x061B, r25	; 0x80061b <IR_U>
    11dc:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    11de:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <hcsr04Detector+0x4>
    11e2:	81 ff       	sbrs	r24, 1
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <irSensorsTask+0x1b4>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    11e6:	8d 7f       	andi	r24, 0xFD	; 253
    11e8:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    11ec:	eb e1       	ldi	r30, 0x1B	; 27
    11ee:	f6 e0       	ldi	r31, 0x06	; 6
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 70       	andi	r24, 0x0F	; 15
    11f4:	80 83       	st	Z, r24
    11f6:	08 95       	ret

000011f8 <servosTask>:
				//printf("IR U Idle again\n");
			}
	}
}

void servosTask() {
    11f8:	08 95       	ret

000011fa <initProtocolService>:
// 	// Verificar el checksum
// 	if (pak.checksum != calculate_checksum(&pak)) {
// 		printf("Error: Checksum inválido\n");
// 	}
// 	return pak;
}
    11fa:	fc 01       	movw	r30, r24
    11fc:	12 82       	std	Z+2, r1	; 0x02
    11fe:	11 82       	std	Z+1, r1	; 0x01
    1200:	10 82       	st	Z, r1
    1202:	12 a2       	std	Z+34, r1	; 0x22
    1204:	83 ef       	ldi	r24, 0xF3	; 243
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
    120c:	08 95       	ret

0000120e <verify_header>:

bool verify_header() {
	// Asegurarse de que hay al menos 4 bytes disponibles (esto depende de la implementación del buffer)
	// Primero, comprobamos que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
    120e:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <protocolService+0x1>
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	e2 57       	subi	r30, 0x72	; 114
    1218:	f9 4f       	sbci	r31, 0xF9	; 249
    121a:	22 81       	ldd	r18, Z+2	; 0x02
    121c:	25 35       	cpi	r18, 0x55	; 85
    121e:	59 f4       	brne	.+22     	; 0x1236 <verify_header+0x28>
	}
	
	uint8_t idx0 = protocolService.indexR; //254
	uint8_t idx1 = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	uint8_t idx2 = (protocolService.indexR + 2) % PROTOCOL_BUFFER_SIZE;
	uint8_t idx3 = (protocolService.indexR + 3) % PROTOCOL_BUFFER_SIZE;
    1220:	03 96       	adiw	r24, 0x03	; 3
    1222:	8f 71       	andi	r24, 0x1F	; 31
    1224:	90 78       	andi	r25, 0x80	; 128
    1226:	99 23       	and	r25, r25
    1228:	24 f4       	brge	.+8      	; 0x1232 <verify_header+0x24>
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	80 6e       	ori	r24, 0xE0	; 224
    122e:	9f 6f       	ori	r25, 0xFF	; 255
    1230:	01 96       	adiw	r24, 0x01	; 1
		printf("Computado %u, Esperaba %u", computed, EXPECTED_HEADER_SUM);
		return true;  // La cabecera es válida.
		} else {
		// No coincide; ajustar indexR para descartar este candidato.
		// Se posiciona en la ubicación del cuarto byte (U + 3), donde debería estar 'R'.
		protocolService.indexR = idx3;  // O, si es un buffer circular, aplicar módulo.
    1232:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <protocolService+0x1>
		return false;
	}
}
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret

0000123a <process_protocol_buffer>:

bool process_protocol_buffer() {
	// Verificar si hay al menos 4 bytes para el header
	// (la verificación de tamaño depende de tu implementación del buffer)
	if((protocolService.indexW - protocolService.indexR)<4){
    123a:	ee e8       	ldi	r30, 0x8E	; 142
    123c:	f6 e0       	ldi	r31, 0x06	; 6
    123e:	80 81       	ld	r24, Z
    1240:	21 81       	ldd	r18, Z+1	; 0x01
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	82 1b       	sub	r24, r18
    1246:	91 09       	sbc	r25, r1
    1248:	04 97       	sbiw	r24, 0x04	; 4
    124a:	34 f4       	brge	.+12     	; 0x1258 <process_protocol_buffer+0x1e>
		printf("Menos de 4 bytes en buffer\n");
    124c:	89 e0       	ldi	r24, 0x09	; 9
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		return false;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	08 95       	ret
	}
	if (verify_header()) {
    1258:	0e 94 07 09 	call	0x120e	; 0x120e <verify_header>
    125c:	88 23       	and	r24, r24
    125e:	29 f0       	breq	.+10     	; 0x126a <process_protocol_buffer+0x30>
		printf("Header UNER válido\n");
    1260:	84 e2       	ldi	r24, 0x24	; 36
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <process_protocol_buffer+0x38>
		// Se continúa procesando el paquete...
		} else {
		printf("Header inválido, descartado\n");
    126a:	87 e3       	ldi	r24, 0x37	; 55
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
		// Se puede reintentar leer otro candidato
	}
    1272:	08 95       	ret

00001274 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    1274:	85 3b       	cpi	r24, 0xB5	; 181
    1276:	08 f0       	brcs	.+2      	; 0x127a <calculate_angle_pulseUs+0x6>
    1278:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a0 ed       	ldi	r26, 0xD0	; 208
    1280:	b7 e0       	ldi	r27, 0x07	; 7
    1282:	0e 94 43 0c 	call	0x1886	; 0x1886 <__umulhisi3>
    1286:	24 eb       	ldi	r18, 0xB4	; 180
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodsi4>
}
    1292:	c9 01       	movw	r24, r18
    1294:	80 53       	subi	r24, 0x30	; 48
    1296:	98 4f       	sbci	r25, 0xF8	; 248
    1298:	08 95       	ret

0000129a <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
    12a4:	04 2f       	mov	r16, r20
    12a6:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    12a8:	1f 92       	push	r1
    12aa:	6f 93       	push	r22
    12ac:	83 e5       	ldi	r24, 0x53	; 83
    12ae:	94 e0       	ldi	r25, 0x04	; 4
    12b0:	9f 93       	push	r25
    12b2:	8f 93       	push	r24
    12b4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
	servo->flags.byte = 0;
    12b8:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    12ba:	81 2f       	mov	r24, r17
    12bc:	0e 94 3a 09 	call	0x1274	; 0x1274 <calculate_angle_pulseUs>
    12c0:	9b 83       	std	Y+3, r25	; 0x03
    12c2:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    12c4:	08 83       	st	Y, r16
	servo->angle = startAngle;
    12c6:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    12e2:	87 b1       	in	r24, 0x07	; 7
    12e4:	80 7f       	andi	r24, 0xF0	; 240
    12e6:	87 b9       	out	0x07, r24	; 7
    12e8:	88 b1       	in	r24, 0x08	; 8
    12ea:	80 7f       	andi	r24, 0xF0	; 240
    12ec:	88 b9       	out	0x08, r24	; 8
    12ee:	80 e4       	ldi	r24, 0x40	; 64
    12f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    12f4:	86 e8       	ldi	r24, 0x86	; 134
    12f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    12fa:	08 95       	ret

000012fc <tcrt_read_channel>:
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	a0 f4       	brcc	.+40     	; 0x1328 <tcrt_read_channel+0x2c>
    1300:	ec e7       	ldi	r30, 0x7C	; 124
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	90 81       	ld	r25, Z
    1306:	90 7f       	andi	r25, 0xF0	; 240
    1308:	89 2b       	or	r24, r25
    130a:	80 83       	st	Z, r24
    130c:	ea e7       	ldi	r30, 0x7A	; 122
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 64       	ori	r24, 0x40	; 64
    1314:	80 83       	st	Z, r24
    1316:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    131a:	86 fd       	sbrc	r24, 6
    131c:	fc cf       	rjmp	.-8      	; 0x1316 <tcrt_read_channel+0x1a>
    131e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1322:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1326:	08 95       	ret
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	08 95       	ret

0000132e <TCRT_init_Handlers>:
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ea e5       	ldi	r30, 0x5A	; 90
    1334:	f6 e0       	ldi	r31, 0x06	; 6
    1336:	17 82       	std	Z+7, r1	; 0x07
    1338:	10 86       	std	Z+8, r1	; 0x08
    133a:	12 82       	std	Z+2, r1	; 0x02
    133c:	11 82       	std	Z+1, r1	; 0x01
    133e:	16 82       	std	Z+6, r1	; 0x06
    1340:	15 82       	std	Z+5, r1	; 0x05
    1342:	d4 e1       	ldi	r29, 0x14	; 20
    1344:	d6 87       	std	Z+14, r29	; 0x0e
    1346:	c1 e0       	ldi	r28, 0x01	; 1
    1348:	c0 83       	st	Z, r28
    134a:	82 e6       	ldi	r24, 0x62	; 98
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
    1352:	e3 e0       	ldi	r30, 0x03	; 3
    1354:	f6 e0       	ldi	r31, 0x06	; 6
    1356:	10 82       	st	Z, r1
    1358:	c7 83       	std	Z+7, r28	; 0x07
    135a:	c0 87       	std	Z+8, r28	; 0x08
    135c:	12 82       	std	Z+2, r1	; 0x02
    135e:	11 82       	std	Z+1, r1	; 0x01
    1360:	16 82       	std	Z+6, r1	; 0x06
    1362:	15 82       	std	Z+5, r1	; 0x05
    1364:	d6 87       	std	Z+14, r29	; 0x0e
    1366:	eb e2       	ldi	r30, 0x2B	; 43
    1368:	f6 e0       	ldi	r31, 0x06	; 6
    136a:	10 82       	st	Z, r1
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	87 83       	std	Z+7, r24	; 0x07
    1370:	80 87       	std	Z+8, r24	; 0x08
    1372:	12 82       	std	Z+2, r1	; 0x02
    1374:	11 82       	std	Z+1, r1	; 0x01
    1376:	16 82       	std	Z+6, r1	; 0x06
    1378:	15 82       	std	Z+5, r1	; 0x05
    137a:	d6 87       	std	Z+14, r29	; 0x0e
    137c:	eb e1       	ldi	r30, 0x1B	; 27
    137e:	f6 e0       	ldi	r31, 0x06	; 6
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	87 83       	std	Z+7, r24	; 0x07
    1384:	80 87       	std	Z+8, r24	; 0x08
    1386:	12 82       	std	Z+2, r1	; 0x02
    1388:	11 82       	std	Z+1, r1	; 0x01
    138a:	16 82       	std	Z+6, r1	; 0x06
    138c:	15 82       	std	Z+5, r1	; 0x05
    138e:	d6 87       	std	Z+14, r29	; 0x0e
    1390:	c0 83       	st	Z, r28
    1392:	81 e7       	ldi	r24, 0x71	; 113
    1394:	94 e0       	ldi	r25, 0x04	; 4
    1396:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <puts>
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    13a6:	88 81       	ld	r24, Y
    13a8:	83 ff       	sbrs	r24, 3
    13aa:	36 c0       	rjmp	.+108    	; 0x1418 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    13ac:	87 7f       	andi	r24, 0xF7	; 247
    13ae:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	81 11       	cpse	r24, r1
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    13b6:	1e 82       	std	Y+6, r1	; 0x06
    13b8:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	0e 94 7e 09 	call	0x12fc	; 0x12fc <tcrt_read_channel>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	28 0f       	add	r18, r24
    13c6:	39 1f       	adc	r19, r25
    13c8:	3e 83       	std	Y+6, r19	; 0x06
    13ca:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    13cc:	99 85       	ldd	r25, Y+9	; 0x09
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    13d2:	9a 30       	cpi	r25, 0x0A	; 10
    13d4:	08 f1       	brcs	.+66     	; 0x1418 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    13d6:	ad ec       	ldi	r26, 0xCD	; 205
    13d8:	bc ec       	ldi	r27, 0xCC	; 204
    13da:	0e 94 43 0c 	call	0x1886	; 0x1886 <__umulhisi3>
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    13ee:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    13f0:	28 81       	ld	r18, Y
    13f2:	2b 7f       	andi	r18, 0xFB	; 251
    13f4:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    13f6:	2f 81       	ldd	r18, Y+7	; 0x07
    13f8:	9f 93       	push	r25
    13fa:	8f 93       	push	r24
    13fc:	1f 92       	push	r1
    13fe:	2f 93       	push	r18
    1400:	80 e8       	ldi	r24, 0x80	; 128
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	9f 93       	push	r25
    1406:	8f 93       	push	r24
    1408:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <printf>
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
		}
	}
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    1428:	8f 81       	ldd	r24, Y+7	; 0x07
    142a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <tcrt_read_channel>
	sensor->lastReading = lectura;
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    1432:	4a 85       	ldd	r20, Y+10	; 0x0a
    1434:	5b 85       	ldd	r21, Y+11	; 0x0b
    1436:	6c 85       	ldd	r22, Y+12	; 0x0c
    1438:	7d 85       	ldd	r23, Y+13	; 0x0d
    143a:	8a 01       	movw	r16, r20
    143c:	9b 01       	movw	r18, r22
    143e:	08 0f       	add	r16, r24
    1440:	19 1f       	adc	r17, r25
    1442:	21 1d       	adc	r18, r1
    1444:	31 1d       	adc	r19, r1
    1446:	c9 01       	movw	r24, r18
    1448:	b8 01       	movw	r22, r16
    144a:	0a 87       	std	Y+10, r16	; 0x0a
    144c:	1b 87       	std	Y+11, r17	; 0x0b
    144e:	2c 87       	std	Y+12, r18	; 0x0c
    1450:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    1452:	29 85       	ldd	r18, Y+9	; 0x09
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1458:	2a 30       	cpi	r18, 0x0A	; 10
    145a:	68 f0       	brcs	.+26     	; 0x1476 <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    145c:	2a e0       	ldi	r18, 0x0A	; 10
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodsi4>
    1468:	3a 83       	std	Y+2, r19	; 0x02
    146a:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    146c:	1a 86       	std	Y+10, r1	; 0x0a
    146e:	1b 86       	std	Y+11, r1	; 0x0b
    1470:	1c 86       	std	Y+12, r1	; 0x0c
    1472:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1474:	19 86       	std	Y+9, r1	; 0x09
	}
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	08 95       	ret

00001480 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    148e:	ab 81       	ldd	r26, Y+3	; 0x03
    1490:	bc 81       	ldd	r27, Y+4	; 0x04
    1492:	8e 85       	ldd	r24, Y+14	; 0x0e
    1494:	0f 2e       	mov	r0, r31
    1496:	f4 e6       	ldi	r31, 0x64	; 100
    1498:	cf 2e       	mov	r12, r31
    149a:	d1 2c       	mov	r13, r1
    149c:	e1 2c       	mov	r14, r1
    149e:	f1 2c       	mov	r15, r1
    14a0:	f0 2d       	mov	r31, r0
    14a2:	a7 01       	movw	r20, r14
    14a4:	96 01       	movw	r18, r12
    14a6:	28 1b       	sub	r18, r24
    14a8:	31 09       	sbc	r19, r1
    14aa:	41 09       	sbc	r20, r1
    14ac:	51 09       	sbc	r21, r1
    14ae:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__muluhisi3>
    14b2:	a7 01       	movw	r20, r14
    14b4:	96 01       	movw	r18, r12
    14b6:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	6c 01       	movw	r12, r24
    14c0:	e1 2c       	mov	r14, r1
    14c2:	f1 2c       	mov	r15, r1
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	c2 16       	cp	r12, r18
    14c8:	d3 06       	cpc	r13, r19
    14ca:	e4 06       	cpc	r14, r20
    14cc:	f5 06       	cpc	r15, r21
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <tcrt_is_box_detected+0x52>
    14d0:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    14d2:	c2 16       	cp	r12, r18
    14d4:	d3 06       	cpc	r13, r19
    14d6:	e4 06       	cpc	r14, r20
    14d8:	f5 06       	cpc	r15, r21
    14da:	50 f4       	brcc	.+20     	; 0x14f0 <tcrt_is_box_detected+0x70>
    14dc:	98 81       	ld	r25, Y
    14de:	e9 2f       	mov	r30, r25
    14e0:	e2 95       	swap	r30
    14e2:	ef 70       	andi	r30, 0x0F	; 15
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    14e6:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    14e8:	9f 70       	andi	r25, 0x0F	; 15
    14ea:	90 61       	ori	r25, 0x10	; 16
    14ec:	98 83       	st	Y, r25
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    14f0:	c2 16       	cp	r12, r18
    14f2:	d3 06       	cpc	r13, r19
    14f4:	e4 06       	cpc	r14, r20
    14f6:	f5 06       	cpc	r15, r21
    14f8:	50 f0       	brcs	.+20     	; 0x150e <tcrt_is_box_detected+0x8e>
    14fa:	98 81       	ld	r25, Y
    14fc:	29 2f       	mov	r18, r25
    14fe:	22 95       	swap	r18
    1500:	2f 70       	andi	r18, 0x0F	; 15
    1502:	21 30       	cpi	r18, 0x01	; 1
    1504:	21 f4       	brne	.+8      	; 0x150e <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    1506:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    1508:	9d 70       	andi	r25, 0x0D	; 13
    150a:	90 62       	ori	r25, 0x20	; 32
    150c:	98 83       	st	Y, r25
	}

	return box_now;
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	08 95       	ret

0000151c <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    151c:	8b b1       	in	r24, 0x0b	; 11
    151e:	88 60       	ori	r24, 0x08	; 8
    1520:	8b b9       	out	0x0b, r24	; 11
    1522:	08 95       	ret

00001524 <ultrasonic_hal_trigger_setLow>:
    1524:	8b b1       	in	r24, 0x0b	; 11
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	8b b9       	out	0x0b, r24	; 11
    152a:	08 95       	ret

0000152c <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    152c:	e1 e8       	ldi	r30, 0x81	; 129
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	80 83       	st	Z, r24
    1536:	08 95       	ret

00001538 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    1538:	e1 e8       	ldi	r30, 0x81	; 129
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8f 7b       	andi	r24, 0xBF	; 191
    1540:	80 83       	st	Z, r24
    1542:	08 95       	ret

00001544 <USART_Init>:
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
}
    1544:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1548:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    154c:	88 e9       	ldi	r24, 0x98	; 152
    154e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1552:	86 e0       	ldi	r24, 0x06	; 6
    1554:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1558:	08 95       	ret

0000155a <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    155a:	cf 93       	push	r28
    155c:	c8 2f       	mov	r28, r24
	// Si se desea manejar la nueva línea con retorno de carro:
	if (c == '\n')
    155e:	8a 30       	cpi	r24, 0x0A	; 10
    1560:	19 f4       	brne	.+6      	; 0x1568 <USART_putchar+0xe>
	USART_putchar('\r', stream);
    1562:	8d e0       	ldi	r24, 0x0D	; 13
    1564:	0e 94 ad 0a 	call	0x155a	; 0x155a <USART_putchar>
	
	// Esperar a que el buffer de transmisión (hardware) esté vacío
	while (!(UCSR0A & (1 << UDRE0)))
    1568:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    156c:	85 ff       	sbrs	r24, 5
    156e:	fc cf       	rjmp	.-8      	; 0x1568 <USART_putchar+0xe>
	;  // Espera activa
	
	// Enviar el carácter
	UDR0 = c;
    1570:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <USART_getchar>:


int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
    157c:	ee e8       	ldi	r30, 0x8E	; 142
    157e:	f6 e0       	ldi	r31, 0x06	; 6
    1580:	21 81       	ldd	r18, Z+1	; 0x01
    1582:	80 81       	ld	r24, Z
    1584:	28 17       	cp	r18, r24
    1586:	a9 f0       	breq	.+42     	; 0x15b2 <USART_getchar+0x36>
	return -1;
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	f9 01       	movw	r30, r18
    158c:	e2 57       	subi	r30, 0x72	; 114
    158e:	f9 4f       	sbci	r31, 0xF9	; 249
    1590:	82 81       	ldd	r24, Z+2	; 0x02
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    1592:	2f 5f       	subi	r18, 0xFF	; 255
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	2f 71       	andi	r18, 0x1F	; 31
    1598:	30 78       	andi	r19, 0x80	; 128
    159a:	33 23       	and	r19, r19
    159c:	34 f4       	brge	.+12     	; 0x15aa <USART_getchar+0x2e>
    159e:	21 50       	subi	r18, 0x01	; 1
    15a0:	31 09       	sbc	r19, r1
    15a2:	20 6e       	ori	r18, 0xE0	; 224
    15a4:	3f 6f       	ori	r19, 0xFF	; 255
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <protocolService+0x1>
	return data;
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	08 95       	ret

int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
	return -1;
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	return data;
}
    15b6:	08 95       	ret

000015b8 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    15b8:	fc 01       	movw	r30, r24
    15ba:	66 87       	std	Z+14, r22	; 0x0e
    15bc:	08 95       	ret

000015be <ultrasonic_calculate_distance>:
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	ae 81       	ldd	r26, Y+6	; 0x06
    15ce:	bf 81       	ldd	r27, Y+7	; 0x07
    15d0:	48 81       	ld	r20, Y
    15d2:	59 81       	ldd	r21, Y+1	; 0x01
    15d4:	6a 81       	ldd	r22, Y+2	; 0x02
    15d6:	7b 81       	ldd	r23, Y+3	; 0x03
    15d8:	8c 01       	movw	r16, r24
    15da:	9d 01       	movw	r18, r26
    15dc:	04 1b       	sub	r16, r20
    15de:	15 0b       	sbc	r17, r21
    15e0:	26 0b       	sbc	r18, r22
    15e2:	37 0b       	sbc	r19, r23
    15e4:	b9 01       	movw	r22, r18
    15e6:	a8 01       	movw	r20, r16
    15e8:	d9 01       	movw	r26, r18
    15ea:	c8 01       	movw	r24, r16
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	aa 1f       	adc	r26, r26
    15f2:	bb 1f       	adc	r27, r27
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	aa 1f       	adc	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	aa 1f       	adc	r26, r26
    160a:	bb 1f       	adc	r27, r27
    160c:	8c 01       	movw	r16, r24
    160e:	9d 01       	movw	r18, r26
    1610:	04 0f       	add	r16, r20
    1612:	15 1f       	adc	r17, r21
    1614:	26 1f       	adc	r18, r22
    1616:	37 1f       	adc	r19, r23
    1618:	c9 01       	movw	r24, r18
    161a:	b8 01       	movw	r22, r16
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	20 e9       	ldi	r18, 0x90	; 144
    1626:	31 e0       	ldi	r19, 0x01	; 1
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodsi4>
    1630:	28 87       	std	Y+8, r18	; 0x08
    1632:	39 87       	std	Y+9, r19	; 0x09
    1634:	4a 87       	std	Y+10, r20	; 0x0a
    1636:	5b 87       	std	Y+11, r21	; 0x0b
    1638:	8c 85       	ldd	r24, Y+12	; 0x0c
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 87       	std	Y+12, r24	; 0x0c
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    1648:	dc 01       	movw	r26, r24
    164a:	1f 96       	adiw	r26, 0x0f	; 15
    164c:	ed 91       	ld	r30, X+
    164e:	fc 91       	ld	r31, X
    1650:	50 97       	sbiw	r26, 0x10	; 16
    1652:	30 97       	sbiw	r30, 0x00	; 0
    1654:	11 f0       	breq	.+4      	; 0x165a <ultrasonic_print+0x12>
    1656:	cb 01       	movw	r24, r22
		us->print_method(message);
    1658:	09 95       	icall
    165a:	08 95       	ret

0000165c <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1662:	18 82       	st	Y, r1
    1664:	19 82       	std	Y+1, r1	; 0x01
    1666:	1a 82       	std	Y+2, r1	; 0x02
    1668:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    166a:	1c 82       	std	Y+4, r1	; 0x04
    166c:	1d 82       	std	Y+5, r1	; 0x05
    166e:	1e 82       	std	Y+6, r1	; 0x06
    1670:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1672:	18 86       	std	Y+8, r1	; 0x08
    1674:	19 86       	std	Y+9, r1	; 0x09
    1676:	1a 86       	std	Y+10, r1	; 0x0a
    1678:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    167a:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    167c:	8c 85       	ldd	r24, Y+12	; 0x0c
    167e:	80 62       	ori	r24, 0x20	; 32
    1680:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1682:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1684:	0e 94 96 0a 	call	0x152c	; 0x152c <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	98 89       	ldd	r25, Y+16	; 0x10
    168c:	89 2b       	or	r24, r25
    168e:	41 f0       	breq	.+16     	; 0x16a0 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1690:	8e 85       	ldd	r24, Y+14	; 0x0e
    1692:	88 23       	and	r24, r24
    1694:	29 f0       	breq	.+10     	; 0x16a0 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1696:	6c ea       	ldi	r22, 0xAC	; 172
    1698:	74 e0       	ldi	r23, 0x04	; 4
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
		}
	}
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ec 01       	movw	r28, r24
    16b0:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    16b2:	0e 94 2e 0b 	call	0x165c	; 0x165c <ultrasonic_init_flags>
	us->debugMode = true;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    16ba:	01 15       	cp	r16, r1
    16bc:	11 05       	cpc	r17, r1
    16be:	19 f4       	brne	.+6      	; 0x16c6 <ultrasonic_init+0x20>
		us->print_method = NULL;
    16c0:	18 8a       	std	Y+16, r1	; 0x10
    16c2:	1f 86       	std	Y+15, r1	; 0x0f
    16c4:	0a c0       	rjmp	.+20     	; 0x16da <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    16c6:	18 8b       	std	Y+16, r17	; 0x10
    16c8:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    16ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    16cc:	88 23       	and	r24, r24
    16ce:	29 f0       	breq	.+10     	; 0x16da <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    16d0:	6b ec       	ldi	r22, 0xCB	; 203
    16d2:	74 e0       	ldi	r23, 0x04	; 4
    16d4:	ce 01       	movw	r24, r28
    16d6:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
		}
	}
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret

000016e4 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    16ea:	fc 01       	movw	r30, r24
    16ec:	25 85       	ldd	r18, Z+13	; 0x0d
    16ee:	26 30       	cpi	r18, 0x06	; 6
    16f0:	71 f4       	brne	.+28     	; 0x170e <ultrasonic_timeout_clear+0x2a>
    16f2:	16 2f       	mov	r17, r22
    16f4:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    16f6:	0e 94 2e 0b 	call	0x165c	; 0x165c <ultrasonic_init_flags>
		us->debugMode = state;
    16fa:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    16fc:	1e 85       	ldd	r17, Y+14	; 0x0e
    16fe:	11 23       	and	r17, r17
    1700:	41 f0       	breq	.+16     	; 0x1712 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    1702:	62 e3       	ldi	r22, 0x32	; 50
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    1712:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    1714:	81 2f       	mov	r24, r17
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	08 95       	ret

0000171e <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    171e:	cf 93       	push	r28
    1720:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    1722:	85 85       	ldd	r24, Z+13	; 0x0d
    1724:	88 23       	and	r24, r24
    1726:	19 f0       	breq	.+6      	; 0x172e <ultrasonic_start+0x10>
    1728:	85 85       	ldd	r24, Z+13	; 0x0d
    172a:	85 30       	cpi	r24, 0x05	; 5
    172c:	c1 f4       	brne	.+48     	; 0x175e <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    172e:	84 85       	ldd	r24, Z+12	; 0x0c
    1730:	85 ff       	sbrs	r24, 5
    1732:	0b c0       	rjmp	.+22     	; 0x174a <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    1738:	c6 85       	ldd	r28, Z+14	; 0x0e
    173a:	cc 23       	and	r28, r28
    173c:	d1 f0       	breq	.+52     	; 0x1772 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    173e:	67 ee       	ldi	r22, 0xE7	; 231
    1740:	74 e0       	ldi	r23, 0x04	; 4
    1742:	cf 01       	movw	r24, r30
    1744:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
    1748:	15 c0       	rjmp	.+42     	; 0x1774 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    174a:	c6 85       	ldd	r28, Z+14	; 0x0e
    174c:	cc 23       	and	r28, r28
    174e:	91 f0       	breq	.+36     	; 0x1774 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1750:	66 e1       	ldi	r22, 0x16	; 22
    1752:	75 e0       	ldi	r23, 0x05	; 5
    1754:	cf 01       	movw	r24, r30
    1756:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    175a:	c0 e0       	ldi	r28, 0x00	; 0
    175c:	0b c0       	rjmp	.+22     	; 0x1774 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    175e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1760:	cc 23       	and	r28, r28
    1762:	41 f0       	breq	.+16     	; 0x1774 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    1764:	6d e4       	ldi	r22, 0x4D	; 77
    1766:	75 e0       	ldi	r23, 0x05	; 5
    1768:	cf 01       	movw	r24, r30
    176a:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
			}
	}
	return false;
    176e:	c0 e0       	ldi	r28, 0x00	; 0
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    1772:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    1774:	8c 2f       	mov	r24, r28
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	ec 01       	movw	r28, r24
	switch (us->state)
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	71 f1       	breq	.+92     	; 0x17e2 <ultrasonic_update+0x68>
    1786:	28 f4       	brcc	.+10     	; 0x1792 <ultrasonic_update+0x18>
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	49 f0       	breq	.+18     	; 0x179e <ultrasonic_update+0x24>
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	a1 f0       	breq	.+40     	; 0x17b8 <ultrasonic_update+0x3e>
    1790:	55 c0       	rjmp	.+170    	; 0x183c <ultrasonic_update+0xc2>
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	e1 f1       	breq	.+120    	; 0x180e <ultrasonic_update+0x94>
    1796:	86 30       	cpi	r24, 0x06	; 6
    1798:	09 f4       	brne	.+2      	; 0x179c <ultrasonic_update+0x22>
    179a:	4d c0       	rjmp	.+154    	; 0x1836 <ultrasonic_update+0xbc>
    179c:	4f c0       	rjmp	.+158    	; 0x183c <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    179e:	8c 85       	ldd	r24, Y+12	; 0x0c
    17a0:	81 ff       	sbrs	r24, 1
    17a2:	4c c0       	rjmp	.+152    	; 0x183c <ultrasonic_update+0xc2>
				if(us->debugMode){
    17a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <ultrasonic_update+0x32>
    17aa:	48 c0       	rjmp	.+144    	; 0x183c <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    17ac:	6a e7       	ldi	r22, 0x7A	; 122
    17ae:	75 e0       	ldi	r23, 0x05	; 5
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
    17b6:	42 c0       	rjmp	.+132    	; 0x183c <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    17b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ba:	84 fd       	sbrc	r24, 4
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    17c2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    17c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c8:	88 23       	and	r24, r24
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    17cc:	69 e9       	ldi	r22, 0x99	; 153
    17ce:	75 e0       	ldi	r23, 0x05	; 5
    17d0:	ce 01       	movw	r24, r28
    17d2:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    17d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d8:	83 ff       	sbrs	r24, 3
    17da:	30 c0       	rjmp	.+96     	; 0x183c <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    17dc:	86 e0       	ldi	r24, 0x06	; 6
    17de:	8d 87       	std	Y+13, r24	; 0x0d
    17e0:	2d c0       	rjmp	.+90     	; 0x183c <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    17e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e4:	86 ff       	sbrs	r24, 6
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    17ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ee:	88 23       	and	r24, r24
    17f0:	29 f0       	breq	.+10     	; 0x17fc <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    17f2:	66 eb       	ldi	r22, 0xB6	; 182
    17f4:	75 e0       	ldi	r23, 0x05	; 5
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    17fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fe:	84 60       	ori	r24, 0x04	; 4
    1800:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	83 ff       	sbrs	r24, 3
    1806:	1a c0       	rjmp	.+52     	; 0x183c <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	8d 87       	std	Y+13, r24	; 0x0d
    180c:	17 c0       	rjmp	.+46     	; 0x183c <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    180e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1810:	82 ff       	sbrs	r24, 2
    1812:	14 c0       	rjmp	.+40     	; 0x183c <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    1814:	ce 01       	movw	r24, r28
    1816:	0e 94 df 0a 	call	0x15be	; 0x15be <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    181a:	8c 85       	ldd	r24, Y+12	; 0x0c
    181c:	8b 7f       	andi	r24, 0xFB	; 251
    181e:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    1820:	8e 85       	ldd	r24, Y+14	; 0x0e
    1822:	88 23       	and	r24, r24
    1824:	29 f0       	breq	.+10     	; 0x1830 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    1826:	6d ec       	ldi	r22, 0xCD	; 205
    1828:	75 e0       	ldi	r23, 0x05	; 5
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 24 0b 	call	0x1648	; 0x1648 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    1830:	85 e0       	ldi	r24, 0x05	; 5
    1832:	8d 87       	std	Y+13, r24	; 0x0d
    1834:	03 c0       	rjmp	.+6      	; 0x183c <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    1836:	8c 85       	ldd	r24, Y+12	; 0x0c
    1838:	88 60       	ori	r24, 0x08	; 8
    183a:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <__udivmodsi4>:
    1842:	a1 e2       	ldi	r26, 0x21	; 33
    1844:	1a 2e       	mov	r1, r26
    1846:	aa 1b       	sub	r26, r26
    1848:	bb 1b       	sub	r27, r27
    184a:	fd 01       	movw	r30, r26
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <__udivmodsi4_ep>

0000184e <__udivmodsi4_loop>:
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	ee 1f       	adc	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	a2 17       	cp	r26, r18
    1858:	b3 07       	cpc	r27, r19
    185a:	e4 07       	cpc	r30, r20
    185c:	f5 07       	cpc	r31, r21
    185e:	20 f0       	brcs	.+8      	; 0x1868 <__udivmodsi4_ep>
    1860:	a2 1b       	sub	r26, r18
    1862:	b3 0b       	sbc	r27, r19
    1864:	e4 0b       	sbc	r30, r20
    1866:	f5 0b       	sbc	r31, r21

00001868 <__udivmodsi4_ep>:
    1868:	66 1f       	adc	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	1a 94       	dec	r1
    1872:	69 f7       	brne	.-38     	; 0x184e <__udivmodsi4_loop>
    1874:	60 95       	com	r22
    1876:	70 95       	com	r23
    1878:	80 95       	com	r24
    187a:	90 95       	com	r25
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	bd 01       	movw	r22, r26
    1882:	cf 01       	movw	r24, r30
    1884:	08 95       	ret

00001886 <__umulhisi3>:
    1886:	a2 9f       	mul	r26, r18
    1888:	b0 01       	movw	r22, r0
    188a:	b3 9f       	mul	r27, r19
    188c:	c0 01       	movw	r24, r0
    188e:	a3 9f       	mul	r26, r19
    1890:	70 0d       	add	r23, r0
    1892:	81 1d       	adc	r24, r1
    1894:	11 24       	eor	r1, r1
    1896:	91 1d       	adc	r25, r1
    1898:	b2 9f       	mul	r27, r18
    189a:	70 0d       	add	r23, r0
    189c:	81 1d       	adc	r24, r1
    189e:	11 24       	eor	r1, r1
    18a0:	91 1d       	adc	r25, r1
    18a2:	08 95       	ret

000018a4 <__muluhisi3>:
    18a4:	0e 94 43 0c 	call	0x1886	; 0x1886 <__umulhisi3>
    18a8:	a5 9f       	mul	r26, r21
    18aa:	90 0d       	add	r25, r0
    18ac:	b4 9f       	mul	r27, r20
    18ae:	90 0d       	add	r25, r0
    18b0:	a4 9f       	mul	r26, r20
    18b2:	80 0d       	add	r24, r0
    18b4:	91 1d       	adc	r25, r1
    18b6:	11 24       	eor	r1, r1
    18b8:	08 95       	ret

000018ba <printf>:
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e6       	ldi	r30, 0x63	; 99
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__prologue_saves__+0x20>
    18c6:	ae 01       	movw	r20, r28
    18c8:	4b 5f       	subi	r20, 0xFB	; 251
    18ca:	5f 4f       	sbci	r21, 0xFF	; 255
    18cc:	fa 01       	movw	r30, r20
    18ce:	61 91       	ld	r22, Z+
    18d0:	71 91       	ld	r23, Z+
    18d2:	af 01       	movw	r20, r30
    18d4:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <__iob+0x2>
    18d8:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <__iob+0x3>
    18dc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <vfprintf>
    18e0:	e2 e0       	ldi	r30, 0x02	; 2
    18e2:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__epilogue_restores__+0x20>

000018e6 <puts>:
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	e0 91 b7 06 	lds	r30, 0x06B7	; 0x8006b7 <__iob+0x2>
    18f2:	f0 91 b8 06 	lds	r31, 0x06B8	; 0x8006b8 <__iob+0x3>
    18f6:	23 81       	ldd	r18, Z+3	; 0x03
    18f8:	21 ff       	sbrs	r18, 1
    18fa:	1b c0       	rjmp	.+54     	; 0x1932 <puts+0x4c>
    18fc:	8c 01       	movw	r16, r24
    18fe:	d0 e0       	ldi	r29, 0x00	; 0
    1900:	c0 e0       	ldi	r28, 0x00	; 0
    1902:	f8 01       	movw	r30, r16
    1904:	81 91       	ld	r24, Z+
    1906:	8f 01       	movw	r16, r30
    1908:	60 91 b7 06 	lds	r22, 0x06B7	; 0x8006b7 <__iob+0x2>
    190c:	70 91 b8 06 	lds	r23, 0x06B8	; 0x8006b8 <__iob+0x3>
    1910:	db 01       	movw	r26, r22
    1912:	18 96       	adiw	r26, 0x08	; 8
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	19 97       	sbiw	r26, 0x09	; 9
    191a:	88 23       	and	r24, r24
    191c:	31 f0       	breq	.+12     	; 0x192a <puts+0x44>
    191e:	09 95       	icall
    1920:	89 2b       	or	r24, r25
    1922:	79 f3       	breq	.-34     	; 0x1902 <puts+0x1c>
    1924:	df ef       	ldi	r29, 0xFF	; 255
    1926:	cf ef       	ldi	r28, 0xFF	; 255
    1928:	ec cf       	rjmp	.-40     	; 0x1902 <puts+0x1c>
    192a:	8a e0       	ldi	r24, 0x0A	; 10
    192c:	09 95       	icall
    192e:	89 2b       	or	r24, r25
    1930:	19 f0       	breq	.+6      	; 0x1938 <puts+0x52>
    1932:	8f ef       	ldi	r24, 0xFF	; 255
    1934:	9f ef       	ldi	r25, 0xFF	; 255
    1936:	02 c0       	rjmp	.+4      	; 0x193c <puts+0x56>
    1938:	8d 2f       	mov	r24, r29
    193a:	9c 2f       	mov	r25, r28
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <vfprintf>:
    1946:	ab e0       	ldi	r26, 0x0B	; 11
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e9 ea       	ldi	r30, 0xA9	; 169
    194c:	fc e0       	ldi	r31, 0x0C	; 12
    194e:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__>
    1952:	6c 01       	movw	r12, r24
    1954:	7b 01       	movw	r14, r22
    1956:	8a 01       	movw	r16, r20
    1958:	fc 01       	movw	r30, r24
    195a:	17 82       	std	Z+7, r1	; 0x07
    195c:	16 82       	std	Z+6, r1	; 0x06
    195e:	83 81       	ldd	r24, Z+3	; 0x03
    1960:	81 ff       	sbrs	r24, 1
    1962:	cc c1       	rjmp	.+920    	; 0x1cfc <vfprintf+0x3b6>
    1964:	ce 01       	movw	r24, r28
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	3c 01       	movw	r6, r24
    196a:	f6 01       	movw	r30, r12
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	f7 01       	movw	r30, r14
    1970:	93 fd       	sbrc	r25, 3
    1972:	85 91       	lpm	r24, Z+
    1974:	93 ff       	sbrs	r25, 3
    1976:	81 91       	ld	r24, Z+
    1978:	7f 01       	movw	r14, r30
    197a:	88 23       	and	r24, r24
    197c:	09 f4       	brne	.+2      	; 0x1980 <vfprintf+0x3a>
    197e:	ba c1       	rjmp	.+884    	; 0x1cf4 <vfprintf+0x3ae>
    1980:	85 32       	cpi	r24, 0x25	; 37
    1982:	39 f4       	brne	.+14     	; 0x1992 <vfprintf+0x4c>
    1984:	93 fd       	sbrc	r25, 3
    1986:	85 91       	lpm	r24, Z+
    1988:	93 ff       	sbrs	r25, 3
    198a:	81 91       	ld	r24, Z+
    198c:	7f 01       	movw	r14, r30
    198e:	85 32       	cpi	r24, 0x25	; 37
    1990:	29 f4       	brne	.+10     	; 0x199c <vfprintf+0x56>
    1992:	b6 01       	movw	r22, r12
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    199a:	e7 cf       	rjmp	.-50     	; 0x196a <vfprintf+0x24>
    199c:	91 2c       	mov	r9, r1
    199e:	21 2c       	mov	r2, r1
    19a0:	31 2c       	mov	r3, r1
    19a2:	ff e1       	ldi	r31, 0x1F	; 31
    19a4:	f3 15       	cp	r31, r3
    19a6:	d8 f0       	brcs	.+54     	; 0x19de <vfprintf+0x98>
    19a8:	8b 32       	cpi	r24, 0x2B	; 43
    19aa:	79 f0       	breq	.+30     	; 0x19ca <vfprintf+0x84>
    19ac:	38 f4       	brcc	.+14     	; 0x19bc <vfprintf+0x76>
    19ae:	80 32       	cpi	r24, 0x20	; 32
    19b0:	79 f0       	breq	.+30     	; 0x19d0 <vfprintf+0x8a>
    19b2:	83 32       	cpi	r24, 0x23	; 35
    19b4:	a1 f4       	brne	.+40     	; 0x19de <vfprintf+0x98>
    19b6:	23 2d       	mov	r18, r3
    19b8:	20 61       	ori	r18, 0x10	; 16
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <vfprintf+0xb0>
    19bc:	8d 32       	cpi	r24, 0x2D	; 45
    19be:	61 f0       	breq	.+24     	; 0x19d8 <vfprintf+0x92>
    19c0:	80 33       	cpi	r24, 0x30	; 48
    19c2:	69 f4       	brne	.+26     	; 0x19de <vfprintf+0x98>
    19c4:	23 2d       	mov	r18, r3
    19c6:	21 60       	ori	r18, 0x01	; 1
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <vfprintf+0xb0>
    19ca:	83 2d       	mov	r24, r3
    19cc:	82 60       	ori	r24, 0x02	; 2
    19ce:	38 2e       	mov	r3, r24
    19d0:	e3 2d       	mov	r30, r3
    19d2:	e4 60       	ori	r30, 0x04	; 4
    19d4:	3e 2e       	mov	r3, r30
    19d6:	2a c0       	rjmp	.+84     	; 0x1a2c <vfprintf+0xe6>
    19d8:	f3 2d       	mov	r31, r3
    19da:	f8 60       	ori	r31, 0x08	; 8
    19dc:	1d c0       	rjmp	.+58     	; 0x1a18 <vfprintf+0xd2>
    19de:	37 fc       	sbrc	r3, 7
    19e0:	2d c0       	rjmp	.+90     	; 0x1a3c <vfprintf+0xf6>
    19e2:	20 ed       	ldi	r18, 0xD0	; 208
    19e4:	28 0f       	add	r18, r24
    19e6:	2a 30       	cpi	r18, 0x0A	; 10
    19e8:	40 f0       	brcs	.+16     	; 0x19fa <vfprintf+0xb4>
    19ea:	8e 32       	cpi	r24, 0x2E	; 46
    19ec:	b9 f4       	brne	.+46     	; 0x1a1c <vfprintf+0xd6>
    19ee:	36 fc       	sbrc	r3, 6
    19f0:	81 c1       	rjmp	.+770    	; 0x1cf4 <vfprintf+0x3ae>
    19f2:	23 2d       	mov	r18, r3
    19f4:	20 64       	ori	r18, 0x40	; 64
    19f6:	32 2e       	mov	r3, r18
    19f8:	19 c0       	rjmp	.+50     	; 0x1a2c <vfprintf+0xe6>
    19fa:	36 fe       	sbrs	r3, 6
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0xc4>
    19fe:	8a e0       	ldi	r24, 0x0A	; 10
    1a00:	98 9e       	mul	r9, r24
    1a02:	20 0d       	add	r18, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	92 2e       	mov	r9, r18
    1a08:	11 c0       	rjmp	.+34     	; 0x1a2c <vfprintf+0xe6>
    1a0a:	ea e0       	ldi	r30, 0x0A	; 10
    1a0c:	2e 9e       	mul	r2, r30
    1a0e:	20 0d       	add	r18, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	22 2e       	mov	r2, r18
    1a14:	f3 2d       	mov	r31, r3
    1a16:	f0 62       	ori	r31, 0x20	; 32
    1a18:	3f 2e       	mov	r3, r31
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <vfprintf+0xe6>
    1a1c:	8c 36       	cpi	r24, 0x6C	; 108
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <vfprintf+0xe2>
    1a20:	83 2d       	mov	r24, r3
    1a22:	80 68       	ori	r24, 0x80	; 128
    1a24:	38 2e       	mov	r3, r24
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <vfprintf+0xe6>
    1a28:	88 36       	cpi	r24, 0x68	; 104
    1a2a:	41 f4       	brne	.+16     	; 0x1a3c <vfprintf+0xf6>
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	93 fd       	sbrc	r25, 3
    1a30:	85 91       	lpm	r24, Z+
    1a32:	93 ff       	sbrs	r25, 3
    1a34:	81 91       	ld	r24, Z+
    1a36:	7f 01       	movw	r14, r30
    1a38:	81 11       	cpse	r24, r1
    1a3a:	b3 cf       	rjmp	.-154    	; 0x19a2 <vfprintf+0x5c>
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	9f 7d       	andi	r25, 0xDF	; 223
    1a40:	95 54       	subi	r25, 0x45	; 69
    1a42:	93 30       	cpi	r25, 0x03	; 3
    1a44:	28 f4       	brcc	.+10     	; 0x1a50 <vfprintf+0x10a>
    1a46:	0c 5f       	subi	r16, 0xFC	; 252
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	9f e3       	ldi	r25, 0x3F	; 63
    1a4c:	99 83       	std	Y+1, r25	; 0x01
    1a4e:	0d c0       	rjmp	.+26     	; 0x1a6a <vfprintf+0x124>
    1a50:	83 36       	cpi	r24, 0x63	; 99
    1a52:	31 f0       	breq	.+12     	; 0x1a60 <vfprintf+0x11a>
    1a54:	83 37       	cpi	r24, 0x73	; 115
    1a56:	71 f0       	breq	.+28     	; 0x1a74 <vfprintf+0x12e>
    1a58:	83 35       	cpi	r24, 0x53	; 83
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <vfprintf+0x118>
    1a5c:	59 c0       	rjmp	.+178    	; 0x1b10 <vfprintf+0x1ca>
    1a5e:	21 c0       	rjmp	.+66     	; 0x1aa2 <vfprintf+0x15c>
    1a60:	f8 01       	movw	r30, r16
    1a62:	80 81       	ld	r24, Z
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	0e 5f       	subi	r16, 0xFE	; 254
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	88 24       	eor	r8, r8
    1a6c:	83 94       	inc	r8
    1a6e:	91 2c       	mov	r9, r1
    1a70:	53 01       	movw	r10, r6
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <vfprintf+0x154>
    1a74:	28 01       	movw	r4, r16
    1a76:	f2 e0       	ldi	r31, 0x02	; 2
    1a78:	4f 0e       	add	r4, r31
    1a7a:	51 1c       	adc	r5, r1
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	a0 80       	ld	r10, Z
    1a80:	b1 80       	ldd	r11, Z+1	; 0x01
    1a82:	36 fe       	sbrs	r3, 6
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <vfprintf+0x146>
    1a86:	69 2d       	mov	r22, r9
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x14a>
    1a8c:	6f ef       	ldi	r22, 0xFF	; 255
    1a8e:	7f ef       	ldi	r23, 0xFF	; 255
    1a90:	c5 01       	movw	r24, r10
    1a92:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <strnlen>
    1a96:	4c 01       	movw	r8, r24
    1a98:	82 01       	movw	r16, r4
    1a9a:	f3 2d       	mov	r31, r3
    1a9c:	ff 77       	andi	r31, 0x7F	; 127
    1a9e:	3f 2e       	mov	r3, r31
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <vfprintf+0x188>
    1aa2:	28 01       	movw	r4, r16
    1aa4:	22 e0       	ldi	r18, 0x02	; 2
    1aa6:	42 0e       	add	r4, r18
    1aa8:	51 1c       	adc	r5, r1
    1aaa:	f8 01       	movw	r30, r16
    1aac:	a0 80       	ld	r10, Z
    1aae:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab0:	36 fe       	sbrs	r3, 6
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <vfprintf+0x174>
    1ab4:	69 2d       	mov	r22, r9
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <vfprintf+0x178>
    1aba:	6f ef       	ldi	r22, 0xFF	; 255
    1abc:	7f ef       	ldi	r23, 0xFF	; 255
    1abe:	c5 01       	movw	r24, r10
    1ac0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <strnlen_P>
    1ac4:	4c 01       	movw	r8, r24
    1ac6:	f3 2d       	mov	r31, r3
    1ac8:	f0 68       	ori	r31, 0x80	; 128
    1aca:	3f 2e       	mov	r3, r31
    1acc:	82 01       	movw	r16, r4
    1ace:	33 fc       	sbrc	r3, 3
    1ad0:	1b c0       	rjmp	.+54     	; 0x1b08 <vfprintf+0x1c2>
    1ad2:	82 2d       	mov	r24, r2
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	88 16       	cp	r8, r24
    1ad8:	99 06       	cpc	r9, r25
    1ada:	b0 f4       	brcc	.+44     	; 0x1b08 <vfprintf+0x1c2>
    1adc:	b6 01       	movw	r22, r12
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1ae6:	2a 94       	dec	r2
    1ae8:	f4 cf       	rjmp	.-24     	; 0x1ad2 <vfprintf+0x18c>
    1aea:	f5 01       	movw	r30, r10
    1aec:	37 fc       	sbrc	r3, 7
    1aee:	85 91       	lpm	r24, Z+
    1af0:	37 fe       	sbrs	r3, 7
    1af2:	81 91       	ld	r24, Z+
    1af4:	5f 01       	movw	r10, r30
    1af6:	b6 01       	movw	r22, r12
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1afe:	21 10       	cpse	r2, r1
    1b00:	2a 94       	dec	r2
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	82 1a       	sub	r8, r18
    1b06:	91 08       	sbc	r9, r1
    1b08:	81 14       	cp	r8, r1
    1b0a:	91 04       	cpc	r9, r1
    1b0c:	71 f7       	brne	.-36     	; 0x1aea <vfprintf+0x1a4>
    1b0e:	e8 c0       	rjmp	.+464    	; 0x1ce0 <vfprintf+0x39a>
    1b10:	84 36       	cpi	r24, 0x64	; 100
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <vfprintf+0x1d2>
    1b14:	89 36       	cpi	r24, 0x69	; 105
    1b16:	41 f5       	brne	.+80     	; 0x1b68 <vfprintf+0x222>
    1b18:	f8 01       	movw	r30, r16
    1b1a:	37 fe       	sbrs	r3, 7
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <vfprintf+0x1e6>
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0c 5f       	subi	r16, 0xFC	; 252
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <vfprintf+0x1f6>
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	07 2e       	mov	r0, r23
    1b32:	00 0c       	add	r0, r0
    1b34:	88 0b       	sbc	r24, r24
    1b36:	99 0b       	sbc	r25, r25
    1b38:	0e 5f       	subi	r16, 0xFE	; 254
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	f3 2d       	mov	r31, r3
    1b3e:	ff 76       	andi	r31, 0x6F	; 111
    1b40:	3f 2e       	mov	r3, r31
    1b42:	97 ff       	sbrs	r25, 7
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <vfprintf+0x212>
    1b46:	90 95       	com	r25
    1b48:	80 95       	com	r24
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	f0 68       	ori	r31, 0x80	; 128
    1b56:	3f 2e       	mov	r3, r31
    1b58:	2a e0       	ldi	r18, 0x0A	; 10
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	a3 01       	movw	r20, r6
    1b5e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__ultoa_invert>
    1b62:	88 2e       	mov	r8, r24
    1b64:	86 18       	sub	r8, r6
    1b66:	45 c0       	rjmp	.+138    	; 0x1bf2 <vfprintf+0x2ac>
    1b68:	85 37       	cpi	r24, 0x75	; 117
    1b6a:	31 f4       	brne	.+12     	; 0x1b78 <vfprintf+0x232>
    1b6c:	23 2d       	mov	r18, r3
    1b6e:	2f 7e       	andi	r18, 0xEF	; 239
    1b70:	b2 2e       	mov	r11, r18
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	25 c0       	rjmp	.+74     	; 0x1bc2 <vfprintf+0x27c>
    1b78:	93 2d       	mov	r25, r3
    1b7a:	99 7f       	andi	r25, 0xF9	; 249
    1b7c:	b9 2e       	mov	r11, r25
    1b7e:	8f 36       	cpi	r24, 0x6F	; 111
    1b80:	c1 f0       	breq	.+48     	; 0x1bb2 <vfprintf+0x26c>
    1b82:	18 f4       	brcc	.+6      	; 0x1b8a <vfprintf+0x244>
    1b84:	88 35       	cpi	r24, 0x58	; 88
    1b86:	79 f0       	breq	.+30     	; 0x1ba6 <vfprintf+0x260>
    1b88:	b5 c0       	rjmp	.+362    	; 0x1cf4 <vfprintf+0x3ae>
    1b8a:	80 37       	cpi	r24, 0x70	; 112
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <vfprintf+0x24e>
    1b8e:	88 37       	cpi	r24, 0x78	; 120
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <vfprintf+0x254>
    1b92:	b0 c0       	rjmp	.+352    	; 0x1cf4 <vfprintf+0x3ae>
    1b94:	e9 2f       	mov	r30, r25
    1b96:	e0 61       	ori	r30, 0x10	; 16
    1b98:	be 2e       	mov	r11, r30
    1b9a:	b4 fe       	sbrs	r11, 4
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <vfprintf+0x272>
    1b9e:	fb 2d       	mov	r31, r11
    1ba0:	f4 60       	ori	r31, 0x04	; 4
    1ba2:	bf 2e       	mov	r11, r31
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <vfprintf+0x272>
    1ba6:	34 fe       	sbrs	r3, 4
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <vfprintf+0x278>
    1baa:	29 2f       	mov	r18, r25
    1bac:	26 60       	ori	r18, 0x06	; 6
    1bae:	b2 2e       	mov	r11, r18
    1bb0:	06 c0       	rjmp	.+12     	; 0x1bbe <vfprintf+0x278>
    1bb2:	28 e0       	ldi	r18, 0x08	; 8
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <vfprintf+0x27c>
    1bb8:	20 e1       	ldi	r18, 0x10	; 16
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <vfprintf+0x27c>
    1bbe:	20 e1       	ldi	r18, 0x10	; 16
    1bc0:	32 e0       	ldi	r19, 0x02	; 2
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	b7 fe       	sbrs	r11, 7
    1bc6:	07 c0       	rjmp	.+14     	; 0x1bd6 <vfprintf+0x290>
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0c 5f       	subi	r16, 0xFC	; 252
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <vfprintf+0x29c>
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 5f       	subi	r16, 0xFE	; 254
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	a3 01       	movw	r20, r6
    1be4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__ultoa_invert>
    1be8:	88 2e       	mov	r8, r24
    1bea:	86 18       	sub	r8, r6
    1bec:	fb 2d       	mov	r31, r11
    1bee:	ff 77       	andi	r31, 0x7F	; 127
    1bf0:	3f 2e       	mov	r3, r31
    1bf2:	36 fe       	sbrs	r3, 6
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <vfprintf+0x2ca>
    1bf6:	23 2d       	mov	r18, r3
    1bf8:	2e 7f       	andi	r18, 0xFE	; 254
    1bfa:	a2 2e       	mov	r10, r18
    1bfc:	89 14       	cp	r8, r9
    1bfe:	58 f4       	brcc	.+22     	; 0x1c16 <vfprintf+0x2d0>
    1c00:	34 fe       	sbrs	r3, 4
    1c02:	0b c0       	rjmp	.+22     	; 0x1c1a <vfprintf+0x2d4>
    1c04:	32 fc       	sbrc	r3, 2
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <vfprintf+0x2d4>
    1c08:	83 2d       	mov	r24, r3
    1c0a:	8e 7e       	andi	r24, 0xEE	; 238
    1c0c:	a8 2e       	mov	r10, r24
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <vfprintf+0x2d4>
    1c10:	b8 2c       	mov	r11, r8
    1c12:	a3 2c       	mov	r10, r3
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x2d6>
    1c16:	b8 2c       	mov	r11, r8
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <vfprintf+0x2d6>
    1c1a:	b9 2c       	mov	r11, r9
    1c1c:	a4 fe       	sbrs	r10, 4
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <vfprintf+0x2f8>
    1c20:	fe 01       	movw	r30, r28
    1c22:	e8 0d       	add	r30, r8
    1c24:	f1 1d       	adc	r31, r1
    1c26:	80 81       	ld	r24, Z
    1c28:	80 33       	cpi	r24, 0x30	; 48
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <vfprintf+0x2ee>
    1c2c:	9a 2d       	mov	r25, r10
    1c2e:	99 7e       	andi	r25, 0xE9	; 233
    1c30:	a9 2e       	mov	r10, r25
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <vfprintf+0x300>
    1c34:	a2 fe       	sbrs	r10, 2
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0x2fe>
    1c38:	b3 94       	inc	r11
    1c3a:	b3 94       	inc	r11
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <vfprintf+0x300>
    1c3e:	8a 2d       	mov	r24, r10
    1c40:	86 78       	andi	r24, 0x86	; 134
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <vfprintf+0x300>
    1c44:	b3 94       	inc	r11
    1c46:	a3 fc       	sbrc	r10, 3
    1c48:	11 c0       	rjmp	.+34     	; 0x1c6c <vfprintf+0x326>
    1c4a:	a0 fe       	sbrs	r10, 0
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0x314>
    1c4e:	b2 14       	cp	r11, r2
    1c50:	88 f4       	brcc	.+34     	; 0x1c74 <vfprintf+0x32e>
    1c52:	28 0c       	add	r2, r8
    1c54:	92 2c       	mov	r9, r2
    1c56:	9b 18       	sub	r9, r11
    1c58:	0e c0       	rjmp	.+28     	; 0x1c76 <vfprintf+0x330>
    1c5a:	b2 14       	cp	r11, r2
    1c5c:	60 f4       	brcc	.+24     	; 0x1c76 <vfprintf+0x330>
    1c5e:	b6 01       	movw	r22, r12
    1c60:	80 e2       	ldi	r24, 0x20	; 32
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1c68:	b3 94       	inc	r11
    1c6a:	f7 cf       	rjmp	.-18     	; 0x1c5a <vfprintf+0x314>
    1c6c:	b2 14       	cp	r11, r2
    1c6e:	18 f4       	brcc	.+6      	; 0x1c76 <vfprintf+0x330>
    1c70:	2b 18       	sub	r2, r11
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <vfprintf+0x332>
    1c74:	98 2c       	mov	r9, r8
    1c76:	21 2c       	mov	r2, r1
    1c78:	a4 fe       	sbrs	r10, 4
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <vfprintf+0x356>
    1c7c:	b6 01       	movw	r22, r12
    1c7e:	80 e3       	ldi	r24, 0x30	; 48
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1c86:	a2 fe       	sbrs	r10, 2
    1c88:	17 c0       	rjmp	.+46     	; 0x1cb8 <vfprintf+0x372>
    1c8a:	a1 fc       	sbrc	r10, 1
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <vfprintf+0x34e>
    1c8e:	88 e7       	ldi	r24, 0x78	; 120
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <vfprintf+0x352>
    1c94:	88 e5       	ldi	r24, 0x58	; 88
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	b6 01       	movw	r22, r12
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <vfprintf+0x36e>
    1c9c:	8a 2d       	mov	r24, r10
    1c9e:	86 78       	andi	r24, 0x86	; 134
    1ca0:	59 f0       	breq	.+22     	; 0x1cb8 <vfprintf+0x372>
    1ca2:	a1 fe       	sbrs	r10, 1
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x364>
    1ca6:	8b e2       	ldi	r24, 0x2B	; 43
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <vfprintf+0x366>
    1caa:	80 e2       	ldi	r24, 0x20	; 32
    1cac:	a7 fc       	sbrc	r10, 7
    1cae:	8d e2       	ldi	r24, 0x2D	; 45
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1cb8:	89 14       	cp	r8, r9
    1cba:	38 f4       	brcc	.+14     	; 0x1cca <vfprintf+0x384>
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	80 e3       	ldi	r24, 0x30	; 48
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1cc6:	9a 94       	dec	r9
    1cc8:	f7 cf       	rjmp	.-18     	; 0x1cb8 <vfprintf+0x372>
    1cca:	8a 94       	dec	r8
    1ccc:	f3 01       	movw	r30, r6
    1cce:	e8 0d       	add	r30, r8
    1cd0:	f1 1d       	adc	r31, r1
    1cd2:	80 81       	ld	r24, Z
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1cdc:	81 10       	cpse	r8, r1
    1cde:	f5 cf       	rjmp	.-22     	; 0x1cca <vfprintf+0x384>
    1ce0:	22 20       	and	r2, r2
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <vfprintf+0x3a0>
    1ce4:	42 ce       	rjmp	.-892    	; 0x196a <vfprintf+0x24>
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <fputc>
    1cf0:	2a 94       	dec	r2
    1cf2:	f6 cf       	rjmp	.-20     	; 0x1ce0 <vfprintf+0x39a>
    1cf4:	f6 01       	movw	r30, r12
    1cf6:	86 81       	ldd	r24, Z+6	; 0x06
    1cf8:	97 81       	ldd	r25, Z+7	; 0x07
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x3ba>
    1cfc:	8f ef       	ldi	r24, 0xFF	; 255
    1cfe:	9f ef       	ldi	r25, 0xFF	; 255
    1d00:	2b 96       	adiw	r28, 0x0b	; 11
    1d02:	e2 e1       	ldi	r30, 0x12	; 18
    1d04:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__>

00001d08 <strnlen_P>:
    1d08:	fc 01       	movw	r30, r24
    1d0a:	05 90       	lpm	r0, Z+
    1d0c:	61 50       	subi	r22, 0x01	; 1
    1d0e:	70 40       	sbci	r23, 0x00	; 0
    1d10:	01 10       	cpse	r0, r1
    1d12:	d8 f7       	brcc	.-10     	; 0x1d0a <strnlen_P+0x2>
    1d14:	80 95       	com	r24
    1d16:	90 95       	com	r25
    1d18:	8e 0f       	add	r24, r30
    1d1a:	9f 1f       	adc	r25, r31
    1d1c:	08 95       	ret

00001d1e <strnlen>:
    1d1e:	fc 01       	movw	r30, r24
    1d20:	61 50       	subi	r22, 0x01	; 1
    1d22:	70 40       	sbci	r23, 0x00	; 0
    1d24:	01 90       	ld	r0, Z+
    1d26:	01 10       	cpse	r0, r1
    1d28:	d8 f7       	brcc	.-10     	; 0x1d20 <strnlen+0x2>
    1d2a:	80 95       	com	r24
    1d2c:	90 95       	com	r25
    1d2e:	8e 0f       	add	r24, r30
    1d30:	9f 1f       	adc	r25, r31
    1d32:	08 95       	ret

00001d34 <fputc>:
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	23 81       	ldd	r18, Z+3	; 0x03
    1d40:	21 fd       	sbrc	r18, 1
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <fputc+0x16>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	2c c0       	rjmp	.+88     	; 0x1da2 <fputc+0x6e>
    1d4a:	22 ff       	sbrs	r18, 2
    1d4c:	16 c0       	rjmp	.+44     	; 0x1d7a <fputc+0x46>
    1d4e:	46 81       	ldd	r20, Z+6	; 0x06
    1d50:	57 81       	ldd	r21, Z+7	; 0x07
    1d52:	24 81       	ldd	r18, Z+4	; 0x04
    1d54:	35 81       	ldd	r19, Z+5	; 0x05
    1d56:	42 17       	cp	r20, r18
    1d58:	53 07       	cpc	r21, r19
    1d5a:	44 f4       	brge	.+16     	; 0x1d6c <fputc+0x38>
    1d5c:	a0 81       	ld	r26, Z
    1d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d60:	9d 01       	movw	r18, r26
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	31 83       	std	Z+1, r19	; 0x01
    1d68:	20 83       	st	Z, r18
    1d6a:	8c 93       	st	X, r24
    1d6c:	26 81       	ldd	r18, Z+6	; 0x06
    1d6e:	37 81       	ldd	r19, Z+7	; 0x07
    1d70:	2f 5f       	subi	r18, 0xFF	; 255
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	37 83       	std	Z+7, r19	; 0x07
    1d76:	26 83       	std	Z+6, r18	; 0x06
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <fputc+0x6e>
    1d7a:	8b 01       	movw	r16, r22
    1d7c:	ec 01       	movw	r28, r24
    1d7e:	fb 01       	movw	r30, r22
    1d80:	00 84       	ldd	r0, Z+8	; 0x08
    1d82:	f1 85       	ldd	r31, Z+9	; 0x09
    1d84:	e0 2d       	mov	r30, r0
    1d86:	09 95       	icall
    1d88:	89 2b       	or	r24, r25
    1d8a:	e1 f6       	brne	.-72     	; 0x1d44 <fputc+0x10>
    1d8c:	d8 01       	movw	r26, r16
    1d8e:	16 96       	adiw	r26, 0x06	; 6
    1d90:	8d 91       	ld	r24, X+
    1d92:	9c 91       	ld	r25, X
    1d94:	17 97       	sbiw	r26, 0x07	; 7
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	17 96       	adiw	r26, 0x07	; 7
    1d9a:	9c 93       	st	X, r25
    1d9c:	8e 93       	st	-X, r24
    1d9e:	16 97       	sbiw	r26, 0x06	; 6
    1da0:	ce 01       	movw	r24, r28
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	08 95       	ret

00001dac <__ultoa_invert>:
    1dac:	fa 01       	movw	r30, r20
    1dae:	aa 27       	eor	r26, r26
    1db0:	28 30       	cpi	r18, 0x08	; 8
    1db2:	51 f1       	breq	.+84     	; 0x1e08 <__ultoa_invert+0x5c>
    1db4:	20 31       	cpi	r18, 0x10	; 16
    1db6:	81 f1       	breq	.+96     	; 0x1e18 <__ultoa_invert+0x6c>
    1db8:	e8 94       	clt
    1dba:	6f 93       	push	r22
    1dbc:	6e 7f       	andi	r22, 0xFE	; 254
    1dbe:	6e 5f       	subi	r22, 0xFE	; 254
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	af 4f       	sbci	r26, 0xFF	; 255
    1dc8:	b1 e0       	ldi	r27, 0x01	; 1
    1dca:	3e d0       	rcall	.+124    	; 0x1e48 <__ultoa_invert+0x9c>
    1dcc:	b4 e0       	ldi	r27, 0x04	; 4
    1dce:	3c d0       	rcall	.+120    	; 0x1e48 <__ultoa_invert+0x9c>
    1dd0:	67 0f       	add	r22, r23
    1dd2:	78 1f       	adc	r23, r24
    1dd4:	89 1f       	adc	r24, r25
    1dd6:	9a 1f       	adc	r25, r26
    1dd8:	a1 1d       	adc	r26, r1
    1dda:	68 0f       	add	r22, r24
    1ddc:	79 1f       	adc	r23, r25
    1dde:	8a 1f       	adc	r24, r26
    1de0:	91 1d       	adc	r25, r1
    1de2:	a1 1d       	adc	r26, r1
    1de4:	6a 0f       	add	r22, r26
    1de6:	71 1d       	adc	r23, r1
    1de8:	81 1d       	adc	r24, r1
    1dea:	91 1d       	adc	r25, r1
    1dec:	a1 1d       	adc	r26, r1
    1dee:	20 d0       	rcall	.+64     	; 0x1e30 <__ultoa_invert+0x84>
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <__ultoa_invert+0x48>
    1df2:	68 94       	set
    1df4:	3f 91       	pop	r19
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	26 9f       	mul	r18, r22
    1dfa:	11 24       	eor	r1, r1
    1dfc:	30 19       	sub	r19, r0
    1dfe:	30 5d       	subi	r19, 0xD0	; 208
    1e00:	31 93       	st	Z+, r19
    1e02:	de f6       	brtc	.-74     	; 0x1dba <__ultoa_invert+0xe>
    1e04:	cf 01       	movw	r24, r30
    1e06:	08 95       	ret
    1e08:	46 2f       	mov	r20, r22
    1e0a:	47 70       	andi	r20, 0x07	; 7
    1e0c:	40 5d       	subi	r20, 0xD0	; 208
    1e0e:	41 93       	st	Z+, r20
    1e10:	b3 e0       	ldi	r27, 0x03	; 3
    1e12:	0f d0       	rcall	.+30     	; 0x1e32 <__ultoa_invert+0x86>
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__ultoa_invert+0x5c>
    1e16:	f6 cf       	rjmp	.-20     	; 0x1e04 <__ultoa_invert+0x58>
    1e18:	46 2f       	mov	r20, r22
    1e1a:	4f 70       	andi	r20, 0x0F	; 15
    1e1c:	40 5d       	subi	r20, 0xD0	; 208
    1e1e:	4a 33       	cpi	r20, 0x3A	; 58
    1e20:	18 f0       	brcs	.+6      	; 0x1e28 <__ultoa_invert+0x7c>
    1e22:	49 5d       	subi	r20, 0xD9	; 217
    1e24:	31 fd       	sbrc	r19, 1
    1e26:	40 52       	subi	r20, 0x20	; 32
    1e28:	41 93       	st	Z+, r20
    1e2a:	02 d0       	rcall	.+4      	; 0x1e30 <__ultoa_invert+0x84>
    1e2c:	a9 f7       	brne	.-22     	; 0x1e18 <__ultoa_invert+0x6c>
    1e2e:	ea cf       	rjmp	.-44     	; 0x1e04 <__ultoa_invert+0x58>
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	a6 95       	lsr	r26
    1e34:	97 95       	ror	r25
    1e36:	87 95       	ror	r24
    1e38:	77 95       	ror	r23
    1e3a:	67 95       	ror	r22
    1e3c:	ba 95       	dec	r27
    1e3e:	c9 f7       	brne	.-14     	; 0x1e32 <__ultoa_invert+0x86>
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 05       	cpc	r22, r1
    1e44:	71 05       	cpc	r23, r1
    1e46:	08 95       	ret
    1e48:	9b 01       	movw	r18, r22
    1e4a:	ac 01       	movw	r20, r24
    1e4c:	0a 2e       	mov	r0, r26
    1e4e:	06 94       	lsr	r0
    1e50:	57 95       	ror	r21
    1e52:	47 95       	ror	r20
    1e54:	37 95       	ror	r19
    1e56:	27 95       	ror	r18
    1e58:	ba 95       	dec	r27
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__ultoa_invert+0xa2>
    1e5c:	62 0f       	add	r22, r18
    1e5e:	73 1f       	adc	r23, r19
    1e60:	84 1f       	adc	r24, r20
    1e62:	95 1f       	adc	r25, r21
    1e64:	a0 1d       	adc	r26, r0
    1e66:	08 95       	ret

00001e68 <__prologue_saves__>:
    1e68:	2f 92       	push	r2
    1e6a:	3f 92       	push	r3
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	ca 1b       	sub	r28, r26
    1e92:	db 0b       	sbc	r29, r27
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	09 94       	ijmp

00001ea0 <__epilogue_restores__>:
    1ea0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ea2:	39 88       	ldd	r3, Y+17	; 0x11
    1ea4:	48 88       	ldd	r4, Y+16	; 0x10
    1ea6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ea8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eaa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eac:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eae:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eb2:	b9 84       	ldd	r11, Y+9	; 0x09
    1eb4:	c8 84       	ldd	r12, Y+8	; 0x08
    1eb6:	df 80       	ldd	r13, Y+7	; 0x07
    1eb8:	ee 80       	ldd	r14, Y+6	; 0x06
    1eba:	fd 80       	ldd	r15, Y+5	; 0x05
    1ebc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ebe:	1b 81       	ldd	r17, Y+3	; 0x03
    1ec0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ec2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ec4:	ce 0f       	add	r28, r30
    1ec6:	d1 1d       	adc	r29, r1
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	ed 01       	movw	r28, r26
    1ed4:	08 95       	ret

00001ed6 <_exit>:
    1ed6:	f8 94       	cli

00001ed8 <__stop_program>:
    1ed8:	ff cf       	rjmp	.-2      	; 0x1ed8 <__stop_program>
