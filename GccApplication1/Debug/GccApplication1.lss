
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f2  00800100  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  008005f2  008005f2  0000223a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003733  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bd  00000000  00000000  00005c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aed  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000089e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d75  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001413  00000000  00000000  00009dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 eb       	ldi	r30, 0xB4	; 180
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3f       	cpi	r26, 0xF2	; 242
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a2 ef       	ldi	r26, 0xF2	; 242
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 38       	cpi	r26, 0x8D	; 141
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <main>
      9e:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <ultraSensor>
     100:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <ultraSensor+0x1>
     104:	a0 93 6f 06 	sts	0x066F, r26	; 0x80066f <ultraSensor+0x2>
     108:	b0 93 70 06 	sts	0x0670, r27	; 0x800670 <ultraSensor+0x3>
     10c:	e9 e7       	ldi	r30, 0x79	; 121
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <ultraSensor+0x4>
     13c:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <ultraSensor+0x5>
     140:	a0 93 73 06 	sts	0x0673, r26	; 0x800673 <ultraSensor+0x6>
     144:	b0 93 74 06 	sts	0x0674, r27	; 0x800674 <ultraSensor+0x7>
     148:	e9 e7       	ldi	r30, 0x79	; 121
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
     1ca:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bandera3>
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <bandera3>
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	5a c0       	rjmp	.+180    	; 0x28c <__vector_11+0xfe>
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	ec 59       	subi	r30, 0x9C	; 156
     1e4:	f9 4f       	sbci	r31, 0xF9	; 249
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	4c c0       	rjmp	.+152    	; 0x28a <__vector_11+0xfc>
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	1d c0       	rjmp	.+58     	; 0x232 <__vector_11+0xa4>
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	1a c0       	rjmp	.+52     	; 0x232 <__vector_11+0xa4>
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	f7 01       	movw	r30, r14
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	ec 59       	subi	r30, 0x9C	; 156
     20e:	f9 4f       	sbci	r31, 0xF9	; 249
     210:	01 90       	ld	r0, Z+
     212:	f0 81       	ld	r31, Z
     214:	e0 2d       	mov	r30, r0
     216:	80 81       	ld	r24, Z
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	82 e2       	ldi	r24, 0x22	; 34
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	07 c0       	rjmp	.+14     	; 0x240 <__vector_11+0xb2>
     232:	f8 01       	movw	r30, r16
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	0e 94 36 08 	call	0x106c	; 0x106c <calculate_angle_pulseUs>
     23a:	f8 01       	movw	r30, r16
     23c:	93 83       	std	Z+3, r25	; 0x03
     23e:	82 83       	std	Z+2, r24	; 0x02
     240:	c1 11       	cpse	r28, r1
     242:	23 c0       	rjmp	.+70     	; 0x28a <__vector_11+0xfc>
     244:	f7 01       	movw	r30, r14
     246:	ee 0f       	add	r30, r30
     248:	ff 1f       	adc	r31, r31
     24a:	ec 59       	subi	r30, 0x9C	; 156
     24c:	f9 4f       	sbci	r31, 0xF9	; 249
     24e:	a0 81       	ld	r26, Z
     250:	b1 81       	ldd	r27, Z+1	; 0x01
     252:	2c 91       	ld	r18, X
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_11+0xd0>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	2a 95       	dec	r18
     260:	e2 f7       	brpl	.-8      	; 0x25a <__vector_11+0xcc>
     262:	95 b1       	in	r25, 0x05	; 5
     264:	89 2b       	or	r24, r25
     266:	85 b9       	out	0x05, r24	; 5
     268:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     26c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     270:	01 90       	ld	r0, Z+
     272:	f0 81       	ld	r31, Z
     274:	e0 2d       	mov	r30, r0
     276:	82 81       	ldd	r24, Z+2	; 0x02
     278:	93 81       	ldd	r25, Z+3	; 0x03
     27a:	82 0f       	add	r24, r18
     27c:	93 1f       	adc	r25, r19
     27e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     282:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     286:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <current_servo>
     28a:	cf 5f       	subi	r28, 0xFF	; 255
     28c:	c3 30       	cpi	r28, 0x03	; 3
     28e:	08 f4       	brcc	.+2      	; 0x292 <__vector_11+0x104>
     290:	a3 cf       	rjmp	.-186    	; 0x1d8 <__vector_11+0x4a>
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	cf 91       	pop	r28
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	0f 90       	pop	r0
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	0f 90       	pop	r0
     2ba:	1f 90       	pop	r1
     2bc:	18 95       	reti

000002be <__vector_12>:
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	2f 93       	push	r18
     2ca:	3f 93       	push	r19
     2cc:	4f 93       	push	r20
     2ce:	5f 93       	push	r21
     2d0:	6f 93       	push	r22
     2d2:	7f 93       	push	r23
     2d4:	8f 93       	push	r24
     2d6:	9f 93       	push	r25
     2d8:	af 93       	push	r26
     2da:	bf 93       	push	r27
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
     2e4:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ec 59       	subi	r30, 0x9C	; 156
     2f0:	f9 4f       	sbci	r31, 0xF9	; 249
     2f2:	01 90       	ld	r0, Z+
     2f4:	f0 81       	ld	r31, Z
     2f6:	e0 2d       	mov	r30, r0
     2f8:	20 81       	ld	r18, Z
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__vector_12+0x46>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	2a 95       	dec	r18
     306:	e2 f7       	brpl	.-8      	; 0x300 <__vector_12+0x42>
     308:	80 95       	com	r24
     30a:	90 95       	com	r25
     30c:	95 b1       	in	r25, 0x05	; 5
     30e:	89 23       	and	r24, r25
     310:	85 b9       	out	0x05, r24	; 5
     312:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ec 59       	subi	r30, 0x9C	; 156
     31e:	f9 4f       	sbci	r31, 0xF9	; 249
     320:	01 90       	ld	r0, Z+
     322:	f0 81       	ld	r31, Z
     324:	e0 2d       	mov	r30, r0
     326:	81 81       	ldd	r24, Z+1	; 0x01
     328:	81 ff       	sbrs	r24, 1
     32a:	71 c0       	rjmp	.+226    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     32c:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	ec 59       	subi	r30, 0x9C	; 156
     338:	f9 4f       	sbci	r31, 0xF9	; 249
     33a:	01 90       	ld	r0, Z+
     33c:	f0 81       	ld	r31, Z
     33e:	e0 2d       	mov	r30, r0
     340:	81 81       	ldd	r24, Z+1	; 0x01
     342:	82 ff       	sbrs	r24, 2
     344:	64 c0       	rjmp	.+200    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     346:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 59       	subi	r30, 0x9C	; 156
     352:	f9 4f       	sbci	r31, 0xF9	; 249
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	81 81       	ldd	r24, Z+1	; 0x01
     35c:	8b 7f       	andi	r24, 0xFB	; 251
     35e:	81 83       	std	Z+1, r24	; 0x01
     360:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ec 59       	subi	r30, 0x9C	; 156
     36c:	f9 4f       	sbci	r31, 0xF9	; 249
     36e:	01 90       	ld	r0, Z+
     370:	f0 81       	ld	r31, Z
     372:	e0 2d       	mov	r30, r0
     374:	81 81       	ldd	r24, Z+1	; 0x01
     376:	8d 7f       	andi	r24, 0xFD	; 253
     378:	81 83       	std	Z+1, r24	; 0x01
     37a:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ec 59       	subi	r30, 0x9C	; 156
     386:	f9 4f       	sbci	r31, 0xF9	; 249
     388:	01 90       	ld	r0, Z+
     38a:	f0 81       	ld	r31, Z
     38c:	e0 2d       	mov	r30, r0
     38e:	8a e5       	ldi	r24, 0x5A	; 90
     390:	84 83       	std	Z+4, r24	; 0x04
     392:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ec 59       	subi	r30, 0x9C	; 156
     39e:	f9 4f       	sbci	r31, 0xF9	; 249
     3a0:	c0 81       	ld	r28, Z
     3a2:	d1 81       	ldd	r29, Z+1	; 0x01
     3a4:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ec 59       	subi	r30, 0x9C	; 156
     3b0:	f9 4f       	sbci	r31, 0xF9	; 249
     3b2:	80 81       	ld	r24, Z
     3b4:	0e 94 36 08 	call	0x106c	; 0x106c <calculate_angle_pulseUs>
     3b8:	9b 83       	std	Y+3, r25	; 0x03
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     3c0:	81 11       	cpse	r24, r1
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <__vector_12+0x11a>
     3c4:	ee e0       	ldi	r30, 0x0E	; 14
     3c6:	f6 e0       	ldi	r31, 0x06	; 6
     3c8:	82 81       	ldd	r24, Z+2	; 0x02
     3ca:	88 60       	ori	r24, 0x08	; 8
     3cc:	82 83       	std	Z+2, r24	; 0x02
     3ce:	88 e3       	ldi	r24, 0x38	; 56
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     3d6:	1b c0       	rjmp	.+54     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3d8:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	51 f4       	brne	.+20     	; 0x3f4 <__vector_12+0x136>
     3e0:	e4 e8       	ldi	r30, 0x84	; 132
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	88 60       	ori	r24, 0x08	; 8
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	81 e5       	ldi	r24, 0x51	; 81
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     3f2:	0d c0       	rjmp	.+26     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3f4:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	49 f4       	brne	.+18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3fc:	ea e6       	ldi	r30, 0x6A	; 106
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	82 81       	ldd	r24, Z+2	; 0x02
     402:	88 60       	ori	r24, 0x08	; 8
     404:	82 83       	std	Z+2, r24	; 0x02
     406:	8a e6       	ldi	r24, 0x6A	; 106
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     40e:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <current_servo>
     418:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     41c:	83 30       	cpi	r24, 0x03	; 3
     41e:	08 f0       	brcs	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     420:	91 c0       	rjmp	.+290    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     422:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	ec 59       	subi	r30, 0x9C	; 156
     42e:	f9 4f       	sbci	r31, 0xF9	; 249
     430:	01 90       	ld	r0, Z+
     432:	f0 81       	ld	r31, Z
     434:	e0 2d       	mov	r30, r0
     436:	81 81       	ldd	r24, Z+1	; 0x01
     438:	80 ff       	sbrs	r24, 0
     43a:	2c c0       	rjmp	.+88     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     43c:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ec 59       	subi	r30, 0x9C	; 156
     448:	f9 4f       	sbci	r31, 0xF9	; 249
     44a:	01 90       	ld	r0, Z+
     44c:	f0 81       	ld	r31, Z
     44e:	e0 2d       	mov	r30, r0
     450:	20 81       	ld	r18, Z
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	2a 95       	dec	r18
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     460:	95 b1       	in	r25, 0x05	; 5
     462:	89 2b       	or	r24, r25
     464:	85 b9       	out	0x05, r24	; 5
     466:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     46a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     46e:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ec 59       	subi	r30, 0x9C	; 156
     47a:	f9 4f       	sbci	r31, 0xF9	; 249
     47c:	01 90       	ld	r0, Z+
     47e:	f0 81       	ld	r31, Z
     480:	e0 2d       	mov	r30, r0
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
     48a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     48e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     492:	58 c0       	rjmp	.+176    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     494:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	ec 59       	subi	r30, 0x9C	; 156
     4a0:	f9 4f       	sbci	r31, 0xF9	; 249
     4a2:	01 90       	ld	r0, Z+
     4a4:	f0 81       	ld	r31, Z
     4a6:	e0 2d       	mov	r30, r0
     4a8:	20 81       	ld	r18, Z
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	2a 95       	dec	r18
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4b8:	80 95       	com	r24
     4ba:	90 95       	com	r25
     4bc:	95 b1       	in	r25, 0x05	; 5
     4be:	89 23       	and	r24, r25
     4c0:	85 b9       	out	0x05, r24	; 5
     4c2:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <current_servo>
     4cc:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <current_servo>
     4d0:	83 30       	cpi	r24, 0x03	; 3
     4d2:	c0 f5       	brcc	.+112    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     4d4:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ec 59       	subi	r30, 0x9C	; 156
     4e0:	f9 4f       	sbci	r31, 0xF9	; 249
     4e2:	01 90       	ld	r0, Z+
     4e4:	f0 81       	ld	r31, Z
     4e6:	e0 2d       	mov	r30, r0
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	80 ff       	sbrs	r24, 0
     4ec:	2b c0       	rjmp	.+86     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     4ee:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	ee 0f       	add	r30, r30
     4f6:	ff 1f       	adc	r31, r31
     4f8:	ec 59       	subi	r30, 0x9C	; 156
     4fa:	f9 4f       	sbci	r31, 0xF9	; 249
     4fc:	01 90       	ld	r0, Z+
     4fe:	f0 81       	ld	r31, Z
     500:	e0 2d       	mov	r30, r0
     502:	20 81       	ld	r18, Z
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	2a 95       	dec	r18
     510:	e2 f7       	brpl	.-8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     512:	95 b1       	in	r25, 0x05	; 5
     514:	89 2b       	or	r24, r25
     516:	85 b9       	out	0x05, r24	; 5
     518:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     51c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     520:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <current_servo>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ec 59       	subi	r30, 0x9C	; 156
     52c:	f9 4f       	sbci	r31, 0xF9	; 249
     52e:	01 90       	ld	r0, Z+
     530:	f0 81       	ld	r31, Z
     532:	e0 2d       	mov	r30, r0
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	82 0f       	add	r24, r18
     53a:	93 1f       	adc	r25, r19
     53c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     540:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <timer1_init>:
     56a:	a4 e8       	ldi	r26, 0x84	; 132
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	1c 92       	st	X, r1
     572:	1e 92       	st	-X, r1
     574:	86 b3       	in	r24, 0x16	; 22
     576:	80 62       	ori	r24, 0x20	; 32
     578:	86 bb       	out	0x16, r24	; 22
     57a:	ef e6       	ldi	r30, 0x6F	; 111
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	87 62       	ori	r24, 0x27	; 39
     582:	80 83       	st	Z, r24
     584:	e1 e8       	ldi	r30, 0x81	; 129
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
     58e:	80 81       	ld	r24, Z
     590:	82 60       	ori	r24, 0x02	; 2
     592:	80 83       	st	Z, r24
     594:	8d 91       	ld	r24, X+
     596:	9c 91       	ld	r25, X
     598:	80 5c       	subi	r24, 0xC0	; 192
     59a:	93 46       	sbci	r25, 0x63	; 99
     59c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     5a4:	08 95       	ret

000005a6 <timer2_init>:
     5a6:	e1 eb       	ldi	r30, 0xB1	; 177
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	87 60       	ori	r24, 0x07	; 7
     5ae:	80 83       	st	Z, r24
     5b0:	8b e9       	ldi	r24, 0x9B	; 155
     5b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     5b6:	e0 e7       	ldi	r30, 0x70	; 112
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	82 60       	ori	r24, 0x02	; 2
     5be:	80 83       	st	Z, r24
     5c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     5c4:	08 95       	ret

000005c6 <gpio_pins_init>:
     5c6:	84 b1       	in	r24, 0x04	; 4
     5c8:	80 62       	ori	r24, 0x20	; 32
     5ca:	84 b9       	out	0x04, r24	; 4
     5cc:	85 b1       	in	r24, 0x05	; 5
     5ce:	80 62       	ori	r24, 0x20	; 32
     5d0:	85 b9       	out	0x05, r24	; 5
     5d2:	8a b1       	in	r24, 0x0a	; 10
     5d4:	88 60       	ori	r24, 0x08	; 8
     5d6:	8a b9       	out	0x0a, r24	; 10
     5d8:	84 b1       	in	r24, 0x04	; 4
     5da:	8e 7f       	andi	r24, 0xFE	; 254
     5dc:	84 b9       	out	0x04, r24	; 4
     5de:	8a b1       	in	r24, 0x0a	; 10
     5e0:	8f 7e       	andi	r24, 0xEF	; 239
     5e2:	8a b9       	out	0x0a, r24	; 10
     5e4:	84 b1       	in	r24, 0x04	; 4
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	84 b9       	out	0x04, r24	; 4
     5ea:	84 b1       	in	r24, 0x04	; 4
     5ec:	84 60       	ori	r24, 0x04	; 4
     5ee:	84 b9       	out	0x04, r24	; 4
     5f0:	84 b1       	in	r24, 0x04	; 4
     5f2:	88 60       	ori	r24, 0x08	; 8
     5f4:	84 b9       	out	0x04, r24	; 4
     5f6:	0e 94 6d 08 	call	0x10da	; 0x10da <tcrt_init>
     5fa:	8b b1       	in	r24, 0x0b	; 11
     5fc:	87 7f       	andi	r24, 0xF7	; 247
     5fe:	8b b9       	out	0x0b, r24	; 11
     600:	8b b1       	in	r24, 0x0b	; 11
     602:	8f 7e       	andi	r24, 0xEF	; 239
     604:	8b b9       	out	0x0b, r24	; 11
     606:	08 95       	ret

00000608 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     62a:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     62e:	81 ff       	sbrs	r24, 1
     630:	c9 c0       	rjmp	.+402    	; 0x7c4 <__vector_7+0x1bc>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     632:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <ultraSensor+0xd>
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	51 f5       	brne	.+84     	; 0x68e <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     63a:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     63e:	85 fd       	sbrc	r24, 5
     640:	0d c0       	rjmp	.+26     	; 0x65c <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     642:	0e 94 8a 09 	call	0x1314	; 0x1314 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     646:	e9 e7       	ldi	r30, 0x79	; 121
     648:	f6 e0       	ldi	r31, 0x06	; 6
     64a:	80 81       	ld	r24, Z
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     650:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     654:	80 62       	ori	r24, 0x20	; 32
     656:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
     65a:	19 c0       	rjmp	.+50     	; 0x68e <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     65c:	0e 94 8e 09 	call	0x131c	; 0x131c <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     660:	e9 e7       	ldi	r30, 0x79	; 121
     662:	f6 e0       	ldi	r31, 0x06	; 6
     664:	80 81       	ld	r24, Z
     666:	82 60       	ori	r24, 0x02	; 2
     668:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     66a:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     66e:	8d 7d       	andi	r24, 0xDD	; 221
     670:	88 60       	ori	r24, 0x08	; 8
     672:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     676:	80 81       	ld	r24, Z
     678:	8f 7d       	andi	r24, 0xDF	; 223
     67a:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     682:	80 81       	ld	r24, Z
     684:	80 61       	ori	r24, 0x10	; 16
     686:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     688:	80 81       	ld	r24, Z
     68a:	8d 7f       	andi	r24, 0xFD	; 253
     68c:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     68e:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <ultraSensor+0xd>
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	d1 f4       	brne	.+52     	; 0x6ca <__vector_7+0xc2>
     696:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <ultraSensor+0xc>
     69a:	84 ff       	sbrs	r24, 4
     69c:	16 c0       	rjmp	.+44     	; 0x6ca <__vector_7+0xc2>
     69e:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     6a2:	89 70       	andi	r24, 0x09	; 9
     6a4:	88 30       	cpi	r24, 0x08	; 8
     6a6:	89 f4       	brne	.+34     	; 0x6ca <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     6a8:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <veintems_counter>
     6ac:	81 11       	cpse	r24, r1
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <__vector_7+0xb4>
				veintems_counter++;
     6b0:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <veintems_counter>
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <veintems_counter>
     6ba:	07 c0       	rjmp	.+14     	; 0x6ca <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     6bc:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
				veintems_counter = 0;
     6c6:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     6ca:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <ultraSensor+0xc>
     6ce:	85 fd       	sbrc	r24, 5
     6d0:	22 c0       	rjmp	.+68     	; 0x716 <__vector_7+0x10e>
     6d2:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     6d6:	84 fd       	sbrc	r24, 4
     6d8:	1e c0       	rjmp	.+60     	; 0x716 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     6da:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <wait_time>
     6de:	87 30       	cpi	r24, 0x07	; 7
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <__vector_7+0xe6>
				wait_time++;
     6e2:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <wait_time>
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <wait_time>
     6ec:	07 c0       	rjmp	.+14     	; 0x6fc <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     6ee:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     6f2:	80 61       	ori	r24, 0x10	; 16
     6f4:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
				wait_time = 0;
     6f8:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     6fc:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <ultraSensor+0xc>
     700:	83 ff       	sbrs	r24, 3
     702:	09 c0       	rjmp	.+18     	; 0x716 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     704:	60 91 49 06 	lds	r22, 0x0649	; 0x800649 <bandera2>
     708:	66 fb       	bst	r22, 6
     70a:	66 27       	eor	r22, r22
     70c:	60 f9       	bld	r22, 0
     70e:	8d e6       	ldi	r24, 0x6D	; 109
     710:	96 e0       	ldi	r25, 0x06	; 6
     712:	0e 94 5f 0a 	call	0x14be	; 0x14be <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     716:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <diezMsCounter>
     71a:	8a 30       	cpi	r24, 0x0A	; 10
     71c:	30 f4       	brcc	.+12     	; 0x72a <__vector_7+0x122>
			diezMsCounter++;
     71e:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <diezMsCounter>
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <diezMsCounter>
     728:	07 c0       	rjmp	.+14     	; 0x738 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     72a:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     72e:	88 60       	ori	r24, 0x08	; 8
     730:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			diezMsCounter = 0;
     734:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     738:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     73c:	86 ff       	sbrs	r24, 6
     73e:	0e c0       	rjmp	.+28     	; 0x75c <__vector_7+0x154>
			if(btn_pressed_time == 255){
     740:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <btn_pressed_time>
     744:	8f 3f       	cpi	r24, 0xFF	; 255
     746:	29 f4       	brne	.+10     	; 0x752 <__vector_7+0x14a>
				BTN_OVF = 1;
     748:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     74c:	84 60       	ori	r24, 0x04	; 4
     74e:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			}
			btn_pressed_time++;
     752:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <btn_pressed_time>
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     75c:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <servoA+0x1>
     760:	81 ff       	sbrs	r24, 1
     762:	0d c0       	rjmp	.+26     	; 0x77e <__vector_7+0x176>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     764:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <servoA+0x5>
     768:	9a 30       	cpi	r25, 0x0A	; 10
     76a:	20 f4       	brcc	.+8      	; 0x774 <__vector_7+0x16c>
				servoA.state_time++;  // Increment time spent in PUSH mode
     76c:	9f 5f       	subi	r25, 0xFF	; 255
     76e:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <servoA+0x5>
     772:	05 c0       	rjmp	.+10     	; 0x77e <__vector_7+0x176>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     774:	e8 e0       	ldi	r30, 0x08	; 8
     776:	f6 e0       	ldi	r31, 0x06	; 6
     778:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     77a:	84 60       	ori	r24, 0x04	; 4
     77c:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     77e:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <servoB+0x1>
     782:	81 ff       	sbrs	r24, 1
     784:	0d c0       	rjmp	.+26     	; 0x7a0 <__vector_7+0x198>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     786:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <servoB+0x5>
     78a:	9a 30       	cpi	r25, 0x0A	; 10
     78c:	20 f4       	brcc	.+8      	; 0x796 <__vector_7+0x18e>
				servoB.state_time++;  // Increment time spent in PUSH mode
     78e:	9f 5f       	subi	r25, 0xFF	; 255
     790:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <servoB+0x5>
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <__vector_7+0x198>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     796:	ee e7       	ldi	r30, 0x7E	; 126
     798:	f6 e0       	ldi	r31, 0x06	; 6
     79a:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     79c:	84 60       	ori	r24, 0x04	; 4
     79e:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     7a0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     7a4:	80 ff       	sbrs	r24, 0
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <__vector_7+0x1aa>
     7a8:	83 fd       	sbrc	r24, 3
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <__vector_7+0x1aa>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     7ac:	88 60       	ori	r24, 0x08	; 8
     7ae:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     7b2:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     7b6:	80 ff       	sbrs	r24, 0
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <__vector_7+0x1bc>
     7ba:	83 fd       	sbrc	r24, 3
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <__vector_7+0x1bc>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <IR_B>
// 		}
// 		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
// 			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
// 		}
	}
}
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	0f 90       	pop	r0
     7e2:	1f 90       	pop	r1
     7e4:	18 95       	reti

000007e6 <main>:
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     7e6:	82 e8       	ldi	r24, 0x82	; 130
     7e8:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
	IR_CALIBRATED = 0;
     7f2:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     7f6:	88 e0       	ldi	r24, 0x08	; 8
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 9e 09 	call	0x133c	; 0x133c <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     7fe:	e7 e8       	ldi	r30, 0x87	; 135
     800:	f6 e0       	ldi	r31, 0x06	; 6
     802:	8e e0       	ldi	r24, 0x0E	; 14
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	93 83       	std	Z+3, r25	; 0x03
     808:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	91 83       	std	Z+1, r25	; 0x01
     810:	80 83       	st	Z, r24
	diezMsCounter = 0;
     812:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     816:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     81a:	0e 94 b5 02 	call	0x56a	; 0x56a <timer1_init>
	timer2_init();
     81e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     822:	0e 94 93 08 	call	0x1126	; 0x1126 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     826:	63 e5       	ldi	r22, 0x53	; 83
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8d e6       	ldi	r24, 0x6D	; 109
     82c:	96 e0       	ldi	r25, 0x06	; 6
     82e:	0e 94 40 0a 	call	0x1480	; 0x1480 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     832:	60 91 49 06 	lds	r22, 0x0649	; 0x800649 <bandera2>
     836:	66 fb       	bst	r22, 6
     838:	66 27       	eor	r22, r22
     83a:	60 f9       	bld	r22, 0
     83c:	8d e6       	ldi	r24, 0x6D	; 109
     83e:	96 e0       	ldi	r25, 0x06	; 6
     840:	0e 94 c9 09 	call	0x1392	; 0x1392 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     844:	41 e1       	ldi	r20, 0x11	; 17
     846:	56 e0       	ldi	r21, 0x06	; 6
     848:	6d e6       	ldi	r22, 0x6D	; 109
     84a:	76 e0       	ldi	r23, 0x06	; 6
     84c:	8f e5       	ldi	r24, 0x5F	; 95
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	0e 94 39 05 	call	0xa72	; 0xa72 <initDetector>
	initSorter(&SorterSystem);
     854:	80 e3       	ldi	r24, 0x30	; 48
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	0e 94 a0 05 	call	0xb40	; 0xb40 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     85c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     860:	82 60       	ori	r24, 0x02	; 2
     862:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     866:	85 ed       	ldi	r24, 0xD5	; 213
     868:	94 e0       	ldi	r25, 0x04	; 4
     86a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
	sei();
     86e:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     870:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bandera3>
     874:	80 ff       	sbrs	r24, 0
     876:	05 c0       	rjmp	.+10     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
			irSensorsTask(&SorterSystem);
     878:	80 e3       	ldi	r24, 0x30	; 48
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	0e 94 82 07 	call	0xf04	; 0xf04 <irSensorsTask>
     880:	69 c0       	rjmp	.+210    	; 0x954 <__stack+0x55>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     882:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <__data_end>
     886:	81 11       	cpse	r24, r1
     888:	23 c0       	rjmp	.+70     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
		printf("Calibrando sensores IR...\n");
     88a:	83 e8       	ldi	r24, 0x83	; 131
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     892:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     896:	80 ff       	sbrs	r24, 0
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     8a0:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     8a4:	80 ff       	sbrs	r24, 0
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     8a8:	84 60       	ori	r24, 0x04	; 4
     8aa:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     8ae:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <IR_C>
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     8b6:	84 60       	ori	r24, 0x04	; 4
     8b8:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     8bc:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <IR_U>
     8c0:	80 ff       	sbrs	r24, 0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     8c4:	84 60       	ori	r24, 0x04	; 4
     8c6:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <IR_U>
		}
		init_done = true;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     8d0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     8d4:	82 ff       	sbrs	r24, 2
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
		calibrateIRSensor(&IR_A);
     8d8:	80 e5       	ldi	r24, 0x50	; 80
     8da:	96 e0       	ldi	r25, 0x06	; 6
     8dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8e0:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     8e4:	82 ff       	sbrs	r24, 2
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
		calibrateIRSensor(&IR_B);
     8e8:	89 ef       	ldi	r24, 0xF9	; 249
     8ea:	95 e0       	ldi	r25, 0x05	; 5
     8ec:	0e 94 cc 08 	call	0x1198	; 0x1198 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8f0:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     8f4:	82 ff       	sbrs	r24, 2
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0x1>
		calibrateIRSensor(&IR_B);
     8f8:	89 ef       	ldi	r24, 0xF9	; 249
     8fa:	95 e0       	ldi	r25, 0x05	; 5
     8fc:	0e 94 cc 08 	call	0x1198	; 0x1198 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     900:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     904:	82 ff       	sbrs	r24, 2
     906:	04 c0       	rjmp	.+8      	; 0x910 <__stack+0x11>
		calibrateIRSensor(&IR_B);
     908:	89 ef       	ldi	r24, 0xF9	; 249
     90a:	95 e0       	ldi	r25, 0x05	; 5
     90c:	0e 94 cc 08 	call	0x1198	; 0x1198 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     910:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     914:	82 fd       	sbrc	r24, 2
     916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0x25>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
     918:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
		calibrateIRSensor(&IR_B);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     91c:	82 ff       	sbrs	r24, 2
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
	}
	return false; // Sigue calibrando
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		return true; // Listo
     928:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     92a:	88 23       	and	r24, r24
     92c:	99 f0       	breq	.+38     	; 0x954 <__stack+0x55>
				printf("Todos los sensores IR calibrados.\n");
     92e:	8d e9       	ldi	r24, 0x9D	; 157
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
				IR_CALIBRATED = 1;
     936:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bandera3>
     93a:	81 60       	ori	r24, 0x01	; 1
     93c:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <bandera3>
				IR_A.calibrationCounter = 0;
     940:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     944:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     948:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     94c:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <IR_U+0x9>
				initOutputs();
     950:	0e 94 53 05 	call	0xaa6	; 0xaa6 <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     954:	60 e3       	ldi	r22, 0x30	; 48
     956:	76 e0       	ldi	r23, 0x06	; 6
     958:	8f e5       	ldi	r24, 0x5F	; 95
     95a:	96 e0       	ldi	r25, 0x06	; 6
     95c:	0e 94 50 06 	call	0xca0	; 0xca0 <ultraSensorTask>
		servosTask();
     960:	0e 94 35 08 	call	0x106a	; 0x106a <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     964:	4c 9b       	sbis	0x09, 4	; 9
     966:	0a c0       	rjmp	.+20     	; 0x97c <__stack+0x7d>
     968:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     96c:	86 fd       	sbrc	r24, 6
     96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
		btn_pressed_time = 0;
     970:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <btn_pressed_time>
		BTN_PRESSED = 1;
     974:	80 64       	ori	r24, 0x40	; 64
     976:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
     97a:	28 c0       	rjmp	.+80     	; 0x9cc <__stack+0xcd>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     97c:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     980:	86 ff       	sbrs	r24, 6
     982:	24 c0       	rjmp	.+72     	; 0x9cc <__stack+0xcd>
     984:	4c 99       	sbic	0x09, 4	; 9
     986:	22 c0       	rjmp	.+68     	; 0x9cc <__stack+0xcd>
		BTN_PRESSED = 0;
     988:	8f 7b       	andi	r24, 0xBF	; 191
     98a:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     98e:	82 ff       	sbrs	r24, 2
     990:	04 c0       	rjmp	.+8      	; 0x99a <__stack+0x9b>
			printf("Btn overflowed\n");
     992:	8f eb       	ldi	r24, 0xBF	; 191
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     99a:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <btn_pressed_time>
     99e:	8a 30       	cpi	r24, 0x0A	; 10
     9a0:	30 f4       	brcc	.+12     	; 0x9ae <__stack+0xaf>
     9a2:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     9a6:	98 2f       	mov	r25, r24
     9a8:	94 70       	andi	r25, 0x04	; 4
     9aa:	82 ff       	sbrs	r24, 2
     9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0xbb>
			BTN_RELEASED = 1;
     9ae:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
     9b8:	09 c0       	rjmp	.+18     	; 0x9cc <__stack+0xcd>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     9ba:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <btn_pressed_time>
			if(BTN_OVF){
     9be:	99 23       	and	r25, r25
     9c0:	29 f0       	breq	.+10     	; 0x9cc <__stack+0xcd>
				BTN_OVF = 0;
     9c2:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     9c6:	8b 7f       	andi	r24, 0xFB	; 251
     9c8:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     9cc:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     9d0:	84 ff       	sbrs	r24, 4
     9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <__stack+0xe5>
			WAIT_TIME_TRIGGER_PASSED = 0;
     9d4:	8f 7e       	andi	r24, 0xEF	; 239
     9d6:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     9da:	e9 e7       	ldi	r30, 0x79	; 121
     9dc:	f6 e0       	ldi	r31, 0x06	; 6
     9de:	80 81       	ld	r24, Z
     9e0:	80 62       	ori	r24, 0x20	; 32
     9e2:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     9e4:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     9e8:	83 ff       	sbrs	r24, 3
     9ea:	08 c0       	rjmp	.+16     	; 0x9fc <__stack+0xfd>
			ECHO_INTERVAL_FLAG = 0;
     9ec:	87 7f       	andi	r24, 0xF7	; 247
     9ee:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			EMIT_TRIGGER = 1;
     9f2:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     9f6:	82 60       	ori	r24, 0x02	; 2
     9f8:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     9fc:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     a00:	80 ff       	sbrs	r24, 0
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <__stack+0x10b>
			BTN_RELEASED = 0; //TEST SERVO A
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     a0a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bandera3>
     a0e:	81 ff       	sbrs	r24, 1
     a10:	2f cf       	rjmp	.-418    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
			IR_READ_INTERRUPT = 0;
     a12:	8d 7f       	andi	r24, 0xFD	; 253
     a14:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <bandera3>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     a18:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     a1c:	80 ff       	sbrs	r24, 0
     a1e:	07 c0       	rjmp	.+14     	; 0xa2e <__stack+0x12f>
     a20:	82 ff       	sbrs	r24, 2
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <__stack+0x12f>
     a24:	83 fd       	sbrc	r24, 3
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <__stack+0x12f>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a28:	88 60       	ori	r24, 0x08	; 8
     a2a:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     a2e:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     a32:	80 ff       	sbrs	r24, 0
     a34:	07 c0       	rjmp	.+14     	; 0xa44 <__stack+0x145>
     a36:	82 ff       	sbrs	r24, 2
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <__stack+0x145>
     a3a:	83 fd       	sbrc	r24, 3
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <__stack+0x145>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     a44:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <IR_C>
     a48:	80 ff       	sbrs	r24, 0
     a4a:	07 c0       	rjmp	.+14     	; 0xa5a <__stack+0x15b>
     a4c:	82 ff       	sbrs	r24, 2
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__stack+0x15b>
     a50:	83 fd       	sbrc	r24, 3
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <__stack+0x15b>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     a5a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <IR_U>
     a5e:	80 ff       	sbrs	r24, 0
     a60:	07 cf       	rjmp	.-498    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     a62:	82 ff       	sbrs	r24, 2
     a64:	05 cf       	rjmp	.-502    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     a66:	83 fd       	sbrc	r24, 3
     a68:	03 cf       	rjmp	.-506    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a6a:	88 60       	ori	r24, 0x08	; 8
     a6c:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <IR_U>
     a70:	ff ce       	rjmp	.-514    	; 0x870 <__DATA_REGION_LENGTH__+0x70>

00000a72 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	00 d0       	rcall	.+0      	; 0xa78 <initDetector+0x6>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	fc 01       	movw	r30, r24
     a7e:	5a 83       	std	Y+2, r21	; 0x02
     a80:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     a82:	8d e6       	ldi	r24, 0x6D	; 109
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	93 83       	std	Z+3, r25	; 0x03
     a90:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     a92:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     a94:	8e ec       	ldi	r24, 0xCE	; 206
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
}
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	printf("Init servos\n");
}

void initOutputs(){
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     aaa:	2a e5       	ldi	r18, 0x5A	; 90
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	96 e0       	ldi	r25, 0x06	; 6
     aba:	0e 94 49 08 	call	0x1092	; 0x1092 <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     abe:	2a e5       	ldi	r18, 0x5A	; 90
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	42 e0       	ldi	r20, 0x02	; 2
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	8e e7       	ldi	r24, 0x7E	; 126
     acc:	96 e0       	ldi	r25, 0x06	; 6
     ace:	0e 94 49 08 	call	0x1092	; 0x1092 <initServo>
	//initServo(&servoC, 2, SERVOC_PIN);
	servosArray[0] = &servoA;
     ad2:	e4 e6       	ldi	r30, 0x64	; 100
     ad4:	f6 e0       	ldi	r31, 0x06	; 6
     ad6:	88 e0       	ldi	r24, 0x08	; 8
     ad8:	96 e0       	ldi	r25, 0x06	; 6
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     ade:	8e e7       	ldi	r24, 0x7E	; 126
     ae0:	96 e0       	ldi	r25, 0x06	; 6
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     ae6:	8a e4       	ldi	r24, 0x4A	; 74
     ae8:	96 e0       	ldi	r25, 0x06	; 6
     aea:	95 83       	std	Z+5, r25	; 0x05
     aec:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     aee:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <current_servo>
	printf("Init servos\n");
     af2:	8f ee       	ldi	r24, 0xEF	; 239
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     afa:	ce e0       	ldi	r28, 0x0E	; 14
     afc:	d6 e0       	ldi	r29, 0x06	; 6
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     b02:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <IR_A+0x8>
     b06:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     b08:	a4 e8       	ldi	r26, 0x84	; 132
     b0a:	b6 e0       	ldi	r27, 0x06	; 6
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	8c 93       	st	X, r24
     b12:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     b14:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <IR_B+0x8>
     b18:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     b1a:	ea e6       	ldi	r30, 0x6A	; 106
     b1c:	f6 e0       	ldi	r31, 0x06	; 6
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     b22:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <IR_C+0x8>
     b26:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     b30:	82 83       	std	Z+2, r24	; 0x02
	printf("Init outputs\n");
     b32:	8b ef       	ldi	r24, 0xFB	; 251
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     b40:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     b42:	8c e1       	ldi	r24, 0x1C	; 28
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	91 83       	std	Z+1, r25	; 0x01
     b48:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     b4a:	8e e0       	ldi	r24, 0x0E	; 14
     b4c:	96 e0       	ldi	r25, 0x06	; 6
     b4e:	93 83       	std	Z+3, r25	; 0x03
     b50:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     b52:	84 e8       	ldi	r24, 0x84	; 132
     b54:	96 e0       	ldi	r25, 0x06	; 6
     b56:	95 83       	std	Z+5, r25	; 0x05
     b58:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     b5a:	8a e6       	ldi	r24, 0x6A	; 106
     b5c:	96 e0       	ldi	r25, 0x06	; 6
     b5e:	97 83       	std	Z+7, r25	; 0x07
     b60:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     b62:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     b66:	88 23       	and	r24, r24
     b68:	44 f4       	brge	.+16     	; 0xb7a <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     b72:	8a e3       	ldi	r24, 0x3A	; 58
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     b7a:	08 95       	ret

00000b7c <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     b7c:	8e 3b       	cpi	r24, 0xBE	; 190
     b7e:	98 f0       	brcs	.+38     	; 0xba6 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     b80:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bandera2>
     b84:	99 23       	and	r25, r25
     b86:	0c f0       	brlt	.+2      	; 0xb8a <classify_box+0xe>
     b88:	83 c0       	rjmp	.+262    	; 0xc90 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     b8a:	1f 92       	push	r1
     b8c:	8f 93       	push	r24
     b8e:	8f e5       	ldi	r24, 0x5F	; 95
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
		}
		return NO_BOX;
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     ba6:	9e eb       	ldi	r25, 0xBE	; 190
     ba8:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     baa:	97 33       	cpi	r25, 0x37	; 55
     bac:	98 f4       	brcc	.+38     	; 0xbd4 <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     bae:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     bb2:	80 78       	andi	r24, 0x80	; 128
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <classify_box+0x3c>
     bb6:	73 c0       	rjmp	.+230    	; 0xc9e <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     bb8:	1f 92       	push	r1
     bba:	9f 93       	push	r25
     bbc:	8f e8       	ldi	r24, 0x8F	; 143
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     bd4:	db 01       	movw	r26, r22
     bd6:	ed 91       	ld	r30, X+
     bd8:	fc 91       	ld	r31, X
     bda:	80 81       	ld	r24, Z
     bdc:	98 17       	cp	r25, r24
     bde:	b0 f0       	brcs	.+44     	; 0xc0c <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     be0:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     be2:	89 17       	cp	r24, r25
     be4:	98 f0       	brcs	.+38     	; 0xc0c <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     be6:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     bea:	88 23       	and	r24, r24
     bec:	0c f0       	brlt	.+2      	; 0xbf0 <classify_box+0x74>
     bee:	52 c0       	rjmp	.+164    	; 0xc94 <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     bf0:	1f 92       	push	r1
     bf2:	9f 93       	push	r25
     bf4:	88 eb       	ldi	r24, 0xB8	; 184
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	98 17       	cp	r25, r24
     c10:	a8 f0       	brcs	.+42     	; 0xc3c <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     c12:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     c14:	89 17       	cp	r24, r25
     c16:	90 f0       	brcs	.+36     	; 0xc3c <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c18:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     c1c:	88 23       	and	r24, r24
     c1e:	e4 f5       	brge	.+120    	; 0xc98 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     c20:	1f 92       	push	r1
     c22:	9f 93       	push	r25
     c24:	8d ec       	ldi	r24, 0xCD	; 205
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c3c:	84 81       	ldd	r24, Z+4	; 0x04
     c3e:	98 17       	cp	r25, r24
     c40:	a8 f0       	brcs	.+42     	; 0xc6c <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     c42:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c44:	89 17       	cp	r24, r25
     c46:	90 f0       	brcs	.+36     	; 0xc6c <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c48:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     c4c:	88 23       	and	r24, r24
     c4e:	34 f5       	brge	.+76     	; 0xc9c <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     c50:	1f 92       	push	r1
     c52:	9f 93       	push	r25
     c54:	82 ee       	ldi	r24, 0xE2	; 226
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     c6c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     c70:	80 78       	andi	r24, 0x80	; 128
     c72:	a9 f0       	breq	.+42     	; 0xc9e <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     c74:	1f 92       	push	r1
     c76:	9f 93       	push	r25
     c78:	87 ef       	ldi	r24, 0xF7	; 247
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	9f 93       	push	r25
     c7e:	8f 93       	push	r24
     c80:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     c9c:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     c9e:	08 95       	ret

00000ca0 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
     cac:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     cae:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     cb2:	88 23       	and	r24, r24
     cb4:	a4 f5       	brge	.+104    	; 0xd1e <ultraSensorTask+0x7e>
     cb6:	e8 81       	ld	r30, Y
     cb8:	f9 81       	ldd	r31, Y+1	; 0x01
     cba:	84 85       	ldd	r24, Z+12	; 0x0c
     cbc:	85 ff       	sbrs	r24, 5
     cbe:	2f c0       	rjmp	.+94     	; 0xd1e <ultraSensorTask+0x7e>
     cc0:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     cc4:	81 ff       	sbrs	r24, 1
     cc6:	2b c0       	rjmp	.+86     	; 0xd1e <ultraSensorTask+0x7e>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     cc8:	cf 01       	movw	r24, r30
     cca:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <ultrasonic_start>
     cce:	88 23       	and	r24, r24
     cd0:	c1 f0       	breq	.+48     	; 0xd02 <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     cd2:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     cd6:	86 ff       	sbrs	r24, 6
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     cda:	85 e2       	ldi	r24, 0x25	; 37
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     ce2:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     cec:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     cf6:	e8 81       	ld	r30, Y
     cf8:	f9 81       	ldd	r31, Y+1	; 0x01
     cfa:	84 85       	ldd	r24, Z+12	; 0x0c
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	84 87       	std	Z+12, r24	; 0x0c
     d00:	0e c0       	rjmp	.+28     	; 0xd1e <ultraSensorTask+0x7e>
		}
		else
		{
			if (DEBUG_FLAGS)
     d02:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     d06:	86 ff       	sbrs	r24, 6
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     d0a:	80 e2       	ldi	r24, 0x20	; 32
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
			}
			EMIT_FAILED = 1;
     d12:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
			EMIT_TRIGGER = 0;
     d16:	84 60       	ori	r24, 0x04	; 4
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     d1e:	88 81       	ld	r24, Y
     d20:	99 81       	ldd	r25, Y+1	; 0x01
     d22:	0e 94 aa 0a 	call	0x1554	; 0x1554 <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     d26:	e8 81       	ld	r30, Y
     d28:	f9 81       	ldd	r31, Y+1	; 0x01
     d2a:	85 85       	ldd	r24, Z+13	; 0x0d
     d2c:	85 30       	cpi	r24, 0x05	; 5
     d2e:	09 f0       	breq	.+2      	; 0xd32 <ultraSensorTask+0x92>
     d30:	b2 c0       	rjmp	.+356    	; 0xe96 <ultraSensorTask+0x1f6>
     d32:	84 85       	ldd	r24, Z+12	; 0x0c
     d34:	88 23       	and	r24, r24
     d36:	0c f0       	brlt	.+2      	; 0xd3a <ultraSensorTask+0x9a>
     d38:	ae c0       	rjmp	.+348    	; 0xe96 <ultraSensorTask+0x1f6>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     d3a:	84 85       	ldd	r24, Z+12	; 0x0c
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     d40:	e8 81       	ld	r30, Y
     d42:	f9 81       	ldd	r31, Y+1	; 0x01
     d44:	80 85       	ldd	r24, Z+8	; 0x08
     d46:	91 85       	ldd	r25, Z+9	; 0x09
     d48:	a2 85       	ldd	r26, Z+10	; 0x0a
     d4a:	b3 85       	ldd	r27, Z+11	; 0x0b
     d4c:	8f 3b       	cpi	r24, 0xBF	; 191
     d4e:	91 05       	cpc	r25, r1
     d50:	a1 05       	cpc	r26, r1
     d52:	b1 05       	cpc	r27, r1
     d54:	b0 f0       	brcs	.+44     	; 0xd82 <ultraSensorTask+0xe2>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     d5c:	98 2f       	mov	r25, r24
     d5e:	92 95       	swap	r25
     d60:	9f 70       	andi	r25, 0x0F	; 15
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	51 f4       	brne	.+20     	; 0xd7a <ultraSensorTask+0xda>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     d66:	8f 70       	andi	r24, 0x0F	; 15
     d68:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     d6a:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     d6e:	88 23       	and	r24, r24
     d70:	24 f4       	brge	.+8      	; 0xd7a <ultraSensorTask+0xda>
					printf("Sensor liberado de nuevo\n");
     d72:	80 e3       	ldi	r24, 0x30	; 48
     d74:	93 e0       	ldi	r25, 0x03	; 3
     d76:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	8f 70       	andi	r24, 0x0F	; 15
     d7e:	8c 83       	std	Y+4, r24	; 0x04
     d80:	7e c0       	rjmp	.+252    	; 0xe7e <ultraSensorTask+0x1de>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	98 2f       	mov	r25, r24
     d86:	92 95       	swap	r25
     d88:	9f 70       	andi	r25, 0x0F	; 15
     d8a:	09 f0       	breq	.+2      	; 0xd8e <ultraSensorTask+0xee>
     d8c:	78 c0       	rjmp	.+240    	; 0xe7e <ultraSensorTask+0x1de>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     d8e:	8f 70       	andi	r24, 0x0F	; 15
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     d94:	80 85       	ldd	r24, Z+8	; 0x08
     d96:	91 85       	ldd	r25, Z+9	; 0x09
     d98:	a2 85       	ldd	r26, Z+10	; 0x0a
     d9a:	b3 85       	ldd	r27, Z+11	; 0x0b
     d9c:	b8 01       	movw	r22, r16
     d9e:	0e 94 be 05 	call	0xb7c	; 0xb7c <classify_box>
     da2:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	f8 16       	cp	r15, r24
     da8:	09 f4       	brne	.+2      	; 0xdac <ultraSensorTask+0x10c>
     daa:	65 c0       	rjmp	.+202    	; 0xe76 <ultraSensorTask+0x1d6>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     dac:	e8 81       	ld	r30, Y
     dae:	f9 81       	ldd	r31, Y+1	; 0x01
     db0:	80 85       	ldd	r24, Z+8	; 0x08
     db2:	91 85       	ldd	r25, Z+9	; 0x09
     db4:	a2 85       	ldd	r26, Z+10	; 0x0a
     db6:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	fe 16       	cp	r15, r30
     dbc:	49 f0       	breq	.+18     	; 0xdd0 <ultraSensorTask+0x130>
     dbe:	fe 16       	cp	r15, r30
     dc0:	b0 f0       	brcs	.+44     	; 0xdee <ultraSensorTask+0x14e>
     dc2:	f2 e0       	ldi	r31, 0x02	; 2
     dc4:	ff 16       	cp	r15, r31
     dc6:	49 f0       	breq	.+18     	; 0xdda <ultraSensorTask+0x13a>
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	f8 16       	cp	r15, r24
     dcc:	59 f0       	breq	.+22     	; 0xde4 <ultraSensorTask+0x144>
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <ultraSensorTask+0x158>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     dd0:	89 e4       	ldi	r24, 0x49	; 73
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <ultraSensorTask+0x160>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     dda:	84 e5       	ldi	r24, 0x54	; 84
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     de2:	0e c0       	rjmp	.+28     	; 0xe00 <ultraSensorTask+0x160>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     de4:	8f e5       	ldi	r24, 0x5F	; 95
     de6:	93 e0       	ldi	r25, 0x03	; 3
     de8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <ultraSensorTask+0x160>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     dee:	8a e6       	ldi	r24, 0x6A	; 106
     df0:	93 e0       	ldi	r25, 0x03	; 3
     df2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <ultraSensorTask+0x160>
						default: printf("Tipo no reconocido\n"); break;
     df8:	88 e7       	ldi	r24, 0x78	; 120
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     e00:	f1 10       	cpse	r15, r1
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <ultraSensorTask+0x17e>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     e04:	f8 01       	movw	r30, r16
     e06:	80 89       	ldd	r24, Z+16	; 0x10
     e08:	91 89       	ldd	r25, Z+17	; 0x11
     e0a:	a2 89       	ldd	r26, Z+18	; 0x12
     e0c:	b3 89       	ldd	r27, Z+19	; 0x13
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	80 8b       	std	Z+16, r24	; 0x10
     e16:	91 8b       	std	Z+17, r25	; 0x11
     e18:	a2 8b       	std	Z+18, r26	; 0x12
     e1a:	b3 8b       	std	Z+19, r27	; 0x13
     e1c:	0c c0       	rjmp	.+24     	; 0xe36 <ultraSensorTask+0x196>
					}
					else
					{
						sorter->stats.total_selected++;
     e1e:	f8 01       	movw	r30, r16
     e20:	84 85       	ldd	r24, Z+12	; 0x0c
     e22:	95 85       	ldd	r25, Z+13	; 0x0d
     e24:	a6 85       	ldd	r26, Z+14	; 0x0e
     e26:	b7 85       	ldd	r27, Z+15	; 0x0f
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	a1 1d       	adc	r26, r1
     e2c:	b1 1d       	adc	r27, r1
     e2e:	84 87       	std	Z+12, r24	; 0x0c
     e30:	95 87       	std	Z+13, r25	; 0x0d
     e32:	a6 87       	std	Z+14, r26	; 0x0e
     e34:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     e36:	f8 01       	movw	r30, r16
     e38:	80 85       	ldd	r24, Z+8	; 0x08
     e3a:	91 85       	ldd	r25, Z+9	; 0x09
     e3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     e3e:	b3 85       	ldd	r27, Z+11	; 0x0b
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	a1 1d       	adc	r26, r1
     e44:	b1 1d       	adc	r27, r1
     e46:	80 87       	std	Z+8, r24	; 0x08
     e48:	91 87       	std	Z+9, r25	; 0x09
     e4a:	a2 87       	std	Z+10, r26	; 0x0a
     e4c:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     e4e:	ef 2d       	mov	r30, r15
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	35 96       	adiw	r30, 0x05	; 5
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	e0 0f       	add	r30, r16
     e5e:	f1 1f       	adc	r31, r17
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	a2 81       	ldd	r26, Z+2	; 0x02
     e66:	b3 81       	ldd	r27, Z+3	; 0x03
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	a1 1d       	adc	r26, r1
     e6c:	b1 1d       	adc	r27, r1
     e6e:	80 83       	st	Z, r24
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	8f 70       	andi	r24, 0x0F	; 15
     e7a:	80 62       	ori	r24, 0x20	; 32
     e7c:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     e7e:	88 81       	ld	r24, Y
     e80:	99 81       	ldd	r25, Y+1	; 0x01
     e82:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     e86:	e8 81       	ld	r30, Y
     e88:	f9 81       	ldd	r31, Y+1	; 0x01
     e8a:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     e8c:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     e96:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     e9a:	80 ff       	sbrs	r24, 0
     e9c:	2d c0       	rjmp	.+90     	; 0xef8 <ultraSensorTask+0x258>
	{
		if (DEBUG_FLAGS)
     e9e:	86 ff       	sbrs	r24, 6
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <ultraSensorTask+0x20a>
		{
			printf("HCSR04 perdio ECHO\n");
     ea2:	8b e8       	ldi	r24, 0x8B	; 139
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}
		VEINTEMS_PASSED = 0;
     eaa:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
		WAITING_ECHO = 0;
     eae:	8e 7f       	andi	r24, 0xFE	; 254
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	84 85       	ldd	r24, Z+12	; 0x0c
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     ec0:	e8 81       	ld	r30, Y
     ec2:	f9 81       	ldd	r31, Y+1	; 0x01
     ec4:	86 e0       	ldi	r24, 0x06	; 6
     ec6:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     ec8:	60 91 49 06 	lds	r22, 0x0649	; 0x800649 <bandera2>
     ecc:	66 fb       	bst	r22, 6
     ece:	66 27       	eor	r22, r22
     ed0:	60 f9       	bld	r22, 0
     ed2:	88 81       	ld	r24, Y
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
     ed6:	0e 94 5f 0a 	call	0x14be	; 0x14be <ultrasonic_timeout_clear>
     eda:	88 23       	and	r24, r24
     edc:	41 f0       	breq	.+16     	; 0xeee <ultraSensorTask+0x24e>
     ede:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <bandera2>
     ee2:	86 ff       	sbrs	r24, 6
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <ultraSensorTask+0x24e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     ee6:	8e e9       	ldi	r24, 0x9E	; 158
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     eee:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <bandera>
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <bandera>
	}
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	08 95       	ret

00000f04 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
     f04:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     f08:	80 ff       	sbrs	r24, 0
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <irSensorsTask+0x1a>
     f0c:	83 ff       	sbrs	r24, 3
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <IR_A>
		tcrt_read(&IR_A);
     f16:	80 e5       	ldi	r24, 0x50	; 80
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	0e 94 0b 09 	call	0x1216	; 0x1216 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
     f1e:	80 e5       	ldi	r24, 0x50	; 80
     f20:	96 e0       	ldi	r25, 0x06	; 6
     f22:	0e 94 3c 09 	call	0x1278	; 0x1278 <tcrt_is_box_detected>
     f26:	89 2b       	or	r24, r25
     f28:	01 f1       	breq	.+64     	; 0xf6a <irSensorsTask+0x66>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f2a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <IR_A>
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	d1 f4       	brne	.+52     	; 0xf6a <irSensorsTask+0x66>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY)){
     f36:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <salidaA+0x2>
     f3a:	83 ff       	sbrs	r24, 3
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <irSensorsTask+0x54>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
     f44:	e8 e0       	ldi	r30, 0x08	; 8
     f46:	f6 e0       	ldi	r31, 0x06	; 6
     f48:	81 81       	ldd	r24, Z+1	; 0x01
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
     f4e:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
     f50:	80 ec       	ldi	r24, 0xC0	; 192
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
     f58:	e0 e5       	ldi	r30, 0x50	; 80
     f5a:	f6 e0       	ldi	r31, 0x06	; 6
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 70       	andi	r24, 0x0F	; 15
     f60:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
     f62:	85 ee       	ldi	r24, 0xE5	; 229
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     f6a:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     f6e:	80 ff       	sbrs	r24, 0
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <irSensorsTask+0x80>
     f72:	83 ff       	sbrs	r24, 3
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <irSensorsTask+0x80>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <IR_B>
		tcrt_read(&IR_B);
     f7c:	89 ef       	ldi	r24, 0xF9	; 249
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	0e 94 0b 09 	call	0x1216	; 0x1216 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
     f84:	89 ef       	ldi	r24, 0xF9	; 249
     f86:	95 e0       	ldi	r25, 0x05	; 5
     f88:	0e 94 3c 09 	call	0x1278	; 0x1278 <tcrt_is_box_detected>
     f8c:	89 2b       	or	r24, r25
     f8e:	01 f1       	breq	.+64     	; 0xfd0 <irSensorsTask+0xcc>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f90:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <IR_B>
     f94:	82 95       	swap	r24
     f96:	8f 70       	andi	r24, 0x0F	; 15
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	d1 f4       	brne	.+52     	; 0xfd0 <irSensorsTask+0xcc>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY)){
     f9c:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <salidaB+0x2>
     fa0:	83 ff       	sbrs	r24, 3
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <irSensorsTask+0xba>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
     faa:	ee e7       	ldi	r30, 0x7E	; 126
     fac:	f6 e0       	ldi	r31, 0x06	; 6
     fae:	81 81       	ldd	r24, Z+1	; 0x01
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
     fb4:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
     fb6:	85 ef       	ldi	r24, 0xF5	; 245
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
     fbe:	e9 ef       	ldi	r30, 0xF9	; 249
     fc0:	f5 e0       	ldi	r31, 0x05	; 5
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
     fc8:	8a e1       	ldi	r24, 0x1A	; 26
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     fd0:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <IR_C>
     fd4:	80 ff       	sbrs	r24, 0
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <irSensorsTask+0xe6>
     fd8:	83 ff       	sbrs	r24, 3
     fda:	07 c0       	rjmp	.+14     	; 0xfea <irSensorsTask+0xe6>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
     fdc:	87 7f       	andi	r24, 0xF7	; 247
     fde:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <IR_C>
		tcrt_read(&IR_C);
     fe2:	81 e2       	ldi	r24, 0x21	; 33
     fe4:	96 e0       	ldi	r25, 0x06	; 6
     fe6:	0e 94 0b 09 	call	0x1216	; 0x1216 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
     fea:	81 e2       	ldi	r24, 0x21	; 33
     fec:	96 e0       	ldi	r25, 0x06	; 6
     fee:	0e 94 3c 09 	call	0x1278	; 0x1278 <tcrt_is_box_detected>
     ff2:	89 2b       	or	r24, r25
     ff4:	99 f0       	breq	.+38     	; 0x101c <irSensorsTask+0x118>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     ff6:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <IR_C>
     ffa:	98 2f       	mov	r25, r24
     ffc:	92 95       	swap	r25
     ffe:	9f 70       	andi	r25, 0x0F	; 15
    1000:	92 30       	cpi	r25, 0x02	; 2
    1002:	61 f4       	brne	.+24     	; 0x101c <irSensorsTask+0x118>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
    1004:	e4 e8       	ldi	r30, 0x84	; 132
    1006:	f6 e0       	ldi	r31, 0x06	; 6
    1008:	92 81       	ldd	r25, Z+2	; 0x02
    100a:	92 60       	ori	r25, 0x02	; 2
    100c:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    100e:	8f 70       	andi	r24, 0x0F	; 15
    1010:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <IR_C>
			printf("Detecto en IR C\n");
    1014:	8a e2       	ldi	r24, 0x2A	; 42
    1016:	94 e0       	ldi	r25, 0x04	; 4
    1018:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    101c:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <IR_U>
    1020:	80 ff       	sbrs	r24, 0
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <irSensorsTask+0x132>
    1024:	83 ff       	sbrs	r24, 3
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <irSensorsTask+0x132>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    1028:	87 7f       	andi	r24, 0xF7	; 247
    102a:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <IR_U>
		tcrt_read(&IR_U);
    102e:	81 e1       	ldi	r24, 0x11	; 17
    1030:	96 e0       	ldi	r25, 0x06	; 6
    1032:	0e 94 0b 09 	call	0x1216	; 0x1216 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    1036:	81 e1       	ldi	r24, 0x11	; 17
    1038:	96 e0       	ldi	r25, 0x06	; 6
    103a:	0e 94 3c 09 	call	0x1278	; 0x1278 <tcrt_is_box_detected>
    103e:	89 2b       	or	r24, r25
    1040:	99 f0       	breq	.+38     	; 0x1068 <irSensorsTask+0x164>
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1042:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <IR_U>
    1046:	98 2f       	mov	r25, r24
    1048:	92 95       	swap	r25
    104a:	9f 70       	andi	r25, 0x0F	; 15
    104c:	92 30       	cpi	r25, 0x02	; 2
    104e:	61 f4       	brne	.+24     	; 0x1068 <irSensorsTask+0x164>
			SET_FLAG(salidaB.flags, OUTPUT_PUSH);
    1050:	e4 e8       	ldi	r30, 0x84	; 132
    1052:	f6 e0       	ldi	r31, 0x06	; 6
    1054:	92 81       	ldd	r25, Z+2	; 0x02
    1056:	92 60       	ori	r25, 0x02	; 2
    1058:	92 83       	std	Z+2, r25	; 0x02
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);
    105a:	8f 70       	andi	r24, 0x0F	; 15
    105c:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <IR_U>
			printf("Detecto en IR U\n");
    1060:	8a e3       	ldi	r24, 0x3A	; 58
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
    1068:	08 95       	ret

0000106a <servosTask>:
		}
	}
}

void servosTask() {
    106a:	08 95       	ret

0000106c <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    106c:	85 3b       	cpi	r24, 0xB5	; 181
    106e:	08 f0       	brcs	.+2      	; 0x1072 <calculate_angle_pulseUs+0x6>
    1070:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	a0 ed       	ldi	r26, 0xD0	; 208
    1078:	b7 e0       	ldi	r27, 0x07	; 7
    107a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__umulhisi3>
    107e:	24 eb       	ldi	r18, 0xB4	; 180
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>
}
    108a:	c9 01       	movw	r24, r18
    108c:	80 53       	subi	r24, 0x30	; 48
    108e:	98 4f       	sbci	r25, 0xF8	; 248
    1090:	08 95       	ret

00001092 <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	04 2f       	mov	r16, r20
    109e:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    10a0:	1f 92       	push	r1
    10a2:	6f 93       	push	r22
    10a4:	8a e4       	ldi	r24, 0x4A	; 74
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	9f 93       	push	r25
    10aa:	8f 93       	push	r24
    10ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
	servo->flags.byte = 0;
    10b0:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    10b2:	81 2f       	mov	r24, r17
    10b4:	0e 94 36 08 	call	0x106c	; 0x106c <calculate_angle_pulseUs>
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    10bc:	08 83       	st	Y, r16
	servo->angle = startAngle;
    10be:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    10c0:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    10da:	87 b1       	in	r24, 0x07	; 7
    10dc:	80 7f       	andi	r24, 0xF0	; 240
    10de:	87 b9       	out	0x07, r24	; 7
    10e0:	88 b1       	in	r24, 0x08	; 8
    10e2:	80 7f       	andi	r24, 0xF0	; 240
    10e4:	88 b9       	out	0x08, r24	; 8
    10e6:	80 e4       	ldi	r24, 0x40	; 64
    10e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    10ec:	86 e8       	ldi	r24, 0x86	; 134
    10ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10f2:	08 95       	ret

000010f4 <tcrt_read_channel>:
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	a0 f4       	brcc	.+40     	; 0x1120 <tcrt_read_channel+0x2c>
    10f8:	ec e7       	ldi	r30, 0x7C	; 124
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	90 7f       	andi	r25, 0xF0	; 240
    1100:	89 2b       	or	r24, r25
    1102:	80 83       	st	Z, r24
    1104:	ea e7       	ldi	r30, 0x7A	; 122
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 64       	ori	r24, 0x40	; 64
    110c:	80 83       	st	Z, r24
    110e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1112:	86 fd       	sbrc	r24, 6
    1114:	fc cf       	rjmp	.-8      	; 0x110e <tcrt_read_channel+0x1a>
    1116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    111a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    111e:	08 95       	ret
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	08 95       	ret

00001126 <TCRT_init_Handlers>:
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	e0 e5       	ldi	r30, 0x50	; 80
    112c:	f6 e0       	ldi	r31, 0x06	; 6
    112e:	17 82       	std	Z+7, r1	; 0x07
    1130:	10 86       	std	Z+8, r1	; 0x08
    1132:	12 82       	std	Z+2, r1	; 0x02
    1134:	11 82       	std	Z+1, r1	; 0x01
    1136:	16 82       	std	Z+6, r1	; 0x06
    1138:	15 82       	std	Z+5, r1	; 0x05
    113a:	c4 e1       	ldi	r28, 0x14	; 20
    113c:	c6 87       	std	Z+14, r28	; 0x0e
    113e:	d1 e0       	ldi	r29, 0x01	; 1
    1140:	d0 83       	st	Z, r29
    1142:	89 e5       	ldi	r24, 0x59	; 89
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
    114a:	e9 ef       	ldi	r30, 0xF9	; 249
    114c:	f5 e0       	ldi	r31, 0x05	; 5
    114e:	d7 83       	std	Z+7, r29	; 0x07
    1150:	d0 87       	std	Z+8, r29	; 0x08
    1152:	12 82       	std	Z+2, r1	; 0x02
    1154:	11 82       	std	Z+1, r1	; 0x01
    1156:	16 82       	std	Z+6, r1	; 0x06
    1158:	15 82       	std	Z+5, r1	; 0x05
    115a:	c6 87       	std	Z+14, r28	; 0x0e
    115c:	d0 83       	st	Z, r29
    115e:	88 e6       	ldi	r24, 0x68	; 104
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
    1166:	e1 e2       	ldi	r30, 0x21	; 33
    1168:	f6 e0       	ldi	r31, 0x06	; 6
    116a:	10 82       	st	Z, r1
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	87 83       	std	Z+7, r24	; 0x07
    1170:	80 87       	std	Z+8, r24	; 0x08
    1172:	12 82       	std	Z+2, r1	; 0x02
    1174:	11 82       	std	Z+1, r1	; 0x01
    1176:	16 82       	std	Z+6, r1	; 0x06
    1178:	15 82       	std	Z+5, r1	; 0x05
    117a:	c6 87       	std	Z+14, r28	; 0x0e
    117c:	e1 e1       	ldi	r30, 0x11	; 17
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	10 82       	st	Z, r1
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	87 83       	std	Z+7, r24	; 0x07
    1186:	80 87       	std	Z+8, r24	; 0x08
    1188:	12 82       	std	Z+2, r1	; 0x02
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	16 82       	std	Z+6, r1	; 0x06
    118e:	15 82       	std	Z+5, r1	; 0x05
    1190:	c6 87       	std	Z+14, r28	; 0x0e
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    119e:	88 81       	ld	r24, Y
    11a0:	83 ff       	sbrs	r24, 3
    11a2:	36 c0       	rjmp	.+108    	; 0x1210 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    11a4:	87 7f       	andi	r24, 0xF7	; 247
    11a6:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	81 11       	cpse	r24, r1
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    11ae:	1e 82       	std	Y+6, r1	; 0x06
    11b0:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    11b2:	8f 81       	ldd	r24, Y+7	; 0x07
    11b4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <tcrt_read_channel>
    11b8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ba:	3e 81       	ldd	r19, Y+6	; 0x06
    11bc:	28 0f       	add	r18, r24
    11be:	39 1f       	adc	r19, r25
    11c0:	3e 83       	std	Y+6, r19	; 0x06
    11c2:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    11c4:	99 85       	ldd	r25, Y+9	; 0x09
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
    11c8:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    11ca:	9a 30       	cpi	r25, 0x0A	; 10
    11cc:	08 f1       	brcs	.+66     	; 0x1210 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    11ce:	ad ec       	ldi	r26, 0xCD	; 205
    11d0:	bc ec       	ldi	r27, 0xCC	; 204
    11d2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__umulhisi3>
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    11e6:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    11e8:	28 81       	ld	r18, Y
    11ea:	2b 7f       	andi	r18, 0xFB	; 251
    11ec:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    11ee:	2f 81       	ldd	r18, Y+7	; 0x07
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	1f 92       	push	r1
    11f6:	2f 93       	push	r18
    11f8:	87 e7       	ldi	r24, 0x77	; 119
    11fa:	94 e0       	ldi	r25, 0x04	; 4
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	0e 94 4a 0b 	call	0x1694	; 0x1694 <printf>
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
		}
	}
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <tcrt_read_channel>
	sensor->lastReading = lectura;
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    122a:	4a 85       	ldd	r20, Y+10	; 0x0a
    122c:	5b 85       	ldd	r21, Y+11	; 0x0b
    122e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1230:	7d 85       	ldd	r23, Y+13	; 0x0d
    1232:	8a 01       	movw	r16, r20
    1234:	9b 01       	movw	r18, r22
    1236:	08 0f       	add	r16, r24
    1238:	19 1f       	adc	r17, r25
    123a:	21 1d       	adc	r18, r1
    123c:	31 1d       	adc	r19, r1
    123e:	c9 01       	movw	r24, r18
    1240:	b8 01       	movw	r22, r16
    1242:	0a 87       	std	Y+10, r16	; 0x0a
    1244:	1b 87       	std	Y+11, r17	; 0x0b
    1246:	2c 87       	std	Y+12, r18	; 0x0c
    1248:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    124a:	29 85       	ldd	r18, Y+9	; 0x09
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1250:	2a 30       	cpi	r18, 0x0A	; 10
    1252:	68 f0       	brcs	.+26     	; 0x126e <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>
    1260:	3a 83       	std	Y+2, r19	; 0x02
    1262:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1264:	1a 86       	std	Y+10, r1	; 0x0a
    1266:	1b 86       	std	Y+11, r1	; 0x0b
    1268:	1c 86       	std	Y+12, r1	; 0x0c
    126a:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    126c:	19 86       	std	Y+9, r1	; 0x09
	}
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1286:	ab 81       	ldd	r26, Y+3	; 0x03
    1288:	bc 81       	ldd	r27, Y+4	; 0x04
    128a:	8e 85       	ldd	r24, Y+14	; 0x0e
    128c:	0f 2e       	mov	r0, r31
    128e:	f4 e6       	ldi	r31, 0x64	; 100
    1290:	cf 2e       	mov	r12, r31
    1292:	d1 2c       	mov	r13, r1
    1294:	e1 2c       	mov	r14, r1
    1296:	f1 2c       	mov	r15, r1
    1298:	f0 2d       	mov	r31, r0
    129a:	a7 01       	movw	r20, r14
    129c:	96 01       	movw	r18, r12
    129e:	28 1b       	sub	r18, r24
    12a0:	31 09       	sbc	r19, r1
    12a2:	41 09       	sbc	r20, r1
    12a4:	51 09       	sbc	r21, r1
    12a6:	0e 94 3f 0b 	call	0x167e	; 0x167e <__muluhisi3>
    12aa:	a7 01       	movw	r20, r14
    12ac:	96 01       	movw	r18, r12
    12ae:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	6c 01       	movw	r12, r24
    12b8:	e1 2c       	mov	r14, r1
    12ba:	f1 2c       	mov	r15, r1
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	c2 16       	cp	r12, r18
    12c0:	d3 06       	cpc	r13, r19
    12c2:	e4 06       	cpc	r14, r20
    12c4:	f5 06       	cpc	r15, r21
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <tcrt_is_box_detected+0x52>
    12c8:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    12ca:	c2 16       	cp	r12, r18
    12cc:	d3 06       	cpc	r13, r19
    12ce:	e4 06       	cpc	r14, r20
    12d0:	f5 06       	cpc	r15, r21
    12d2:	50 f4       	brcc	.+20     	; 0x12e8 <tcrt_is_box_detected+0x70>
    12d4:	98 81       	ld	r25, Y
    12d6:	e9 2f       	mov	r30, r25
    12d8:	e2 95       	swap	r30
    12da:	ef 70       	andi	r30, 0x0F	; 15
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    12de:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    12e0:	9f 70       	andi	r25, 0x0F	; 15
    12e2:	90 61       	ori	r25, 0x10	; 16
    12e4:	98 83       	st	Y, r25
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <tcrt_is_box_detected+0x8e>
	}
	else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    12e8:	c2 16       	cp	r12, r18
    12ea:	d3 06       	cpc	r13, r19
    12ec:	e4 06       	cpc	r14, r20
    12ee:	f5 06       	cpc	r15, r21
    12f0:	50 f0       	brcs	.+20     	; 0x1306 <tcrt_is_box_detected+0x8e>
    12f2:	98 81       	ld	r25, Y
    12f4:	29 2f       	mov	r18, r25
    12f6:	22 95       	swap	r18
    12f8:	2f 70       	andi	r18, 0x0F	; 15
    12fa:	21 30       	cpi	r18, 0x01	; 1
    12fc:	21 f4       	brne	.+8      	; 0x1306 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    12fe:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    1300:	9d 70       	andi	r25, 0x0D	; 13
    1302:	90 62       	ori	r25, 0x20	; 32
    1304:	98 83       	st	Y, r25
	}

	return box_now;
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	08 95       	ret

00001314 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    1314:	8b b1       	in	r24, 0x0b	; 11
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	8b b9       	out	0x0b, r24	; 11
    131a:	08 95       	ret

0000131c <ultrasonic_hal_trigger_setLow>:
    131c:	8b b1       	in	r24, 0x0b	; 11
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	8b b9       	out	0x0b, r24	; 11
    1322:	08 95       	ret

00001324 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    1324:	e1 e8       	ldi	r30, 0x81	; 129
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 64       	ori	r24, 0x40	; 64
    132c:	80 83       	st	Z, r24
    132e:	08 95       	ret

00001330 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    1330:	e1 e8       	ldi	r30, 0x81	; 129
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8f 7b       	andi	r24, 0xBF	; 191
    1338:	80 83       	st	Z, r24
    133a:	08 95       	ret

0000133c <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    133c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    1340:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    1344:	88 e1       	ldi	r24, 0x18	; 24
    1346:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    134a:	86 e0       	ldi	r24, 0x06	; 6
    134c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1350:	08 95       	ret

00001352 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    1352:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1356:	95 ff       	sbrs	r25, 5
    1358:	fc cf       	rjmp	.-8      	; 0x1352 <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    135a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    135e:	08 95       	ret

00001360 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    1360:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1364:	88 23       	and	r24, r24
    1366:	e4 f7       	brge	.-8      	; 0x1360 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    1368:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    136c:	08 95       	ret

0000136e <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    136e:	cf 93       	push	r28
    1370:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1372:	8a 30       	cpi	r24, 0x0A	; 10
    1374:	19 f4       	brne	.+6      	; 0x137c <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    1376:	8d e0       	ldi	r24, 0x0D	; 13
    1378:	0e 94 a9 09 	call	0x1352	; 0x1352 <USART_Transmit>
	USART_Transmit(c);
    137c:	8c 2f       	mov	r24, r28
    137e:	0e 94 a9 09 	call	0x1352	; 0x1352 <USART_Transmit>
	return 0;
}
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    138a:	0e 94 b0 09 	call	0x1360	; 0x1360 <USART_Receive>
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	08 95       	ret

00001392 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1392:	fc 01       	movw	r30, r24
    1394:	66 87       	std	Z+14, r22	; 0x0e
    1396:	08 95       	ret

00001398 <ultrasonic_calculate_distance>:
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	ec 01       	movw	r28, r24
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	ae 81       	ldd	r26, Y+6	; 0x06
    13a8:	bf 81       	ldd	r27, Y+7	; 0x07
    13aa:	48 81       	ld	r20, Y
    13ac:	59 81       	ldd	r21, Y+1	; 0x01
    13ae:	6a 81       	ldd	r22, Y+2	; 0x02
    13b0:	7b 81       	ldd	r23, Y+3	; 0x03
    13b2:	8c 01       	movw	r16, r24
    13b4:	9d 01       	movw	r18, r26
    13b6:	04 1b       	sub	r16, r20
    13b8:	15 0b       	sbc	r17, r21
    13ba:	26 0b       	sbc	r18, r22
    13bc:	37 0b       	sbc	r19, r23
    13be:	b9 01       	movw	r22, r18
    13c0:	a8 01       	movw	r20, r16
    13c2:	d9 01       	movw	r26, r18
    13c4:	c8 01       	movw	r24, r16
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	aa 1f       	adc	r26, r26
    13cc:	bb 1f       	adc	r27, r27
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	aa 1f       	adc	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	aa 1f       	adc	r26, r26
    13dc:	bb 1f       	adc	r27, r27
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	aa 1f       	adc	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	8c 01       	movw	r16, r24
    13e8:	9d 01       	movw	r18, r26
    13ea:	04 0f       	add	r16, r20
    13ec:	15 1f       	adc	r17, r21
    13ee:	26 1f       	adc	r18, r22
    13f0:	37 1f       	adc	r19, r23
    13f2:	c9 01       	movw	r24, r18
    13f4:	b8 01       	movw	r22, r16
    13f6:	66 0f       	add	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	20 e9       	ldi	r18, 0x90	; 144
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>
    140a:	28 87       	std	Y+8, r18	; 0x08
    140c:	39 87       	std	Y+9, r19	; 0x09
    140e:	4a 87       	std	Y+10, r20	; 0x0a
    1410:	5b 87       	std	Y+11, r21	; 0x0b
    1412:	8c 85       	ldd	r24, Y+12	; 0x0c
    1414:	80 68       	ori	r24, 0x80	; 128
    1416:	8c 87       	std	Y+12, r24	; 0x0c
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    1422:	dc 01       	movw	r26, r24
    1424:	1f 96       	adiw	r26, 0x0f	; 15
    1426:	ed 91       	ld	r30, X+
    1428:	fc 91       	ld	r31, X
    142a:	50 97       	sbiw	r26, 0x10	; 16
    142c:	30 97       	sbiw	r30, 0x00	; 0
    142e:	11 f0       	breq	.+4      	; 0x1434 <ultrasonic_print+0x12>
    1430:	cb 01       	movw	r24, r22
		us->print_method(message);
    1432:	09 95       	icall
    1434:	08 95       	ret

00001436 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    143c:	18 82       	st	Y, r1
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	1a 82       	std	Y+2, r1	; 0x02
    1442:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    1444:	1c 82       	std	Y+4, r1	; 0x04
    1446:	1d 82       	std	Y+5, r1	; 0x05
    1448:	1e 82       	std	Y+6, r1	; 0x06
    144a:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    144c:	18 86       	std	Y+8, r1	; 0x08
    144e:	19 86       	std	Y+9, r1	; 0x09
    1450:	1a 86       	std	Y+10, r1	; 0x0a
    1452:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    1454:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1456:	8c 85       	ldd	r24, Y+12	; 0x0c
    1458:	80 62       	ori	r24, 0x20	; 32
    145a:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    145c:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    145e:	0e 94 92 09 	call	0x1324	; 0x1324 <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	98 89       	ldd	r25, Y+16	; 0x10
    1466:	89 2b       	or	r24, r25
    1468:	41 f0       	breq	.+16     	; 0x147a <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    146a:	8e 85       	ldd	r24, Y+14	; 0x0e
    146c:	88 23       	and	r24, r24
    146e:	29 f0       	breq	.+10     	; 0x147a <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1470:	63 ea       	ldi	r22, 0xA3	; 163
    1472:	74 e0       	ldi	r23, 0x04	; 4
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
		}
	}
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    148c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ultrasonic_init_flags>
	us->debugMode = true;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    1494:	01 15       	cp	r16, r1
    1496:	11 05       	cpc	r17, r1
    1498:	19 f4       	brne	.+6      	; 0x14a0 <ultrasonic_init+0x20>
		us->print_method = NULL;
    149a:	18 8a       	std	Y+16, r1	; 0x10
    149c:	1f 86       	std	Y+15, r1	; 0x0f
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    14a0:	18 8b       	std	Y+16, r17	; 0x10
    14a2:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    14a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a6:	88 23       	and	r24, r24
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    14aa:	62 ec       	ldi	r22, 0xC2	; 194
    14ac:	74 e0       	ldi	r23, 0x04	; 4
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
		}
	}
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    14c4:	fc 01       	movw	r30, r24
    14c6:	25 85       	ldd	r18, Z+13	; 0x0d
    14c8:	26 30       	cpi	r18, 0x06	; 6
    14ca:	71 f4       	brne	.+28     	; 0x14e8 <ultrasonic_timeout_clear+0x2a>
    14cc:	16 2f       	mov	r17, r22
    14ce:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    14d0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ultrasonic_init_flags>
		us->debugMode = state;
    14d4:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    14d6:	1e 85       	ldd	r17, Y+14	; 0x0e
    14d8:	11 23       	and	r17, r17
    14da:	41 f0       	breq	.+16     	; 0x14ec <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    14dc:	6e e9       	ldi	r22, 0x9E	; 158
    14de:	73 e0       	ldi	r23, 0x03	; 3
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    14ec:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    14ee:	81 2f       	mov	r24, r17
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	08 95       	ret

000014f8 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    14f8:	cf 93       	push	r28
    14fa:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    14fc:	85 85       	ldd	r24, Z+13	; 0x0d
    14fe:	88 23       	and	r24, r24
    1500:	19 f0       	breq	.+6      	; 0x1508 <ultrasonic_start+0x10>
    1502:	85 85       	ldd	r24, Z+13	; 0x0d
    1504:	85 30       	cpi	r24, 0x05	; 5
    1506:	c1 f4       	brne	.+48     	; 0x1538 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    1508:	84 85       	ldd	r24, Z+12	; 0x0c
    150a:	85 ff       	sbrs	r24, 5
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    1512:	c6 85       	ldd	r28, Z+14	; 0x0e
    1514:	cc 23       	and	r28, r28
    1516:	d1 f0       	breq	.+52     	; 0x154c <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    1518:	6e ed       	ldi	r22, 0xDE	; 222
    151a:	74 e0       	ldi	r23, 0x04	; 4
    151c:	cf 01       	movw	r24, r30
    151e:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
    1522:	15 c0       	rjmp	.+42     	; 0x154e <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    1524:	c6 85       	ldd	r28, Z+14	; 0x0e
    1526:	cc 23       	and	r28, r28
    1528:	91 f0       	breq	.+36     	; 0x154e <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    152a:	6d e0       	ldi	r22, 0x0D	; 13
    152c:	75 e0       	ldi	r23, 0x05	; 5
    152e:	cf 01       	movw	r24, r30
    1530:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    1534:	c0 e0       	ldi	r28, 0x00	; 0
    1536:	0b c0       	rjmp	.+22     	; 0x154e <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    1538:	c6 85       	ldd	r28, Z+14	; 0x0e
    153a:	cc 23       	and	r28, r28
    153c:	41 f0       	breq	.+16     	; 0x154e <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    153e:	64 e4       	ldi	r22, 0x44	; 68
    1540:	75 e0       	ldi	r23, 0x05	; 5
    1542:	cf 01       	movw	r24, r30
    1544:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
			}
	}
	return false;
    1548:	c0 e0       	ldi	r28, 0x00	; 0
    154a:	01 c0       	rjmp	.+2      	; 0x154e <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    154c:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    154e:	8c 2f       	mov	r24, r28
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
	switch (us->state)
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	71 f1       	breq	.+92     	; 0x15bc <ultrasonic_update+0x68>
    1560:	28 f4       	brcc	.+10     	; 0x156c <ultrasonic_update+0x18>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	49 f0       	breq	.+18     	; 0x1578 <ultrasonic_update+0x24>
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	a1 f0       	breq	.+40     	; 0x1592 <ultrasonic_update+0x3e>
    156a:	55 c0       	rjmp	.+170    	; 0x1616 <ultrasonic_update+0xc2>
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	e1 f1       	breq	.+120    	; 0x15e8 <ultrasonic_update+0x94>
    1570:	86 30       	cpi	r24, 0x06	; 6
    1572:	09 f4       	brne	.+2      	; 0x1576 <ultrasonic_update+0x22>
    1574:	4d c0       	rjmp	.+154    	; 0x1610 <ultrasonic_update+0xbc>
    1576:	4f c0       	rjmp	.+158    	; 0x1616 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1578:	8c 85       	ldd	r24, Y+12	; 0x0c
    157a:	81 ff       	sbrs	r24, 1
    157c:	4c c0       	rjmp	.+152    	; 0x1616 <ultrasonic_update+0xc2>
				if(us->debugMode){
    157e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <ultrasonic_update+0x32>
    1584:	48 c0       	rjmp	.+144    	; 0x1616 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1586:	61 e7       	ldi	r22, 0x71	; 113
    1588:	75 e0       	ldi	r23, 0x05	; 5
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
    1590:	42 c0       	rjmp	.+132    	; 0x1616 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    1592:	8c 85       	ldd	r24, Y+12	; 0x0c
    1594:	84 fd       	sbrc	r24, 4
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    159c:	0e 94 98 09 	call	0x1330	; 0x1330 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    15a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a2:	88 23       	and	r24, r24
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    15a6:	60 e9       	ldi	r22, 0x90	; 144
    15a8:	75 e0       	ldi	r23, 0x05	; 5
    15aa:	ce 01       	movw	r24, r28
    15ac:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    15b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b2:	83 ff       	sbrs	r24, 3
    15b4:	30 c0       	rjmp	.+96     	; 0x1616 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	8d 87       	std	Y+13, r24	; 0x0d
    15ba:	2d c0       	rjmp	.+90     	; 0x1616 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    15bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15be:	86 ff       	sbrs	r24, 6
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    15c2:	84 e0       	ldi	r24, 0x04	; 4
    15c4:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    15c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c8:	88 23       	and	r24, r24
    15ca:	29 f0       	breq	.+10     	; 0x15d6 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    15cc:	6d ea       	ldi	r22, 0xAD	; 173
    15ce:	75 e0       	ldi	r23, 0x05	; 5
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    15d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d8:	84 60       	ori	r24, 0x04	; 4
    15da:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    15dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15de:	83 ff       	sbrs	r24, 3
    15e0:	1a c0       	rjmp	.+52     	; 0x1616 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    15e2:	86 e0       	ldi	r24, 0x06	; 6
    15e4:	8d 87       	std	Y+13, r24	; 0x0d
    15e6:	17 c0       	rjmp	.+46     	; 0x1616 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    15e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ea:	82 ff       	sbrs	r24, 2
    15ec:	14 c0       	rjmp	.+40     	; 0x1616 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 cc 09 	call	0x1398	; 0x1398 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    15fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15fc:	88 23       	and	r24, r24
    15fe:	29 f0       	breq	.+10     	; 0x160a <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    1600:	64 ec       	ldi	r22, 0xC4	; 196
    1602:	75 e0       	ldi	r23, 0x05	; 5
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 11 0a 	call	0x1422	; 0x1422 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    160a:	85 e0       	ldi	r24, 0x05	; 5
    160c:	8d 87       	std	Y+13, r24	; 0x0d
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    1610:	8c 85       	ldd	r24, Y+12	; 0x0c
    1612:	88 60       	ori	r24, 0x08	; 8
    1614:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <__udivmodsi4>:
    161c:	a1 e2       	ldi	r26, 0x21	; 33
    161e:	1a 2e       	mov	r1, r26
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	fd 01       	movw	r30, r26
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <__udivmodsi4_ep>

00001628 <__udivmodsi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	ee 1f       	adc	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	a2 17       	cp	r26, r18
    1632:	b3 07       	cpc	r27, r19
    1634:	e4 07       	cpc	r30, r20
    1636:	f5 07       	cpc	r31, r21
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__udivmodsi4_ep>
    163a:	a2 1b       	sub	r26, r18
    163c:	b3 0b       	sbc	r27, r19
    163e:	e4 0b       	sbc	r30, r20
    1640:	f5 0b       	sbc	r31, r21

00001642 <__udivmodsi4_ep>:
    1642:	66 1f       	adc	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	1a 94       	dec	r1
    164c:	69 f7       	brne	.-38     	; 0x1628 <__udivmodsi4_loop>
    164e:	60 95       	com	r22
    1650:	70 95       	com	r23
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	bd 01       	movw	r22, r26
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret

00001660 <__umulhisi3>:
    1660:	a2 9f       	mul	r26, r18
    1662:	b0 01       	movw	r22, r0
    1664:	b3 9f       	mul	r27, r19
    1666:	c0 01       	movw	r24, r0
    1668:	a3 9f       	mul	r26, r19
    166a:	70 0d       	add	r23, r0
    166c:	81 1d       	adc	r24, r1
    166e:	11 24       	eor	r1, r1
    1670:	91 1d       	adc	r25, r1
    1672:	b2 9f       	mul	r27, r18
    1674:	70 0d       	add	r23, r0
    1676:	81 1d       	adc	r24, r1
    1678:	11 24       	eor	r1, r1
    167a:	91 1d       	adc	r25, r1
    167c:	08 95       	ret

0000167e <__muluhisi3>:
    167e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__umulhisi3>
    1682:	a5 9f       	mul	r26, r21
    1684:	90 0d       	add	r25, r0
    1686:	b4 9f       	mul	r27, r20
    1688:	90 0d       	add	r25, r0
    168a:	a4 9f       	mul	r26, r20
    168c:	80 0d       	add	r24, r0
    168e:	91 1d       	adc	r25, r1
    1690:	11 24       	eor	r1, r1
    1692:	08 95       	ret

00001694 <printf>:
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e0 e5       	ldi	r30, 0x50	; 80
    169a:	fb e0       	ldi	r31, 0x0B	; 11
    169c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__prologue_saves__+0x20>
    16a0:	ae 01       	movw	r20, r28
    16a2:	4b 5f       	subi	r20, 0xFB	; 251
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	fa 01       	movw	r30, r20
    16a8:	61 91       	ld	r22, Z+
    16aa:	71 91       	ld	r23, Z+
    16ac:	af 01       	movw	r20, r30
    16ae:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <__iob+0x2>
    16b2:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <__iob+0x3>
    16b6:	0e 94 90 0b 	call	0x1720	; 0x1720 <vfprintf>
    16ba:	e2 e0       	ldi	r30, 0x02	; 2
    16bc:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__epilogue_restores__+0x20>

000016c0 <puts>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	e0 91 89 06 	lds	r30, 0x0689	; 0x800689 <__iob+0x2>
    16cc:	f0 91 8a 06 	lds	r31, 0x068A	; 0x80068a <__iob+0x3>
    16d0:	23 81       	ldd	r18, Z+3	; 0x03
    16d2:	21 ff       	sbrs	r18, 1
    16d4:	1b c0       	rjmp	.+54     	; 0x170c <puts+0x4c>
    16d6:	8c 01       	movw	r16, r24
    16d8:	d0 e0       	ldi	r29, 0x00	; 0
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	f8 01       	movw	r30, r16
    16de:	81 91       	ld	r24, Z+
    16e0:	8f 01       	movw	r16, r30
    16e2:	60 91 89 06 	lds	r22, 0x0689	; 0x800689 <__iob+0x2>
    16e6:	70 91 8a 06 	lds	r23, 0x068A	; 0x80068a <__iob+0x3>
    16ea:	db 01       	movw	r26, r22
    16ec:	18 96       	adiw	r26, 0x08	; 8
    16ee:	ed 91       	ld	r30, X+
    16f0:	fc 91       	ld	r31, X
    16f2:	19 97       	sbiw	r26, 0x09	; 9
    16f4:	88 23       	and	r24, r24
    16f6:	31 f0       	breq	.+12     	; 0x1704 <puts+0x44>
    16f8:	09 95       	icall
    16fa:	89 2b       	or	r24, r25
    16fc:	79 f3       	breq	.-34     	; 0x16dc <puts+0x1c>
    16fe:	df ef       	ldi	r29, 0xFF	; 255
    1700:	cf ef       	ldi	r28, 0xFF	; 255
    1702:	ec cf       	rjmp	.-40     	; 0x16dc <puts+0x1c>
    1704:	8a e0       	ldi	r24, 0x0A	; 10
    1706:	09 95       	icall
    1708:	89 2b       	or	r24, r25
    170a:	19 f0       	breq	.+6      	; 0x1712 <puts+0x52>
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	9f ef       	ldi	r25, 0xFF	; 255
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <puts+0x56>
    1712:	8d 2f       	mov	r24, r29
    1714:	9c 2f       	mov	r25, r28
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <vfprintf>:
    1720:	ab e0       	ldi	r26, 0x0B	; 11
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e6 e9       	ldi	r30, 0x96	; 150
    1726:	fb e0       	ldi	r31, 0x0B	; 11
    1728:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__prologue_saves__>
    172c:	6c 01       	movw	r12, r24
    172e:	7b 01       	movw	r14, r22
    1730:	8a 01       	movw	r16, r20
    1732:	fc 01       	movw	r30, r24
    1734:	17 82       	std	Z+7, r1	; 0x07
    1736:	16 82       	std	Z+6, r1	; 0x06
    1738:	83 81       	ldd	r24, Z+3	; 0x03
    173a:	81 ff       	sbrs	r24, 1
    173c:	cc c1       	rjmp	.+920    	; 0x1ad6 <vfprintf+0x3b6>
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	3c 01       	movw	r6, r24
    1744:	f6 01       	movw	r30, r12
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	f7 01       	movw	r30, r14
    174a:	93 fd       	sbrc	r25, 3
    174c:	85 91       	lpm	r24, Z+
    174e:	93 ff       	sbrs	r25, 3
    1750:	81 91       	ld	r24, Z+
    1752:	7f 01       	movw	r14, r30
    1754:	88 23       	and	r24, r24
    1756:	09 f4       	brne	.+2      	; 0x175a <vfprintf+0x3a>
    1758:	ba c1       	rjmp	.+884    	; 0x1ace <vfprintf+0x3ae>
    175a:	85 32       	cpi	r24, 0x25	; 37
    175c:	39 f4       	brne	.+14     	; 0x176c <vfprintf+0x4c>
    175e:	93 fd       	sbrc	r25, 3
    1760:	85 91       	lpm	r24, Z+
    1762:	93 ff       	sbrs	r25, 3
    1764:	81 91       	ld	r24, Z+
    1766:	7f 01       	movw	r14, r30
    1768:	85 32       	cpi	r24, 0x25	; 37
    176a:	29 f4       	brne	.+10     	; 0x1776 <vfprintf+0x56>
    176c:	b6 01       	movw	r22, r12
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1774:	e7 cf       	rjmp	.-50     	; 0x1744 <vfprintf+0x24>
    1776:	91 2c       	mov	r9, r1
    1778:	21 2c       	mov	r2, r1
    177a:	31 2c       	mov	r3, r1
    177c:	ff e1       	ldi	r31, 0x1F	; 31
    177e:	f3 15       	cp	r31, r3
    1780:	d8 f0       	brcs	.+54     	; 0x17b8 <vfprintf+0x98>
    1782:	8b 32       	cpi	r24, 0x2B	; 43
    1784:	79 f0       	breq	.+30     	; 0x17a4 <vfprintf+0x84>
    1786:	38 f4       	brcc	.+14     	; 0x1796 <vfprintf+0x76>
    1788:	80 32       	cpi	r24, 0x20	; 32
    178a:	79 f0       	breq	.+30     	; 0x17aa <vfprintf+0x8a>
    178c:	83 32       	cpi	r24, 0x23	; 35
    178e:	a1 f4       	brne	.+40     	; 0x17b8 <vfprintf+0x98>
    1790:	23 2d       	mov	r18, r3
    1792:	20 61       	ori	r18, 0x10	; 16
    1794:	1d c0       	rjmp	.+58     	; 0x17d0 <vfprintf+0xb0>
    1796:	8d 32       	cpi	r24, 0x2D	; 45
    1798:	61 f0       	breq	.+24     	; 0x17b2 <vfprintf+0x92>
    179a:	80 33       	cpi	r24, 0x30	; 48
    179c:	69 f4       	brne	.+26     	; 0x17b8 <vfprintf+0x98>
    179e:	23 2d       	mov	r18, r3
    17a0:	21 60       	ori	r18, 0x01	; 1
    17a2:	16 c0       	rjmp	.+44     	; 0x17d0 <vfprintf+0xb0>
    17a4:	83 2d       	mov	r24, r3
    17a6:	82 60       	ori	r24, 0x02	; 2
    17a8:	38 2e       	mov	r3, r24
    17aa:	e3 2d       	mov	r30, r3
    17ac:	e4 60       	ori	r30, 0x04	; 4
    17ae:	3e 2e       	mov	r3, r30
    17b0:	2a c0       	rjmp	.+84     	; 0x1806 <vfprintf+0xe6>
    17b2:	f3 2d       	mov	r31, r3
    17b4:	f8 60       	ori	r31, 0x08	; 8
    17b6:	1d c0       	rjmp	.+58     	; 0x17f2 <vfprintf+0xd2>
    17b8:	37 fc       	sbrc	r3, 7
    17ba:	2d c0       	rjmp	.+90     	; 0x1816 <vfprintf+0xf6>
    17bc:	20 ed       	ldi	r18, 0xD0	; 208
    17be:	28 0f       	add	r18, r24
    17c0:	2a 30       	cpi	r18, 0x0A	; 10
    17c2:	40 f0       	brcs	.+16     	; 0x17d4 <vfprintf+0xb4>
    17c4:	8e 32       	cpi	r24, 0x2E	; 46
    17c6:	b9 f4       	brne	.+46     	; 0x17f6 <vfprintf+0xd6>
    17c8:	36 fc       	sbrc	r3, 6
    17ca:	81 c1       	rjmp	.+770    	; 0x1ace <vfprintf+0x3ae>
    17cc:	23 2d       	mov	r18, r3
    17ce:	20 64       	ori	r18, 0x40	; 64
    17d0:	32 2e       	mov	r3, r18
    17d2:	19 c0       	rjmp	.+50     	; 0x1806 <vfprintf+0xe6>
    17d4:	36 fe       	sbrs	r3, 6
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0xc4>
    17d8:	8a e0       	ldi	r24, 0x0A	; 10
    17da:	98 9e       	mul	r9, r24
    17dc:	20 0d       	add	r18, r0
    17de:	11 24       	eor	r1, r1
    17e0:	92 2e       	mov	r9, r18
    17e2:	11 c0       	rjmp	.+34     	; 0x1806 <vfprintf+0xe6>
    17e4:	ea e0       	ldi	r30, 0x0A	; 10
    17e6:	2e 9e       	mul	r2, r30
    17e8:	20 0d       	add	r18, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	22 2e       	mov	r2, r18
    17ee:	f3 2d       	mov	r31, r3
    17f0:	f0 62       	ori	r31, 0x20	; 32
    17f2:	3f 2e       	mov	r3, r31
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <vfprintf+0xe6>
    17f6:	8c 36       	cpi	r24, 0x6C	; 108
    17f8:	21 f4       	brne	.+8      	; 0x1802 <vfprintf+0xe2>
    17fa:	83 2d       	mov	r24, r3
    17fc:	80 68       	ori	r24, 0x80	; 128
    17fe:	38 2e       	mov	r3, r24
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0xe6>
    1802:	88 36       	cpi	r24, 0x68	; 104
    1804:	41 f4       	brne	.+16     	; 0x1816 <vfprintf+0xf6>
    1806:	f7 01       	movw	r30, r14
    1808:	93 fd       	sbrc	r25, 3
    180a:	85 91       	lpm	r24, Z+
    180c:	93 ff       	sbrs	r25, 3
    180e:	81 91       	ld	r24, Z+
    1810:	7f 01       	movw	r14, r30
    1812:	81 11       	cpse	r24, r1
    1814:	b3 cf       	rjmp	.-154    	; 0x177c <vfprintf+0x5c>
    1816:	98 2f       	mov	r25, r24
    1818:	9f 7d       	andi	r25, 0xDF	; 223
    181a:	95 54       	subi	r25, 0x45	; 69
    181c:	93 30       	cpi	r25, 0x03	; 3
    181e:	28 f4       	brcc	.+10     	; 0x182a <vfprintf+0x10a>
    1820:	0c 5f       	subi	r16, 0xFC	; 252
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	9f e3       	ldi	r25, 0x3F	; 63
    1826:	99 83       	std	Y+1, r25	; 0x01
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x124>
    182a:	83 36       	cpi	r24, 0x63	; 99
    182c:	31 f0       	breq	.+12     	; 0x183a <vfprintf+0x11a>
    182e:	83 37       	cpi	r24, 0x73	; 115
    1830:	71 f0       	breq	.+28     	; 0x184e <vfprintf+0x12e>
    1832:	83 35       	cpi	r24, 0x53	; 83
    1834:	09 f0       	breq	.+2      	; 0x1838 <vfprintf+0x118>
    1836:	59 c0       	rjmp	.+178    	; 0x18ea <vfprintf+0x1ca>
    1838:	21 c0       	rjmp	.+66     	; 0x187c <vfprintf+0x15c>
    183a:	f8 01       	movw	r30, r16
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	0e 5f       	subi	r16, 0xFE	; 254
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	88 24       	eor	r8, r8
    1846:	83 94       	inc	r8
    1848:	91 2c       	mov	r9, r1
    184a:	53 01       	movw	r10, r6
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <vfprintf+0x154>
    184e:	28 01       	movw	r4, r16
    1850:	f2 e0       	ldi	r31, 0x02	; 2
    1852:	4f 0e       	add	r4, r31
    1854:	51 1c       	adc	r5, r1
    1856:	f8 01       	movw	r30, r16
    1858:	a0 80       	ld	r10, Z
    185a:	b1 80       	ldd	r11, Z+1	; 0x01
    185c:	36 fe       	sbrs	r3, 6
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <vfprintf+0x146>
    1860:	69 2d       	mov	r22, r9
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <vfprintf+0x14a>
    1866:	6f ef       	ldi	r22, 0xFF	; 255
    1868:	7f ef       	ldi	r23, 0xFF	; 255
    186a:	c5 01       	movw	r24, r10
    186c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <strnlen>
    1870:	4c 01       	movw	r8, r24
    1872:	82 01       	movw	r16, r4
    1874:	f3 2d       	mov	r31, r3
    1876:	ff 77       	andi	r31, 0x7F	; 127
    1878:	3f 2e       	mov	r3, r31
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <vfprintf+0x188>
    187c:	28 01       	movw	r4, r16
    187e:	22 e0       	ldi	r18, 0x02	; 2
    1880:	42 0e       	add	r4, r18
    1882:	51 1c       	adc	r5, r1
    1884:	f8 01       	movw	r30, r16
    1886:	a0 80       	ld	r10, Z
    1888:	b1 80       	ldd	r11, Z+1	; 0x01
    188a:	36 fe       	sbrs	r3, 6
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <vfprintf+0x174>
    188e:	69 2d       	mov	r22, r9
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <vfprintf+0x178>
    1894:	6f ef       	ldi	r22, 0xFF	; 255
    1896:	7f ef       	ldi	r23, 0xFF	; 255
    1898:	c5 01       	movw	r24, r10
    189a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <strnlen_P>
    189e:	4c 01       	movw	r8, r24
    18a0:	f3 2d       	mov	r31, r3
    18a2:	f0 68       	ori	r31, 0x80	; 128
    18a4:	3f 2e       	mov	r3, r31
    18a6:	82 01       	movw	r16, r4
    18a8:	33 fc       	sbrc	r3, 3
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <vfprintf+0x1c2>
    18ac:	82 2d       	mov	r24, r2
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	88 16       	cp	r8, r24
    18b2:	99 06       	cpc	r9, r25
    18b4:	b0 f4       	brcc	.+44     	; 0x18e2 <vfprintf+0x1c2>
    18b6:	b6 01       	movw	r22, r12
    18b8:	80 e2       	ldi	r24, 0x20	; 32
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    18c0:	2a 94       	dec	r2
    18c2:	f4 cf       	rjmp	.-24     	; 0x18ac <vfprintf+0x18c>
    18c4:	f5 01       	movw	r30, r10
    18c6:	37 fc       	sbrc	r3, 7
    18c8:	85 91       	lpm	r24, Z+
    18ca:	37 fe       	sbrs	r3, 7
    18cc:	81 91       	ld	r24, Z+
    18ce:	5f 01       	movw	r10, r30
    18d0:	b6 01       	movw	r22, r12
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    18d8:	21 10       	cpse	r2, r1
    18da:	2a 94       	dec	r2
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	82 1a       	sub	r8, r18
    18e0:	91 08       	sbc	r9, r1
    18e2:	81 14       	cp	r8, r1
    18e4:	91 04       	cpc	r9, r1
    18e6:	71 f7       	brne	.-36     	; 0x18c4 <vfprintf+0x1a4>
    18e8:	e8 c0       	rjmp	.+464    	; 0x1aba <vfprintf+0x39a>
    18ea:	84 36       	cpi	r24, 0x64	; 100
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <vfprintf+0x1d2>
    18ee:	89 36       	cpi	r24, 0x69	; 105
    18f0:	41 f5       	brne	.+80     	; 0x1942 <vfprintf+0x222>
    18f2:	f8 01       	movw	r30, r16
    18f4:	37 fe       	sbrs	r3, 7
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <vfprintf+0x1e6>
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	0c 5f       	subi	r16, 0xFC	; 252
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <vfprintf+0x1f6>
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	07 2e       	mov	r0, r23
    190c:	00 0c       	add	r0, r0
    190e:	88 0b       	sbc	r24, r24
    1910:	99 0b       	sbc	r25, r25
    1912:	0e 5f       	subi	r16, 0xFE	; 254
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	f3 2d       	mov	r31, r3
    1918:	ff 76       	andi	r31, 0x6F	; 111
    191a:	3f 2e       	mov	r3, r31
    191c:	97 ff       	sbrs	r25, 7
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <vfprintf+0x212>
    1920:	90 95       	com	r25
    1922:	80 95       	com	r24
    1924:	70 95       	com	r23
    1926:	61 95       	neg	r22
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	f0 68       	ori	r31, 0x80	; 128
    1930:	3f 2e       	mov	r3, r31
    1932:	2a e0       	ldi	r18, 0x0A	; 10
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	a3 01       	movw	r20, r6
    1938:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__ultoa_invert>
    193c:	88 2e       	mov	r8, r24
    193e:	86 18       	sub	r8, r6
    1940:	45 c0       	rjmp	.+138    	; 0x19cc <vfprintf+0x2ac>
    1942:	85 37       	cpi	r24, 0x75	; 117
    1944:	31 f4       	brne	.+12     	; 0x1952 <vfprintf+0x232>
    1946:	23 2d       	mov	r18, r3
    1948:	2f 7e       	andi	r18, 0xEF	; 239
    194a:	b2 2e       	mov	r11, r18
    194c:	2a e0       	ldi	r18, 0x0A	; 10
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	25 c0       	rjmp	.+74     	; 0x199c <vfprintf+0x27c>
    1952:	93 2d       	mov	r25, r3
    1954:	99 7f       	andi	r25, 0xF9	; 249
    1956:	b9 2e       	mov	r11, r25
    1958:	8f 36       	cpi	r24, 0x6F	; 111
    195a:	c1 f0       	breq	.+48     	; 0x198c <vfprintf+0x26c>
    195c:	18 f4       	brcc	.+6      	; 0x1964 <vfprintf+0x244>
    195e:	88 35       	cpi	r24, 0x58	; 88
    1960:	79 f0       	breq	.+30     	; 0x1980 <vfprintf+0x260>
    1962:	b5 c0       	rjmp	.+362    	; 0x1ace <vfprintf+0x3ae>
    1964:	80 37       	cpi	r24, 0x70	; 112
    1966:	19 f0       	breq	.+6      	; 0x196e <vfprintf+0x24e>
    1968:	88 37       	cpi	r24, 0x78	; 120
    196a:	21 f0       	breq	.+8      	; 0x1974 <vfprintf+0x254>
    196c:	b0 c0       	rjmp	.+352    	; 0x1ace <vfprintf+0x3ae>
    196e:	e9 2f       	mov	r30, r25
    1970:	e0 61       	ori	r30, 0x10	; 16
    1972:	be 2e       	mov	r11, r30
    1974:	b4 fe       	sbrs	r11, 4
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <vfprintf+0x272>
    1978:	fb 2d       	mov	r31, r11
    197a:	f4 60       	ori	r31, 0x04	; 4
    197c:	bf 2e       	mov	r11, r31
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <vfprintf+0x272>
    1980:	34 fe       	sbrs	r3, 4
    1982:	0a c0       	rjmp	.+20     	; 0x1998 <vfprintf+0x278>
    1984:	29 2f       	mov	r18, r25
    1986:	26 60       	ori	r18, 0x06	; 6
    1988:	b2 2e       	mov	r11, r18
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <vfprintf+0x278>
    198c:	28 e0       	ldi	r18, 0x08	; 8
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	05 c0       	rjmp	.+10     	; 0x199c <vfprintf+0x27c>
    1992:	20 e1       	ldi	r18, 0x10	; 16
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x27c>
    1998:	20 e1       	ldi	r18, 0x10	; 16
    199a:	32 e0       	ldi	r19, 0x02	; 2
    199c:	f8 01       	movw	r30, r16
    199e:	b7 fe       	sbrs	r11, 7
    19a0:	07 c0       	rjmp	.+14     	; 0x19b0 <vfprintf+0x290>
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	0c 5f       	subi	r16, 0xFC	; 252
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <vfprintf+0x29c>
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 5f       	subi	r16, 0xFE	; 254
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	a3 01       	movw	r20, r6
    19be:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__ultoa_invert>
    19c2:	88 2e       	mov	r8, r24
    19c4:	86 18       	sub	r8, r6
    19c6:	fb 2d       	mov	r31, r11
    19c8:	ff 77       	andi	r31, 0x7F	; 127
    19ca:	3f 2e       	mov	r3, r31
    19cc:	36 fe       	sbrs	r3, 6
    19ce:	0d c0       	rjmp	.+26     	; 0x19ea <vfprintf+0x2ca>
    19d0:	23 2d       	mov	r18, r3
    19d2:	2e 7f       	andi	r18, 0xFE	; 254
    19d4:	a2 2e       	mov	r10, r18
    19d6:	89 14       	cp	r8, r9
    19d8:	58 f4       	brcc	.+22     	; 0x19f0 <vfprintf+0x2d0>
    19da:	34 fe       	sbrs	r3, 4
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <vfprintf+0x2d4>
    19de:	32 fc       	sbrc	r3, 2
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <vfprintf+0x2d4>
    19e2:	83 2d       	mov	r24, r3
    19e4:	8e 7e       	andi	r24, 0xEE	; 238
    19e6:	a8 2e       	mov	r10, r24
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <vfprintf+0x2d4>
    19ea:	b8 2c       	mov	r11, r8
    19ec:	a3 2c       	mov	r10, r3
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <vfprintf+0x2d6>
    19f0:	b8 2c       	mov	r11, r8
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <vfprintf+0x2d6>
    19f4:	b9 2c       	mov	r11, r9
    19f6:	a4 fe       	sbrs	r10, 4
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <vfprintf+0x2f8>
    19fa:	fe 01       	movw	r30, r28
    19fc:	e8 0d       	add	r30, r8
    19fe:	f1 1d       	adc	r31, r1
    1a00:	80 81       	ld	r24, Z
    1a02:	80 33       	cpi	r24, 0x30	; 48
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <vfprintf+0x2ee>
    1a06:	9a 2d       	mov	r25, r10
    1a08:	99 7e       	andi	r25, 0xE9	; 233
    1a0a:	a9 2e       	mov	r10, r25
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <vfprintf+0x300>
    1a0e:	a2 fe       	sbrs	r10, 2
    1a10:	06 c0       	rjmp	.+12     	; 0x1a1e <vfprintf+0x2fe>
    1a12:	b3 94       	inc	r11
    1a14:	b3 94       	inc	r11
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <vfprintf+0x300>
    1a18:	8a 2d       	mov	r24, r10
    1a1a:	86 78       	andi	r24, 0x86	; 134
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <vfprintf+0x300>
    1a1e:	b3 94       	inc	r11
    1a20:	a3 fc       	sbrc	r10, 3
    1a22:	11 c0       	rjmp	.+34     	; 0x1a46 <vfprintf+0x326>
    1a24:	a0 fe       	sbrs	r10, 0
    1a26:	06 c0       	rjmp	.+12     	; 0x1a34 <vfprintf+0x314>
    1a28:	b2 14       	cp	r11, r2
    1a2a:	88 f4       	brcc	.+34     	; 0x1a4e <vfprintf+0x32e>
    1a2c:	28 0c       	add	r2, r8
    1a2e:	92 2c       	mov	r9, r2
    1a30:	9b 18       	sub	r9, r11
    1a32:	0e c0       	rjmp	.+28     	; 0x1a50 <vfprintf+0x330>
    1a34:	b2 14       	cp	r11, r2
    1a36:	60 f4       	brcc	.+24     	; 0x1a50 <vfprintf+0x330>
    1a38:	b6 01       	movw	r22, r12
    1a3a:	80 e2       	ldi	r24, 0x20	; 32
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1a42:	b3 94       	inc	r11
    1a44:	f7 cf       	rjmp	.-18     	; 0x1a34 <vfprintf+0x314>
    1a46:	b2 14       	cp	r11, r2
    1a48:	18 f4       	brcc	.+6      	; 0x1a50 <vfprintf+0x330>
    1a4a:	2b 18       	sub	r2, r11
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <vfprintf+0x332>
    1a4e:	98 2c       	mov	r9, r8
    1a50:	21 2c       	mov	r2, r1
    1a52:	a4 fe       	sbrs	r10, 4
    1a54:	10 c0       	rjmp	.+32     	; 0x1a76 <vfprintf+0x356>
    1a56:	b6 01       	movw	r22, r12
    1a58:	80 e3       	ldi	r24, 0x30	; 48
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1a60:	a2 fe       	sbrs	r10, 2
    1a62:	17 c0       	rjmp	.+46     	; 0x1a92 <vfprintf+0x372>
    1a64:	a1 fc       	sbrc	r10, 1
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <vfprintf+0x34e>
    1a68:	88 e7       	ldi	r24, 0x78	; 120
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <vfprintf+0x352>
    1a6e:	88 e5       	ldi	r24, 0x58	; 88
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	b6 01       	movw	r22, r12
    1a74:	0c c0       	rjmp	.+24     	; 0x1a8e <vfprintf+0x36e>
    1a76:	8a 2d       	mov	r24, r10
    1a78:	86 78       	andi	r24, 0x86	; 134
    1a7a:	59 f0       	breq	.+22     	; 0x1a92 <vfprintf+0x372>
    1a7c:	a1 fe       	sbrs	r10, 1
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0x364>
    1a80:	8b e2       	ldi	r24, 0x2B	; 43
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <vfprintf+0x366>
    1a84:	80 e2       	ldi	r24, 0x20	; 32
    1a86:	a7 fc       	sbrc	r10, 7
    1a88:	8d e2       	ldi	r24, 0x2D	; 45
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1a92:	89 14       	cp	r8, r9
    1a94:	38 f4       	brcc	.+14     	; 0x1aa4 <vfprintf+0x384>
    1a96:	b6 01       	movw	r22, r12
    1a98:	80 e3       	ldi	r24, 0x30	; 48
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1aa0:	9a 94       	dec	r9
    1aa2:	f7 cf       	rjmp	.-18     	; 0x1a92 <vfprintf+0x372>
    1aa4:	8a 94       	dec	r8
    1aa6:	f3 01       	movw	r30, r6
    1aa8:	e8 0d       	add	r30, r8
    1aaa:	f1 1d       	adc	r31, r1
    1aac:	80 81       	ld	r24, Z
    1aae:	b6 01       	movw	r22, r12
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1ab6:	81 10       	cpse	r8, r1
    1ab8:	f5 cf       	rjmp	.-22     	; 0x1aa4 <vfprintf+0x384>
    1aba:	22 20       	and	r2, r2
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <vfprintf+0x3a0>
    1abe:	42 ce       	rjmp	.-892    	; 0x1744 <vfprintf+0x24>
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	80 e2       	ldi	r24, 0x20	; 32
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <fputc>
    1aca:	2a 94       	dec	r2
    1acc:	f6 cf       	rjmp	.-20     	; 0x1aba <vfprintf+0x39a>
    1ace:	f6 01       	movw	r30, r12
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	97 81       	ldd	r25, Z+7	; 0x07
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <vfprintf+0x3ba>
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	2b 96       	adiw	r28, 0x0b	; 11
    1adc:	e2 e1       	ldi	r30, 0x12	; 18
    1ade:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__epilogue_restores__>

00001ae2 <strnlen_P>:
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	05 90       	lpm	r0, Z+
    1ae6:	61 50       	subi	r22, 0x01	; 1
    1ae8:	70 40       	sbci	r23, 0x00	; 0
    1aea:	01 10       	cpse	r0, r1
    1aec:	d8 f7       	brcc	.-10     	; 0x1ae4 <strnlen_P+0x2>
    1aee:	80 95       	com	r24
    1af0:	90 95       	com	r25
    1af2:	8e 0f       	add	r24, r30
    1af4:	9f 1f       	adc	r25, r31
    1af6:	08 95       	ret

00001af8 <strnlen>:
    1af8:	fc 01       	movw	r30, r24
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	70 40       	sbci	r23, 0x00	; 0
    1afe:	01 90       	ld	r0, Z+
    1b00:	01 10       	cpse	r0, r1
    1b02:	d8 f7       	brcc	.-10     	; 0x1afa <strnlen+0x2>
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	8e 0f       	add	r24, r30
    1b0a:	9f 1f       	adc	r25, r31
    1b0c:	08 95       	ret

00001b0e <fputc>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	fb 01       	movw	r30, r22
    1b18:	23 81       	ldd	r18, Z+3	; 0x03
    1b1a:	21 fd       	sbrc	r18, 1
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <fputc+0x16>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	9f ef       	ldi	r25, 0xFF	; 255
    1b22:	2c c0       	rjmp	.+88     	; 0x1b7c <fputc+0x6e>
    1b24:	22 ff       	sbrs	r18, 2
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <fputc+0x46>
    1b28:	46 81       	ldd	r20, Z+6	; 0x06
    1b2a:	57 81       	ldd	r21, Z+7	; 0x07
    1b2c:	24 81       	ldd	r18, Z+4	; 0x04
    1b2e:	35 81       	ldd	r19, Z+5	; 0x05
    1b30:	42 17       	cp	r20, r18
    1b32:	53 07       	cpc	r21, r19
    1b34:	44 f4       	brge	.+16     	; 0x1b46 <fputc+0x38>
    1b36:	a0 81       	ld	r26, Z
    1b38:	b1 81       	ldd	r27, Z+1	; 0x01
    1b3a:	9d 01       	movw	r18, r26
    1b3c:	2f 5f       	subi	r18, 0xFF	; 255
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	31 83       	std	Z+1, r19	; 0x01
    1b42:	20 83       	st	Z, r18
    1b44:	8c 93       	st	X, r24
    1b46:	26 81       	ldd	r18, Z+6	; 0x06
    1b48:	37 81       	ldd	r19, Z+7	; 0x07
    1b4a:	2f 5f       	subi	r18, 0xFF	; 255
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	37 83       	std	Z+7, r19	; 0x07
    1b50:	26 83       	std	Z+6, r18	; 0x06
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <fputc+0x6e>
    1b54:	8b 01       	movw	r16, r22
    1b56:	ec 01       	movw	r28, r24
    1b58:	fb 01       	movw	r30, r22
    1b5a:	00 84       	ldd	r0, Z+8	; 0x08
    1b5c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b5e:	e0 2d       	mov	r30, r0
    1b60:	09 95       	icall
    1b62:	89 2b       	or	r24, r25
    1b64:	e1 f6       	brne	.-72     	; 0x1b1e <fputc+0x10>
    1b66:	d8 01       	movw	r26, r16
    1b68:	16 96       	adiw	r26, 0x06	; 6
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	17 97       	sbiw	r26, 0x07	; 7
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	17 96       	adiw	r26, 0x07	; 7
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	16 97       	sbiw	r26, 0x06	; 6
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	08 95       	ret

00001b86 <__ultoa_invert>:
    1b86:	fa 01       	movw	r30, r20
    1b88:	aa 27       	eor	r26, r26
    1b8a:	28 30       	cpi	r18, 0x08	; 8
    1b8c:	51 f1       	breq	.+84     	; 0x1be2 <__ultoa_invert+0x5c>
    1b8e:	20 31       	cpi	r18, 0x10	; 16
    1b90:	81 f1       	breq	.+96     	; 0x1bf2 <__ultoa_invert+0x6c>
    1b92:	e8 94       	clt
    1b94:	6f 93       	push	r22
    1b96:	6e 7f       	andi	r22, 0xFE	; 254
    1b98:	6e 5f       	subi	r22, 0xFE	; 254
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	af 4f       	sbci	r26, 0xFF	; 255
    1ba2:	b1 e0       	ldi	r27, 0x01	; 1
    1ba4:	3e d0       	rcall	.+124    	; 0x1c22 <__ultoa_invert+0x9c>
    1ba6:	b4 e0       	ldi	r27, 0x04	; 4
    1ba8:	3c d0       	rcall	.+120    	; 0x1c22 <__ultoa_invert+0x9c>
    1baa:	67 0f       	add	r22, r23
    1bac:	78 1f       	adc	r23, r24
    1bae:	89 1f       	adc	r24, r25
    1bb0:	9a 1f       	adc	r25, r26
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	68 0f       	add	r22, r24
    1bb6:	79 1f       	adc	r23, r25
    1bb8:	8a 1f       	adc	r24, r26
    1bba:	91 1d       	adc	r25, r1
    1bbc:	a1 1d       	adc	r26, r1
    1bbe:	6a 0f       	add	r22, r26
    1bc0:	71 1d       	adc	r23, r1
    1bc2:	81 1d       	adc	r24, r1
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	20 d0       	rcall	.+64     	; 0x1c0a <__ultoa_invert+0x84>
    1bca:	09 f4       	brne	.+2      	; 0x1bce <__ultoa_invert+0x48>
    1bcc:	68 94       	set
    1bce:	3f 91       	pop	r19
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	26 9f       	mul	r18, r22
    1bd4:	11 24       	eor	r1, r1
    1bd6:	30 19       	sub	r19, r0
    1bd8:	30 5d       	subi	r19, 0xD0	; 208
    1bda:	31 93       	st	Z+, r19
    1bdc:	de f6       	brtc	.-74     	; 0x1b94 <__ultoa_invert+0xe>
    1bde:	cf 01       	movw	r24, r30
    1be0:	08 95       	ret
    1be2:	46 2f       	mov	r20, r22
    1be4:	47 70       	andi	r20, 0x07	; 7
    1be6:	40 5d       	subi	r20, 0xD0	; 208
    1be8:	41 93       	st	Z+, r20
    1bea:	b3 e0       	ldi	r27, 0x03	; 3
    1bec:	0f d0       	rcall	.+30     	; 0x1c0c <__ultoa_invert+0x86>
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__ultoa_invert+0x5c>
    1bf0:	f6 cf       	rjmp	.-20     	; 0x1bde <__ultoa_invert+0x58>
    1bf2:	46 2f       	mov	r20, r22
    1bf4:	4f 70       	andi	r20, 0x0F	; 15
    1bf6:	40 5d       	subi	r20, 0xD0	; 208
    1bf8:	4a 33       	cpi	r20, 0x3A	; 58
    1bfa:	18 f0       	brcs	.+6      	; 0x1c02 <__ultoa_invert+0x7c>
    1bfc:	49 5d       	subi	r20, 0xD9	; 217
    1bfe:	31 fd       	sbrc	r19, 1
    1c00:	40 52       	subi	r20, 0x20	; 32
    1c02:	41 93       	st	Z+, r20
    1c04:	02 d0       	rcall	.+4      	; 0x1c0a <__ultoa_invert+0x84>
    1c06:	a9 f7       	brne	.-22     	; 0x1bf2 <__ultoa_invert+0x6c>
    1c08:	ea cf       	rjmp	.-44     	; 0x1bde <__ultoa_invert+0x58>
    1c0a:	b4 e0       	ldi	r27, 0x04	; 4
    1c0c:	a6 95       	lsr	r26
    1c0e:	97 95       	ror	r25
    1c10:	87 95       	ror	r24
    1c12:	77 95       	ror	r23
    1c14:	67 95       	ror	r22
    1c16:	ba 95       	dec	r27
    1c18:	c9 f7       	brne	.-14     	; 0x1c0c <__ultoa_invert+0x86>
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	61 05       	cpc	r22, r1
    1c1e:	71 05       	cpc	r23, r1
    1c20:	08 95       	ret
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	0a 2e       	mov	r0, r26
    1c28:	06 94       	lsr	r0
    1c2a:	57 95       	ror	r21
    1c2c:	47 95       	ror	r20
    1c2e:	37 95       	ror	r19
    1c30:	27 95       	ror	r18
    1c32:	ba 95       	dec	r27
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__ultoa_invert+0xa2>
    1c36:	62 0f       	add	r22, r18
    1c38:	73 1f       	adc	r23, r19
    1c3a:	84 1f       	adc	r24, r20
    1c3c:	95 1f       	adc	r25, r21
    1c3e:	a0 1d       	adc	r26, r0
    1c40:	08 95       	ret

00001c42 <__prologue_saves__>:
    1c42:	2f 92       	push	r2
    1c44:	3f 92       	push	r3
    1c46:	4f 92       	push	r4
    1c48:	5f 92       	push	r5
    1c4a:	6f 92       	push	r6
    1c4c:	7f 92       	push	r7
    1c4e:	8f 92       	push	r8
    1c50:	9f 92       	push	r9
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	ca 1b       	sub	r28, r26
    1c6c:	db 0b       	sbc	r29, r27
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	09 94       	ijmp

00001c7a <__epilogue_restores__>:
    1c7a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c7c:	39 88       	ldd	r3, Y+17	; 0x11
    1c7e:	48 88       	ldd	r4, Y+16	; 0x10
    1c80:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c82:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c84:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c86:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c88:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c8c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c8e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c90:	df 80       	ldd	r13, Y+7	; 0x07
    1c92:	ee 80       	ldd	r14, Y+6	; 0x06
    1c94:	fd 80       	ldd	r15, Y+5	; 0x05
    1c96:	0c 81       	ldd	r16, Y+4	; 0x04
    1c98:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c9e:	ce 0f       	add	r28, r30
    1ca0:	d1 1d       	adc	r29, r1
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	ed 01       	movw	r28, r26
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
