
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00001006  0000109a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  008002e0  008002e0  0000127a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba3  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf4  00000000  00000000  00003023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d27  00000000  00000000  00003d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00004a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d6  00000000  00000000  00004dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e3  00000000  00000000  000056a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e0       	ldi	r30, 0x06	; 6
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3e       	cpi	r26, 0xE0	; 224
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a0 ee       	ldi	r26, 0xE0	; 224
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 30       	cpi	r26, 0x0F	; 15
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 08 02 	call	0x410	; 0x410 <main>
      9e:	0c 94 01 08 	jmp	0x1002	; 0x1002 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <ultraSensor>
     100:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <ultraSensor+0x1>
     104:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <ultraSensor+0x2>
     108:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <ultraSensor+0x3>
     10c:	e5 e0       	ldi	r30, 0x05	; 5
     10e:	f3 e0       	ldi	r31, 0x03	; 3
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <ultraSensor+0x4>
     13c:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <ultraSensor+0x5>
     140:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <ultraSensor+0x6>
     144:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <ultraSensor+0x7>
     148:	e5 e0       	ldi	r30, 0x05	; 5
     14a:	f3 e0       	ldi	r31, 0x03	; 3
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	e8 e8       	ldi	r30, 0x88	; 136
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	93 46       	sbci	r25, 0x63	; 99
     1b4:	91 83       	std	Z+1, r25	; 0x01
     1b6:	80 83       	st	Z, r24
     1b8:	85 b1       	in	r24, 0x05	; 5
     1ba:	82 60       	ori	r24, 0x02	; 2
     1bc:	85 b9       	out	0x05, r24	; 5
     1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
     1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
     1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
     1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
     1d6:	82 0f       	add	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     1e2:	ff 91       	pop	r31
     1e4:	ef 91       	pop	r30
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_12>:
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8d 7f       	andi	r24, 0xFD	; 253
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <__vector_7>:
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
     238:	ef 93       	push	r30
     23a:	ff 93       	push	r31
     23c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     240:	81 ff       	sbrs	r24, 1
     242:	8e c0       	rjmp	.+284    	; 0x360 <__vector_7+0x146>
     244:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	e9 f4       	brne	.+58     	; 0x286 <__vector_7+0x6c>
     24c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
     250:	85 fd       	sbrc	r24, 5
     252:	19 c0       	rjmp	.+50     	; 0x286 <__vector_7+0x6c>
     254:	80 e2       	ldi	r24, 0x20	; 32
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
     25c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__data_end>
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	30 f4       	brcc	.+12     	; 0x270 <__vector_7+0x56>
     264:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__data_end>
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
     26e:	0b c0       	rjmp	.+22     	; 0x286 <__vector_7+0x6c>
     270:	e5 e0       	ldi	r30, 0x05	; 5
     272:	f3 e0       	ldi	r31, 0x03	; 3
     274:	80 81       	ld	r24, Z
     276:	82 60       	ori	r24, 0x02	; 2
     278:	80 83       	st	Z, r24
     27a:	85 e2       	ldi	r24, 0x25	; 37
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
     282:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__data_end>
     286:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	d1 f4       	brne	.+52     	; 0x2c2 <__vector_7+0xa8>
     28e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <ultraSensor+0xc>
     292:	94 ff       	sbrs	r25, 4
     294:	16 c0       	rjmp	.+44     	; 0x2c2 <__vector_7+0xa8>
     296:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <bandera2>
     29a:	90 fd       	sbrc	r25, 0
     29c:	12 c0       	rjmp	.+36     	; 0x2c2 <__vector_7+0xa8>
     29e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <veintems_counter>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	30 f4       	brcc	.+12     	; 0x2b2 <__vector_7+0x98>
     2a6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <veintems_counter>
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <veintems_counter>
     2b0:	21 c0       	rjmp	.+66     	; 0x2f4 <__vector_7+0xda>
     2b2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
     2bc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <veintems_counter>
     2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <__vector_7+0xda>
     2c2:	88 23       	and	r24, r24
     2c4:	11 f0       	breq	.+4      	; 0x2ca <__vector_7+0xb0>
     2c6:	85 30       	cpi	r24, 0x05	; 5
     2c8:	a9 f4       	brne	.+42     	; 0x2f4 <__vector_7+0xda>
     2ca:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
     2ce:	85 fd       	sbrc	r24, 5
     2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <__vector_7+0xcc>
     2d2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <wait_time>
     2d6:	87 30       	cpi	r24, 0x07	; 7
     2d8:	30 f4       	brcc	.+12     	; 0x2e6 <__vector_7+0xcc>
     2da:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <wait_time>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <wait_time>
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <__vector_7+0xda>
     2e6:	e5 e0       	ldi	r30, 0x05	; 5
     2e8:	f3 e0       	ldi	r31, 0x03	; 3
     2ea:	80 81       	ld	r24, Z
     2ec:	80 62       	ori	r24, 0x20	; 32
     2ee:	80 83       	st	Z, r24
     2f0:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <wait_time>
     2f4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <diezMsCounter>
     2f8:	84 31       	cpi	r24, 0x14	; 20
     2fa:	30 f4       	brcc	.+12     	; 0x308 <__vector_7+0xee>
     2fc:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <diezMsCounter>
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <diezMsCounter>
     306:	02 c0       	rjmp	.+4      	; 0x30c <__vector_7+0xf2>
     308:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <diezMsCounter>
     30c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     310:	86 ff       	sbrs	r24, 6
     312:	0e c0       	rjmp	.+28     	; 0x330 <__vector_7+0x116>
     314:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
     318:	8f 3f       	cpi	r24, 0xFF	; 255
     31a:	29 f4       	brne	.+10     	; 0x326 <__vector_7+0x10c>
     31c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     320:	84 60       	ori	r24, 0x04	; 4
     322:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
     326:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <btn_pressed_time>
     330:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     334:	85 ff       	sbrs	r24, 5
     336:	14 c0       	rjmp	.+40     	; 0x360 <__vector_7+0x146>
     338:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <servo_counter>
     33c:	8e 31       	cpi	r24, 0x1E	; 30
     33e:	30 f4       	brcc	.+12     	; 0x34c <__vector_7+0x132>
     340:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <servo_counter>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <servo_counter>
     34a:	0a c0       	rjmp	.+20     	; 0x360 <__vector_7+0x146>
     34c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <servo_counter>
     350:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     354:	8f 7d       	andi	r24, 0xDF	; 223
     356:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
     35a:	8a e5       	ldi	r24, 0x5A	; 90
     35c:	0e 94 1a 03 	call	0x634	; 0x634 <servoA_set_angle>
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <timer1_init>:
     382:	a4 e8       	ldi	r26, 0x84	; 132
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	1c 92       	st	X, r1
     38a:	1e 92       	st	-X, r1
     38c:	86 b3       	in	r24, 0x16	; 22
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	86 bb       	out	0x16, r24	; 22
     392:	ef e6       	ldi	r30, 0x6F	; 111
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	87 62       	ori	r24, 0x27	; 39
     39a:	80 83       	st	Z, r24
     39c:	e1 e8       	ldi	r30, 0x81	; 129
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	80 83       	st	Z, r24
     3a6:	80 81       	ld	r24, Z
     3a8:	82 60       	ori	r24, 0x02	; 2
     3aa:	80 83       	st	Z, r24
     3ac:	8d 91       	ld	r24, X+
     3ae:	9c 91       	ld	r25, X
     3b0:	80 5c       	subi	r24, 0xC0	; 192
     3b2:	93 46       	sbci	r25, 0x63	; 99
     3b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     3bc:	08 95       	ret

000003be <timer2_init>:
     3be:	e1 eb       	ldi	r30, 0xB1	; 177
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	87 60       	ori	r24, 0x07	; 7
     3c6:	80 83       	st	Z, r24
     3c8:	8b e9       	ldi	r24, 0x9B	; 155
     3ca:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     3ce:	e0 e7       	ldi	r30, 0x70	; 112
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	82 60       	ori	r24, 0x02	; 2
     3d6:	80 83       	st	Z, r24
     3d8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     3dc:	08 95       	ret

000003de <gpio_pins_init>:
     3de:	84 b1       	in	r24, 0x04	; 4
     3e0:	80 62       	ori	r24, 0x20	; 32
     3e2:	84 b9       	out	0x04, r24	; 4
     3e4:	85 b1       	in	r24, 0x05	; 5
     3e6:	80 62       	ori	r24, 0x20	; 32
     3e8:	85 b9       	out	0x05, r24	; 5
     3ea:	8a b1       	in	r24, 0x0a	; 10
     3ec:	88 60       	ori	r24, 0x08	; 8
     3ee:	8a b9       	out	0x0a, r24	; 10
     3f0:	84 b1       	in	r24, 0x04	; 4
     3f2:	8e 7f       	andi	r24, 0xFE	; 254
     3f4:	84 b9       	out	0x04, r24	; 4
     3f6:	8a b1       	in	r24, 0x0a	; 10
     3f8:	8f 7e       	andi	r24, 0xEF	; 239
     3fa:	8a b9       	out	0x0a, r24	; 10
     3fc:	8b b1       	in	r24, 0x0b	; 11
     3fe:	8f 7e       	andi	r24, 0xEF	; 239
     400:	8b b9       	out	0x0b, r24	; 11
     402:	84 b1       	in	r24, 0x04	; 4
     404:	82 60       	ori	r24, 0x02	; 2
     406:	84 b9       	out	0x04, r24	; 4
     408:	8b b1       	in	r24, 0x0b	; 11
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	8b b9       	out	0x0b, r24	; 11
     40e:	08 95       	ret

00000410 <main>:

int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
     410:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <bandera2>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     414:	82 e8       	ldi	r24, 0x82	; 130
     416:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 84 03 	call	0x708	; 0x708 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     422:	e9 e0       	ldi	r30, 0x09	; 9
     424:	f3 e0       	ldi	r31, 0x03	; 3
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	93 83       	std	Z+3, r25	; 0x03
     42c:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
	diezMsCounter = 0;
     436:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <diezMsCounter>
	outA.cinta_struct_full_mem = 0;
     43a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <outA>
     43e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <outA+0x1>
     442:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <outA+0x2>
     446:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <outA+0x3>
	outB.cinta_struct_full_mem = 0;
     44a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <outB>
     44e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <outB+0x1>
     452:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <outB+0x2>
     456:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <outB+0x3>
	outC.cinta_struct_full_mem = 0;
     45a:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <outC>
     45e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <outC+0x1>
     462:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <outC+0x2>
     466:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <outC+0x3>
	outD.cinta_struct_full_mem = 0;
     46a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <outD>
     46e:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <outD+0x1>
     472:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <outD+0x2>
     476:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <outD+0x3>
	// Inicializa los pines GPIO
	gpio_pins_init();
     47a:	0e 94 ef 01 	call	0x3de	; 0x3de <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     47e:	0e 94 c1 01 	call	0x382	; 0x382 <timer1_init>
	timer2_init();
     482:	0e 94 df 01 	call	0x3be	; 0x3be <timer2_init>
	//Inicia HCSR04
	ultrasonic_init(&ultraSensor);
     486:	89 ef       	ldi	r24, 0xF9	; 249
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 af 03 	call	0x75e	; 0x75e <ultrasonic_init>
	ultrasonic_set_print_method(&ultraSensor, printfWrapper); //Iniciar el metodo de impresion printf del ultrasonido
     48e:	63 e5       	ldi	r22, 0x53	; 83
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	89 ef       	ldi	r24, 0xF9	; 249
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 0a 04 	call	0x814	; 0x814 <ultrasonic_set_print_method>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     49a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     49e:	82 60       	ori	r24, 0x02	; 2
     4a0:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     4a4:	8b e2       	ldi	r24, 0x2B	; 43
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
	sei();
     4ac:	78 94       	sei
	while (1)
	{ 
		if(ULTRASONIC_ENABLE && ultraSensor.TRIGGER_ALLOWED && EMIT_TRIGGER){ //Sensor habilitado, listo para emitir y señal de emitir en alto
     4ae:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     4b2:	88 23       	and	r24, r24
     4b4:	e4 f4       	brge	.+56     	; 0x4ee <main+0xde>
     4b6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
     4ba:	85 ff       	sbrs	r24, 5
     4bc:	18 c0       	rjmp	.+48     	; 0x4ee <main+0xde>
     4be:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     4c2:	81 ff       	sbrs	r24, 1
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <main+0xde>
			if(ultrasonic_start(&ultraSensor)){ //Trata de iniciar, veremos el resultado
     4c6:	89 ef       	ldi	r24, 0xF9	; 249
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 18 04 	call	0x830	; 0x830 <ultrasonic_start>
     4ce:	88 23       	and	r24, r24
     4d0:	29 f0       	breq	.+10     	; 0x4dc <main+0xcc>
				printf("InitHCSR04\n"); //Emitio
     4d2:	8e e3       	ldi	r24, 0x3E	; 62
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <main+0xde>
			}else{
				printf("ErrorInitHCSR04\n"); //No puedo iniciar, no emitio, no bajo la bandera de emision
     4dc:	89 e3       	ldi	r24, 0x39	; 57
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
				EMIT_FAILED = 1; //Fallo emision
     4e4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     4e8:	84 60       	ori	r24, 0x04	; 4
     4ea:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
			}
		}
		ultrasonic_update(&ultraSensor);
     4ee:	89 ef       	ldi	r24, 0xF9	; 249
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 34 04 	call	0x868	; 0x868 <ultrasonic_update>
		if(ultraSensor.state == ULTRA_TRIGGERING){ //Imprime 
     4f6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	89 f4       	brne	.+34     	; 0x520 <main+0x110>
			if(!ultraSensor.DO_TRIGGER && !ultraSensor.TRIGGER_ALLOWED && EMIT_TRIGGER){ //Ya lanzo trigger y quedo en tiempo de espera
     4fe:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
     502:	81 72       	andi	r24, 0x21	; 33
     504:	69 f4       	brne	.+26     	; 0x520 <main+0x110>
     506:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     50a:	81 ff       	sbrs	r24, 1
     50c:	09 c0       	rjmp	.+18     	; 0x520 <main+0x110>
				printf("Trigger lanzado \n"); //Imprime hasta que cambia de estado la libreria
     50e:	89 e4       	ldi	r24, 0x49	; 73
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
				EMIT_TRIGGER = 0; //Logro emitir poniendo pin en alto
     516:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     51a:	8d 7f       	andi	r24, 0xFD	; 253
     51c:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
			}
		}
		if(ultraSensor.TRIGGER_FINISH && ultraSensor.ECHO_RISING){ //Termino trigger y el echo aun no volvio
     520:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
     524:	82 71       	andi	r24, 0x12	; 18
     526:	82 31       	cpi	r24, 0x12	; 18
     528:	21 f4       	brne	.+8      	; 0x532 <main+0x122>
			printf("Esperando ECHO \n");
     52a:	8a e5       	ldi	r24, 0x5A	; 90
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
		}
		if(ultraSensor.state == ULTRA_DONE){
     532:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	a1 f4       	brne	.+40     	; 0x562 <main+0x152>
			printf("HCSR04 Dist[mm] %ul\n", ultrasonic_get_distance(&ultraSensor));
     53a:	89 ef       	ldi	r24, 0xF9	; 249
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 04 04 	call	0x808	; 0x808 <ultrasonic_get_distance>
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	7f 93       	push	r23
     548:	6f 93       	push	r22
     54a:	8a e6       	ldi	r24, 0x6A	; 106
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
		}
		if(VEINTEMS_PASSED){
     562:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     566:	80 ff       	sbrs	r24, 0
     568:	0d c0       	rjmp	.+26     	; 0x584 <main+0x174>
			ultrasonic_hal_echo_timeout(&ultraSensor); //Wrapper fn para setear TIMEDOUT = 1 en la libreria
     56a:	89 ef       	ldi	r24, 0xF9	; 249
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ultrasonic_hal_echo_timeout>
			printf("HCSR04 perdio ECHO\n");
     572:	8f e7       	ldi	r24, 0x7F	; 127
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
			VEINTEMS_PASSED = 0; //Reiniciar bandera de timeout
     57a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
		}
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     584:	4c 9b       	sbis	0x09, 4	; 9
     586:	0a c0       	rjmp	.+20     	; 0x59c <main+0x18c>
     588:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     58c:	86 fd       	sbrc	r24, 6
     58e:	06 c0       	rjmp	.+12     	; 0x59c <main+0x18c>
			btn_pressed_time = 0;
     590:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <btn_pressed_time>
			BTN_PRESSED = 1;
     594:	80 64       	ori	r24, 0x40	; 64
     596:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
     59a:	28 c0       	rjmp	.+80     	; 0x5ec <main+0x1dc>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     59c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     5a0:	86 ff       	sbrs	r24, 6
     5a2:	24 c0       	rjmp	.+72     	; 0x5ec <main+0x1dc>
     5a4:	4c 99       	sbic	0x09, 4	; 9
     5a6:	22 c0       	rjmp	.+68     	; 0x5ec <main+0x1dc>
			BTN_PRESSED = 0;
     5a8:	8f 7b       	andi	r24, 0xBF	; 191
     5aa:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     5ae:	82 ff       	sbrs	r24, 2
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <main+0x1aa>
				printf("Btn overflowed\n");
     5b2:	82 e9       	ldi	r24, 0x92	; 146
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 09 05 	call	0xa12	; 0xa12 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     5ba:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	30 f4       	brcc	.+12     	; 0x5ce <main+0x1be>
     5c2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     5c6:	98 2f       	mov	r25, r24
     5c8:	94 70       	andi	r25, 0x04	; 4
     5ca:	82 ff       	sbrs	r24, 2
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <main+0x1ca>
				BTN_RELEASED = 1;
     5ce:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <main+0x1dc>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     5da:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <btn_pressed_time>
				if(BTN_OVF){
     5de:	99 23       	and	r25, r25
     5e0:	29 f0       	breq	.+10     	; 0x5ec <main+0x1dc>
					BTN_OVF = 0;
     5e2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     5e6:	8b 7f       	andi	r24, 0xFB	; 251
     5e8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			}
		}
		/*if(SECPASSED){ Aun no implementado
			SECPASSED = 0;
		}*/ 
		if(DEBUG_FLAG){
     5ec:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
     5f0:	83 ff       	sbrs	r24, 3
     5f2:	08 c0       	rjmp	.+16     	; 0x604 <main+0x1f4>
			printf("Aqui");
     5f4:	80 e2       	ldi	r24, 0x20	; 32
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
		}
		if(BTN_RELEASED){
     604:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     608:	80 ff       	sbrs	r24, 0
     60a:	04 c0       	rjmp	.+8      	; 0x614 <main+0x204>
			BTN_RELEASED = 0; //TEST SERVO A
			SERVOA_MOVE = 1;
     60c:	8e 7f       	andi	r24, 0xFE	; 254
     60e:	80 61       	ori	r24, 0x10	; 16
     610:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
		}
		if(SERVOA_MOVE){
     614:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     618:	84 ff       	sbrs	r24, 4
     61a:	49 cf       	rjmp	.-366    	; 0x4ae <main+0x9e>
			SERVOA_MOVE = 0;
     61c:	8f 7e       	andi	r24, 0xEF	; 239
     61e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			servoA_set_angle(0);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 1a 03 	call	0x634	; 0x634 <servoA_set_angle>
			SERVOA_RESET = 1;
     628:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
     62c:	80 62       	ori	r24, 0x20	; 32
     62e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
     632:	3d cf       	rjmp	.-390    	; 0x4ae <main+0x9e>

00000634 <servoA_set_angle>:
#include <stdio.h>
#include "./../../main.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
     634:	85 3b       	cpi	r24, 0xB5	; 181
     636:	08 f0       	brcs	.+2      	; 0x63a <servoA_set_angle+0x6>
		angle = 180;
     638:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	a0 ed       	ldi	r26, 0xD0	; 208
     640:	b7 e0       	ldi	r27, 0x07	; 7
     642:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__umulhisi3>
     646:	24 eb       	ldi	r18, 0xB4	; 180
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	0e 94 c2 04 	call	0x984	; 0x984 <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
     652:	da 01       	movw	r26, r20
     654:	c9 01       	movw	r24, r18
     656:	80 53       	subi	r24, 0x30	; 48
     658:	98 4f       	sbci	r25, 0xF8	; 248
     65a:	af 4f       	sbci	r26, 0xFF	; 255
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
     662:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
     666:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
     66a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
     66e:	08 95       	ret

00000670 <ultrasonic_hal_trigger_setHigh>:
// IMPLEMENTACIÓN DE LAS FUNCIONES HAL
// -------------------------------------------------------------------------

void ultrasonic_hal_trigger_setHigh(ultrasonic_t *us)
{
	TRIGGER_PORT |= (1 << TRIGGER_PIN);
     670:	2b b1       	in	r18, 0x0b	; 11
     672:	28 60       	ori	r18, 0x08	; 8
     674:	2b b9       	out	0x0b, r18	; 11
	ultrasonic_print(us, "Trigger HIGH");
     676:	61 ea       	ldi	r22, 0xA1	; 161
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
     67e:	08 95       	ret

00000680 <ultrasonic_hal_trigger_setLow>:
}

void ultrasonic_hal_trigger_setLow(ultrasonic_t *us)
{
	TRIGGER_PORT &= ~(1 << TRIGGER_PIN);
     680:	2b b1       	in	r18, 0x0b	; 11
     682:	27 7f       	andi	r18, 0xF7	; 247
     684:	2b b9       	out	0x0b, r18	; 11
	ultrasonic_print(us, "Trigger LOW");
     686:	6e ea       	ldi	r22, 0xAE	; 174
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
     68e:	08 95       	ret

00000690 <ultrasonic_hal_setTrigger_timeout>:
}

void ultrasonic_hal_setTrigger_timeout(ultrasonic_t *us, uint32_t microseconds)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	00 d0       	rcall	.+0      	; 0x696 <ultrasonic_hal_setTrigger_timeout+0x6>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
	ultrasonic_print(&us, "Timeout trigger configurado");
     69e:	6a eb       	ldi	r22, 0xBA	; 186
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <ultrasonic_hal_echo_timeout>:

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <ultrasonic_hal_echo_timeout+0x6>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
	us->TIMEDOUT = 1;
     6c2:	fc 01       	movw	r30, r24
     6c4:	24 85       	ldd	r18, Z+12	; 0x0c
     6c6:	28 60       	ori	r18, 0x08	; 8
     6c8:	24 87       	std	Z+12, r18	; 0x0c
	ultrasonic_print(&us, "Echo timeout");
     6ca:	66 ed       	ldi	r22, 0xD6	; 214
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <ultrasonic_hal_echo_setRisingEdge>:

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
     6e0:	e1 e8       	ldi	r30, 0x81	; 129
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	20 81       	ld	r18, Z
     6e6:	20 64       	ori	r18, 0x40	; 64
     6e8:	20 83       	st	Z, r18
	ultrasonic_print(us, "Captura flanco ascendente");
     6ea:	63 ee       	ldi	r22, 0xE3	; 227
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
     6f2:	08 95       	ret

000006f4 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
     6f4:	e1 e8       	ldi	r30, 0x81	; 129
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	20 81       	ld	r18, Z
     6fa:	2f 7b       	andi	r18, 0xBF	; 191
     6fc:	20 83       	st	Z, r18
	ultrasonic_print(us, "Captura flanco descendente");
     6fe:	6d ef       	ldi	r22, 0xFD	; 253
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
     706:	08 95       	ret

00000708 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
     708:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
     70c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
     710:	88 e1       	ldi	r24, 0x18	; 24
     712:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     71c:	08 95       	ret

0000071e <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
     71e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     722:	95 ff       	sbrs	r25, 5
     724:	fc cf       	rjmp	.-8      	; 0x71e <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
     726:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     72a:	08 95       	ret

0000072c <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
     72c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     730:	88 23       	and	r24, r24
     732:	e4 f7       	brge	.-8      	; 0x72c <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
     734:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     738:	08 95       	ret

0000073a <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
     73a:	cf 93       	push	r28
     73c:	c8 2f       	mov	r28, r24
	if (c == '\n')
     73e:	8a 30       	cpi	r24, 0x0A	; 10
     740:	19 f4       	brne	.+6      	; 0x748 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
     742:	8d e0       	ldi	r24, 0x0D	; 13
     744:	0e 94 8f 03 	call	0x71e	; 0x71e <USART_Transmit>
	USART_Transmit(c);
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 8f 03 	call	0x71e	; 0x71e <USART_Transmit>
	return 0;
}
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
     756:	0e 94 96 03 	call	0x72c	; 0x72c <USART_Receive>
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret

0000075e <ultrasonic_init>:
#include "ultrasonic_hal.h"  // Funciones de bajo nivel (setTriggerHigh, setTriggerLow, etc.)
#include <stddef.h>

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us)
{
     75e:	fc 01       	movw	r30, r24
    us->echo_init_time    = 0;
     760:	10 82       	st	Z, r1
     762:	11 82       	std	Z+1, r1	; 0x01
     764:	12 82       	std	Z+2, r1	; 0x02
     766:	13 82       	std	Z+3, r1	; 0x03
    us->echo_finish_time  = 0;
     768:	14 82       	std	Z+4, r1	; 0x04
     76a:	15 82       	std	Z+5, r1	; 0x05
     76c:	16 82       	std	Z+6, r1	; 0x06
     76e:	17 82       	std	Z+7, r1	; 0x07
    us->distance_mm       = 0;
     770:	10 86       	std	Z+8, r1	; 0x08
     772:	11 86       	std	Z+9, r1	; 0x09
     774:	12 86       	std	Z+10, r1	; 0x0a
     776:	13 86       	std	Z+11, r1	; 0x0b
    us->ALL_FLAGS = 0;
    us->state = ULTRA_IDLE;
     778:	15 86       	std	Z+13, r1	; 0x0d
	us->TRIGGER_ALLOWED = 1;
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	84 87       	std	Z+12, r24	; 0x0c
	us->print_method = NULL;
     77e:	17 86       	std	Z+15, r1	; 0x0f
     780:	16 86       	std	Z+14, r1	; 0x0e
     782:	08 95       	ret

00000784 <ultrasonic_calculate_distance>:
    }
}

// Calcula la distancia en milímetros según el tiempo de pulso
void ultrasonic_calculate_distance(ultrasonic_t *us)
{
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ec 01       	movw	r28, r24
    uint32_t pulse_duration = us->echo_finish_time - us->echo_init_time;
     78e:	8c 81       	ldd	r24, Y+4	; 0x04
     790:	9d 81       	ldd	r25, Y+5	; 0x05
     792:	ae 81       	ldd	r26, Y+6	; 0x06
     794:	bf 81       	ldd	r27, Y+7	; 0x07
     796:	48 81       	ld	r20, Y
     798:	59 81       	ldd	r21, Y+1	; 0x01
     79a:	6a 81       	ldd	r22, Y+2	; 0x02
     79c:	7b 81       	ldd	r23, Y+3	; 0x03
     79e:	8c 01       	movw	r16, r24
     7a0:	9d 01       	movw	r18, r26
     7a2:	04 1b       	sub	r16, r20
     7a4:	15 0b       	sbc	r17, r21
     7a6:	26 0b       	sbc	r18, r22
     7a8:	37 0b       	sbc	r19, r23
     7aa:	b9 01       	movw	r22, r18
     7ac:	a8 01       	movw	r20, r16
    us->distance_mm = (pulse_duration * 34UL) / 400UL;
     7ae:	d9 01       	movw	r26, r18
     7b0:	c8 01       	movw	r24, r16
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	aa 1f       	adc	r26, r26
     7b8:	bb 1f       	adc	r27, r27
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	aa 1f       	adc	r26, r26
     7c0:	bb 1f       	adc	r27, r27
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	aa 1f       	adc	r26, r26
     7c8:	bb 1f       	adc	r27, r27
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	aa 1f       	adc	r26, r26
     7d0:	bb 1f       	adc	r27, r27
     7d2:	8c 01       	movw	r16, r24
     7d4:	9d 01       	movw	r18, r26
     7d6:	04 0f       	add	r16, r20
     7d8:	15 1f       	adc	r17, r21
     7da:	26 1f       	adc	r18, r22
     7dc:	37 1f       	adc	r19, r23
     7de:	c9 01       	movw	r24, r18
     7e0:	b8 01       	movw	r22, r16
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	88 1f       	adc	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	20 e9       	ldi	r18, 0x90	; 144
     7ec:	31 e0       	ldi	r19, 0x01	; 1
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	0e 94 c2 04 	call	0x984	; 0x984 <__udivmodsi4>
     7f6:	28 87       	std	Y+8, r18	; 0x08
     7f8:	39 87       	std	Y+9, r19	; 0x09
     7fa:	4a 87       	std	Y+10, r20	; 0x0a
     7fc:	5b 87       	std	Y+11, r21	; 0x0b
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <ultrasonic_get_distance>:

// Función para que el usuario lea la distancia calculada
uint32_t ultrasonic_get_distance(const ultrasonic_t *us)
{
    return us->distance_mm;
     808:	fc 01       	movw	r30, r24
     80a:	60 85       	ldd	r22, Z+8	; 0x08
     80c:	71 85       	ldd	r23, Z+9	; 0x09
     80e:	82 85       	ldd	r24, Z+10	; 0x0a
     810:	93 85       	ldd	r25, Z+11	; 0x0b
}
     812:	08 95       	ret

00000814 <ultrasonic_set_print_method>:
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
     814:	fc 01       	movw	r30, r24
     816:	77 87       	std	Z+15, r23	; 0x0f
     818:	66 87       	std	Z+14, r22	; 0x0e
     81a:	08 95       	ret

0000081c <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
     81c:	dc 01       	movw	r26, r24
     81e:	1e 96       	adiw	r26, 0x0e	; 14
     820:	ed 91       	ld	r30, X+
     822:	fc 91       	ld	r31, X
     824:	1f 97       	sbiw	r26, 0x0f	; 15
     826:	30 97       	sbiw	r30, 0x00	; 0
     828:	11 f0       	breq	.+4      	; 0x82e <ultrasonic_print+0x12>
     82a:	cb 01       	movw	r24, r22
		us->print_method(message);
     82c:	09 95       	icall
     82e:	08 95       	ret

00000830 <ultrasonic_start>:
	us->print_method = NULL;
}

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
	// Solo inicias si el sensor está en reposo o finalizado
	if (us->state == ULTRA_IDLE || us->state == ULTRA_DONE || us->state == ULTRA_TIMEOUT) {
     834:	fc 01       	movw	r30, r24
     836:	25 85       	ldd	r18, Z+13	; 0x0d
     838:	22 23       	and	r18, r18
     83a:	21 f0       	breq	.+8      	; 0x844 <ultrasonic_start+0x14>
     83c:	25 30       	cpi	r18, 0x05	; 5
     83e:	11 f0       	breq	.+4      	; 0x844 <ultrasonic_start+0x14>
     840:	26 30       	cpi	r18, 0x06	; 6
     842:	71 f4       	brne	.+28     	; 0x860 <ultrasonic_start+0x30>
     844:	ec 01       	movw	r28, r24
		us->ALL_FLAGS = 0;
		us->DO_TRIGGER = 1;        // Bandera de solicitud de disparo
     846:	81 e0       	ldi	r24, 0x01	; 1
		us->TRIGGER_ALLOWED = 1;
     848:	91 e2       	ldi	r25, 0x21	; 33
		us->TRIGGER_FINISH = 0;    // Asegurar en 0
		us->CALCULATE_DISTANCE = 0;
		us->TIMEDOUT = 0;
     84a:	9c 87       	std	Y+12, r25	; 0x0c
		us->state = ULTRA_TRIGGERING;
     84c:	8d 87       	std	Y+13, r24	; 0x0d
		ultrasonic_hal_echo_setRisingEdge();
     84e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <ultrasonic_hal_echo_setRisingEdge>
		ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
     852:	68 e1       	ldi	r22, 0x18	; 24
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	ce 01       	movw	r24, r28
     858:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
		return true;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	01 c0       	rjmp	.+2      	; 0x862 <ultrasonic_start+0x32>
	}else{
		return false;
     860:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <ultrasonic_update+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
    switch (us->state)
     876:	fc 01       	movw	r30, r24
     878:	95 85       	ldd	r25, Z+13	; 0x0d
     87a:	92 30       	cpi	r25, 0x02	; 2
     87c:	d9 f1       	breq	.+118    	; 0x8f4 <ultrasonic_update+0x8c>
     87e:	30 f4       	brcc	.+12     	; 0x88c <ultrasonic_update+0x24>
     880:	99 23       	and	r25, r25
     882:	09 f4       	brne	.+2      	; 0x886 <ultrasonic_update+0x1e>
     884:	7a c0       	rjmp	.+244    	; 0x97a <__stack+0x7b>
     886:	91 30       	cpi	r25, 0x01	; 1
     888:	51 f0       	breq	.+20     	; 0x89e <ultrasonic_update+0x36>
     88a:	74 c0       	rjmp	.+232    	; 0x974 <__stack+0x75>
     88c:	94 30       	cpi	r25, 0x04	; 4
     88e:	09 f4       	brne	.+2      	; 0x892 <ultrasonic_update+0x2a>
     890:	5c c0       	rjmp	.+184    	; 0x94a <__stack+0x4b>
     892:	08 f4       	brcc	.+2      	; 0x896 <ultrasonic_update+0x2e>
     894:	43 c0       	rjmp	.+134    	; 0x91c <__stack+0x1d>
     896:	95 30       	cpi	r25, 0x05	; 5
     898:	09 f4       	brne	.+2      	; 0x89c <ultrasonic_update+0x34>
     89a:	6f c0       	rjmp	.+222    	; 0x97a <__stack+0x7b>
     89c:	6b c0       	rjmp	.+214    	; 0x974 <__stack+0x75>
			// Espera a que ultrasonic_start() lo saque de este estado
			break;
		}
        case ULTRA_TRIGGERING:
        {
			if(us->DO_TRIGGER){
     89e:	84 85       	ldd	r24, Z+12	; 0x0c
     8a0:	80 ff       	sbrs	r24, 0
     8a2:	16 c0       	rjmp	.+44     	; 0x8d0 <ultrasonic_update+0x68>
				ultrasonic_hal_trigger_setHigh();
     8a4:	0e 94 38 03 	call	0x670	; 0x670 <ultrasonic_hal_trigger_setHigh>
				ultrasonic_hal_setTrigger_timeout(&us, ULTRA_TRIGGER_PULSE_US);
     8a8:	4a e0       	ldi	r20, 0x0A	; 10
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	ce 01       	movw	r24, r28
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	0e 94 48 03 	call	0x690	; 0x690 <ultrasonic_hal_setTrigger_timeout>
				us->DO_TRIGGER = 0;
     8b8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ba:	fa 81       	ldd	r31, Y+2	; 0x02
     8bc:	94 85       	ldd	r25, Z+12	; 0x0c
				us->TRIGGER_ALLOWED = 0; //Ahora empieza a correr el timer de 70ms entre triggers
     8be:	9e 7f       	andi	r25, 0xFE	; 254
     8c0:	9f 7d       	andi	r25, 0xDF	; 223
     8c2:	94 87       	std	Z+12, r25	; 0x0c
				ultrasonic_print(us, "LIB DEBUG - Hizo trigger");
     8c4:	64 e3       	ldi	r22, 0x34	; 52
     8c6:	72 e0       	ldi	r23, 0x02	; 2
     8c8:	cf 01       	movw	r24, r30
     8ca:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
     8ce:	55 c0       	rjmp	.+170    	; 0x97a <__stack+0x7b>
			}else if(us->TRIGGER_FINISH){ //Activado desde afuera de la liberia
     8d0:	81 ff       	sbrs	r24, 1
     8d2:	53 c0       	rjmp	.+166    	; 0x97a <__stack+0x7b>
				ultrasonic_hal_trigger_setLow();
     8d4:	0e 94 40 03 	call	0x680	; 0x680 <ultrasonic_hal_trigger_setLow>
				ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH alto detectado en lib");
     8d8:	6d e4       	ldi	r22, 0x4D	; 77
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
				us->state = ULTRA_WAIT_RISING;
     8e4:	e9 81       	ldd	r30, Y+1	; 0x01
     8e6:	fa 81       	ldd	r31, Y+2	; 0x02
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	85 87       	std	Z+13, r24	; 0x0d
				us->ECHO_RISING = 1; //Seteo bandera en alto desde que termino de emitir
     8ec:	84 85       	ldd	r24, Z+12	; 0x0c
     8ee:	80 61       	ori	r24, 0x10	; 16
     8f0:	84 87       	std	Z+12, r24	; 0x0c
     8f2:	43 c0       	rjmp	.+134    	; 0x97a <__stack+0x7b>
            break;
        }
        case ULTRA_WAIT_RISING:
        {
            //HAL será la que detecte flanco y llene us->echo_init_time
            if (!us->ECHO_RISING) { //Bandera desactivada desde afuera para marcar que se guardo init time
     8f4:	84 85       	ldd	r24, Z+12	; 0x0c
     8f6:	84 fd       	sbrc	r24, 4
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
                us->state = ULTRA_WAIT_FALLING;
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	85 87       	std	Z+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
     8fe:	6e e7       	ldi	r22, 0x7E	; 126
     900:	72 e0       	ldi	r23, 0x02	; 2
     902:	cf 01       	movw	r24, r30
     904:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
				ultrasonic_hal_echo_setFallingEdge();
     908:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ultrasonic_hal_echo_setFallingEdge>
            }
			if (us->TIMEDOUT) {
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	84 85       	ldd	r24, Z+12	; 0x0c
     912:	83 ff       	sbrs	r24, 3
     914:	32 c0       	rjmp	.+100    	; 0x97a <__stack+0x7b>
				us->state = ULTRA_TIMEOUT;
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	85 87       	std	Z+13, r24	; 0x0d
     91a:	2f c0       	rjmp	.+94     	; 0x97a <__stack+0x7b>
            break;
        }
        case ULTRA_WAIT_FALLING:
        {
            //HAL será la que detecte flanco y llene us->echo_finish_time
			if(us->ECHO_RECEIVED){ //Bandera activada desde afuera para marcar que se guardo finish time
     91c:	84 85       	ldd	r24, Z+12	; 0x0c
     91e:	86 ff       	sbrs	r24, 6
     920:	0c c0       	rjmp	.+24     	; 0x93a <__stack+0x3b>
				us->state = ULTRA_CALCULATING;
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	85 87       	std	Z+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
     926:	6b e9       	ldi	r22, 0x9B	; 155
     928:	72 e0       	ldi	r23, 0x02	; 2
     92a:	cf 01       	movw	r24, r30
     92c:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
				us->CALCULATE_DISTANCE = 1;
     930:	e9 81       	ldd	r30, Y+1	; 0x01
     932:	fa 81       	ldd	r31, Y+2	; 0x02
     934:	84 85       	ldd	r24, Z+12	; 0x0c
     936:	84 60       	ori	r24, 0x04	; 4
     938:	84 87       	std	Z+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
     93a:	e9 81       	ldd	r30, Y+1	; 0x01
     93c:	fa 81       	ldd	r31, Y+2	; 0x02
     93e:	84 85       	ldd	r24, Z+12	; 0x0c
     940:	83 ff       	sbrs	r24, 3
     942:	1b c0       	rjmp	.+54     	; 0x97a <__stack+0x7b>
				us->state = ULTRA_TIMEOUT;
     944:	86 e0       	ldi	r24, 0x06	; 6
     946:	85 87       	std	Z+13, r24	; 0x0d
     948:	18 c0       	rjmp	.+48     	; 0x97a <__stack+0x7b>
			}
            break;
        }
		case ULTRA_CALCULATING: 
		{
			if (us->CALCULATE_DISTANCE) { //Asi solo calcula una vez y queda registro
     94a:	84 85       	ldd	r24, Z+12	; 0x0c
     94c:	82 ff       	sbrs	r24, 2
     94e:	15 c0       	rjmp	.+42     	; 0x97a <__stack+0x7b>
				ultrasonic_calculate_distance(us); //Calcular y guardar
     950:	cf 01       	movw	r24, r30
     952:	0e 94 c2 03 	call	0x784	; 0x784 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0; //No volver a pasar por aca
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	9a 81       	ldd	r25, Y+2	; 0x02
     95a:	fc 01       	movw	r30, r24
     95c:	24 85       	ldd	r18, Z+12	; 0x0c
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	24 87       	std	Z+12, r18	; 0x0c
				ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
     962:	62 eb       	ldi	r22, 0xB2	; 178
     964:	72 e0       	ldi	r23, 0x02	; 2
     966:	0e 94 0e 04 	call	0x81c	; 0x81c <ultrasonic_print>
				us->state = ULTRA_DONE; //Estado finalizado, aca leer el valor de distance_mm
     96a:	e9 81       	ldd	r30, Y+1	; 0x01
     96c:	fa 81       	ldd	r31, Y+2	; 0x02
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	85 87       	std	Z+13, r24	; 0x0d
     972:	03 c0       	rjmp	.+6      	; 0x97a <__stack+0x7b>
            break;
        }
        // Posibles estados adicionales
        case ULTRA_TIMEOUT:
        default:
            us->TIMEDOUT = 1; //Bandera para saber si perdio el rebote
     974:	84 85       	ldd	r24, Z+12	; 0x0c
     976:	88 60       	ori	r24, 0x08	; 8
     978:	84 87       	std	Z+12, r24	; 0x0c
            break;
    }
}
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <__udivmodsi4>:
     984:	a1 e2       	ldi	r26, 0x21	; 33
     986:	1a 2e       	mov	r1, r26
     988:	aa 1b       	sub	r26, r26
     98a:	bb 1b       	sub	r27, r27
     98c:	fd 01       	movw	r30, r26
     98e:	0d c0       	rjmp	.+26     	; 0x9aa <__udivmodsi4_ep>

00000990 <__udivmodsi4_loop>:
     990:	aa 1f       	adc	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	ee 1f       	adc	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	a2 17       	cp	r26, r18
     99a:	b3 07       	cpc	r27, r19
     99c:	e4 07       	cpc	r30, r20
     99e:	f5 07       	cpc	r31, r21
     9a0:	20 f0       	brcs	.+8      	; 0x9aa <__udivmodsi4_ep>
     9a2:	a2 1b       	sub	r26, r18
     9a4:	b3 0b       	sbc	r27, r19
     9a6:	e4 0b       	sbc	r30, r20
     9a8:	f5 0b       	sbc	r31, r21

000009aa <__udivmodsi4_ep>:
     9aa:	66 1f       	adc	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	88 1f       	adc	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	1a 94       	dec	r1
     9b4:	69 f7       	brne	.-38     	; 0x990 <__udivmodsi4_loop>
     9b6:	60 95       	com	r22
     9b8:	70 95       	com	r23
     9ba:	80 95       	com	r24
     9bc:	90 95       	com	r25
     9be:	9b 01       	movw	r18, r22
     9c0:	ac 01       	movw	r20, r24
     9c2:	bd 01       	movw	r22, r26
     9c4:	cf 01       	movw	r24, r30
     9c6:	08 95       	ret

000009c8 <__umulhisi3>:
     9c8:	a2 9f       	mul	r26, r18
     9ca:	b0 01       	movw	r22, r0
     9cc:	b3 9f       	mul	r27, r19
     9ce:	c0 01       	movw	r24, r0
     9d0:	a3 9f       	mul	r26, r19
     9d2:	70 0d       	add	r23, r0
     9d4:	81 1d       	adc	r24, r1
     9d6:	11 24       	eor	r1, r1
     9d8:	91 1d       	adc	r25, r1
     9da:	b2 9f       	mul	r27, r18
     9dc:	70 0d       	add	r23, r0
     9de:	81 1d       	adc	r24, r1
     9e0:	11 24       	eor	r1, r1
     9e2:	91 1d       	adc	r25, r1
     9e4:	08 95       	ret

000009e6 <printf>:
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__prologue_saves__+0x20>
     9f2:	ae 01       	movw	r20, r28
     9f4:	4b 5f       	subi	r20, 0xFB	; 251
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	fa 01       	movw	r30, r20
     9fa:	61 91       	ld	r22, Z+
     9fc:	71 91       	ld	r23, Z+
     9fe:	af 01       	movw	r20, r30
     a00:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <__iob+0x2>
     a04:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <__iob+0x3>
     a08:	0e 94 39 05 	call	0xa72	; 0xa72 <vfprintf>
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__epilogue_restores__+0x20>

00000a12 <puts>:
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <__iob+0x2>
     a1e:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <__iob+0x3>
     a22:	23 81       	ldd	r18, Z+3	; 0x03
     a24:	21 ff       	sbrs	r18, 1
     a26:	1b c0       	rjmp	.+54     	; 0xa5e <puts+0x4c>
     a28:	8c 01       	movw	r16, r24
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	f8 01       	movw	r30, r16
     a30:	81 91       	ld	r24, Z+
     a32:	8f 01       	movw	r16, r30
     a34:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <__iob+0x2>
     a38:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <__iob+0x3>
     a3c:	db 01       	movw	r26, r22
     a3e:	18 96       	adiw	r26, 0x08	; 8
     a40:	ed 91       	ld	r30, X+
     a42:	fc 91       	ld	r31, X
     a44:	19 97       	sbiw	r26, 0x09	; 9
     a46:	88 23       	and	r24, r24
     a48:	31 f0       	breq	.+12     	; 0xa56 <puts+0x44>
     a4a:	09 95       	icall
     a4c:	89 2b       	or	r24, r25
     a4e:	79 f3       	breq	.-34     	; 0xa2e <puts+0x1c>
     a50:	df ef       	ldi	r29, 0xFF	; 255
     a52:	cf ef       	ldi	r28, 0xFF	; 255
     a54:	ec cf       	rjmp	.-40     	; 0xa2e <puts+0x1c>
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	09 95       	icall
     a5a:	89 2b       	or	r24, r25
     a5c:	19 f0       	breq	.+6      	; 0xa64 <puts+0x52>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	9f ef       	ldi	r25, 0xFF	; 255
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <puts+0x56>
     a64:	8d 2f       	mov	r24, r29
     a66:	9c 2f       	mov	r25, r28
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	08 95       	ret

00000a72 <vfprintf>:
     a72:	ab e0       	ldi	r26, 0x0B	; 11
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	ef e3       	ldi	r30, 0x3F	; 63
     a78:	f5 e0       	ldi	r31, 0x05	; 5
     a7a:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__prologue_saves__>
     a7e:	6c 01       	movw	r12, r24
     a80:	7b 01       	movw	r14, r22
     a82:	8a 01       	movw	r16, r20
     a84:	fc 01       	movw	r30, r24
     a86:	17 82       	std	Z+7, r1	; 0x07
     a88:	16 82       	std	Z+6, r1	; 0x06
     a8a:	83 81       	ldd	r24, Z+3	; 0x03
     a8c:	81 ff       	sbrs	r24, 1
     a8e:	cc c1       	rjmp	.+920    	; 0xe28 <vfprintf+0x3b6>
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	3c 01       	movw	r6, r24
     a96:	f6 01       	movw	r30, r12
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	f7 01       	movw	r30, r14
     a9c:	93 fd       	sbrc	r25, 3
     a9e:	85 91       	lpm	r24, Z+
     aa0:	93 ff       	sbrs	r25, 3
     aa2:	81 91       	ld	r24, Z+
     aa4:	7f 01       	movw	r14, r30
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <vfprintf+0x3a>
     aaa:	ba c1       	rjmp	.+884    	; 0xe20 <vfprintf+0x3ae>
     aac:	85 32       	cpi	r24, 0x25	; 37
     aae:	39 f4       	brne	.+14     	; 0xabe <vfprintf+0x4c>
     ab0:	93 fd       	sbrc	r25, 3
     ab2:	85 91       	lpm	r24, Z+
     ab4:	93 ff       	sbrs	r25, 3
     ab6:	81 91       	ld	r24, Z+
     ab8:	7f 01       	movw	r14, r30
     aba:	85 32       	cpi	r24, 0x25	; 37
     abc:	29 f4       	brne	.+10     	; 0xac8 <vfprintf+0x56>
     abe:	b6 01       	movw	r22, r12
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     ac6:	e7 cf       	rjmp	.-50     	; 0xa96 <vfprintf+0x24>
     ac8:	91 2c       	mov	r9, r1
     aca:	21 2c       	mov	r2, r1
     acc:	31 2c       	mov	r3, r1
     ace:	ff e1       	ldi	r31, 0x1F	; 31
     ad0:	f3 15       	cp	r31, r3
     ad2:	d8 f0       	brcs	.+54     	; 0xb0a <vfprintf+0x98>
     ad4:	8b 32       	cpi	r24, 0x2B	; 43
     ad6:	79 f0       	breq	.+30     	; 0xaf6 <vfprintf+0x84>
     ad8:	38 f4       	brcc	.+14     	; 0xae8 <vfprintf+0x76>
     ada:	80 32       	cpi	r24, 0x20	; 32
     adc:	79 f0       	breq	.+30     	; 0xafc <vfprintf+0x8a>
     ade:	83 32       	cpi	r24, 0x23	; 35
     ae0:	a1 f4       	brne	.+40     	; 0xb0a <vfprintf+0x98>
     ae2:	23 2d       	mov	r18, r3
     ae4:	20 61       	ori	r18, 0x10	; 16
     ae6:	1d c0       	rjmp	.+58     	; 0xb22 <vfprintf+0xb0>
     ae8:	8d 32       	cpi	r24, 0x2D	; 45
     aea:	61 f0       	breq	.+24     	; 0xb04 <vfprintf+0x92>
     aec:	80 33       	cpi	r24, 0x30	; 48
     aee:	69 f4       	brne	.+26     	; 0xb0a <vfprintf+0x98>
     af0:	23 2d       	mov	r18, r3
     af2:	21 60       	ori	r18, 0x01	; 1
     af4:	16 c0       	rjmp	.+44     	; 0xb22 <vfprintf+0xb0>
     af6:	83 2d       	mov	r24, r3
     af8:	82 60       	ori	r24, 0x02	; 2
     afa:	38 2e       	mov	r3, r24
     afc:	e3 2d       	mov	r30, r3
     afe:	e4 60       	ori	r30, 0x04	; 4
     b00:	3e 2e       	mov	r3, r30
     b02:	2a c0       	rjmp	.+84     	; 0xb58 <vfprintf+0xe6>
     b04:	f3 2d       	mov	r31, r3
     b06:	f8 60       	ori	r31, 0x08	; 8
     b08:	1d c0       	rjmp	.+58     	; 0xb44 <vfprintf+0xd2>
     b0a:	37 fc       	sbrc	r3, 7
     b0c:	2d c0       	rjmp	.+90     	; 0xb68 <vfprintf+0xf6>
     b0e:	20 ed       	ldi	r18, 0xD0	; 208
     b10:	28 0f       	add	r18, r24
     b12:	2a 30       	cpi	r18, 0x0A	; 10
     b14:	40 f0       	brcs	.+16     	; 0xb26 <vfprintf+0xb4>
     b16:	8e 32       	cpi	r24, 0x2E	; 46
     b18:	b9 f4       	brne	.+46     	; 0xb48 <vfprintf+0xd6>
     b1a:	36 fc       	sbrc	r3, 6
     b1c:	81 c1       	rjmp	.+770    	; 0xe20 <vfprintf+0x3ae>
     b1e:	23 2d       	mov	r18, r3
     b20:	20 64       	ori	r18, 0x40	; 64
     b22:	32 2e       	mov	r3, r18
     b24:	19 c0       	rjmp	.+50     	; 0xb58 <vfprintf+0xe6>
     b26:	36 fe       	sbrs	r3, 6
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <vfprintf+0xc4>
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	98 9e       	mul	r9, r24
     b2e:	20 0d       	add	r18, r0
     b30:	11 24       	eor	r1, r1
     b32:	92 2e       	mov	r9, r18
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <vfprintf+0xe6>
     b36:	ea e0       	ldi	r30, 0x0A	; 10
     b38:	2e 9e       	mul	r2, r30
     b3a:	20 0d       	add	r18, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	22 2e       	mov	r2, r18
     b40:	f3 2d       	mov	r31, r3
     b42:	f0 62       	ori	r31, 0x20	; 32
     b44:	3f 2e       	mov	r3, r31
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0xe6>
     b48:	8c 36       	cpi	r24, 0x6C	; 108
     b4a:	21 f4       	brne	.+8      	; 0xb54 <vfprintf+0xe2>
     b4c:	83 2d       	mov	r24, r3
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	38 2e       	mov	r3, r24
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0xe6>
     b54:	88 36       	cpi	r24, 0x68	; 104
     b56:	41 f4       	brne	.+16     	; 0xb68 <vfprintf+0xf6>
     b58:	f7 01       	movw	r30, r14
     b5a:	93 fd       	sbrc	r25, 3
     b5c:	85 91       	lpm	r24, Z+
     b5e:	93 ff       	sbrs	r25, 3
     b60:	81 91       	ld	r24, Z+
     b62:	7f 01       	movw	r14, r30
     b64:	81 11       	cpse	r24, r1
     b66:	b3 cf       	rjmp	.-154    	; 0xace <vfprintf+0x5c>
     b68:	98 2f       	mov	r25, r24
     b6a:	9f 7d       	andi	r25, 0xDF	; 223
     b6c:	95 54       	subi	r25, 0x45	; 69
     b6e:	93 30       	cpi	r25, 0x03	; 3
     b70:	28 f4       	brcc	.+10     	; 0xb7c <vfprintf+0x10a>
     b72:	0c 5f       	subi	r16, 0xFC	; 252
     b74:	1f 4f       	sbci	r17, 0xFF	; 255
     b76:	9f e3       	ldi	r25, 0x3F	; 63
     b78:	99 83       	std	Y+1, r25	; 0x01
     b7a:	0d c0       	rjmp	.+26     	; 0xb96 <vfprintf+0x124>
     b7c:	83 36       	cpi	r24, 0x63	; 99
     b7e:	31 f0       	breq	.+12     	; 0xb8c <vfprintf+0x11a>
     b80:	83 37       	cpi	r24, 0x73	; 115
     b82:	71 f0       	breq	.+28     	; 0xba0 <vfprintf+0x12e>
     b84:	83 35       	cpi	r24, 0x53	; 83
     b86:	09 f0       	breq	.+2      	; 0xb8a <vfprintf+0x118>
     b88:	59 c0       	rjmp	.+178    	; 0xc3c <vfprintf+0x1ca>
     b8a:	21 c0       	rjmp	.+66     	; 0xbce <vfprintf+0x15c>
     b8c:	f8 01       	movw	r30, r16
     b8e:	80 81       	ld	r24, Z
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	0e 5f       	subi	r16, 0xFE	; 254
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	88 24       	eor	r8, r8
     b98:	83 94       	inc	r8
     b9a:	91 2c       	mov	r9, r1
     b9c:	53 01       	movw	r10, r6
     b9e:	13 c0       	rjmp	.+38     	; 0xbc6 <vfprintf+0x154>
     ba0:	28 01       	movw	r4, r16
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	4f 0e       	add	r4, r31
     ba6:	51 1c       	adc	r5, r1
     ba8:	f8 01       	movw	r30, r16
     baa:	a0 80       	ld	r10, Z
     bac:	b1 80       	ldd	r11, Z+1	; 0x01
     bae:	36 fe       	sbrs	r3, 6
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x146>
     bb2:	69 2d       	mov	r22, r9
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x14a>
     bb8:	6f ef       	ldi	r22, 0xFF	; 255
     bba:	7f ef       	ldi	r23, 0xFF	; 255
     bbc:	c5 01       	movw	r24, r10
     bbe:	0e 94 25 07 	call	0xe4a	; 0xe4a <strnlen>
     bc2:	4c 01       	movw	r8, r24
     bc4:	82 01       	movw	r16, r4
     bc6:	f3 2d       	mov	r31, r3
     bc8:	ff 77       	andi	r31, 0x7F	; 127
     bca:	3f 2e       	mov	r3, r31
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <vfprintf+0x188>
     bce:	28 01       	movw	r4, r16
     bd0:	22 e0       	ldi	r18, 0x02	; 2
     bd2:	42 0e       	add	r4, r18
     bd4:	51 1c       	adc	r5, r1
     bd6:	f8 01       	movw	r30, r16
     bd8:	a0 80       	ld	r10, Z
     bda:	b1 80       	ldd	r11, Z+1	; 0x01
     bdc:	36 fe       	sbrs	r3, 6
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <vfprintf+0x174>
     be0:	69 2d       	mov	r22, r9
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0x178>
     be6:	6f ef       	ldi	r22, 0xFF	; 255
     be8:	7f ef       	ldi	r23, 0xFF	; 255
     bea:	c5 01       	movw	r24, r10
     bec:	0e 94 1a 07 	call	0xe34	; 0xe34 <strnlen_P>
     bf0:	4c 01       	movw	r8, r24
     bf2:	f3 2d       	mov	r31, r3
     bf4:	f0 68       	ori	r31, 0x80	; 128
     bf6:	3f 2e       	mov	r3, r31
     bf8:	82 01       	movw	r16, r4
     bfa:	33 fc       	sbrc	r3, 3
     bfc:	1b c0       	rjmp	.+54     	; 0xc34 <vfprintf+0x1c2>
     bfe:	82 2d       	mov	r24, r2
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 16       	cp	r8, r24
     c04:	99 06       	cpc	r9, r25
     c06:	b0 f4       	brcc	.+44     	; 0xc34 <vfprintf+0x1c2>
     c08:	b6 01       	movw	r22, r12
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     c12:	2a 94       	dec	r2
     c14:	f4 cf       	rjmp	.-24     	; 0xbfe <vfprintf+0x18c>
     c16:	f5 01       	movw	r30, r10
     c18:	37 fc       	sbrc	r3, 7
     c1a:	85 91       	lpm	r24, Z+
     c1c:	37 fe       	sbrs	r3, 7
     c1e:	81 91       	ld	r24, Z+
     c20:	5f 01       	movw	r10, r30
     c22:	b6 01       	movw	r22, r12
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     c2a:	21 10       	cpse	r2, r1
     c2c:	2a 94       	dec	r2
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	82 1a       	sub	r8, r18
     c32:	91 08       	sbc	r9, r1
     c34:	81 14       	cp	r8, r1
     c36:	91 04       	cpc	r9, r1
     c38:	71 f7       	brne	.-36     	; 0xc16 <vfprintf+0x1a4>
     c3a:	e8 c0       	rjmp	.+464    	; 0xe0c <vfprintf+0x39a>
     c3c:	84 36       	cpi	r24, 0x64	; 100
     c3e:	11 f0       	breq	.+4      	; 0xc44 <vfprintf+0x1d2>
     c40:	89 36       	cpi	r24, 0x69	; 105
     c42:	41 f5       	brne	.+80     	; 0xc94 <vfprintf+0x222>
     c44:	f8 01       	movw	r30, r16
     c46:	37 fe       	sbrs	r3, 7
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <vfprintf+0x1e6>
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	0c 5f       	subi	r16, 0xFC	; 252
     c54:	1f 4f       	sbci	r17, 0xFF	; 255
     c56:	08 c0       	rjmp	.+16     	; 0xc68 <vfprintf+0x1f6>
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	07 2e       	mov	r0, r23
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 5f       	subi	r16, 0xFE	; 254
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	f3 2d       	mov	r31, r3
     c6a:	ff 76       	andi	r31, 0x6F	; 111
     c6c:	3f 2e       	mov	r3, r31
     c6e:	97 ff       	sbrs	r25, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x212>
     c72:	90 95       	com	r25
     c74:	80 95       	com	r24
     c76:	70 95       	com	r23
     c78:	61 95       	neg	r22
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	8f 4f       	sbci	r24, 0xFF	; 255
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	f0 68       	ori	r31, 0x80	; 128
     c82:	3f 2e       	mov	r3, r31
     c84:	2a e0       	ldi	r18, 0x0A	; 10
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	a3 01       	movw	r20, r6
     c8a:	0e 94 6c 07 	call	0xed8	; 0xed8 <__ultoa_invert>
     c8e:	88 2e       	mov	r8, r24
     c90:	86 18       	sub	r8, r6
     c92:	45 c0       	rjmp	.+138    	; 0xd1e <vfprintf+0x2ac>
     c94:	85 37       	cpi	r24, 0x75	; 117
     c96:	31 f4       	brne	.+12     	; 0xca4 <vfprintf+0x232>
     c98:	23 2d       	mov	r18, r3
     c9a:	2f 7e       	andi	r18, 0xEF	; 239
     c9c:	b2 2e       	mov	r11, r18
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	25 c0       	rjmp	.+74     	; 0xcee <vfprintf+0x27c>
     ca4:	93 2d       	mov	r25, r3
     ca6:	99 7f       	andi	r25, 0xF9	; 249
     ca8:	b9 2e       	mov	r11, r25
     caa:	8f 36       	cpi	r24, 0x6F	; 111
     cac:	c1 f0       	breq	.+48     	; 0xcde <vfprintf+0x26c>
     cae:	18 f4       	brcc	.+6      	; 0xcb6 <vfprintf+0x244>
     cb0:	88 35       	cpi	r24, 0x58	; 88
     cb2:	79 f0       	breq	.+30     	; 0xcd2 <vfprintf+0x260>
     cb4:	b5 c0       	rjmp	.+362    	; 0xe20 <vfprintf+0x3ae>
     cb6:	80 37       	cpi	r24, 0x70	; 112
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <vfprintf+0x24e>
     cba:	88 37       	cpi	r24, 0x78	; 120
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <vfprintf+0x254>
     cbe:	b0 c0       	rjmp	.+352    	; 0xe20 <vfprintf+0x3ae>
     cc0:	e9 2f       	mov	r30, r25
     cc2:	e0 61       	ori	r30, 0x10	; 16
     cc4:	be 2e       	mov	r11, r30
     cc6:	b4 fe       	sbrs	r11, 4
     cc8:	0d c0       	rjmp	.+26     	; 0xce4 <vfprintf+0x272>
     cca:	fb 2d       	mov	r31, r11
     ccc:	f4 60       	ori	r31, 0x04	; 4
     cce:	bf 2e       	mov	r11, r31
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <vfprintf+0x272>
     cd2:	34 fe       	sbrs	r3, 4
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <vfprintf+0x278>
     cd6:	29 2f       	mov	r18, r25
     cd8:	26 60       	ori	r18, 0x06	; 6
     cda:	b2 2e       	mov	r11, r18
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x278>
     cde:	28 e0       	ldi	r18, 0x08	; 8
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <vfprintf+0x27c>
     ce4:	20 e1       	ldi	r18, 0x10	; 16
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x27c>
     cea:	20 e1       	ldi	r18, 0x10	; 16
     cec:	32 e0       	ldi	r19, 0x02	; 2
     cee:	f8 01       	movw	r30, r16
     cf0:	b7 fe       	sbrs	r11, 7
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <vfprintf+0x290>
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	0c 5f       	subi	r16, 0xFC	; 252
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0x29c>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 5f       	subi	r16, 0xFE	; 254
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	a3 01       	movw	r20, r6
     d10:	0e 94 6c 07 	call	0xed8	; 0xed8 <__ultoa_invert>
     d14:	88 2e       	mov	r8, r24
     d16:	86 18       	sub	r8, r6
     d18:	fb 2d       	mov	r31, r11
     d1a:	ff 77       	andi	r31, 0x7F	; 127
     d1c:	3f 2e       	mov	r3, r31
     d1e:	36 fe       	sbrs	r3, 6
     d20:	0d c0       	rjmp	.+26     	; 0xd3c <vfprintf+0x2ca>
     d22:	23 2d       	mov	r18, r3
     d24:	2e 7f       	andi	r18, 0xFE	; 254
     d26:	a2 2e       	mov	r10, r18
     d28:	89 14       	cp	r8, r9
     d2a:	58 f4       	brcc	.+22     	; 0xd42 <vfprintf+0x2d0>
     d2c:	34 fe       	sbrs	r3, 4
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <vfprintf+0x2d4>
     d30:	32 fc       	sbrc	r3, 2
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <vfprintf+0x2d4>
     d34:	83 2d       	mov	r24, r3
     d36:	8e 7e       	andi	r24, 0xEE	; 238
     d38:	a8 2e       	mov	r10, r24
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <vfprintf+0x2d4>
     d3c:	b8 2c       	mov	r11, r8
     d3e:	a3 2c       	mov	r10, r3
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <vfprintf+0x2d6>
     d42:	b8 2c       	mov	r11, r8
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <vfprintf+0x2d6>
     d46:	b9 2c       	mov	r11, r9
     d48:	a4 fe       	sbrs	r10, 4
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <vfprintf+0x2f8>
     d4c:	fe 01       	movw	r30, r28
     d4e:	e8 0d       	add	r30, r8
     d50:	f1 1d       	adc	r31, r1
     d52:	80 81       	ld	r24, Z
     d54:	80 33       	cpi	r24, 0x30	; 48
     d56:	21 f4       	brne	.+8      	; 0xd60 <vfprintf+0x2ee>
     d58:	9a 2d       	mov	r25, r10
     d5a:	99 7e       	andi	r25, 0xE9	; 233
     d5c:	a9 2e       	mov	r10, r25
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x300>
     d60:	a2 fe       	sbrs	r10, 2
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <vfprintf+0x2fe>
     d64:	b3 94       	inc	r11
     d66:	b3 94       	inc	r11
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <vfprintf+0x300>
     d6a:	8a 2d       	mov	r24, r10
     d6c:	86 78       	andi	r24, 0x86	; 134
     d6e:	09 f0       	breq	.+2      	; 0xd72 <vfprintf+0x300>
     d70:	b3 94       	inc	r11
     d72:	a3 fc       	sbrc	r10, 3
     d74:	11 c0       	rjmp	.+34     	; 0xd98 <vfprintf+0x326>
     d76:	a0 fe       	sbrs	r10, 0
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0x314>
     d7a:	b2 14       	cp	r11, r2
     d7c:	88 f4       	brcc	.+34     	; 0xda0 <vfprintf+0x32e>
     d7e:	28 0c       	add	r2, r8
     d80:	92 2c       	mov	r9, r2
     d82:	9b 18       	sub	r9, r11
     d84:	0e c0       	rjmp	.+28     	; 0xda2 <vfprintf+0x330>
     d86:	b2 14       	cp	r11, r2
     d88:	60 f4       	brcc	.+24     	; 0xda2 <vfprintf+0x330>
     d8a:	b6 01       	movw	r22, r12
     d8c:	80 e2       	ldi	r24, 0x20	; 32
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     d94:	b3 94       	inc	r11
     d96:	f7 cf       	rjmp	.-18     	; 0xd86 <vfprintf+0x314>
     d98:	b2 14       	cp	r11, r2
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <vfprintf+0x330>
     d9c:	2b 18       	sub	r2, r11
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x332>
     da0:	98 2c       	mov	r9, r8
     da2:	21 2c       	mov	r2, r1
     da4:	a4 fe       	sbrs	r10, 4
     da6:	10 c0       	rjmp	.+32     	; 0xdc8 <vfprintf+0x356>
     da8:	b6 01       	movw	r22, r12
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     db2:	a2 fe       	sbrs	r10, 2
     db4:	17 c0       	rjmp	.+46     	; 0xde4 <vfprintf+0x372>
     db6:	a1 fc       	sbrc	r10, 1
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <vfprintf+0x34e>
     dba:	88 e7       	ldi	r24, 0x78	; 120
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0x352>
     dc0:	88 e5       	ldi	r24, 0x58	; 88
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	b6 01       	movw	r22, r12
     dc6:	0c c0       	rjmp	.+24     	; 0xde0 <vfprintf+0x36e>
     dc8:	8a 2d       	mov	r24, r10
     dca:	86 78       	andi	r24, 0x86	; 134
     dcc:	59 f0       	breq	.+22     	; 0xde4 <vfprintf+0x372>
     dce:	a1 fe       	sbrs	r10, 1
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <vfprintf+0x364>
     dd2:	8b e2       	ldi	r24, 0x2B	; 43
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <vfprintf+0x366>
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	a7 fc       	sbrc	r10, 7
     dda:	8d e2       	ldi	r24, 0x2D	; 45
     ddc:	b6 01       	movw	r22, r12
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     de4:	89 14       	cp	r8, r9
     de6:	38 f4       	brcc	.+14     	; 0xdf6 <vfprintf+0x384>
     de8:	b6 01       	movw	r22, r12
     dea:	80 e3       	ldi	r24, 0x30	; 48
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     df2:	9a 94       	dec	r9
     df4:	f7 cf       	rjmp	.-18     	; 0xde4 <vfprintf+0x372>
     df6:	8a 94       	dec	r8
     df8:	f3 01       	movw	r30, r6
     dfa:	e8 0d       	add	r30, r8
     dfc:	f1 1d       	adc	r31, r1
     dfe:	80 81       	ld	r24, Z
     e00:	b6 01       	movw	r22, r12
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     e08:	81 10       	cpse	r8, r1
     e0a:	f5 cf       	rjmp	.-22     	; 0xdf6 <vfprintf+0x384>
     e0c:	22 20       	and	r2, r2
     e0e:	09 f4       	brne	.+2      	; 0xe12 <vfprintf+0x3a0>
     e10:	42 ce       	rjmp	.-892    	; 0xa96 <vfprintf+0x24>
     e12:	b6 01       	movw	r22, r12
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 30 07 	call	0xe60	; 0xe60 <fputc>
     e1c:	2a 94       	dec	r2
     e1e:	f6 cf       	rjmp	.-20     	; 0xe0c <vfprintf+0x39a>
     e20:	f6 01       	movw	r30, r12
     e22:	86 81       	ldd	r24, Z+6	; 0x06
     e24:	97 81       	ldd	r25, Z+7	; 0x07
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x3ba>
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	9f ef       	ldi	r25, 0xFF	; 255
     e2c:	2b 96       	adiw	r28, 0x0b	; 11
     e2e:	e2 e1       	ldi	r30, 0x12	; 18
     e30:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__epilogue_restores__>

00000e34 <strnlen_P>:
     e34:	fc 01       	movw	r30, r24
     e36:	05 90       	lpm	r0, Z+
     e38:	61 50       	subi	r22, 0x01	; 1
     e3a:	70 40       	sbci	r23, 0x00	; 0
     e3c:	01 10       	cpse	r0, r1
     e3e:	d8 f7       	brcc	.-10     	; 0xe36 <strnlen_P+0x2>
     e40:	80 95       	com	r24
     e42:	90 95       	com	r25
     e44:	8e 0f       	add	r24, r30
     e46:	9f 1f       	adc	r25, r31
     e48:	08 95       	ret

00000e4a <strnlen>:
     e4a:	fc 01       	movw	r30, r24
     e4c:	61 50       	subi	r22, 0x01	; 1
     e4e:	70 40       	sbci	r23, 0x00	; 0
     e50:	01 90       	ld	r0, Z+
     e52:	01 10       	cpse	r0, r1
     e54:	d8 f7       	brcc	.-10     	; 0xe4c <strnlen+0x2>
     e56:	80 95       	com	r24
     e58:	90 95       	com	r25
     e5a:	8e 0f       	add	r24, r30
     e5c:	9f 1f       	adc	r25, r31
     e5e:	08 95       	ret

00000e60 <fputc>:
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	fb 01       	movw	r30, r22
     e6a:	23 81       	ldd	r18, Z+3	; 0x03
     e6c:	21 fd       	sbrc	r18, 1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <fputc+0x16>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
     e74:	2c c0       	rjmp	.+88     	; 0xece <fputc+0x6e>
     e76:	22 ff       	sbrs	r18, 2
     e78:	16 c0       	rjmp	.+44     	; 0xea6 <fputc+0x46>
     e7a:	46 81       	ldd	r20, Z+6	; 0x06
     e7c:	57 81       	ldd	r21, Z+7	; 0x07
     e7e:	24 81       	ldd	r18, Z+4	; 0x04
     e80:	35 81       	ldd	r19, Z+5	; 0x05
     e82:	42 17       	cp	r20, r18
     e84:	53 07       	cpc	r21, r19
     e86:	44 f4       	brge	.+16     	; 0xe98 <fputc+0x38>
     e88:	a0 81       	ld	r26, Z
     e8a:	b1 81       	ldd	r27, Z+1	; 0x01
     e8c:	9d 01       	movw	r18, r26
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	20 83       	st	Z, r18
     e96:	8c 93       	st	X, r24
     e98:	26 81       	ldd	r18, Z+6	; 0x06
     e9a:	37 81       	ldd	r19, Z+7	; 0x07
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	37 83       	std	Z+7, r19	; 0x07
     ea2:	26 83       	std	Z+6, r18	; 0x06
     ea4:	14 c0       	rjmp	.+40     	; 0xece <fputc+0x6e>
     ea6:	8b 01       	movw	r16, r22
     ea8:	ec 01       	movw	r28, r24
     eaa:	fb 01       	movw	r30, r22
     eac:	00 84       	ldd	r0, Z+8	; 0x08
     eae:	f1 85       	ldd	r31, Z+9	; 0x09
     eb0:	e0 2d       	mov	r30, r0
     eb2:	09 95       	icall
     eb4:	89 2b       	or	r24, r25
     eb6:	e1 f6       	brne	.-72     	; 0xe70 <fputc+0x10>
     eb8:	d8 01       	movw	r26, r16
     eba:	16 96       	adiw	r26, 0x06	; 6
     ebc:	8d 91       	ld	r24, X+
     ebe:	9c 91       	ld	r25, X
     ec0:	17 97       	sbiw	r26, 0x07	; 7
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	17 96       	adiw	r26, 0x07	; 7
     ec6:	9c 93       	st	X, r25
     ec8:	8e 93       	st	-X, r24
     eca:	16 97       	sbiw	r26, 0x06	; 6
     ecc:	ce 01       	movw	r24, r28
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <__ultoa_invert>:
     ed8:	fa 01       	movw	r30, r20
     eda:	aa 27       	eor	r26, r26
     edc:	28 30       	cpi	r18, 0x08	; 8
     ede:	51 f1       	breq	.+84     	; 0xf34 <__ultoa_invert+0x5c>
     ee0:	20 31       	cpi	r18, 0x10	; 16
     ee2:	81 f1       	breq	.+96     	; 0xf44 <__ultoa_invert+0x6c>
     ee4:	e8 94       	clt
     ee6:	6f 93       	push	r22
     ee8:	6e 7f       	andi	r22, 0xFE	; 254
     eea:	6e 5f       	subi	r22, 0xFE	; 254
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	af 4f       	sbci	r26, 0xFF	; 255
     ef4:	b1 e0       	ldi	r27, 0x01	; 1
     ef6:	3e d0       	rcall	.+124    	; 0xf74 <__ultoa_invert+0x9c>
     ef8:	b4 e0       	ldi	r27, 0x04	; 4
     efa:	3c d0       	rcall	.+120    	; 0xf74 <__ultoa_invert+0x9c>
     efc:	67 0f       	add	r22, r23
     efe:	78 1f       	adc	r23, r24
     f00:	89 1f       	adc	r24, r25
     f02:	9a 1f       	adc	r25, r26
     f04:	a1 1d       	adc	r26, r1
     f06:	68 0f       	add	r22, r24
     f08:	79 1f       	adc	r23, r25
     f0a:	8a 1f       	adc	r24, r26
     f0c:	91 1d       	adc	r25, r1
     f0e:	a1 1d       	adc	r26, r1
     f10:	6a 0f       	add	r22, r26
     f12:	71 1d       	adc	r23, r1
     f14:	81 1d       	adc	r24, r1
     f16:	91 1d       	adc	r25, r1
     f18:	a1 1d       	adc	r26, r1
     f1a:	20 d0       	rcall	.+64     	; 0xf5c <__ultoa_invert+0x84>
     f1c:	09 f4       	brne	.+2      	; 0xf20 <__ultoa_invert+0x48>
     f1e:	68 94       	set
     f20:	3f 91       	pop	r19
     f22:	2a e0       	ldi	r18, 0x0A	; 10
     f24:	26 9f       	mul	r18, r22
     f26:	11 24       	eor	r1, r1
     f28:	30 19       	sub	r19, r0
     f2a:	30 5d       	subi	r19, 0xD0	; 208
     f2c:	31 93       	st	Z+, r19
     f2e:	de f6       	brtc	.-74     	; 0xee6 <__ultoa_invert+0xe>
     f30:	cf 01       	movw	r24, r30
     f32:	08 95       	ret
     f34:	46 2f       	mov	r20, r22
     f36:	47 70       	andi	r20, 0x07	; 7
     f38:	40 5d       	subi	r20, 0xD0	; 208
     f3a:	41 93       	st	Z+, r20
     f3c:	b3 e0       	ldi	r27, 0x03	; 3
     f3e:	0f d0       	rcall	.+30     	; 0xf5e <__ultoa_invert+0x86>
     f40:	c9 f7       	brne	.-14     	; 0xf34 <__ultoa_invert+0x5c>
     f42:	f6 cf       	rjmp	.-20     	; 0xf30 <__ultoa_invert+0x58>
     f44:	46 2f       	mov	r20, r22
     f46:	4f 70       	andi	r20, 0x0F	; 15
     f48:	40 5d       	subi	r20, 0xD0	; 208
     f4a:	4a 33       	cpi	r20, 0x3A	; 58
     f4c:	18 f0       	brcs	.+6      	; 0xf54 <__ultoa_invert+0x7c>
     f4e:	49 5d       	subi	r20, 0xD9	; 217
     f50:	31 fd       	sbrc	r19, 1
     f52:	40 52       	subi	r20, 0x20	; 32
     f54:	41 93       	st	Z+, r20
     f56:	02 d0       	rcall	.+4      	; 0xf5c <__ultoa_invert+0x84>
     f58:	a9 f7       	brne	.-22     	; 0xf44 <__ultoa_invert+0x6c>
     f5a:	ea cf       	rjmp	.-44     	; 0xf30 <__ultoa_invert+0x58>
     f5c:	b4 e0       	ldi	r27, 0x04	; 4
     f5e:	a6 95       	lsr	r26
     f60:	97 95       	ror	r25
     f62:	87 95       	ror	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	ba 95       	dec	r27
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__ultoa_invert+0x86>
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	61 05       	cpc	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	08 95       	ret
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	0a 2e       	mov	r0, r26
     f7a:	06 94       	lsr	r0
     f7c:	57 95       	ror	r21
     f7e:	47 95       	ror	r20
     f80:	37 95       	ror	r19
     f82:	27 95       	ror	r18
     f84:	ba 95       	dec	r27
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__ultoa_invert+0xa2>
     f88:	62 0f       	add	r22, r18
     f8a:	73 1f       	adc	r23, r19
     f8c:	84 1f       	adc	r24, r20
     f8e:	95 1f       	adc	r25, r21
     f90:	a0 1d       	adc	r26, r0
     f92:	08 95       	ret

00000f94 <__prologue_saves__>:
     f94:	2f 92       	push	r2
     f96:	3f 92       	push	r3
     f98:	4f 92       	push	r4
     f9a:	5f 92       	push	r5
     f9c:	6f 92       	push	r6
     f9e:	7f 92       	push	r7
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	ca 1b       	sub	r28, r26
     fbe:	db 0b       	sbc	r29, r27
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	09 94       	ijmp

00000fcc <__epilogue_restores__>:
     fcc:	2a 88       	ldd	r2, Y+18	; 0x12
     fce:	39 88       	ldd	r3, Y+17	; 0x11
     fd0:	48 88       	ldd	r4, Y+16	; 0x10
     fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
     fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
     fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
     fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
     fda:	9b 84       	ldd	r9, Y+11	; 0x0b
     fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
     fde:	b9 84       	ldd	r11, Y+9	; 0x09
     fe0:	c8 84       	ldd	r12, Y+8	; 0x08
     fe2:	df 80       	ldd	r13, Y+7	; 0x07
     fe4:	ee 80       	ldd	r14, Y+6	; 0x06
     fe6:	fd 80       	ldd	r15, Y+5	; 0x05
     fe8:	0c 81       	ldd	r16, Y+4	; 0x04
     fea:	1b 81       	ldd	r17, Y+3	; 0x03
     fec:	aa 81       	ldd	r26, Y+2	; 0x02
     fee:	b9 81       	ldd	r27, Y+1	; 0x01
     ff0:	ce 0f       	add	r28, r30
     ff2:	d1 1d       	adc	r29, r1
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	ed 01       	movw	r28, r26
    1000:	08 95       	ret

00001002 <_exit>:
    1002:	f8 94       	cli

00001004 <__stop_program>:
    1004:	ff cf       	rjmp	.-2      	; 0x1004 <__stop_program>
