
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  0000108a  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008002d8  008002d8  000012f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000217c  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4e  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001044  00000000  00000000  00004506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  0000554c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d3  00000000  00000000  00005944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099a  00000000  00000000  00006317  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3f       	cpi	r26, 0xFB	; 251
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 02 	call	0x44e	; 0x44e <main>
      9e:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ultraSensor>
     100:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <ultraSensor+0x1>
     104:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <ultraSensor+0x2>
     108:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <ultraSensor+0x3>
     10c:	e0 ef       	ldi	r30, 0xF0	; 240
     10e:	f2 e0       	ldi	r31, 0x02	; 2
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <ultraSensor+0x4>
     13c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <ultraSensor+0x5>
     140:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <ultraSensor+0x6>
     144:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <ultraSensor+0x7>
     148:	e0 ef       	ldi	r30, 0xF0	; 240
     14a:	f2 e0       	ldi	r31, 0x02	; 2
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	e8 e8       	ldi	r30, 0x88	; 136
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	93 46       	sbci	r25, 0x63	; 99
     1b4:	91 83       	std	Z+1, r25	; 0x01
     1b6:	80 83       	st	Z, r24
     1b8:	85 b1       	in	r24, 0x05	; 5
     1ba:	82 60       	ori	r24, 0x02	; 2
     1bc:	85 b9       	out	0x05, r24	; 5
     1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
     1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
     1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
     1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
     1d6:	82 0f       	add	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     1e2:	ff 91       	pop	r31
     1e4:	ef 91       	pop	r30
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_12>:
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8d 7f       	andi	r24, 0xFD	; 253
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <timer1_init>:
     21a:	a4 e8       	ldi	r26, 0x84	; 132
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	1c 92       	st	X, r1
     222:	1e 92       	st	-X, r1
     224:	86 b3       	in	r24, 0x16	; 22
     226:	80 62       	ori	r24, 0x20	; 32
     228:	86 bb       	out	0x16, r24	; 22
     22a:	ef e6       	ldi	r30, 0x6F	; 111
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	87 62       	ori	r24, 0x27	; 39
     232:	80 83       	st	Z, r24
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 64       	ori	r24, 0x40	; 64
     23c:	80 83       	st	Z, r24
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	80 5c       	subi	r24, 0xC0	; 192
     24a:	93 46       	sbci	r25, 0x63	; 99
     24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     254:	08 95       	ret

00000256 <timer2_init>:
     256:	e1 eb       	ldi	r30, 0xB1	; 177
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	87 60       	ori	r24, 0x07	; 7
     25e:	80 83       	st	Z, r24
     260:	8b e9       	ldi	r24, 0x9B	; 155
     262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     266:	e0 e7       	ldi	r30, 0x70	; 112
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 83       	st	Z, r24
     270:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     274:	08 95       	ret

00000276 <gpio_pins_init>:
     276:	84 b1       	in	r24, 0x04	; 4
     278:	80 62       	ori	r24, 0x20	; 32
     27a:	84 b9       	out	0x04, r24	; 4
     27c:	85 b1       	in	r24, 0x05	; 5
     27e:	80 62       	ori	r24, 0x20	; 32
     280:	85 b9       	out	0x05, r24	; 5
     282:	8a b1       	in	r24, 0x0a	; 10
     284:	88 60       	ori	r24, 0x08	; 8
     286:	8a b9       	out	0x0a, r24	; 10
     288:	84 b1       	in	r24, 0x04	; 4
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	84 b9       	out	0x04, r24	; 4
     28e:	8a b1       	in	r24, 0x0a	; 10
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	8a b9       	out	0x0a, r24	; 10
     294:	8b b1       	in	r24, 0x0b	; 11
     296:	8f 7e       	andi	r24, 0xEF	; 239
     298:	8b b9       	out	0x0b, r24	; 11
     29a:	84 b1       	in	r24, 0x04	; 4
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	84 b9       	out	0x04, r24	; 4
     2a0:	8b b1       	in	r24, 0x0b	; 11
     2a2:	87 7f       	andi	r24, 0xF7	; 247
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	08 95       	ret

000002a8 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     2ca:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     2ce:	81 ff       	sbrs	r24, 1
     2d0:	ad c0       	rjmp	.+346    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     2d2:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <ultraSensor+0xd>
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	51 f5       	brne	.+84     	; 0x32e <__vector_7+0x86>
			if(!trigger_active) {
     2da:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <trigger_active>
     2de:	81 11       	cpse	r24, r1
     2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <__vector_7+0x50>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     2e2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     2e6:	e0 ef       	ldi	r30, 0xF0	; 240
     2e8:	f2 e0       	ldi	r31, 0x02	; 2
     2ea:	80 81       	ld	r24, Z
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 83       	st	Z, r24
				trigger_active = true;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <trigger_active>
     2f6:	1b c0       	rjmp	.+54     	; 0x32e <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     2f8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     2fc:	e0 ef       	ldi	r30, 0xF0	; 240
     2fe:	f2 e0       	ldi	r31, 0x02	; 2
     300:	80 81       	ld	r24, Z
     302:	82 60       	ori	r24, 0x02	; 2
     304:	80 83       	st	Z, r24
				trigger_active = false;
     306:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <trigger_active>
				EMIT_TRIGGER = 0;
     30a:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
				WAITING_ECHO = 1;
     30e:	8d 7f       	andi	r24, 0xFD	; 253
     310:	88 60       	ori	r24, 0x08	; 8
     312:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     316:	80 81       	ld	r24, Z
     318:	8f 7d       	andi	r24, 0xDF	; 223
     31a:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     322:	80 81       	ld	r24, Z
     324:	80 61       	ori	r24, 0x10	; 16
     326:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     328:	80 81       	ld	r24, Z
     32a:	8d 7f       	andi	r24, 0xFD	; 253
     32c:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     32e:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <ultraSensor+0xd>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	d1 f4       	brne	.+52     	; 0x36a <__vector_7+0xc2>
     336:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <ultraSensor+0xc>
     33a:	84 ff       	sbrs	r24, 4
     33c:	16 c0       	rjmp	.+44     	; 0x36a <__vector_7+0xc2>
     33e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     342:	89 70       	andi	r24, 0x09	; 9
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	89 f4       	brne	.+34     	; 0x36a <__vector_7+0xc2>
			static volatile uint8_t wait_echo_counter = 0;
			if(wait_echo_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     348:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
     34c:	81 11       	cpse	r24, r1
     34e:	06 c0       	rjmp	.+12     	; 0x35c <__vector_7+0xb4>
				wait_echo_counter++;
     350:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     35c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
				wait_echo_counter = 0;
     366:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     36a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <ultraSensor+0xc>
     36e:	85 fd       	sbrc	r24, 5
     370:	22 c0       	rjmp	.+68     	; 0x3b6 <__vector_7+0x10e>
     372:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     376:	84 fd       	sbrc	r24, 4
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     37a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <wait_time>
     37e:	87 30       	cpi	r24, 0x07	; 7
     380:	30 f4       	brcc	.+12     	; 0x38e <__vector_7+0xe6>
				wait_time++;
     382:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <wait_time>
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <wait_time>
     38c:	07 c0       	rjmp	.+14     	; 0x39c <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     38e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     392:	80 61       	ori	r24, 0x10	; 16
     394:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
				wait_time = 0;
     398:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     39c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <ultraSensor+0xc>
     3a0:	83 ff       	sbrs	r24, 3
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     3a4:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <bandera2>
     3a8:	65 fb       	bst	r22, 5
     3aa:	66 27       	eor	r22, r22
     3ac:	60 f9       	bld	r22, 0
     3ae:	84 ee       	ldi	r24, 0xE4	; 228
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     3b6:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <diezMsCounter>
     3ba:	8a 30       	cpi	r24, 0x0A	; 10
     3bc:	30 f4       	brcc	.+12     	; 0x3ca <__vector_7+0x122>
			diezMsCounter++;
     3be:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <diezMsCounter>
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <diezMsCounter>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     3ca:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			diezMsCounter = 0;
     3d4:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     3d8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     3dc:	86 ff       	sbrs	r24, 6
     3de:	0e c0       	rjmp	.+28     	; 0x3fc <__vector_7+0x154>
			if(btn_pressed_time == 255){
     3e0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <btn_pressed_time>
     3e4:	8f 3f       	cpi	r24, 0xFF	; 255
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <__vector_7+0x14a>
				BTN_OVF = 1;
     3e8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			}
			btn_pressed_time++;
     3f2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <btn_pressed_time>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <btn_pressed_time>
		}
		if(SERVOA_RESET){
     3fc:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     400:	85 ff       	sbrs	r24, 5
     402:	14 c0       	rjmp	.+40     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			if(servo_counter < SERVO_RESET_TIME){
     404:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <servo_counter>
     408:	8e 31       	cpi	r24, 0x1E	; 30
     40a:	30 f4       	brcc	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				servo_counter++;
     40c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <servo_counter>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <servo_counter>
     416:	0a c0       	rjmp	.+20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				} else {
				servo_counter = 0;
     418:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <servo_counter>
				SERVOA_RESET = 0;
     41c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     420:	8f 7d       	andi	r24, 0xDF	; 223
     422:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
				servoA_set_angle(90);
     426:	8a e5       	ldi	r24, 0x5A	; 90
     428:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <servoA_set_angle>
			}
		}
	}
}
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <main>:
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     44e:	82 e8       	ldi	r24, 0x82	; 130
     450:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
	DEBUG_FLAGS = 0;
     454:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <bandera2>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     458:	88 e0       	ldi	r24, 0x08	; 8
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     460:	e5 ef       	ldi	r30, 0xF5	; 245
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	8e e0       	ldi	r24, 0x0E	; 14
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	93 83       	std	Z+3, r25	; 0x03
     46a:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	91 83       	std	Z+1, r25	; 0x01
     472:	80 83       	st	Z, r24
	diezMsCounter = 0;
     474:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     478:	0e 94 3b 01 	call	0x276	; 0x276 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     47c:	0e 94 0d 01 	call	0x21a	; 0x21a <timer1_init>
	timer2_init();
     480:	0e 94 2b 01 	call	0x256	; 0x256 <timer2_init>
	//Inicia HCSR04
	ultrasonic_init(&ultraSensor, printfWrapper);
     484:	63 e5       	ldi	r22, 0x53	; 83
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	84 ee       	ldi	r24, 0xE4	; 228
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 36 04 	call	0x86c	; 0x86c <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     490:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <bandera2>
     494:	65 fb       	bst	r22, 5
     496:	66 27       	eor	r22, r22
     498:	60 f9       	bld	r22, 0
     49a:	84 ee       	ldi	r24, 0xE4	; 228
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 b9 03 	call	0x772	; 0x772 <ultrasonic_set_debug_mode>
	hcsr04Detector.sensor = &ultraSensor;
     4a2:	e1 ee       	ldi	r30, 0xE1	; 225
     4a4:	f2 e0       	ldi	r31, 0x02	; 2
     4a6:	84 ee       	ldi	r24, 0xE4	; 228
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	80 83       	st	Z, r24
	NIBBLEH_SET_STATE(hcsr04Detector, SENSOR_IDLE);
     4ae:	82 81       	ldd	r24, Z+2	; 0x02
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	82 83       	std	Z+2, r24	; 0x02
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     4b4:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     4be:	8b eb       	ldi	r24, 0xBB	; 187
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
	sei();
     4c6:	78 94       	sei
	while (1)
	{ 
		ultraSensorTask(hcsr04Detector.sensor); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     4c8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <hcsr04Detector>
     4cc:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <hcsr04Detector+0x1>
     4d0:	0e 94 ce 02 	call	0x59c	; 0x59c <ultraSensorTask>
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     4d4:	4c 9b       	sbis	0x09, 4	; 9
     4d6:	0a c0       	rjmp	.+20     	; 0x4ec <main+0x9e>
     4d8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     4dc:	86 fd       	sbrc	r24, 6
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <main+0x9e>
			btn_pressed_time = 0;
     4e0:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <btn_pressed_time>
			BTN_PRESSED = 1;
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
     4ea:	28 c0       	rjmp	.+80     	; 0x53c <main+0xee>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     4ec:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     4f0:	86 ff       	sbrs	r24, 6
     4f2:	24 c0       	rjmp	.+72     	; 0x53c <main+0xee>
     4f4:	4c 99       	sbic	0x09, 4	; 9
     4f6:	22 c0       	rjmp	.+68     	; 0x53c <main+0xee>
			BTN_PRESSED = 0;
     4f8:	8f 7b       	andi	r24, 0xBF	; 191
     4fa:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     4fe:	82 ff       	sbrs	r24, 2
     500:	04 c0       	rjmp	.+8      	; 0x50a <main+0xbc>
				printf("Btn overflowed\n");
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     50a:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <btn_pressed_time>
     50e:	8a 30       	cpi	r24, 0x0A	; 10
     510:	30 f4       	brcc	.+12     	; 0x51e <main+0xd0>
     512:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     516:	98 2f       	mov	r25, r24
     518:	94 70       	andi	r25, 0x04	; 4
     51a:	82 ff       	sbrs	r24, 2
     51c:	06 c0       	rjmp	.+12     	; 0x52a <main+0xdc>
				BTN_RELEASED = 1;
     51e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     522:	81 60       	ori	r24, 0x01	; 1
     524:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
     528:	09 c0       	rjmp	.+18     	; 0x53c <main+0xee>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     52a:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <btn_pressed_time>
				if(BTN_OVF){
     52e:	99 23       	and	r25, r25
     530:	29 f0       	breq	.+10     	; 0x53c <main+0xee>
					BTN_OVF = 0;
     532:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     536:	8b 7f       	andi	r24, 0xFB	; 251
     538:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){
     53c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     540:	84 ff       	sbrs	r24, 4
     542:	08 c0       	rjmp	.+16     	; 0x554 <main+0x106>
			WAIT_TIME_TRIGGER_PASSED = 0;
     544:	8f 7e       	andi	r24, 0xEF	; 239
     546:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     54a:	e0 ef       	ldi	r30, 0xF0	; 240
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	80 81       	ld	r24, Z
     550:	80 62       	ori	r24, 0x20	; 32
     552:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ 
     554:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     558:	83 ff       	sbrs	r24, 3
     55a:	08 c0       	rjmp	.+16     	; 0x56c <main+0x11e>
			ECHO_INTERVAL_FLAG = 0;
     55c:	87 7f       	andi	r24, 0xF7	; 247
     55e:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			EMIT_TRIGGER = 1;
     562:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     566:	82 60       	ori	r24, 0x02	; 2
     568:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
		}
		if(BTN_RELEASED){
     56c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     570:	80 ff       	sbrs	r24, 0
     572:	04 c0       	rjmp	.+8      	; 0x57c <main+0x12e>
			BTN_RELEASED = 0; //TEST SERVO A
			//EMIT_TRIGGER = 1;
			SERVOA_MOVE = 1;
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	80 61       	ori	r24, 0x10	; 16
     578:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
		}
		if(SERVOA_MOVE){
     57c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     580:	84 ff       	sbrs	r24, 4
     582:	a2 cf       	rjmp	.-188    	; 0x4c8 <main+0x7a>
			SERVOA_MOVE = 0;
     584:	8f 7e       	andi	r24, 0xEF	; 239
     586:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			servoA_set_angle(0);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <servoA_set_angle>
			SERVOA_RESET = 1;
     590:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     594:	80 62       	ori	r24, 0x20	; 32
     596:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
     59a:	96 cf       	rjmp	.-212    	; 0x4c8 <main+0x7a>

0000059c <ultraSensorTask>:
	else
	return BOX_DISCARDED;
}

void ultraSensorTask(ultrasonic_t* ultraSensor)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraSensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     5a2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     5a6:	88 23       	and	r24, r24
     5a8:	84 f5       	brge	.+96     	; 0x60a <ultraSensorTask+0x6e>
     5aa:	8c 85       	ldd	r24, Y+12	; 0x0c
     5ac:	85 ff       	sbrs	r24, 5
     5ae:	2d c0       	rjmp	.+90     	; 0x60a <ultraSensorTask+0x6e>
     5b0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     5b4:	81 ff       	sbrs	r24, 1
     5b6:	29 c0       	rjmp	.+82     	; 0x60a <ultraSensorTask+0x6e>
	{
		if (ultrasonic_start(ultraSensor))
     5b8:	ce 01       	movw	r24, r28
     5ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <ultrasonic_start>
     5be:	88 23       	and	r24, r24
     5c0:	b1 f0       	breq	.+44     	; 0x5ee <ultraSensorTask+0x52>
		{
			if (DEBUG_FLAGS)
     5c2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <ultraSensorTask+0x36>
			{
				printf("InitHCSR04\n");
     5ca:	84 e3       	ldi	r24, 0x34	; 52
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     5d2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     5dc:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     5e0:	8d 7f       	andi	r24, 0xFD	; 253
     5e2:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
			ultraSensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     5e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e8:	8f 7d       	andi	r24, 0xDF	; 223
     5ea:	8c 87       	std	Y+12, r24	; 0x0c
     5ec:	0e c0       	rjmp	.+28     	; 0x60a <ultraSensorTask+0x6e>
		}
		else
		{
			if (DEBUG_FLAGS)
     5ee:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     5f2:	85 ff       	sbrs	r24, 5
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <ultraSensorTask+0x62>
			{
				printf("ErrorInitHCSR04\n");
     5f6:	8f e2       	ldi	r24, 0x2F	; 47
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
			}
			EMIT_FAILED = 1;
     5fe:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
			EMIT_TRIGGER = 0;
     602:	84 60       	ori	r24, 0x04	; 4
     604:	8d 7f       	andi	r24, 0xFD	; 253
     606:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraSensor);
     60a:	ce 01       	movw	r24, r28
     60c:	0e 94 a0 04 	call	0x940	; 0x940 <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraSensor->state == ULTRA_DONE && ultraSensor->NEW_RESULT)
     610:	8d 85       	ldd	r24, Y+13	; 0x0d
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	11 f5       	brne	.+68     	; 0x65a <ultraSensorTask+0xbe>
     616:	8c 85       	ldd	r24, Y+12	; 0x0c
     618:	88 23       	and	r24, r24
     61a:	fc f4       	brge	.+62     	; 0x65a <ultraSensorTask+0xbe>
	{
		printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraSensor));
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 01 04 	call	0x802	; 0x802 <ultrasonic_get_distance>
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	7f 93       	push	r23
     628:	6f 93       	push	r22
     62a:	8f e3       	ldi	r24, 0x3F	; 63
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 35 05 	call	0xa6a	; 0xa6a <printf>
		ultraSensor->NEW_RESULT = 0;
     636:	8c 85       	ldd	r24, Y+12	; 0x0c
     638:	8f 77       	andi	r24, 0x7F	; 127
     63a:	8c 87       	std	Y+12, r24	; 0x0c
		ultrasonic_init_flags(ultraSensor);     // Limpia flags internos
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 11 04 	call	0x822	; 0x822 <ultrasonic_init_flags>
		ultraSensor->state = ULTRA_IDLE;
     642:	1d 86       	std	Y+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1;  // Habilita nueva medición
     644:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
	}

	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     65a:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     65e:	80 ff       	sbrs	r24, 0
     660:	28 c0       	rjmp	.+80     	; 0x6b2 <ultraSensorTask+0x116>
	{
		if (DEBUG_FLAGS)
     662:	85 ff       	sbrs	r24, 5
     664:	04 c0       	rjmp	.+8      	; 0x66e <ultraSensorTask+0xd2>
		{
			printf("HCSR04 perdio ECHO\n");
     666:	84 e5       	ldi	r24, 0x54	; 84
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
		}
		VEINTEMS_PASSED = 0;
     66e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
		WAITING_ECHO = 0;
     672:	8e 7f       	andi	r24, 0xFE	; 254
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <bandera2>

		ultraSensor->TIMEDOUT = 1;
     67a:	8c 85       	ldd	r24, Y+12	; 0x0c
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	8c 87       	std	Y+12, r24	; 0x0c
		ultraSensor->state = ULTRA_TIMEOUT;
     680:	86 e0       	ldi	r24, 0x06	; 6
     682:	8d 87       	std	Y+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraSensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     684:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <bandera2>
     688:	65 fb       	bst	r22, 5
     68a:	66 27       	eor	r22, r22
     68c:	60 f9       	bld	r22, 0
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 55 04 	call	0x8aa	; 0x8aa <ultrasonic_timeout_clear>
     694:	88 23       	and	r24, r24
     696:	41 f0       	breq	.+16     	; 0x6a8 <ultraSensorTask+0x10c>
     698:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <bandera2>
     69c:	85 ff       	sbrs	r24, 5
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <ultraSensorTask+0x10c>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     6a0:	87 e6       	ldi	r24, 0x67	; 103
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 4b 05 	call	0xa96	; 0xa96 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     6a8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bandera>
     6ac:	80 68       	ori	r24, 0x80	; 128
     6ae:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bandera>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <servoA_set_angle>:
#include "./../../main.h"
#include "servo_utils.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
     6b8:	85 3b       	cpi	r24, 0xB5	; 181
     6ba:	08 f0       	brcs	.+2      	; 0x6be <servoA_set_angle+0x6>
		angle = 180;
     6bc:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
     6be:	28 2f       	mov	r18, r24
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	a0 ed       	ldi	r26, 0xD0	; 208
     6c4:	b7 e0       	ldi	r27, 0x07	; 7
     6c6:	0e 94 26 05 	call	0xa4c	; 0xa4c <__umulhisi3>
     6ca:	24 eb       	ldi	r18, 0xB4	; 180
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
     6d6:	da 01       	movw	r26, r20
     6d8:	c9 01       	movw	r24, r18
     6da:	80 53       	subi	r24, 0x30	; 48
     6dc:	98 4f       	sbci	r25, 0xF8	; 248
     6de:	af 4f       	sbci	r26, 0xFF	; 255
     6e0:	bf 4f       	sbci	r27, 0xFF	; 255
     6e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
     6e6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
     6ea:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
     6ee:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
     6f2:	08 95       	ret

000006f4 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
     6f4:	8b b1       	in	r24, 0x0b	; 11
     6f6:	88 60       	ori	r24, 0x08	; 8
     6f8:	8b b9       	out	0x0b, r24	; 11
     6fa:	08 95       	ret

000006fc <ultrasonic_hal_trigger_setLow>:
     6fc:	8b b1       	in	r24, 0x0b	; 11
     6fe:	87 7f       	andi	r24, 0xF7	; 247
     700:	8b b9       	out	0x0b, r24	; 11
     702:	08 95       	ret

00000704 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
     704:	e1 e8       	ldi	r30, 0x81	; 129
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	80 83       	st	Z, r24
     70e:	08 95       	ret

00000710 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
     710:	e1 e8       	ldi	r30, 0x81	; 129
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	8f 7b       	andi	r24, 0xBF	; 191
     718:	80 83       	st	Z, r24
     71a:	08 95       	ret

0000071c <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
     71c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
     720:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
     724:	88 e1       	ldi	r24, 0x18	; 24
     726:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     730:	08 95       	ret

00000732 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
     732:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     736:	95 ff       	sbrs	r25, 5
     738:	fc cf       	rjmp	.-8      	; 0x732 <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
     73a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     73e:	08 95       	ret

00000740 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
     740:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     744:	88 23       	and	r24, r24
     746:	e4 f7       	brge	.-8      	; 0x740 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
     748:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     74c:	08 95       	ret

0000074e <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
     74e:	cf 93       	push	r28
     750:	c8 2f       	mov	r28, r24
	if (c == '\n')
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	19 f4       	brne	.+6      	; 0x75c <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
     756:	8d e0       	ldi	r24, 0x0D	; 13
     758:	0e 94 99 03 	call	0x732	; 0x732 <USART_Transmit>
	USART_Transmit(c);
     75c:	8c 2f       	mov	r24, r28
     75e:	0e 94 99 03 	call	0x732	; 0x732 <USART_Transmit>
	return 0;
}
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
     76a:	0e 94 a0 03 	call	0x740	; 0x740 <USART_Receive>
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	08 95       	ret

00000772 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
     772:	fc 01       	movw	r30, r24
     774:	66 87       	std	Z+14, r22	; 0x0e
     776:	08 95       	ret

00000778 <ultrasonic_calculate_distance>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	ae 81       	ldd	r26, Y+6	; 0x06
     788:	bf 81       	ldd	r27, Y+7	; 0x07
     78a:	48 81       	ld	r20, Y
     78c:	59 81       	ldd	r21, Y+1	; 0x01
     78e:	6a 81       	ldd	r22, Y+2	; 0x02
     790:	7b 81       	ldd	r23, Y+3	; 0x03
     792:	8c 01       	movw	r16, r24
     794:	9d 01       	movw	r18, r26
     796:	04 1b       	sub	r16, r20
     798:	15 0b       	sbc	r17, r21
     79a:	26 0b       	sbc	r18, r22
     79c:	37 0b       	sbc	r19, r23
     79e:	b9 01       	movw	r22, r18
     7a0:	a8 01       	movw	r20, r16
     7a2:	d9 01       	movw	r26, r18
     7a4:	c8 01       	movw	r24, r16
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	aa 1f       	adc	r26, r26
     7ac:	bb 1f       	adc	r27, r27
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	aa 1f       	adc	r26, r26
     7bc:	bb 1f       	adc	r27, r27
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	aa 1f       	adc	r26, r26
     7c4:	bb 1f       	adc	r27, r27
     7c6:	8c 01       	movw	r16, r24
     7c8:	9d 01       	movw	r18, r26
     7ca:	04 0f       	add	r16, r20
     7cc:	15 1f       	adc	r17, r21
     7ce:	26 1f       	adc	r18, r22
     7d0:	37 1f       	adc	r19, r23
     7d2:	c9 01       	movw	r24, r18
     7d4:	b8 01       	movw	r22, r16
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	88 1f       	adc	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	20 e9       	ldi	r18, 0x90	; 144
     7e0:	31 e0       	ldi	r19, 0x01	; 1
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodsi4>
     7ea:	28 87       	std	Y+8, r18	; 0x08
     7ec:	39 87       	std	Y+9, r19	; 0x09
     7ee:	4a 87       	std	Y+10, r20	; 0x0a
     7f0:	5b 87       	std	Y+11, r21	; 0x0b
     7f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f4:	80 68       	ori	r24, 0x80	; 128
     7f6:	8c 87       	std	Y+12, r24	; 0x0c
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <ultrasonic_get_distance>:
     802:	fc 01       	movw	r30, r24
     804:	60 85       	ldd	r22, Z+8	; 0x08
     806:	71 85       	ldd	r23, Z+9	; 0x09
     808:	82 85       	ldd	r24, Z+10	; 0x0a
     80a:	93 85       	ldd	r25, Z+11	; 0x0b
     80c:	08 95       	ret

0000080e <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
     80e:	dc 01       	movw	r26, r24
     810:	1f 96       	adiw	r26, 0x0f	; 15
     812:	ed 91       	ld	r30, X+
     814:	fc 91       	ld	r31, X
     816:	50 97       	sbiw	r26, 0x10	; 16
     818:	30 97       	sbiw	r30, 0x00	; 0
     81a:	11 f0       	breq	.+4      	; 0x820 <ultrasonic_print+0x12>
     81c:	cb 01       	movw	r24, r22
		us->print_method(message);
     81e:	09 95       	icall
     820:	08 95       	ret

00000822 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
     828:	18 82       	st	Y, r1
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	1a 82       	std	Y+2, r1	; 0x02
     82e:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
     830:	1c 82       	std	Y+4, r1	; 0x04
     832:	1d 82       	std	Y+5, r1	; 0x05
     834:	1e 82       	std	Y+6, r1	; 0x06
     836:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
     838:	18 86       	std	Y+8, r1	; 0x08
     83a:	19 86       	std	Y+9, r1	; 0x09
     83c:	1a 86       	std	Y+10, r1	; 0x0a
     83e:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
     840:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
     842:	8c 85       	ldd	r24, Y+12	; 0x0c
     844:	80 62       	ori	r24, 0x20	; 32
     846:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
     848:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
     84a:	0e 94 82 03 	call	0x704	; 0x704 <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
     84e:	8f 85       	ldd	r24, Y+15	; 0x0f
     850:	98 89       	ldd	r25, Y+16	; 0x10
     852:	89 2b       	or	r24, r25
     854:	41 f0       	breq	.+16     	; 0x866 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
     856:	8e 85       	ldd	r24, Y+14	; 0x0e
     858:	88 23       	and	r24, r24
     85a:	29 f0       	breq	.+10     	; 0x866 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
     85c:	69 e8       	ldi	r22, 0x89	; 137
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	ce 01       	movw	r24, r28
     862:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
		}
	}
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
     876:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
     878:	0e 94 11 04 	call	0x822	; 0x822 <ultrasonic_init_flags>
	us->debugMode = true;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
     880:	01 15       	cp	r16, r1
     882:	11 05       	cpc	r17, r1
     884:	19 f4       	brne	.+6      	; 0x88c <ultrasonic_init+0x20>
		us->print_method = NULL;
     886:	18 8a       	std	Y+16, r1	; 0x10
     888:	1f 86       	std	Y+15, r1	; 0x0f
     88a:	0a c0       	rjmp	.+20     	; 0x8a0 <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
     88c:	18 8b       	std	Y+16, r17	; 0x10
     88e:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
     890:	8e 85       	ldd	r24, Y+14	; 0x0e
     892:	88 23       	and	r24, r24
     894:	29 f0       	breq	.+10     	; 0x8a0 <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
     896:	68 ea       	ldi	r22, 0xA8	; 168
     898:	71 e0       	ldi	r23, 0x01	; 1
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
		}
	}
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
     8b0:	fc 01       	movw	r30, r24
     8b2:	25 85       	ldd	r18, Z+13	; 0x0d
     8b4:	26 30       	cpi	r18, 0x06	; 6
     8b6:	71 f4       	brne	.+28     	; 0x8d4 <ultrasonic_timeout_clear+0x2a>
     8b8:	16 2f       	mov	r17, r22
     8ba:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
     8bc:	0e 94 11 04 	call	0x822	; 0x822 <ultrasonic_init_flags>
		us->debugMode = state;
     8c0:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
     8c2:	1e 85       	ldd	r17, Y+14	; 0x0e
     8c4:	11 23       	and	r17, r17
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
     8c8:	67 e6       	ldi	r22, 0x67	; 103
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	ce 01       	movw	r24, r28
     8ce:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
     8d8:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
     8da:	81 2f       	mov	r24, r17
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	08 95       	ret

000008e4 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
     8e4:	cf 93       	push	r28
     8e6:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
     8e8:	85 85       	ldd	r24, Z+13	; 0x0d
     8ea:	88 23       	and	r24, r24
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <ultrasonic_start+0x10>
     8ee:	85 85       	ldd	r24, Z+13	; 0x0d
     8f0:	85 30       	cpi	r24, 0x05	; 5
     8f2:	c1 f4       	brne	.+48     	; 0x924 <__stack+0x25>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
     8f4:	84 85       	ldd	r24, Z+12	; 0x0c
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <__stack+0x11>
			us->state = ULTRA_TRIGGERING;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
     8fe:	c6 85       	ldd	r28, Z+14	; 0x0e
     900:	cc 23       	and	r28, r28
     902:	d1 f0       	breq	.+52     	; 0x938 <__stack+0x39>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
     904:	64 ec       	ldi	r22, 0xC4	; 196
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	cf 01       	movw	r24, r30
     90a:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
     90e:	15 c0       	rjmp	.+42     	; 0x93a <__stack+0x3b>
			}
			return true;
			} else {
			if(us->debugMode){
     910:	c6 85       	ldd	r28, Z+14	; 0x0e
     912:	cc 23       	and	r28, r28
     914:	91 f0       	breq	.+36     	; 0x93a <__stack+0x3b>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
     916:	63 ef       	ldi	r22, 0xF3	; 243
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	cf 01       	movw	r24, r30
     91c:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
     920:	c0 e0       	ldi	r28, 0x00	; 0
     922:	0b c0       	rjmp	.+22     	; 0x93a <__stack+0x3b>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
     924:	c6 85       	ldd	r28, Z+14	; 0x0e
     926:	cc 23       	and	r28, r28
     928:	41 f0       	breq	.+16     	; 0x93a <__stack+0x3b>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
     92a:	6a e2       	ldi	r22, 0x2A	; 42
     92c:	72 e0       	ldi	r23, 0x02	; 2
     92e:	cf 01       	movw	r24, r30
     930:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
			}
	}
	return false;
     934:	c0 e0       	ldi	r28, 0x00	; 0
     936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
     938:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
     93a:	8c 2f       	mov	r24, r28
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
	switch (us->state)
     946:	8d 85       	ldd	r24, Y+13	; 0x0d
     948:	83 30       	cpi	r24, 0x03	; 3
     94a:	71 f1       	breq	.+92     	; 0x9a8 <ultrasonic_update+0x68>
     94c:	28 f4       	brcc	.+10     	; 0x958 <ultrasonic_update+0x18>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	49 f0       	breq	.+18     	; 0x964 <ultrasonic_update+0x24>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	a1 f0       	breq	.+40     	; 0x97e <ultrasonic_update+0x3e>
     956:	55 c0       	rjmp	.+170    	; 0xa02 <ultrasonic_update+0xc2>
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	e1 f1       	breq	.+120    	; 0x9d4 <ultrasonic_update+0x94>
     95c:	86 30       	cpi	r24, 0x06	; 6
     95e:	09 f4       	brne	.+2      	; 0x962 <ultrasonic_update+0x22>
     960:	4d c0       	rjmp	.+154    	; 0x9fc <ultrasonic_update+0xbc>
     962:	4f c0       	rjmp	.+158    	; 0xa02 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
     964:	8c 85       	ldd	r24, Y+12	; 0x0c
     966:	81 ff       	sbrs	r24, 1
     968:	4c c0       	rjmp	.+152    	; 0xa02 <ultrasonic_update+0xc2>
				if(us->debugMode){
     96a:	8e 85       	ldd	r24, Y+14	; 0x0e
     96c:	88 23       	and	r24, r24
     96e:	09 f4       	brne	.+2      	; 0x972 <ultrasonic_update+0x32>
     970:	48 c0       	rjmp	.+144    	; 0xa02 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
     972:	67 e5       	ldi	r22, 0x57	; 87
     974:	72 e0       	ldi	r23, 0x02	; 2
     976:	ce 01       	movw	r24, r28
     978:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
     97c:	42 c0       	rjmp	.+132    	; 0xa02 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
     97e:	8c 85       	ldd	r24, Y+12	; 0x0c
     980:	84 fd       	sbrc	r24, 4
     982:	0c c0       	rjmp	.+24     	; 0x99c <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
     988:	0e 94 88 03 	call	0x710	; 0x710 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
     98c:	8e 85       	ldd	r24, Y+14	; 0x0e
     98e:	88 23       	and	r24, r24
     990:	29 f0       	breq	.+10     	; 0x99c <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
     992:	66 e7       	ldi	r22, 0x76	; 118
     994:	72 e0       	ldi	r23, 0x02	; 2
     996:	ce 01       	movw	r24, r28
     998:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
     99c:	8c 85       	ldd	r24, Y+12	; 0x0c
     99e:	83 ff       	sbrs	r24, 3
     9a0:	30 c0       	rjmp	.+96     	; 0xa02 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	8d 87       	std	Y+13, r24	; 0x0d
     9a6:	2d c0       	rjmp	.+90     	; 0xa02 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
     9a8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9aa:	86 ff       	sbrs	r24, 6
     9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
     9b2:	8e 85       	ldd	r24, Y+14	; 0x0e
     9b4:	88 23       	and	r24, r24
     9b6:	29 f0       	breq	.+10     	; 0x9c2 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
     9b8:	63 e9       	ldi	r22, 0x93	; 147
     9ba:	72 e0       	ldi	r23, 0x02	; 2
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
     9c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c4:	84 60       	ori	r24, 0x04	; 4
     9c6:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
     9c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ca:	83 ff       	sbrs	r24, 3
     9cc:	1a c0       	rjmp	.+52     	; 0xa02 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	8d 87       	std	Y+13, r24	; 0x0d
     9d2:	17 c0       	rjmp	.+46     	; 0xa02 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
     9d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d6:	82 ff       	sbrs	r24, 2
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 bc 03 	call	0x778	; 0x778 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
     9e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e2:	8b 7f       	andi	r24, 0xFB	; 251
     9e4:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
     9e6:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e8:	88 23       	and	r24, r24
     9ea:	29 f0       	breq	.+10     	; 0x9f6 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
     9ec:	6a ea       	ldi	r22, 0xAA	; 170
     9ee:	72 e0       	ldi	r23, 0x02	; 2
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 07 04 	call	0x80e	; 0x80e <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
     9f6:	85 e0       	ldi	r24, 0x05	; 5
     9f8:	8d 87       	std	Y+13, r24	; 0x0d
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
     9fc:	8c 85       	ldd	r24, Y+12	; 0x0c
     9fe:	88 60       	ori	r24, 0x08	; 8
     a00:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <__udivmodsi4>:
     a08:	a1 e2       	ldi	r26, 0x21	; 33
     a0a:	1a 2e       	mov	r1, r26
     a0c:	aa 1b       	sub	r26, r26
     a0e:	bb 1b       	sub	r27, r27
     a10:	fd 01       	movw	r30, r26
     a12:	0d c0       	rjmp	.+26     	; 0xa2e <__udivmodsi4_ep>

00000a14 <__udivmodsi4_loop>:
     a14:	aa 1f       	adc	r26, r26
     a16:	bb 1f       	adc	r27, r27
     a18:	ee 1f       	adc	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	a2 17       	cp	r26, r18
     a1e:	b3 07       	cpc	r27, r19
     a20:	e4 07       	cpc	r30, r20
     a22:	f5 07       	cpc	r31, r21
     a24:	20 f0       	brcs	.+8      	; 0xa2e <__udivmodsi4_ep>
     a26:	a2 1b       	sub	r26, r18
     a28:	b3 0b       	sbc	r27, r19
     a2a:	e4 0b       	sbc	r30, r20
     a2c:	f5 0b       	sbc	r31, r21

00000a2e <__udivmodsi4_ep>:
     a2e:	66 1f       	adc	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	88 1f       	adc	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	1a 94       	dec	r1
     a38:	69 f7       	brne	.-38     	; 0xa14 <__udivmodsi4_loop>
     a3a:	60 95       	com	r22
     a3c:	70 95       	com	r23
     a3e:	80 95       	com	r24
     a40:	90 95       	com	r25
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	bd 01       	movw	r22, r26
     a48:	cf 01       	movw	r24, r30
     a4a:	08 95       	ret

00000a4c <__umulhisi3>:
     a4c:	a2 9f       	mul	r26, r18
     a4e:	b0 01       	movw	r22, r0
     a50:	b3 9f       	mul	r27, r19
     a52:	c0 01       	movw	r24, r0
     a54:	a3 9f       	mul	r26, r19
     a56:	70 0d       	add	r23, r0
     a58:	81 1d       	adc	r24, r1
     a5a:	11 24       	eor	r1, r1
     a5c:	91 1d       	adc	r25, r1
     a5e:	b2 9f       	mul	r27, r18
     a60:	70 0d       	add	r23, r0
     a62:	81 1d       	adc	r24, r1
     a64:	11 24       	eor	r1, r1
     a66:	91 1d       	adc	r25, r1
     a68:	08 95       	ret

00000a6a <printf>:
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	eb e3       	ldi	r30, 0x3B	; 59
     a70:	f5 e0       	ldi	r31, 0x05	; 5
     a72:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__prologue_saves__+0x20>
     a76:	ae 01       	movw	r20, r28
     a78:	4b 5f       	subi	r20, 0xFB	; 251
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	fa 01       	movw	r30, r20
     a7e:	61 91       	ld	r22, Z+
     a80:	71 91       	ld	r23, Z+
     a82:	af 01       	movw	r20, r30
     a84:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__iob+0x2>
     a88:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <__iob+0x3>
     a8c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vfprintf>
     a90:	e2 e0       	ldi	r30, 0x02	; 2
     a92:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__epilogue_restores__+0x20>

00000a96 <puts>:
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <__iob+0x2>
     aa2:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <__iob+0x3>
     aa6:	23 81       	ldd	r18, Z+3	; 0x03
     aa8:	21 ff       	sbrs	r18, 1
     aaa:	1b c0       	rjmp	.+54     	; 0xae2 <puts+0x4c>
     aac:	8c 01       	movw	r16, r24
     aae:	d0 e0       	ldi	r29, 0x00	; 0
     ab0:	c0 e0       	ldi	r28, 0x00	; 0
     ab2:	f8 01       	movw	r30, r16
     ab4:	81 91       	ld	r24, Z+
     ab6:	8f 01       	movw	r16, r30
     ab8:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <__iob+0x2>
     abc:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <__iob+0x3>
     ac0:	db 01       	movw	r26, r22
     ac2:	18 96       	adiw	r26, 0x08	; 8
     ac4:	ed 91       	ld	r30, X+
     ac6:	fc 91       	ld	r31, X
     ac8:	19 97       	sbiw	r26, 0x09	; 9
     aca:	88 23       	and	r24, r24
     acc:	31 f0       	breq	.+12     	; 0xada <puts+0x44>
     ace:	09 95       	icall
     ad0:	89 2b       	or	r24, r25
     ad2:	79 f3       	breq	.-34     	; 0xab2 <puts+0x1c>
     ad4:	df ef       	ldi	r29, 0xFF	; 255
     ad6:	cf ef       	ldi	r28, 0xFF	; 255
     ad8:	ec cf       	rjmp	.-40     	; 0xab2 <puts+0x1c>
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	09 95       	icall
     ade:	89 2b       	or	r24, r25
     ae0:	19 f0       	breq	.+6      	; 0xae8 <puts+0x52>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <puts+0x56>
     ae8:	8d 2f       	mov	r24, r29
     aea:	9c 2f       	mov	r25, r28
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <vfprintf>:
     af6:	ab e0       	ldi	r26, 0x0B	; 11
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e1 e8       	ldi	r30, 0x81	; 129
     afc:	f5 e0       	ldi	r31, 0x05	; 5
     afe:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__prologue_saves__>
     b02:	6c 01       	movw	r12, r24
     b04:	7b 01       	movw	r14, r22
     b06:	8a 01       	movw	r16, r20
     b08:	fc 01       	movw	r30, r24
     b0a:	17 82       	std	Z+7, r1	; 0x07
     b0c:	16 82       	std	Z+6, r1	; 0x06
     b0e:	83 81       	ldd	r24, Z+3	; 0x03
     b10:	81 ff       	sbrs	r24, 1
     b12:	cc c1       	rjmp	.+920    	; 0xeac <vfprintf+0x3b6>
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	3c 01       	movw	r6, r24
     b1a:	f6 01       	movw	r30, r12
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
     b1e:	f7 01       	movw	r30, r14
     b20:	93 fd       	sbrc	r25, 3
     b22:	85 91       	lpm	r24, Z+
     b24:	93 ff       	sbrs	r25, 3
     b26:	81 91       	ld	r24, Z+
     b28:	7f 01       	movw	r14, r30
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <vfprintf+0x3a>
     b2e:	ba c1       	rjmp	.+884    	; 0xea4 <vfprintf+0x3ae>
     b30:	85 32       	cpi	r24, 0x25	; 37
     b32:	39 f4       	brne	.+14     	; 0xb42 <vfprintf+0x4c>
     b34:	93 fd       	sbrc	r25, 3
     b36:	85 91       	lpm	r24, Z+
     b38:	93 ff       	sbrs	r25, 3
     b3a:	81 91       	ld	r24, Z+
     b3c:	7f 01       	movw	r14, r30
     b3e:	85 32       	cpi	r24, 0x25	; 37
     b40:	29 f4       	brne	.+10     	; 0xb4c <vfprintf+0x56>
     b42:	b6 01       	movw	r22, r12
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     b4a:	e7 cf       	rjmp	.-50     	; 0xb1a <vfprintf+0x24>
     b4c:	91 2c       	mov	r9, r1
     b4e:	21 2c       	mov	r2, r1
     b50:	31 2c       	mov	r3, r1
     b52:	ff e1       	ldi	r31, 0x1F	; 31
     b54:	f3 15       	cp	r31, r3
     b56:	d8 f0       	brcs	.+54     	; 0xb8e <vfprintf+0x98>
     b58:	8b 32       	cpi	r24, 0x2B	; 43
     b5a:	79 f0       	breq	.+30     	; 0xb7a <vfprintf+0x84>
     b5c:	38 f4       	brcc	.+14     	; 0xb6c <vfprintf+0x76>
     b5e:	80 32       	cpi	r24, 0x20	; 32
     b60:	79 f0       	breq	.+30     	; 0xb80 <vfprintf+0x8a>
     b62:	83 32       	cpi	r24, 0x23	; 35
     b64:	a1 f4       	brne	.+40     	; 0xb8e <vfprintf+0x98>
     b66:	23 2d       	mov	r18, r3
     b68:	20 61       	ori	r18, 0x10	; 16
     b6a:	1d c0       	rjmp	.+58     	; 0xba6 <vfprintf+0xb0>
     b6c:	8d 32       	cpi	r24, 0x2D	; 45
     b6e:	61 f0       	breq	.+24     	; 0xb88 <vfprintf+0x92>
     b70:	80 33       	cpi	r24, 0x30	; 48
     b72:	69 f4       	brne	.+26     	; 0xb8e <vfprintf+0x98>
     b74:	23 2d       	mov	r18, r3
     b76:	21 60       	ori	r18, 0x01	; 1
     b78:	16 c0       	rjmp	.+44     	; 0xba6 <vfprintf+0xb0>
     b7a:	83 2d       	mov	r24, r3
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	38 2e       	mov	r3, r24
     b80:	e3 2d       	mov	r30, r3
     b82:	e4 60       	ori	r30, 0x04	; 4
     b84:	3e 2e       	mov	r3, r30
     b86:	2a c0       	rjmp	.+84     	; 0xbdc <vfprintf+0xe6>
     b88:	f3 2d       	mov	r31, r3
     b8a:	f8 60       	ori	r31, 0x08	; 8
     b8c:	1d c0       	rjmp	.+58     	; 0xbc8 <vfprintf+0xd2>
     b8e:	37 fc       	sbrc	r3, 7
     b90:	2d c0       	rjmp	.+90     	; 0xbec <vfprintf+0xf6>
     b92:	20 ed       	ldi	r18, 0xD0	; 208
     b94:	28 0f       	add	r18, r24
     b96:	2a 30       	cpi	r18, 0x0A	; 10
     b98:	40 f0       	brcs	.+16     	; 0xbaa <vfprintf+0xb4>
     b9a:	8e 32       	cpi	r24, 0x2E	; 46
     b9c:	b9 f4       	brne	.+46     	; 0xbcc <vfprintf+0xd6>
     b9e:	36 fc       	sbrc	r3, 6
     ba0:	81 c1       	rjmp	.+770    	; 0xea4 <vfprintf+0x3ae>
     ba2:	23 2d       	mov	r18, r3
     ba4:	20 64       	ori	r18, 0x40	; 64
     ba6:	32 2e       	mov	r3, r18
     ba8:	19 c0       	rjmp	.+50     	; 0xbdc <vfprintf+0xe6>
     baa:	36 fe       	sbrs	r3, 6
     bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0xc4>
     bae:	8a e0       	ldi	r24, 0x0A	; 10
     bb0:	98 9e       	mul	r9, r24
     bb2:	20 0d       	add	r18, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	92 2e       	mov	r9, r18
     bb8:	11 c0       	rjmp	.+34     	; 0xbdc <vfprintf+0xe6>
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	2e 9e       	mul	r2, r30
     bbe:	20 0d       	add	r18, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	22 2e       	mov	r2, r18
     bc4:	f3 2d       	mov	r31, r3
     bc6:	f0 62       	ori	r31, 0x20	; 32
     bc8:	3f 2e       	mov	r3, r31
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <vfprintf+0xe6>
     bcc:	8c 36       	cpi	r24, 0x6C	; 108
     bce:	21 f4       	brne	.+8      	; 0xbd8 <vfprintf+0xe2>
     bd0:	83 2d       	mov	r24, r3
     bd2:	80 68       	ori	r24, 0x80	; 128
     bd4:	38 2e       	mov	r3, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <vfprintf+0xe6>
     bd8:	88 36       	cpi	r24, 0x68	; 104
     bda:	41 f4       	brne	.+16     	; 0xbec <vfprintf+0xf6>
     bdc:	f7 01       	movw	r30, r14
     bde:	93 fd       	sbrc	r25, 3
     be0:	85 91       	lpm	r24, Z+
     be2:	93 ff       	sbrs	r25, 3
     be4:	81 91       	ld	r24, Z+
     be6:	7f 01       	movw	r14, r30
     be8:	81 11       	cpse	r24, r1
     bea:	b3 cf       	rjmp	.-154    	; 0xb52 <vfprintf+0x5c>
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	95 54       	subi	r25, 0x45	; 69
     bf2:	93 30       	cpi	r25, 0x03	; 3
     bf4:	28 f4       	brcc	.+10     	; 0xc00 <vfprintf+0x10a>
     bf6:	0c 5f       	subi	r16, 0xFC	; 252
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	9f e3       	ldi	r25, 0x3F	; 63
     bfc:	99 83       	std	Y+1, r25	; 0x01
     bfe:	0d c0       	rjmp	.+26     	; 0xc1a <vfprintf+0x124>
     c00:	83 36       	cpi	r24, 0x63	; 99
     c02:	31 f0       	breq	.+12     	; 0xc10 <vfprintf+0x11a>
     c04:	83 37       	cpi	r24, 0x73	; 115
     c06:	71 f0       	breq	.+28     	; 0xc24 <vfprintf+0x12e>
     c08:	83 35       	cpi	r24, 0x53	; 83
     c0a:	09 f0       	breq	.+2      	; 0xc0e <vfprintf+0x118>
     c0c:	59 c0       	rjmp	.+178    	; 0xcc0 <vfprintf+0x1ca>
     c0e:	21 c0       	rjmp	.+66     	; 0xc52 <vfprintf+0x15c>
     c10:	f8 01       	movw	r30, r16
     c12:	80 81       	ld	r24, Z
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	0e 5f       	subi	r16, 0xFE	; 254
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	88 24       	eor	r8, r8
     c1c:	83 94       	inc	r8
     c1e:	91 2c       	mov	r9, r1
     c20:	53 01       	movw	r10, r6
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <vfprintf+0x154>
     c24:	28 01       	movw	r4, r16
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	4f 0e       	add	r4, r31
     c2a:	51 1c       	adc	r5, r1
     c2c:	f8 01       	movw	r30, r16
     c2e:	a0 80       	ld	r10, Z
     c30:	b1 80       	ldd	r11, Z+1	; 0x01
     c32:	36 fe       	sbrs	r3, 6
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x146>
     c36:	69 2d       	mov	r22, r9
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x14a>
     c3c:	6f ef       	ldi	r22, 0xFF	; 255
     c3e:	7f ef       	ldi	r23, 0xFF	; 255
     c40:	c5 01       	movw	r24, r10
     c42:	0e 94 67 07 	call	0xece	; 0xece <strnlen>
     c46:	4c 01       	movw	r8, r24
     c48:	82 01       	movw	r16, r4
     c4a:	f3 2d       	mov	r31, r3
     c4c:	ff 77       	andi	r31, 0x7F	; 127
     c4e:	3f 2e       	mov	r3, r31
     c50:	16 c0       	rjmp	.+44     	; 0xc7e <vfprintf+0x188>
     c52:	28 01       	movw	r4, r16
     c54:	22 e0       	ldi	r18, 0x02	; 2
     c56:	42 0e       	add	r4, r18
     c58:	51 1c       	adc	r5, r1
     c5a:	f8 01       	movw	r30, r16
     c5c:	a0 80       	ld	r10, Z
     c5e:	b1 80       	ldd	r11, Z+1	; 0x01
     c60:	36 fe       	sbrs	r3, 6
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x174>
     c64:	69 2d       	mov	r22, r9
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x178>
     c6a:	6f ef       	ldi	r22, 0xFF	; 255
     c6c:	7f ef       	ldi	r23, 0xFF	; 255
     c6e:	c5 01       	movw	r24, r10
     c70:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strnlen_P>
     c74:	4c 01       	movw	r8, r24
     c76:	f3 2d       	mov	r31, r3
     c78:	f0 68       	ori	r31, 0x80	; 128
     c7a:	3f 2e       	mov	r3, r31
     c7c:	82 01       	movw	r16, r4
     c7e:	33 fc       	sbrc	r3, 3
     c80:	1b c0       	rjmp	.+54     	; 0xcb8 <vfprintf+0x1c2>
     c82:	82 2d       	mov	r24, r2
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	88 16       	cp	r8, r24
     c88:	99 06       	cpc	r9, r25
     c8a:	b0 f4       	brcc	.+44     	; 0xcb8 <vfprintf+0x1c2>
     c8c:	b6 01       	movw	r22, r12
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     c96:	2a 94       	dec	r2
     c98:	f4 cf       	rjmp	.-24     	; 0xc82 <vfprintf+0x18c>
     c9a:	f5 01       	movw	r30, r10
     c9c:	37 fc       	sbrc	r3, 7
     c9e:	85 91       	lpm	r24, Z+
     ca0:	37 fe       	sbrs	r3, 7
     ca2:	81 91       	ld	r24, Z+
     ca4:	5f 01       	movw	r10, r30
     ca6:	b6 01       	movw	r22, r12
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     cae:	21 10       	cpse	r2, r1
     cb0:	2a 94       	dec	r2
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	82 1a       	sub	r8, r18
     cb6:	91 08       	sbc	r9, r1
     cb8:	81 14       	cp	r8, r1
     cba:	91 04       	cpc	r9, r1
     cbc:	71 f7       	brne	.-36     	; 0xc9a <vfprintf+0x1a4>
     cbe:	e8 c0       	rjmp	.+464    	; 0xe90 <vfprintf+0x39a>
     cc0:	84 36       	cpi	r24, 0x64	; 100
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <vfprintf+0x1d2>
     cc4:	89 36       	cpi	r24, 0x69	; 105
     cc6:	41 f5       	brne	.+80     	; 0xd18 <vfprintf+0x222>
     cc8:	f8 01       	movw	r30, r16
     cca:	37 fe       	sbrs	r3, 7
     ccc:	07 c0       	rjmp	.+14     	; 0xcdc <vfprintf+0x1e6>
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	0c 5f       	subi	r16, 0xFC	; 252
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	08 c0       	rjmp	.+16     	; 0xcec <vfprintf+0x1f6>
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	07 2e       	mov	r0, r23
     ce2:	00 0c       	add	r0, r0
     ce4:	88 0b       	sbc	r24, r24
     ce6:	99 0b       	sbc	r25, r25
     ce8:	0e 5f       	subi	r16, 0xFE	; 254
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	f3 2d       	mov	r31, r3
     cee:	ff 76       	andi	r31, 0x6F	; 111
     cf0:	3f 2e       	mov	r3, r31
     cf2:	97 ff       	sbrs	r25, 7
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <vfprintf+0x212>
     cf6:	90 95       	com	r25
     cf8:	80 95       	com	r24
     cfa:	70 95       	com	r23
     cfc:	61 95       	neg	r22
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	8f 4f       	sbci	r24, 0xFF	; 255
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	f0 68       	ori	r31, 0x80	; 128
     d06:	3f 2e       	mov	r3, r31
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	a3 01       	movw	r20, r6
     d0e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     d12:	88 2e       	mov	r8, r24
     d14:	86 18       	sub	r8, r6
     d16:	45 c0       	rjmp	.+138    	; 0xda2 <vfprintf+0x2ac>
     d18:	85 37       	cpi	r24, 0x75	; 117
     d1a:	31 f4       	brne	.+12     	; 0xd28 <vfprintf+0x232>
     d1c:	23 2d       	mov	r18, r3
     d1e:	2f 7e       	andi	r18, 0xEF	; 239
     d20:	b2 2e       	mov	r11, r18
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	25 c0       	rjmp	.+74     	; 0xd72 <vfprintf+0x27c>
     d28:	93 2d       	mov	r25, r3
     d2a:	99 7f       	andi	r25, 0xF9	; 249
     d2c:	b9 2e       	mov	r11, r25
     d2e:	8f 36       	cpi	r24, 0x6F	; 111
     d30:	c1 f0       	breq	.+48     	; 0xd62 <vfprintf+0x26c>
     d32:	18 f4       	brcc	.+6      	; 0xd3a <vfprintf+0x244>
     d34:	88 35       	cpi	r24, 0x58	; 88
     d36:	79 f0       	breq	.+30     	; 0xd56 <vfprintf+0x260>
     d38:	b5 c0       	rjmp	.+362    	; 0xea4 <vfprintf+0x3ae>
     d3a:	80 37       	cpi	r24, 0x70	; 112
     d3c:	19 f0       	breq	.+6      	; 0xd44 <vfprintf+0x24e>
     d3e:	88 37       	cpi	r24, 0x78	; 120
     d40:	21 f0       	breq	.+8      	; 0xd4a <vfprintf+0x254>
     d42:	b0 c0       	rjmp	.+352    	; 0xea4 <vfprintf+0x3ae>
     d44:	e9 2f       	mov	r30, r25
     d46:	e0 61       	ori	r30, 0x10	; 16
     d48:	be 2e       	mov	r11, r30
     d4a:	b4 fe       	sbrs	r11, 4
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <vfprintf+0x272>
     d4e:	fb 2d       	mov	r31, r11
     d50:	f4 60       	ori	r31, 0x04	; 4
     d52:	bf 2e       	mov	r11, r31
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <vfprintf+0x272>
     d56:	34 fe       	sbrs	r3, 4
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <vfprintf+0x278>
     d5a:	29 2f       	mov	r18, r25
     d5c:	26 60       	ori	r18, 0x06	; 6
     d5e:	b2 2e       	mov	r11, r18
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x278>
     d62:	28 e0       	ldi	r18, 0x08	; 8
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <vfprintf+0x27c>
     d68:	20 e1       	ldi	r18, 0x10	; 16
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x27c>
     d6e:	20 e1       	ldi	r18, 0x10	; 16
     d70:	32 e0       	ldi	r19, 0x02	; 2
     d72:	f8 01       	movw	r30, r16
     d74:	b7 fe       	sbrs	r11, 7
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <vfprintf+0x290>
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0c 5f       	subi	r16, 0xFC	; 252
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x29c>
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 5f       	subi	r16, 0xFE	; 254
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	a3 01       	movw	r20, r6
     d94:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     d98:	88 2e       	mov	r8, r24
     d9a:	86 18       	sub	r8, r6
     d9c:	fb 2d       	mov	r31, r11
     d9e:	ff 77       	andi	r31, 0x7F	; 127
     da0:	3f 2e       	mov	r3, r31
     da2:	36 fe       	sbrs	r3, 6
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <vfprintf+0x2ca>
     da6:	23 2d       	mov	r18, r3
     da8:	2e 7f       	andi	r18, 0xFE	; 254
     daa:	a2 2e       	mov	r10, r18
     dac:	89 14       	cp	r8, r9
     dae:	58 f4       	brcc	.+22     	; 0xdc6 <vfprintf+0x2d0>
     db0:	34 fe       	sbrs	r3, 4
     db2:	0b c0       	rjmp	.+22     	; 0xdca <vfprintf+0x2d4>
     db4:	32 fc       	sbrc	r3, 2
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x2d4>
     db8:	83 2d       	mov	r24, r3
     dba:	8e 7e       	andi	r24, 0xEE	; 238
     dbc:	a8 2e       	mov	r10, r24
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x2d4>
     dc0:	b8 2c       	mov	r11, r8
     dc2:	a3 2c       	mov	r10, r3
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x2d6>
     dc6:	b8 2c       	mov	r11, r8
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <vfprintf+0x2d6>
     dca:	b9 2c       	mov	r11, r9
     dcc:	a4 fe       	sbrs	r10, 4
     dce:	0f c0       	rjmp	.+30     	; 0xdee <vfprintf+0x2f8>
     dd0:	fe 01       	movw	r30, r28
     dd2:	e8 0d       	add	r30, r8
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	80 33       	cpi	r24, 0x30	; 48
     dda:	21 f4       	brne	.+8      	; 0xde4 <vfprintf+0x2ee>
     ddc:	9a 2d       	mov	r25, r10
     dde:	99 7e       	andi	r25, 0xE9	; 233
     de0:	a9 2e       	mov	r10, r25
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x300>
     de4:	a2 fe       	sbrs	r10, 2
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x2fe>
     de8:	b3 94       	inc	r11
     dea:	b3 94       	inc	r11
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <vfprintf+0x300>
     dee:	8a 2d       	mov	r24, r10
     df0:	86 78       	andi	r24, 0x86	; 134
     df2:	09 f0       	breq	.+2      	; 0xdf6 <vfprintf+0x300>
     df4:	b3 94       	inc	r11
     df6:	a3 fc       	sbrc	r10, 3
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <vfprintf+0x326>
     dfa:	a0 fe       	sbrs	r10, 0
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <vfprintf+0x314>
     dfe:	b2 14       	cp	r11, r2
     e00:	88 f4       	brcc	.+34     	; 0xe24 <vfprintf+0x32e>
     e02:	28 0c       	add	r2, r8
     e04:	92 2c       	mov	r9, r2
     e06:	9b 18       	sub	r9, r11
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <vfprintf+0x330>
     e0a:	b2 14       	cp	r11, r2
     e0c:	60 f4       	brcc	.+24     	; 0xe26 <vfprintf+0x330>
     e0e:	b6 01       	movw	r22, r12
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e18:	b3 94       	inc	r11
     e1a:	f7 cf       	rjmp	.-18     	; 0xe0a <vfprintf+0x314>
     e1c:	b2 14       	cp	r11, r2
     e1e:	18 f4       	brcc	.+6      	; 0xe26 <vfprintf+0x330>
     e20:	2b 18       	sub	r2, r11
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x332>
     e24:	98 2c       	mov	r9, r8
     e26:	21 2c       	mov	r2, r1
     e28:	a4 fe       	sbrs	r10, 4
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <vfprintf+0x356>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e3       	ldi	r24, 0x30	; 48
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e36:	a2 fe       	sbrs	r10, 2
     e38:	17 c0       	rjmp	.+46     	; 0xe68 <vfprintf+0x372>
     e3a:	a1 fc       	sbrc	r10, 1
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x34e>
     e3e:	88 e7       	ldi	r24, 0x78	; 120
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x352>
     e44:	88 e5       	ldi	r24, 0x58	; 88
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b6 01       	movw	r22, r12
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <vfprintf+0x36e>
     e4c:	8a 2d       	mov	r24, r10
     e4e:	86 78       	andi	r24, 0x86	; 134
     e50:	59 f0       	breq	.+22     	; 0xe68 <vfprintf+0x372>
     e52:	a1 fe       	sbrs	r10, 1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x364>
     e56:	8b e2       	ldi	r24, 0x2B	; 43
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <vfprintf+0x366>
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	a7 fc       	sbrc	r10, 7
     e5e:	8d e2       	ldi	r24, 0x2D	; 45
     e60:	b6 01       	movw	r22, r12
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e68:	89 14       	cp	r8, r9
     e6a:	38 f4       	brcc	.+14     	; 0xe7a <vfprintf+0x384>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e76:	9a 94       	dec	r9
     e78:	f7 cf       	rjmp	.-18     	; 0xe68 <vfprintf+0x372>
     e7a:	8a 94       	dec	r8
     e7c:	f3 01       	movw	r30, r6
     e7e:	e8 0d       	add	r30, r8
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	b6 01       	movw	r22, r12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e8c:	81 10       	cpse	r8, r1
     e8e:	f5 cf       	rjmp	.-22     	; 0xe7a <vfprintf+0x384>
     e90:	22 20       	and	r2, r2
     e92:	09 f4       	brne	.+2      	; 0xe96 <vfprintf+0x3a0>
     e94:	42 ce       	rjmp	.-892    	; 0xb1a <vfprintf+0x24>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e2       	ldi	r24, 0x20	; 32
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     ea0:	2a 94       	dec	r2
     ea2:	f6 cf       	rjmp	.-20     	; 0xe90 <vfprintf+0x39a>
     ea4:	f6 01       	movw	r30, r12
     ea6:	86 81       	ldd	r24, Z+6	; 0x06
     ea8:	97 81       	ldd	r25, Z+7	; 0x07
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x3ba>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	2b 96       	adiw	r28, 0x0b	; 11
     eb2:	e2 e1       	ldi	r30, 0x12	; 18
     eb4:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__epilogue_restores__>

00000eb8 <strnlen_P>:
     eb8:	fc 01       	movw	r30, r24
     eba:	05 90       	lpm	r0, Z+
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	70 40       	sbci	r23, 0x00	; 0
     ec0:	01 10       	cpse	r0, r1
     ec2:	d8 f7       	brcc	.-10     	; 0xeba <strnlen_P+0x2>
     ec4:	80 95       	com	r24
     ec6:	90 95       	com	r25
     ec8:	8e 0f       	add	r24, r30
     eca:	9f 1f       	adc	r25, r31
     ecc:	08 95       	ret

00000ece <strnlen>:
     ece:	fc 01       	movw	r30, r24
     ed0:	61 50       	subi	r22, 0x01	; 1
     ed2:	70 40       	sbci	r23, 0x00	; 0
     ed4:	01 90       	ld	r0, Z+
     ed6:	01 10       	cpse	r0, r1
     ed8:	d8 f7       	brcc	.-10     	; 0xed0 <strnlen+0x2>
     eda:	80 95       	com	r24
     edc:	90 95       	com	r25
     ede:	8e 0f       	add	r24, r30
     ee0:	9f 1f       	adc	r25, r31
     ee2:	08 95       	ret

00000ee4 <fputc>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	fb 01       	movw	r30, r22
     eee:	23 81       	ldd	r18, Z+3	; 0x03
     ef0:	21 fd       	sbrc	r18, 1
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <fputc+0x16>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	9f ef       	ldi	r25, 0xFF	; 255
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <fputc+0x6e>
     efa:	22 ff       	sbrs	r18, 2
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <fputc+0x46>
     efe:	46 81       	ldd	r20, Z+6	; 0x06
     f00:	57 81       	ldd	r21, Z+7	; 0x07
     f02:	24 81       	ldd	r18, Z+4	; 0x04
     f04:	35 81       	ldd	r19, Z+5	; 0x05
     f06:	42 17       	cp	r20, r18
     f08:	53 07       	cpc	r21, r19
     f0a:	44 f4       	brge	.+16     	; 0xf1c <fputc+0x38>
     f0c:	a0 81       	ld	r26, Z
     f0e:	b1 81       	ldd	r27, Z+1	; 0x01
     f10:	9d 01       	movw	r18, r26
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	31 83       	std	Z+1, r19	; 0x01
     f18:	20 83       	st	Z, r18
     f1a:	8c 93       	st	X, r24
     f1c:	26 81       	ldd	r18, Z+6	; 0x06
     f1e:	37 81       	ldd	r19, Z+7	; 0x07
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	37 83       	std	Z+7, r19	; 0x07
     f26:	26 83       	std	Z+6, r18	; 0x06
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <fputc+0x6e>
     f2a:	8b 01       	movw	r16, r22
     f2c:	ec 01       	movw	r28, r24
     f2e:	fb 01       	movw	r30, r22
     f30:	00 84       	ldd	r0, Z+8	; 0x08
     f32:	f1 85       	ldd	r31, Z+9	; 0x09
     f34:	e0 2d       	mov	r30, r0
     f36:	09 95       	icall
     f38:	89 2b       	or	r24, r25
     f3a:	e1 f6       	brne	.-72     	; 0xef4 <fputc+0x10>
     f3c:	d8 01       	movw	r26, r16
     f3e:	16 96       	adiw	r26, 0x06	; 6
     f40:	8d 91       	ld	r24, X+
     f42:	9c 91       	ld	r25, X
     f44:	17 97       	sbiw	r26, 0x07	; 7
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	17 96       	adiw	r26, 0x07	; 7
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
     f4e:	16 97       	sbiw	r26, 0x06	; 6
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <__ultoa_invert>:
     f5c:	fa 01       	movw	r30, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	28 30       	cpi	r18, 0x08	; 8
     f62:	51 f1       	breq	.+84     	; 0xfb8 <__ultoa_invert+0x5c>
     f64:	20 31       	cpi	r18, 0x10	; 16
     f66:	81 f1       	breq	.+96     	; 0xfc8 <__ultoa_invert+0x6c>
     f68:	e8 94       	clt
     f6a:	6f 93       	push	r22
     f6c:	6e 7f       	andi	r22, 0xFE	; 254
     f6e:	6e 5f       	subi	r22, 0xFE	; 254
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	af 4f       	sbci	r26, 0xFF	; 255
     f78:	b1 e0       	ldi	r27, 0x01	; 1
     f7a:	3e d0       	rcall	.+124    	; 0xff8 <__ultoa_invert+0x9c>
     f7c:	b4 e0       	ldi	r27, 0x04	; 4
     f7e:	3c d0       	rcall	.+120    	; 0xff8 <__ultoa_invert+0x9c>
     f80:	67 0f       	add	r22, r23
     f82:	78 1f       	adc	r23, r24
     f84:	89 1f       	adc	r24, r25
     f86:	9a 1f       	adc	r25, r26
     f88:	a1 1d       	adc	r26, r1
     f8a:	68 0f       	add	r22, r24
     f8c:	79 1f       	adc	r23, r25
     f8e:	8a 1f       	adc	r24, r26
     f90:	91 1d       	adc	r25, r1
     f92:	a1 1d       	adc	r26, r1
     f94:	6a 0f       	add	r22, r26
     f96:	71 1d       	adc	r23, r1
     f98:	81 1d       	adc	r24, r1
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	20 d0       	rcall	.+64     	; 0xfe0 <__ultoa_invert+0x84>
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__ultoa_invert+0x48>
     fa2:	68 94       	set
     fa4:	3f 91       	pop	r19
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	26 9f       	mul	r18, r22
     faa:	11 24       	eor	r1, r1
     fac:	30 19       	sub	r19, r0
     fae:	30 5d       	subi	r19, 0xD0	; 208
     fb0:	31 93       	st	Z+, r19
     fb2:	de f6       	brtc	.-74     	; 0xf6a <__ultoa_invert+0xe>
     fb4:	cf 01       	movw	r24, r30
     fb6:	08 95       	ret
     fb8:	46 2f       	mov	r20, r22
     fba:	47 70       	andi	r20, 0x07	; 7
     fbc:	40 5d       	subi	r20, 0xD0	; 208
     fbe:	41 93       	st	Z+, r20
     fc0:	b3 e0       	ldi	r27, 0x03	; 3
     fc2:	0f d0       	rcall	.+30     	; 0xfe2 <__ultoa_invert+0x86>
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__ultoa_invert+0x5c>
     fc6:	f6 cf       	rjmp	.-20     	; 0xfb4 <__ultoa_invert+0x58>
     fc8:	46 2f       	mov	r20, r22
     fca:	4f 70       	andi	r20, 0x0F	; 15
     fcc:	40 5d       	subi	r20, 0xD0	; 208
     fce:	4a 33       	cpi	r20, 0x3A	; 58
     fd0:	18 f0       	brcs	.+6      	; 0xfd8 <__ultoa_invert+0x7c>
     fd2:	49 5d       	subi	r20, 0xD9	; 217
     fd4:	31 fd       	sbrc	r19, 1
     fd6:	40 52       	subi	r20, 0x20	; 32
     fd8:	41 93       	st	Z+, r20
     fda:	02 d0       	rcall	.+4      	; 0xfe0 <__ultoa_invert+0x84>
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__ultoa_invert+0x6c>
     fde:	ea cf       	rjmp	.-44     	; 0xfb4 <__ultoa_invert+0x58>
     fe0:	b4 e0       	ldi	r27, 0x04	; 4
     fe2:	a6 95       	lsr	r26
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	ba 95       	dec	r27
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__ultoa_invert+0x86>
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	61 05       	cpc	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	08 95       	ret
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	0a 2e       	mov	r0, r26
     ffe:	06 94       	lsr	r0
    1000:	57 95       	ror	r21
    1002:	47 95       	ror	r20
    1004:	37 95       	ror	r19
    1006:	27 95       	ror	r18
    1008:	ba 95       	dec	r27
    100a:	c9 f7       	brne	.-14     	; 0xffe <__ultoa_invert+0xa2>
    100c:	62 0f       	add	r22, r18
    100e:	73 1f       	adc	r23, r19
    1010:	84 1f       	adc	r24, r20
    1012:	95 1f       	adc	r25, r21
    1014:	a0 1d       	adc	r26, r0
    1016:	08 95       	ret

00001018 <__prologue_saves__>:
    1018:	2f 92       	push	r2
    101a:	3f 92       	push	r3
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	ca 1b       	sub	r28, r26
    1042:	db 0b       	sbc	r29, r27
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	09 94       	ijmp

00001050 <__epilogue_restores__>:
    1050:	2a 88       	ldd	r2, Y+18	; 0x12
    1052:	39 88       	ldd	r3, Y+17	; 0x11
    1054:	48 88       	ldd	r4, Y+16	; 0x10
    1056:	5f 84       	ldd	r5, Y+15	; 0x0f
    1058:	6e 84       	ldd	r6, Y+14	; 0x0e
    105a:	7d 84       	ldd	r7, Y+13	; 0x0d
    105c:	8c 84       	ldd	r8, Y+12	; 0x0c
    105e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1060:	aa 84       	ldd	r10, Y+10	; 0x0a
    1062:	b9 84       	ldd	r11, Y+9	; 0x09
    1064:	c8 84       	ldd	r12, Y+8	; 0x08
    1066:	df 80       	ldd	r13, Y+7	; 0x07
    1068:	ee 80       	ldd	r14, Y+6	; 0x06
    106a:	fd 80       	ldd	r15, Y+5	; 0x05
    106c:	0c 81       	ldd	r16, Y+4	; 0x04
    106e:	1b 81       	ldd	r17, Y+3	; 0x03
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	b9 81       	ldd	r27, Y+1	; 0x01
    1074:	ce 0f       	add	r28, r30
    1076:	d1 1d       	adc	r29, r1
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	ed 01       	movw	r28, r26
    1084:	08 95       	ret

00001086 <_exit>:
    1086:	f8 94       	cli

00001088 <__stop_program>:
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <__stop_program>
