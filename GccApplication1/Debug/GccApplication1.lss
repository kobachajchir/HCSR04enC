
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ba  00800100  00001d54  00001de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  008005ba  008005ba  000022a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036dc  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fa  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bed  00000000  00000000  00006f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00008b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d75  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d2  00000000  00000000  00009f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e5       	ldi	r30, 0x54	; 84
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3b       	cpi	r26, 0xBA	; 186
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	aa eb       	ldi	r26, 0xBA	; 186
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 35       	cpi	r26, 0x55	; 85
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <main>
      9e:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <ultraSensor>
     100:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <ultraSensor+0x1>
     104:	a0 93 37 06 	sts	0x0637, r26	; 0x800637 <ultraSensor+0x2>
     108:	b0 93 38 06 	sts	0x0638, r27	; 0x800638 <ultraSensor+0x3>
     10c:	e1 e4       	ldi	r30, 0x41	; 65
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <ultraSensor+0x4>
     13c:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <ultraSensor+0x5>
     140:	a0 93 3b 06 	sts	0x063B, r26	; 0x80063b <ultraSensor+0x6>
     144:	b0 93 3c 06 	sts	0x063C, r27	; 0x80063c <ultraSensor+0x7>
     148:	e1 e4       	ldi	r30, 0x41	; 65
     14a:	f6 e0       	ldi	r31, 0x06	; 6
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
     1ca:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	45 c0       	rjmp	.+138    	; 0x262 <__vector_11+0xd4>
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	e4 5d       	subi	r30, 0xD4	; 212
     1e4:	f9 4f       	sbci	r31, 0xF9	; 249
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__vector_11+0xd2>
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <__vector_11+0x7a>
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x7a>
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_11+0x88>
     208:	f8 01       	movw	r30, r16
     20a:	84 81       	ldd	r24, Z+4	; 0x04
     20c:	0e 94 86 08 	call	0x110c	; 0x110c <calculate_angle_pulseUs>
     210:	f8 01       	movw	r30, r16
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	c1 11       	cpse	r28, r1
     218:	23 c0       	rjmp	.+70     	; 0x260 <__vector_11+0xd2>
     21a:	f7 01       	movw	r30, r14
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e4 5d       	subi	r30, 0xD4	; 212
     222:	f9 4f       	sbci	r31, 0xF9	; 249
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	2c 91       	ld	r18, X
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	01 90       	ld	r0, Z+
     248:	f0 81       	ld	r31, Z
     24a:	e0 2d       	mov	r30, r0
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     25c:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <current_servo>
     260:	cf 5f       	subi	r28, 0xFF	; 255
     262:	c3 30       	cpi	r28, 0x03	; 3
     264:	08 f4       	brcc	.+2      	; 0x268 <__vector_11+0xda>
     266:	b8 cf       	rjmp	.-144    	; 0x1d8 <__vector_11+0x4a>
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	cf 91       	pop	r28
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_12>:
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
     2ba:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	e4 5d       	subi	r30, 0xD4	; 212
     2c6:	f9 4f       	sbci	r31, 0xF9	; 249
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 81       	ld	r18, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_12+0x46>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_12+0x42>
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	89 23       	and	r24, r25
     2e6:	85 b9       	out	0x05, r24	; 5
     2e8:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e4 5d       	subi	r30, 0xD4	; 212
     2f4:	f9 4f       	sbci	r31, 0xF9	; 249
     2f6:	01 90       	ld	r0, Z+
     2f8:	f0 81       	ld	r31, Z
     2fa:	e0 2d       	mov	r30, r0
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	81 ff       	sbrs	r24, 1
     300:	68 c0       	rjmp	.+208    	; 0x3d2 <__vector_12+0x13e>
     302:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e4 5d       	subi	r30, 0xD4	; 212
     30e:	f9 4f       	sbci	r31, 0xF9	; 249
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	82 ff       	sbrs	r24, 2
     31a:	5b c0       	rjmp	.+182    	; 0x3d2 <__vector_12+0x13e>
     31c:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e4 5d       	subi	r30, 0xD4	; 212
     328:	f9 4f       	sbci	r31, 0xF9	; 249
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	81 81       	ldd	r24, Z+1	; 0x01
     332:	8b 7f       	andi	r24, 0xFB	; 251
     334:	81 83       	std	Z+1, r24	; 0x01
     336:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	e4 5d       	subi	r30, 0xD4	; 212
     342:	f9 4f       	sbci	r31, 0xF9	; 249
     344:	01 90       	ld	r0, Z+
     346:	f0 81       	ld	r31, Z
     348:	e0 2d       	mov	r30, r0
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	81 83       	std	Z+1, r24	; 0x01
     350:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e4 5d       	subi	r30, 0xD4	; 212
     35c:	f9 4f       	sbci	r31, 0xF9	; 249
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	8a e5       	ldi	r24, 0x5A	; 90
     366:	84 83       	std	Z+4, r24	; 0x04
     368:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	e4 5d       	subi	r30, 0xD4	; 212
     374:	f9 4f       	sbci	r31, 0xF9	; 249
     376:	c0 81       	ld	r28, Z
     378:	d1 81       	ldd	r29, Z+1	; 0x01
     37a:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e4 5d       	subi	r30, 0xD4	; 212
     386:	f9 4f       	sbci	r31, 0xF9	; 249
     388:	80 81       	ld	r24, Z
     38a:	0e 94 86 08 	call	0x110c	; 0x110c <calculate_angle_pulseUs>
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02
     392:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     396:	81 11       	cpse	r24, r1
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <__vector_12+0x114>
     39a:	e6 ed       	ldi	r30, 0xD6	; 214
     39c:	f5 e0       	ldi	r31, 0x05	; 5
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	8e 7f       	andi	r24, 0xFE	; 254
     3a4:	82 83       	std	Z+2, r24	; 0x02
     3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <__vector_12+0x13e>
     3a8:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	39 f4       	brne	.+14     	; 0x3be <__vector_12+0x12a>
     3b0:	ec e4       	ldi	r30, 0x4C	; 76
     3b2:	f6 e0       	ldi	r31, 0x06	; 6
     3b4:	82 81       	ldd	r24, Z+2	; 0x02
     3b6:	88 60       	ori	r24, 0x08	; 8
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <__vector_12+0x13e>
     3be:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	31 f4       	brne	.+12     	; 0x3d2 <__vector_12+0x13e>
     3c6:	e2 e3       	ldi	r30, 0x32	; 50
     3c8:	f6 e0       	ldi	r31, 0x06	; 6
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	88 60       	ori	r24, 0x08	; 8
     3ce:	8e 7f       	andi	r24, 0xFE	; 254
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <current_servo>
     3dc:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     3e0:	83 30       	cpi	r24, 0x03	; 3
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <__vector_12+0x152>
     3e4:	91 c0       	rjmp	.+290    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     3e6:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e4 5d       	subi	r30, 0xD4	; 212
     3f2:	f9 4f       	sbci	r31, 0xF9	; 249
     3f4:	01 90       	ld	r0, Z+
     3f6:	f0 81       	ld	r31, Z
     3f8:	e0 2d       	mov	r30, r0
     3fa:	81 81       	ldd	r24, Z+1	; 0x01
     3fc:	80 ff       	sbrs	r24, 0
     3fe:	2c c0       	rjmp	.+88     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     400:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e4 5d       	subi	r30, 0xD4	; 212
     40c:	f9 4f       	sbci	r31, 0xF9	; 249
     40e:	01 90       	ld	r0, Z+
     410:	f0 81       	ld	r31, Z
     412:	e0 2d       	mov	r30, r0
     414:	20 81       	ld	r18, Z
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	2a 95       	dec	r18
     422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	95 b1       	in	r25, 0x05	; 5
     426:	89 2b       	or	r24, r25
     428:	85 b9       	out	0x05, r24	; 5
     42a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     42e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     432:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	e4 5d       	subi	r30, 0xD4	; 212
     43e:	f9 4f       	sbci	r31, 0xF9	; 249
     440:	01 90       	ld	r0, Z+
     442:	f0 81       	ld	r31, Z
     444:	e0 2d       	mov	r30, r0
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	93 81       	ldd	r25, Z+3	; 0x03
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     452:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     456:	58 c0       	rjmp	.+176    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     458:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e4 5d       	subi	r30, 0xD4	; 212
     464:	f9 4f       	sbci	r31, 0xF9	; 249
     466:	01 90       	ld	r0, Z+
     468:	f0 81       	ld	r31, Z
     46a:	e0 2d       	mov	r30, r0
     46c:	20 81       	ld	r18, Z
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     47c:	80 95       	com	r24
     47e:	90 95       	com	r25
     480:	95 b1       	in	r25, 0x05	; 5
     482:	89 23       	and	r24, r25
     484:	85 b9       	out	0x05, r24	; 5
     486:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <current_servo>
     490:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <current_servo>
     494:	83 30       	cpi	r24, 0x03	; 3
     496:	c0 f5       	brcc	.+112    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     498:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ee 0f       	add	r30, r30
     4a0:	ff 1f       	adc	r31, r31
     4a2:	e4 5d       	subi	r30, 0xD4	; 212
     4a4:	f9 4f       	sbci	r31, 0xF9	; 249
     4a6:	01 90       	ld	r0, Z+
     4a8:	f0 81       	ld	r31, Z
     4aa:	e0 2d       	mov	r30, r0
     4ac:	81 81       	ldd	r24, Z+1	; 0x01
     4ae:	80 ff       	sbrs	r24, 0
     4b0:	2b c0       	rjmp	.+86     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     4b2:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	ee 0f       	add	r30, r30
     4ba:	ff 1f       	adc	r31, r31
     4bc:	e4 5d       	subi	r30, 0xD4	; 212
     4be:	f9 4f       	sbci	r31, 0xF9	; 249
     4c0:	01 90       	ld	r0, Z+
     4c2:	f0 81       	ld	r31, Z
     4c4:	e0 2d       	mov	r30, r0
     4c6:	20 81       	ld	r18, Z
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	2a 95       	dec	r18
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4d6:	95 b1       	in	r25, 0x05	; 5
     4d8:	89 2b       	or	r24, r25
     4da:	85 b9       	out	0x05, r24	; 5
     4dc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4e0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4e4:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <current_servo>
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e4 5d       	subi	r30, 0xD4	; 212
     4f0:	f9 4f       	sbci	r31, 0xF9	; 249
     4f2:	01 90       	ld	r0, Z+
     4f4:	f0 81       	ld	r31, Z
     4f6:	e0 2d       	mov	r30, r0
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	82 0f       	add	r24, r18
     4fe:	93 1f       	adc	r25, r19
     500:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     504:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <timer1_init>:
     52e:	a4 e8       	ldi	r26, 0x84	; 132
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	1c 92       	st	X, r1
     536:	1e 92       	st	-X, r1
     538:	86 b3       	in	r24, 0x16	; 22
     53a:	80 62       	ori	r24, 0x20	; 32
     53c:	86 bb       	out	0x16, r24	; 22
     53e:	ef e6       	ldi	r30, 0x6F	; 111
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	87 62       	ori	r24, 0x27	; 39
     546:	80 83       	st	Z, r24
     548:	e1 e8       	ldi	r30, 0x81	; 129
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	80 83       	st	Z, r24
     552:	80 81       	ld	r24, Z
     554:	82 60       	ori	r24, 0x02	; 2
     556:	80 83       	st	Z, r24
     558:	8d 91       	ld	r24, X+
     55a:	9c 91       	ld	r25, X
     55c:	80 5c       	subi	r24, 0xC0	; 192
     55e:	93 46       	sbci	r25, 0x63	; 99
     560:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     564:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     568:	08 95       	ret

0000056a <timer2_init>:
     56a:	e1 eb       	ldi	r30, 0xB1	; 177
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	87 60       	ori	r24, 0x07	; 7
     572:	80 83       	st	Z, r24
     574:	8b e9       	ldi	r24, 0x9B	; 155
     576:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     57a:	e0 e7       	ldi	r30, 0x70	; 112
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 83       	st	Z, r24
     584:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     588:	08 95       	ret

0000058a <gpio_pins_init>:
     58a:	84 b1       	in	r24, 0x04	; 4
     58c:	80 62       	ori	r24, 0x20	; 32
     58e:	84 b9       	out	0x04, r24	; 4
     590:	85 b1       	in	r24, 0x05	; 5
     592:	80 62       	ori	r24, 0x20	; 32
     594:	85 b9       	out	0x05, r24	; 5
     596:	8a b1       	in	r24, 0x0a	; 10
     598:	88 60       	ori	r24, 0x08	; 8
     59a:	8a b9       	out	0x0a, r24	; 10
     59c:	84 b1       	in	r24, 0x04	; 4
     59e:	8e 7f       	andi	r24, 0xFE	; 254
     5a0:	84 b9       	out	0x04, r24	; 4
     5a2:	8a b1       	in	r24, 0x0a	; 10
     5a4:	8f 7e       	andi	r24, 0xEF	; 239
     5a6:	8a b9       	out	0x0a, r24	; 10
     5a8:	84 b1       	in	r24, 0x04	; 4
     5aa:	82 60       	ori	r24, 0x02	; 2
     5ac:	84 b9       	out	0x04, r24	; 4
     5ae:	84 b1       	in	r24, 0x04	; 4
     5b0:	84 60       	ori	r24, 0x04	; 4
     5b2:	84 b9       	out	0x04, r24	; 4
     5b4:	84 b1       	in	r24, 0x04	; 4
     5b6:	88 60       	ori	r24, 0x08	; 8
     5b8:	84 b9       	out	0x04, r24	; 4
     5ba:	0e 94 bd 08 	call	0x117a	; 0x117a <tcrt_init>
     5be:	8b b1       	in	r24, 0x0b	; 11
     5c0:	87 7f       	andi	r24, 0xF7	; 247
     5c2:	8b b9       	out	0x0b, r24	; 11
     5c4:	8b b1       	in	r24, 0x0b	; 11
     5c6:	8f 7e       	andi	r24, 0xEF	; 239
     5c8:	8b b9       	out	0x0b, r24	; 11
     5ca:	08 95       	ret

000005cc <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     5ee:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     5f2:	81 ff       	sbrs	r24, 1
     5f4:	ee c0       	rjmp	.+476    	; 0x7d2 <__vector_7+0x206>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     5f6:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <ultraSensor+0xd>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	51 f5       	brne	.+84     	; 0x652 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     5fe:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     602:	85 fd       	sbrc	r24, 5
     604:	0d c0       	rjmp	.+26     	; 0x620 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     606:	0e 94 da 09 	call	0x13b4	; 0x13b4 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     60a:	e1 e4       	ldi	r30, 0x41	; 65
     60c:	f6 e0       	ldi	r31, 0x06	; 6
     60e:	80 81       	ld	r24, Z
     610:	81 60       	ori	r24, 0x01	; 1
     612:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     614:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     618:	80 62       	ori	r24, 0x20	; 32
     61a:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
     61e:	19 c0       	rjmp	.+50     	; 0x652 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     620:	0e 94 de 09 	call	0x13bc	; 0x13bc <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     624:	e1 e4       	ldi	r30, 0x41	; 65
     626:	f6 e0       	ldi	r31, 0x06	; 6
     628:	80 81       	ld	r24, Z
     62a:	82 60       	ori	r24, 0x02	; 2
     62c:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     62e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     632:	8d 7d       	andi	r24, 0xDD	; 221
     634:	88 60       	ori	r24, 0x08	; 8
     636:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     63a:	80 81       	ld	r24, Z
     63c:	8f 7d       	andi	r24, 0xDF	; 223
     63e:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     646:	80 81       	ld	r24, Z
     648:	80 61       	ori	r24, 0x10	; 16
     64a:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     64c:	80 81       	ld	r24, Z
     64e:	8d 7f       	andi	r24, 0xFD	; 253
     650:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     652:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <ultraSensor+0xd>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	d1 f4       	brne	.+52     	; 0x68e <__vector_7+0xc2>
     65a:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <ultraSensor+0xc>
     65e:	84 ff       	sbrs	r24, 4
     660:	16 c0       	rjmp	.+44     	; 0x68e <__vector_7+0xc2>
     662:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     666:	89 70       	andi	r24, 0x09	; 9
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	89 f4       	brne	.+34     	; 0x68e <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     66c:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <veintems_counter>
     670:	81 11       	cpse	r24, r1
     672:	06 c0       	rjmp	.+12     	; 0x680 <__vector_7+0xb4>
				veintems_counter++;
     674:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <veintems_counter>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <veintems_counter>
     67e:	07 c0       	rjmp	.+14     	; 0x68e <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     680:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     684:	81 60       	ori	r24, 0x01	; 1
     686:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
				veintems_counter = 0;
     68a:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     68e:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <ultraSensor+0xc>
     692:	85 fd       	sbrc	r24, 5
     694:	22 c0       	rjmp	.+68     	; 0x6da <__vector_7+0x10e>
     696:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     69a:	84 fd       	sbrc	r24, 4
     69c:	1e c0       	rjmp	.+60     	; 0x6da <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     69e:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <wait_time>
     6a2:	87 30       	cpi	r24, 0x07	; 7
     6a4:	30 f4       	brcc	.+12     	; 0x6b2 <__vector_7+0xe6>
				wait_time++;
     6a6:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <wait_time>
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <wait_time>
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     6b2:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     6b6:	80 61       	ori	r24, 0x10	; 16
     6b8:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
				wait_time = 0;
     6bc:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     6c0:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <ultraSensor+0xc>
     6c4:	83 ff       	sbrs	r24, 3
     6c6:	09 c0       	rjmp	.+18     	; 0x6da <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     6c8:	60 91 11 06 	lds	r22, 0x0611	; 0x800611 <bandera2>
     6cc:	66 fb       	bst	r22, 6
     6ce:	66 27       	eor	r22, r22
     6d0:	60 f9       	bld	r22, 0
     6d2:	85 e3       	ldi	r24, 0x35	; 53
     6d4:	96 e0       	ldi	r25, 0x06	; 6
     6d6:	0e 94 af 0a 	call	0x155e	; 0x155e <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     6da:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <diezMsCounter>
     6de:	8a 30       	cpi	r24, 0x0A	; 10
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <__vector_7+0x122>
			diezMsCounter++;
     6e2:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <diezMsCounter>
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <diezMsCounter>
     6ec:	07 c0       	rjmp	.+14     	; 0x6fc <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     6ee:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     6f2:	88 60       	ori	r24, 0x08	; 8
     6f4:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			diezMsCounter = 0;
     6f8:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     6fc:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     700:	86 ff       	sbrs	r24, 6
     702:	0e c0       	rjmp	.+28     	; 0x720 <__vector_7+0x154>
			if(btn_pressed_time == 255){
     704:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <btn_pressed_time>
     708:	8f 3f       	cpi	r24, 0xFF	; 255
     70a:	29 f4       	brne	.+10     	; 0x716 <__vector_7+0x14a>
				BTN_OVF = 1;
     70c:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     710:	84 60       	ori	r24, 0x04	; 4
     712:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			}
			btn_pressed_time++;
     716:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <btn_pressed_time>
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     720:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <servoA+0x1>
     724:	81 ff       	sbrs	r24, 1
     726:	0d c0       	rjmp	.+26     	; 0x742 <__vector_7+0x176>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     728:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <servoA+0x5>
     72c:	9a 30       	cpi	r25, 0x0A	; 10
     72e:	20 f4       	brcc	.+8      	; 0x738 <__vector_7+0x16c>
				servoA.state_time++;  // Increment time spent in PUSH mode
     730:	9f 5f       	subi	r25, 0xFF	; 255
     732:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <servoA+0x5>
     736:	05 c0       	rjmp	.+10     	; 0x742 <__vector_7+0x176>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     738:	e0 ed       	ldi	r30, 0xD0	; 208
     73a:	f5 e0       	ldi	r31, 0x05	; 5
     73c:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     742:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <servoB+0x1>
     746:	81 ff       	sbrs	r24, 1
     748:	0d c0       	rjmp	.+26     	; 0x764 <__vector_7+0x198>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     74a:	90 91 4b 06 	lds	r25, 0x064B	; 0x80064b <servoB+0x5>
     74e:	9a 30       	cpi	r25, 0x0A	; 10
     750:	20 f4       	brcc	.+8      	; 0x75a <__vector_7+0x18e>
				servoB.state_time++;  // Increment time spent in PUSH mode
     752:	9f 5f       	subi	r25, 0xFF	; 255
     754:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <servoB+0x5>
     758:	05 c0       	rjmp	.+10     	; 0x764 <__vector_7+0x198>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     75a:	e6 e4       	ldi	r30, 0x46	; 70
     75c:	f6 e0       	ldi	r31, 0x06	; 6
     75e:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     760:	84 60       	ori	r24, 0x04	; 4
     762:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     764:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <servoC+0x1>
     768:	81 ff       	sbrs	r24, 1
     76a:	0d c0       	rjmp	.+26     	; 0x786 <__vector_7+0x1ba>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     76c:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <servoC+0x5>
     770:	9a 30       	cpi	r25, 0x0A	; 10
     772:	20 f4       	brcc	.+8      	; 0x77c <__vector_7+0x1b0>
				servoC.state_time++;  // Increment time spent in PUSH mode
     774:	9f 5f       	subi	r25, 0xFF	; 255
     776:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <servoC+0x5>
     77a:	05 c0       	rjmp	.+10     	; 0x786 <__vector_7+0x1ba>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     77c:	e2 e1       	ldi	r30, 0x12	; 18
     77e:	f6 e0       	ldi	r31, 0x06	; 6
     780:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     782:	84 60       	ori	r24, 0x04	; 4
     784:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     786:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     78a:	80 ff       	sbrs	r24, 0
     78c:	05 c0       	rjmp	.+10     	; 0x798 <__vector_7+0x1cc>
     78e:	83 fd       	sbrc	r24, 3
     790:	03 c0       	rjmp	.+6      	; 0x798 <__vector_7+0x1cc>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     792:	88 60       	ori	r24, 0x08	; 8
     794:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     798:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     79c:	80 ff       	sbrs	r24, 0
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <__vector_7+0x1de>
     7a0:	83 fd       	sbrc	r24, 3
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <__vector_7+0x1de>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     7a4:	88 60       	ori	r24, 0x08	; 8
     7a6:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     7aa:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
     7ae:	80 ff       	sbrs	r24, 0
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <__vector_7+0x1f4>
     7b2:	83 fd       	sbrc	r24, 3
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <__vector_7+0x1f4>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     7b6:	e9 ed       	ldi	r30, 0xD9	; 217
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	80 81       	ld	r24, Z
     7bc:	88 60       	ori	r24, 0x08	; 8
     7be:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     7c0:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
     7c4:	80 ff       	sbrs	r24, 0
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <__vector_7+0x206>
     7c8:	83 fd       	sbrc	r24, 3
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <__vector_7+0x206>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <IR_U>
		}
	}
}
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <main>:
int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
     7f4:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <bandera3>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
	IR_CALIBRATED = 0;
     7fe:	82 e8       	ldi	r24, 0x82	; 130
     800:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     804:	88 e0       	ldi	r24, 0x08	; 8
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 ee 09 	call	0x13dc	; 0x13dc <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     80c:	ef e4       	ldi	r30, 0x4F	; 79
     80e:	f6 e0       	ldi	r31, 0x06	; 6
     810:	8e e0       	ldi	r24, 0x0E	; 14
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	93 83       	std	Z+3, r25	; 0x03
     816:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	80 83       	st	Z, r24
	diezMsCounter = 0;
     820:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     824:	0e 94 c5 02 	call	0x58a	; 0x58a <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     828:	0e 94 97 02 	call	0x52e	; 0x52e <timer1_init>
	timer2_init();
     82c:	0e 94 b5 02 	call	0x56a	; 0x56a <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     830:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     834:	63 e5       	ldi	r22, 0x53	; 83
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	85 e3       	ldi	r24, 0x35	; 53
     83a:	96 e0       	ldi	r25, 0x06	; 6
     83c:	0e 94 90 0a 	call	0x1520	; 0x1520 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     840:	60 91 11 06 	lds	r22, 0x0611	; 0x800611 <bandera2>
     844:	66 fb       	bst	r22, 6
     846:	66 27       	eor	r22, r22
     848:	60 f9       	bld	r22, 0
     84a:	85 e3       	ldi	r24, 0x35	; 53
     84c:	96 e0       	ldi	r25, 0x06	; 6
     84e:	0e 94 19 0a 	call	0x1432	; 0x1432 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     852:	49 ed       	ldi	r20, 0xD9	; 217
     854:	55 e0       	ldi	r21, 0x05	; 5
     856:	65 e3       	ldi	r22, 0x35	; 53
     858:	76 e0       	ldi	r23, 0x06	; 6
     85a:	87 e2       	ldi	r24, 0x27	; 39
     85c:	96 e0       	ldi	r25, 0x06	; 6
     85e:	0e 94 4c 05 	call	0xa98	; 0xa98 <initDetector>
	initSorter(&SorterSystem);
     862:	88 ef       	ldi	r24, 0xF8	; 248
     864:	95 e0       	ldi	r25, 0x05	; 5
     866:	0e 94 ab 05 	call	0xb56	; 0xb56 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     86a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     874:	8c e9       	ldi	r24, 0x9C	; 156
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
	sei();
     87c:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     87e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     882:	85 ff       	sbrs	r24, 5
     884:	05 c0       	rjmp	.+10     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			irSensorsTask(&SorterSystem);
     886:	88 ef       	ldi	r24, 0xF8	; 248
     888:	95 e0       	ldi	r25, 0x05	; 5
     88a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <irSensorsTask>
     88e:	75 c0       	rjmp	.+234    	; 0x97a <__stack+0x7b>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     890:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <__data_end>
     894:	81 11       	cpse	r24, r1
     896:	23 c0       	rjmp	.+70     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
		printf("Calibrando sensores IR...\n");
     898:	82 e2       	ldi	r24, 0x22	; 34
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     8a0:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     8a4:	80 ff       	sbrs	r24, 0
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     8a8:	84 60       	ori	r24, 0x04	; 4
     8aa:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     8ae:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     8b6:	84 60       	ori	r24, 0x04	; 4
     8b8:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     8bc:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
     8c0:	80 ff       	sbrs	r24, 0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     8c4:	84 60       	ori	r24, 0x04	; 4
     8c6:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     8ca:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
     8ce:	80 ff       	sbrs	r24, 0
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     8d2:	84 60       	ori	r24, 0x04	; 4
     8d4:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <IR_U>
		}
		init_done = true;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     8de:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     8e2:	82 ff       	sbrs	r24, 2
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
		calibrateIRSensor(&IR_A);
     8e6:	88 e1       	ldi	r24, 0x18	; 24
     8e8:	96 e0       	ldi	r25, 0x06	; 6
     8ea:	0e 94 1c 09 	call	0x1238	; 0x1238 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     8ee:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     8f2:	82 ff       	sbrs	r24, 2
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
		calibrateIRSensor(&IR_B);
     8f6:	81 ec       	ldi	r24, 0xC1	; 193
     8f8:	95 e0       	ldi	r25, 0x05	; 5
     8fa:	0e 94 1c 09 	call	0x1238	; 0x1238 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     8fe:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
     902:	82 ff       	sbrs	r24, 2
     904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xf>
		calibrateIRSensor(&IR_C);
     906:	89 ee       	ldi	r24, 0xE9	; 233
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	0e 94 1c 09 	call	0x1238	; 0x1238 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     90e:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
     912:	82 ff       	sbrs	r24, 2
     914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
		calibrateIRSensor(&IR_U);
     916:	89 ed       	ldi	r24, 0xD9	; 217
     918:	95 e0       	ldi	r25, 0x05	; 5
     91a:	0e 94 1c 09 	call	0x1238	; 0x1238 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     91e:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     922:	82 fd       	sbrc	r24, 2
     924:	0e c0       	rjmp	.+28     	; 0x942 <__stack+0x43>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     926:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     92a:	82 fd       	sbrc	r24, 2
     92c:	0c c0       	rjmp	.+24     	; 0x946 <__stack+0x47>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     92e:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     932:	82 fd       	sbrc	r24, 2
     934:	0a c0       	rjmp	.+20     	; 0x94a <__stack+0x4b>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     936:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     93a:	82 ff       	sbrs	r24, 2
     93c:	08 c0       	rjmp	.+16     	; 0x94e <__stack+0x4f>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <__stack+0x51>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	05 c0       	rjmp	.+10     	; 0x950 <__stack+0x51>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     94e:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     950:	88 23       	and	r24, r24
     952:	99 f0       	breq	.+38     	; 0x97a <__stack+0x7b>
				printf("Todos los sensores IR calibrados.\n");
     954:	8c e3       	ldi	r24, 0x3C	; 60
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
				IR_CALIBRATED = 1;
     95c:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     960:	80 62       	ori	r24, 0x20	; 32
     962:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
				IR_A.calibrationCounter = 0;
     966:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     96a:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     96e:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     972:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <IR_U+0x9>
				initOutputs();
     976:	0e 94 66 05 	call	0xacc	; 0xacc <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     97a:	68 ef       	ldi	r22, 0xF8	; 248
     97c:	75 e0       	ldi	r23, 0x05	; 5
     97e:	87 e2       	ldi	r24, 0x27	; 39
     980:	96 e0       	ldi	r25, 0x06	; 6
     982:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <ultraSensorTask>
		servosTask();
     986:	0e 94 85 08 	call	0x110a	; 0x110a <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     98a:	4c 9b       	sbis	0x09, 4	; 9
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <__stack+0xa3>
     98e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     992:	86 fd       	sbrc	r24, 6
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0xa3>
		btn_pressed_time = 0;
     996:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <btn_pressed_time>
		BTN_PRESSED = 1;
     99a:	80 64       	ori	r24, 0x40	; 64
     99c:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
     9a0:	28 c0       	rjmp	.+80     	; 0x9f2 <__stack+0xf3>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     9a2:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     9a6:	86 ff       	sbrs	r24, 6
     9a8:	24 c0       	rjmp	.+72     	; 0x9f2 <__stack+0xf3>
     9aa:	4c 99       	sbic	0x09, 4	; 9
     9ac:	22 c0       	rjmp	.+68     	; 0x9f2 <__stack+0xf3>
		BTN_PRESSED = 0;
     9ae:	8f 7b       	andi	r24, 0xBF	; 191
     9b0:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     9b4:	82 ff       	sbrs	r24, 2
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__stack+0xc1>
			printf("Btn overflowed\n");
     9b8:	8e e5       	ldi	r24, 0x5E	; 94
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     9c0:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <btn_pressed_time>
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	30 f4       	brcc	.+12     	; 0x9d4 <__stack+0xd5>
     9c8:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     9cc:	98 2f       	mov	r25, r24
     9ce:	94 70       	andi	r25, 0x04	; 4
     9d0:	82 ff       	sbrs	r24, 2
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__stack+0xe1>
			BTN_RELEASED = 1;
     9d4:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__stack+0xf3>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     9e0:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <btn_pressed_time>
			if(BTN_OVF){
     9e4:	99 23       	and	r25, r25
     9e6:	29 f0       	breq	.+10     	; 0x9f2 <__stack+0xf3>
				BTN_OVF = 0;
     9e8:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     9ec:	8b 7f       	andi	r24, 0xFB	; 251
     9ee:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     9f2:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     9f6:	84 ff       	sbrs	r24, 4
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__stack+0x10b>
			WAIT_TIME_TRIGGER_PASSED = 0;
     9fa:	8f 7e       	andi	r24, 0xEF	; 239
     9fc:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     a00:	e1 e4       	ldi	r30, 0x41	; 65
     a02:	f6 e0       	ldi	r31, 0x06	; 6
     a04:	80 81       	ld	r24, Z
     a06:	80 62       	ori	r24, 0x20	; 32
     a08:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     a0a:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     a0e:	83 ff       	sbrs	r24, 3
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <__stack+0x123>
			ECHO_INTERVAL_FLAG = 0;
     a12:	87 7f       	andi	r24, 0xF7	; 247
     a14:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			EMIT_TRIGGER = 1;
     a18:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     a1c:	82 60       	ori	r24, 0x02	; 2
     a1e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     a22:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     a26:	80 ff       	sbrs	r24, 0
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <__stack+0x131>
			BTN_RELEASED = 0; //TEST SERVO A
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     a30:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     a34:	84 ff       	sbrs	r24, 4
     a36:	23 cf       	rjmp	.-442    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
			IR_READ_INTERRUPT = 0;
     a38:	8f 7e       	andi	r24, 0xEF	; 239
     a3a:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     a3e:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     a42:	80 ff       	sbrs	r24, 0
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <__stack+0x155>
     a46:	82 ff       	sbrs	r24, 2
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <__stack+0x155>
     a4a:	83 fd       	sbrc	r24, 3
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__stack+0x155>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     a54:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     a58:	80 ff       	sbrs	r24, 0
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
     a5c:	82 ff       	sbrs	r24, 2
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <__stack+0x16b>
     a60:	83 fd       	sbrc	r24, 3
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <__stack+0x16b>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a64:	88 60       	ori	r24, 0x08	; 8
     a66:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     a6a:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
     a6e:	80 ff       	sbrs	r24, 0
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <__stack+0x181>
     a72:	82 ff       	sbrs	r24, 2
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__stack+0x181>
     a76:	83 fd       	sbrc	r24, 3
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <__stack+0x181>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a7a:	88 60       	ori	r24, 0x08	; 8
     a7c:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     a80:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
     a84:	80 ff       	sbrs	r24, 0
     a86:	fb ce       	rjmp	.-522    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     a88:	82 ff       	sbrs	r24, 2
     a8a:	f9 ce       	rjmp	.-526    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     a8c:	83 fd       	sbrc	r24, 3
     a8e:	f7 ce       	rjmp	.-530    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     a90:	88 60       	ori	r24, 0x08	; 8
     a92:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <IR_U>
     a96:	f3 ce       	rjmp	.-538    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>

00000a98 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <initDetector+0x6>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	fc 01       	movw	r30, r24
     aa4:	5a 83       	std	Y+2, r21	; 0x02
     aa6:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     aa8:	85 e3       	ldi	r24, 0x35	; 53
     aaa:	96 e0       	ldi	r25, 0x06	; 6
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	93 83       	std	Z+3, r25	; 0x03
     ab6:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     ab8:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     aba:	8d e6       	ldi	r24, 0x6D	; 109
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
}
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     ad0:	2a e5       	ldi	r18, 0x5A	; 90
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 ed       	ldi	r24, 0xD0	; 208
     ade:	95 e0       	ldi	r25, 0x05	; 5
     ae0:	0e 94 99 08 	call	0x1132	; 0x1132 <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     ae4:	2a e5       	ldi	r18, 0x5A	; 90
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	42 e0       	ldi	r20, 0x02	; 2
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	86 e4       	ldi	r24, 0x46	; 70
     af2:	96 e0       	ldi	r25, 0x06	; 6
     af4:	0e 94 99 08 	call	0x1132	; 0x1132 <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     af8:	ec e2       	ldi	r30, 0x2C	; 44
     afa:	f6 e0       	ldi	r31, 0x06	; 6
     afc:	80 ed       	ldi	r24, 0xD0	; 208
     afe:	95 e0       	ldi	r25, 0x05	; 5
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     b04:	86 e4       	ldi	r24, 0x46	; 70
     b06:	96 e0       	ldi	r25, 0x06	; 6
     b08:	93 83       	std	Z+3, r25	; 0x03
     b0a:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     b0c:	82 e1       	ldi	r24, 0x12	; 18
     b0e:	96 e0       	ldi	r25, 0x06	; 6
     b10:	95 83       	std	Z+5, r25	; 0x05
     b12:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     b14:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <current_servo>
	//printf("Init servos\n");
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     b18:	c6 ed       	ldi	r28, 0xD6	; 214
     b1a:	d5 e0       	ldi	r29, 0x05	; 5
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     b20:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <IR_A+0x8>
     b24:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     b26:	ac e4       	ldi	r26, 0x4C	; 76
     b28:	b6 e0       	ldi	r27, 0x06	; 6
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     b32:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <IR_B+0x8>
     b36:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     b38:	e2 e3       	ldi	r30, 0x32	; 50
     b3a:	f6 e0       	ldi	r31, 0x06	; 6
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     b40:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <IR_C+0x8>
     b44:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     b4a:	12 96       	adiw	r26, 0x02	; 2
     b4c:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     b4e:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     b56:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     b58:	8c e1       	ldi	r24, 0x1C	; 28
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     b60:	86 ed       	ldi	r24, 0xD6	; 214
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	93 83       	std	Z+3, r25	; 0x03
     b66:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     b68:	8c e4       	ldi	r24, 0x4C	; 76
     b6a:	96 e0       	ldi	r25, 0x06	; 6
     b6c:	95 83       	std	Z+5, r25	; 0x05
     b6e:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     b70:	82 e3       	ldi	r24, 0x32	; 50
     b72:	96 e0       	ldi	r25, 0x06	; 6
     b74:	97 83       	std	Z+7, r25	; 0x07
     b76:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     b78:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     b7c:	88 23       	and	r24, r24
     b7e:	44 f4       	brge	.+16     	; 0xb90 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     b80:	8e e8       	ldi	r24, 0x8E	; 142
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     b88:	80 ec       	ldi	r24, 0xC0	; 192
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
     b90:	08 95       	ret

00000b92 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     b92:	8e 3b       	cpi	r24, 0xBE	; 190
     b94:	98 f0       	brcs	.+38     	; 0xbbc <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     b96:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <bandera2>
     b9a:	99 23       	and	r25, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <classify_box+0xe>
     b9e:	83 c0       	rjmp	.+262    	; 0xca6 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     ba0:	1f 92       	push	r1
     ba2:	8f 93       	push	r24
     ba4:	85 ee       	ldi	r24, 0xE5	; 229
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
		}
		return NO_BOX;
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     bbc:	9e eb       	ldi	r25, 0xBE	; 190
     bbe:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     bc0:	97 33       	cpi	r25, 0x37	; 55
     bc2:	98 f4       	brcc	.+38     	; 0xbea <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     bc4:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     bc8:	80 78       	andi	r24, 0x80	; 128
     bca:	09 f4       	brne	.+2      	; 0xbce <classify_box+0x3c>
     bcc:	73 c0       	rjmp	.+230    	; 0xcb4 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     bce:	1f 92       	push	r1
     bd0:	9f 93       	push	r25
     bd2:	85 e1       	ldi	r24, 0x15	; 21
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	9f 93       	push	r25
     bd8:	8f 93       	push	r24
     bda:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     bea:	db 01       	movw	r26, r22
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	80 81       	ld	r24, Z
     bf2:	98 17       	cp	r25, r24
     bf4:	b0 f0       	brcs	.+44     	; 0xc22 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     bf6:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     bf8:	89 17       	cp	r24, r25
     bfa:	98 f0       	brcs	.+38     	; 0xc22 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     bfc:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     c00:	88 23       	and	r24, r24
     c02:	0c f0       	brlt	.+2      	; 0xc06 <classify_box+0x74>
     c04:	52 c0       	rjmp	.+164    	; 0xcaa <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     c06:	1f 92       	push	r1
     c08:	9f 93       	push	r25
     c0a:	8e e3       	ldi	r24, 0x3E	; 62
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	9f 93       	push	r25
     c10:	8f 93       	push	r24
     c12:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	98 17       	cp	r25, r24
     c26:	a8 f0       	brcs	.+42     	; 0xc52 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     c28:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     c2a:	89 17       	cp	r24, r25
     c2c:	90 f0       	brcs	.+36     	; 0xc52 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c2e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     c32:	88 23       	and	r24, r24
     c34:	e4 f5       	brge	.+120    	; 0xcae <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     c36:	1f 92       	push	r1
     c38:	9f 93       	push	r25
     c3a:	83 e5       	ldi	r24, 0x53	; 83
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c52:	84 81       	ldd	r24, Z+4	; 0x04
     c54:	98 17       	cp	r25, r24
     c56:	a8 f0       	brcs	.+42     	; 0xc82 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     c58:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     c5a:	89 17       	cp	r24, r25
     c5c:	90 f0       	brcs	.+36     	; 0xc82 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     c5e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     c62:	88 23       	and	r24, r24
     c64:	34 f5       	brge	.+76     	; 0xcb2 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     c66:	1f 92       	push	r1
     c68:	9f 93       	push	r25
     c6a:	88 e6       	ldi	r24, 0x68	; 104
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	9f 93       	push	r25
     c70:	8f 93       	push	r24
     c72:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     c82:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     c86:	80 78       	andi	r24, 0x80	; 128
     c88:	a9 f0       	breq	.+42     	; 0xcb4 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     c8a:	1f 92       	push	r1
     c8c:	9f 93       	push	r25
     c8e:	8d e7       	ldi	r24, 0x7D	; 125
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     cb2:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     cb4:	08 95       	ret

00000cb6 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
     cc2:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
     cc4:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     cc8:	88 23       	and	r24, r24
     cca:	bc f5       	brge	.+110    	; 0xd3a <ultraSensorTask+0x84>
     ccc:	e8 81       	ld	r30, Y
     cce:	f9 81       	ldd	r31, Y+1	; 0x01
     cd0:	84 85       	ldd	r24, Z+12	; 0x0c
     cd2:	85 ff       	sbrs	r24, 5
     cd4:	32 c0       	rjmp	.+100    	; 0xd3a <ultraSensorTask+0x84>
     cd6:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     cda:	81 ff       	sbrs	r24, 1
     cdc:	2e c0       	rjmp	.+92     	; 0xd3a <ultraSensorTask+0x84>
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	81 ff       	sbrs	r24, 1
     ce2:	2b c0       	rjmp	.+86     	; 0xd3a <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     ce4:	cf 01       	movw	r24, r30
     ce6:	0e 94 cc 0a 	call	0x1598	; 0x1598 <ultrasonic_start>
     cea:	88 23       	and	r24, r24
     cec:	c1 f0       	breq	.+48     	; 0xd1e <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
     cee:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     cf2:	86 ff       	sbrs	r24, 6
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
     cf6:	8b ea       	ldi	r24, 0xAB	; 171
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     cfe:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     d02:	8f 77       	andi	r24, 0x7F	; 127
     d04:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     d08:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     d0c:	8d 7f       	andi	r24, 0xFD	; 253
     d0e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     d12:	e8 81       	ld	r30, Y
     d14:	f9 81       	ldd	r31, Y+1	; 0x01
     d16:	84 85       	ldd	r24, Z+12	; 0x0c
     d18:	8f 7d       	andi	r24, 0xDF	; 223
     d1a:	84 87       	std	Z+12, r24	; 0x0c
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
     d1e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     d22:	86 ff       	sbrs	r24, 6
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
     d26:	86 ea       	ldi	r24, 0xA6	; 166
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			}
			EMIT_FAILED = 1;
     d2e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
			EMIT_TRIGGER = 0;
     d32:	84 60       	ori	r24, 0x04	; 4
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     d3a:	88 81       	ld	r24, Y
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     d42:	e8 81       	ld	r30, Y
     d44:	f9 81       	ldd	r31, Y+1	; 0x01
     d46:	85 85       	ldd	r24, Z+13	; 0x0d
     d48:	85 30       	cpi	r24, 0x05	; 5
     d4a:	09 f0       	breq	.+2      	; 0xd4e <ultraSensorTask+0x98>
     d4c:	c1 c0       	rjmp	.+386    	; 0xed0 <ultraSensorTask+0x21a>
     d4e:	84 85       	ldd	r24, Z+12	; 0x0c
     d50:	88 23       	and	r24, r24
     d52:	0c f0       	brlt	.+2      	; 0xd56 <ultraSensorTask+0xa0>
     d54:	bd c0       	rjmp	.+378    	; 0xed0 <ultraSensorTask+0x21a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     d56:	84 85       	ldd	r24, Z+12	; 0x0c
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     d5c:	e8 81       	ld	r30, Y
     d5e:	f9 81       	ldd	r31, Y+1	; 0x01
     d60:	80 85       	ldd	r24, Z+8	; 0x08
     d62:	91 85       	ldd	r25, Z+9	; 0x09
     d64:	a2 85       	ldd	r26, Z+10	; 0x0a
     d66:	b3 85       	ldd	r27, Z+11	; 0x0b
     d68:	8f 3b       	cpi	r24, 0xBF	; 191
     d6a:	91 05       	cpc	r25, r1
     d6c:	a1 05       	cpc	r26, r1
     d6e:	b1 05       	cpc	r27, r1
     d70:	b0 f0       	brcs	.+44     	; 0xd9e <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	81 60       	ori	r24, 0x01	; 1
     d76:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     d78:	98 2f       	mov	r25, r24
     d7a:	92 95       	swap	r25
     d7c:	9f 70       	andi	r25, 0x0F	; 15
     d7e:	92 30       	cpi	r25, 0x02	; 2
     d80:	51 f4       	brne	.+20     	; 0xd96 <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     d82:	8f 70       	andi	r24, 0x0F	; 15
     d84:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     d86:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     d8a:	88 23       	and	r24, r24
     d8c:	24 f4       	brge	.+8      	; 0xd96 <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
     d8e:	86 eb       	ldi	r24, 0xB6	; 182
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	8f 70       	andi	r24, 0x0F	; 15
     d9a:	8c 83       	std	Y+4, r24	; 0x04
     d9c:	8d c0       	rjmp	.+282    	; 0xeb8 <ultraSensorTask+0x202>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	98 2f       	mov	r25, r24
     da2:	92 95       	swap	r25
     da4:	9f 70       	andi	r25, 0x0F	; 15
     da6:	09 f0       	breq	.+2      	; 0xdaa <ultraSensorTask+0xf4>
     da8:	87 c0       	rjmp	.+270    	; 0xeb8 <ultraSensorTask+0x202>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     daa:	8f 70       	andi	r24, 0x0F	; 15
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     db0:	80 85       	ldd	r24, Z+8	; 0x08
     db2:	91 85       	ldd	r25, Z+9	; 0x09
     db4:	a2 85       	ldd	r26, Z+10	; 0x0a
     db6:	b3 85       	ldd	r27, Z+11	; 0x0b
     db8:	b8 01       	movw	r22, r16
     dba:	0e 94 c9 05 	call	0xb92	; 0xb92 <classify_box>
     dbe:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	f8 16       	cp	r15, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <ultraSensorTask+0x112>
     dc6:	74 c0       	rjmp	.+232    	; 0xeb0 <ultraSensorTask+0x1fa>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     dc8:	e8 81       	ld	r30, Y
     dca:	f9 81       	ldd	r31, Y+1	; 0x01
     dcc:	80 85       	ldd	r24, Z+8	; 0x08
     dce:	91 85       	ldd	r25, Z+9	; 0x09
     dd0:	a2 85       	ldd	r26, Z+10	; 0x0a
     dd2:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     dd4:	e1 e0       	ldi	r30, 0x01	; 1
     dd6:	fe 16       	cp	r15, r30
     dd8:	49 f0       	breq	.+18     	; 0xdec <ultraSensorTask+0x136>
     dda:	fe 16       	cp	r15, r30
     ddc:	28 f1       	brcs	.+74     	; 0xe28 <ultraSensorTask+0x172>
     dde:	f2 e0       	ldi	r31, 0x02	; 2
     de0:	ff 16       	cp	r15, r31
     de2:	71 f0       	breq	.+28     	; 0xe00 <ultraSensorTask+0x14a>
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	f8 16       	cp	r15, r24
     de8:	a9 f0       	breq	.+42     	; 0xe14 <ultraSensorTask+0x15e>
     dea:	23 c0       	rjmp	.+70     	; 0xe32 <ultraSensorTask+0x17c>
					{
						case BOX_SIZE_A: 
							printf("BOX_SIZE_A\n");
     dec:	8f ec       	ldi	r24, 0xCF	; 207
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
							SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
     df4:	e6 ed       	ldi	r30, 0xD6	; 214
     df6:	f5 e0       	ldi	r31, 0x05	; 5
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	82 83       	std	Z+2, r24	; 0x02
							break;
     dfe:	1d c0       	rjmp	.+58     	; 0xe3a <ultraSensorTask+0x184>
						case BOX_SIZE_B: 
							printf("BOX_SIZE_B\n");
     e00:	8a ed       	ldi	r24, 0xDA	; 218
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
							SET_FLAG(salidaB.flags, OUTPUT_BUSY);
     e08:	ec e4       	ldi	r30, 0x4C	; 76
     e0a:	f6 e0       	ldi	r31, 0x06	; 6
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	82 83       	std	Z+2, r24	; 0x02
							break;
     e12:	13 c0       	rjmp	.+38     	; 0xe3a <ultraSensorTask+0x184>
						case BOX_SIZE_C:
							printf("BOX_SIZE_C\n");
     e14:	85 ee       	ldi	r24, 0xE5	; 229
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
							SET_FLAG(salidaC.flags, OUTPUT_BUSY);
     e1c:	e2 e3       	ldi	r30, 0x32	; 50
     e1e:	f6 e0       	ldi	r31, 0x06	; 6
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	82 83       	std	Z+2, r24	; 0x02
							break;
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <ultraSensorTask+0x184>
						case BOX_DISCARDED:
							printf("BOX_DISCARDED\n");
     e28:	80 ef       	ldi	r24, 0xF0	; 240
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
							break;
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <ultraSensorTask+0x184>
						default: 
							printf("Tipo no reconocido\n");
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
							break;
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     e3a:	f1 10       	cpse	r15, r1
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <ultraSensorTask+0x1a2>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     e3e:	f8 01       	movw	r30, r16
     e40:	80 89       	ldd	r24, Z+16	; 0x10
     e42:	91 89       	ldd	r25, Z+17	; 0x11
     e44:	a2 89       	ldd	r26, Z+18	; 0x12
     e46:	b3 89       	ldd	r27, Z+19	; 0x13
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	a1 1d       	adc	r26, r1
     e4c:	b1 1d       	adc	r27, r1
     e4e:	80 8b       	std	Z+16, r24	; 0x10
     e50:	91 8b       	std	Z+17, r25	; 0x11
     e52:	a2 8b       	std	Z+18, r26	; 0x12
     e54:	b3 8b       	std	Z+19, r27	; 0x13
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <ultraSensorTask+0x1ba>
					}
					else
					{
						sorter->stats.total_selected++;
     e58:	f8 01       	movw	r30, r16
     e5a:	84 85       	ldd	r24, Z+12	; 0x0c
     e5c:	95 85       	ldd	r25, Z+13	; 0x0d
     e5e:	a6 85       	ldd	r26, Z+14	; 0x0e
     e60:	b7 85       	ldd	r27, Z+15	; 0x0f
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	a1 1d       	adc	r26, r1
     e66:	b1 1d       	adc	r27, r1
     e68:	84 87       	std	Z+12, r24	; 0x0c
     e6a:	95 87       	std	Z+13, r25	; 0x0d
     e6c:	a6 87       	std	Z+14, r26	; 0x0e
     e6e:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     e70:	f8 01       	movw	r30, r16
     e72:	80 85       	ldd	r24, Z+8	; 0x08
     e74:	91 85       	ldd	r25, Z+9	; 0x09
     e76:	a2 85       	ldd	r26, Z+10	; 0x0a
     e78:	b3 85       	ldd	r27, Z+11	; 0x0b
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	a1 1d       	adc	r26, r1
     e7e:	b1 1d       	adc	r27, r1
     e80:	80 87       	std	Z+8, r24	; 0x08
     e82:	91 87       	std	Z+9, r25	; 0x09
     e84:	a2 87       	std	Z+10, r26	; 0x0a
     e86:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     e88:	ef 2d       	mov	r30, r15
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	35 96       	adiw	r30, 0x05	; 5
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	e0 0f       	add	r30, r16
     e98:	f1 1f       	adc	r31, r17
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ea0:	b3 81       	ldd	r27, Z+3	; 0x03
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	a1 1d       	adc	r26, r1
     ea6:	b1 1d       	adc	r27, r1
     ea8:	80 83       	st	Z, r24
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	a2 83       	std	Z+2, r26	; 0x02
     eae:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	8f 70       	andi	r24, 0x0F	; 15
     eb4:	80 62       	ori	r24, 0x20	; 32
     eb6:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     eb8:	88 81       	ld	r24, Y
     eba:	99 81       	ldd	r25, Y+1	; 0x01
     ebc:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     ec0:	e8 81       	ld	r30, Y
     ec2:	f9 81       	ldd	r31, Y+1	; 0x01
     ec4:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     ec6:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     ed0:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     ed4:	80 ff       	sbrs	r24, 0
     ed6:	2d c0       	rjmp	.+90     	; 0xf32 <ultraSensorTask+0x27c>
	{
		if (DEBUG_FLAGS)
     ed8:	86 ff       	sbrs	r24, 6
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <ultraSensorTask+0x22e>
		{
			printf("HCSR04 perdio ECHO\n");
     edc:	81 e1       	ldi	r24, 0x11	; 17
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}
		VEINTEMS_PASSED = 0;
     ee4:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
		WAITING_ECHO = 0;
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     ef0:	e8 81       	ld	r30, Y
     ef2:	f9 81       	ldd	r31, Y+1	; 0x01
     ef4:	84 85       	ldd	r24, Z+12	; 0x0c
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     efa:	e8 81       	ld	r30, Y
     efc:	f9 81       	ldd	r31, Y+1	; 0x01
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     f02:	60 91 11 06 	lds	r22, 0x0611	; 0x800611 <bandera2>
     f06:	66 fb       	bst	r22, 6
     f08:	66 27       	eor	r22, r22
     f0a:	60 f9       	bld	r22, 0
     f0c:	88 81       	ld	r24, Y
     f0e:	99 81       	ldd	r25, Y+1	; 0x01
     f10:	0e 94 af 0a 	call	0x155e	; 0x155e <ultrasonic_timeout_clear>
     f14:	88 23       	and	r24, r24
     f16:	41 f0       	breq	.+16     	; 0xf28 <ultraSensorTask+0x272>
     f18:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <bandera2>
     f1c:	86 ff       	sbrs	r24, 6
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <ultraSensorTask+0x272>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     f20:	84 e2       	ldi	r24, 0x24	; 36
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     f28:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <bandera>
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <bandera>
	}
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	08 95       	ret

00000f3e <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
     f3e:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     f42:	80 ff       	sbrs	r24, 0
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <irSensorsTask+0x1a>
     f46:	83 ff       	sbrs	r24, 3
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <IR_A>
		tcrt_read(&IR_A);
     f50:	88 e1       	ldi	r24, 0x18	; 24
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
     f58:	88 e1       	ldi	r24, 0x18	; 24
     f5a:	96 e0       	ldi	r25, 0x06	; 6
     f5c:	0e 94 8c 09 	call	0x1318	; 0x1318 <tcrt_is_box_detected>
     f60:	89 2b       	or	r24, r25
     f62:	11 f1       	breq	.+68     	; 0xfa8 <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     f64:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <IR_A>
     f68:	82 95       	swap	r24
     f6a:	8f 70       	andi	r24, 0x0F	; 15
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	e1 f4       	brne	.+56     	; 0xfa8 <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
     f70:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <salidaA+0x2>
     f74:	83 ff       	sbrs	r24, 3
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <irSensorsTask+0x58>
     f78:	80 ff       	sbrs	r24, 0
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
     f82:	e0 ed       	ldi	r30, 0xD0	; 208
     f84:	f5 e0       	ldi	r31, 0x05	; 5
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
     f8c:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
     f8e:	86 e4       	ldi	r24, 0x46	; 70
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
     f96:	e8 e1       	ldi	r30, 0x18	; 24
     f98:	f6 e0       	ldi	r31, 0x06	; 6
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
     fa0:	8b e6       	ldi	r24, 0x6B	; 107
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     fa8:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     fac:	80 ff       	sbrs	r24, 0
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <irSensorsTask+0x84>
     fb0:	83 ff       	sbrs	r24, 3
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     fb4:	87 7f       	andi	r24, 0xF7	; 247
     fb6:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <IR_B>
		tcrt_read(&IR_B);
     fba:	81 ec       	ldi	r24, 0xC1	; 193
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
     fc2:	81 ec       	ldi	r24, 0xC1	; 193
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	0e 94 8c 09 	call	0x1318	; 0x1318 <tcrt_is_box_detected>
     fca:	89 2b       	or	r24, r25
     fcc:	11 f1       	breq	.+68     	; 0x1012 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
     fce:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <IR_B>
     fd2:	82 95       	swap	r24
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	e1 f4       	brne	.+56     	; 0x1012 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
     fda:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <salidaB+0x2>
     fde:	83 ff       	sbrs	r24, 3
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <irSensorsTask+0xc2>
     fe2:	80 ff       	sbrs	r24, 0
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
     fe6:	87 7f       	andi	r24, 0xF7	; 247
     fe8:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
     fec:	e6 e4       	ldi	r30, 0x46	; 70
     fee:	f6 e0       	ldi	r31, 0x06	; 6
     ff0:	81 81       	ldd	r24, Z+1	; 0x01
     ff2:	82 60       	ori	r24, 0x02	; 2
     ff4:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
     ff6:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
     ff8:	8b e7       	ldi	r24, 0x7B	; 123
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    1000:	e1 ec       	ldi	r30, 0xC1	; 193
    1002:	f5 e0       	ldi	r31, 0x05	; 5
    1004:	80 81       	ld	r24, Z
    1006:	8f 70       	andi	r24, 0x0F	; 15
    1008:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    100a:	80 ea       	ldi	r24, 0xA0	; 160
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    1012:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
    1016:	80 ff       	sbrs	r24, 0
    1018:	09 c0       	rjmp	.+18     	; 0x102c <irSensorsTask+0xee>
    101a:	83 ff       	sbrs	r24, 3
    101c:	07 c0       	rjmp	.+14     	; 0x102c <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    101e:	87 7f       	andi	r24, 0xF7	; 247
    1020:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <IR_C>
		tcrt_read(&IR_C);
    1024:	89 ee       	ldi	r24, 0xE9	; 233
    1026:	95 e0       	ldi	r25, 0x05	; 5
    1028:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    102c:	89 ee       	ldi	r24, 0xE9	; 233
    102e:	95 e0       	ldi	r25, 0x05	; 5
    1030:	0e 94 8c 09 	call	0x1318	; 0x1318 <tcrt_is_box_detected>
    1034:	89 2b       	or	r24, r25
    1036:	11 f1       	breq	.+68     	; 0x107c <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1038:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <IR_C>
    103c:	82 95       	swap	r24
    103e:	8f 70       	andi	r24, 0x0F	; 15
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	e1 f4       	brne	.+56     	; 0x107c <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    1044:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <salidaC+0x2>
    1048:	83 ff       	sbrs	r24, 3
    104a:	0f c0       	rjmp	.+30     	; 0x106a <irSensorsTask+0x12c>
    104c:	80 ff       	sbrs	r24, 0
    104e:	0d c0       	rjmp	.+26     	; 0x106a <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    1050:	87 7f       	andi	r24, 0xF7	; 247
    1052:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    1056:	e2 e1       	ldi	r30, 0x12	; 18
    1058:	f6 e0       	ldi	r31, 0x06	; 6
    105a:	81 81       	ldd	r24, Z+1	; 0x01
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1060:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1062:	80 eb       	ldi	r24, 0xB0	; 176
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    106a:	e9 ee       	ldi	r30, 0xE9	; 233
    106c:	f5 e0       	ldi	r31, 0x05	; 5
    106e:	80 81       	ld	r24, Z
    1070:	8f 70       	andi	r24, 0x0F	; 15
    1072:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1074:	85 ed       	ldi	r24, 0xD5	; 213
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    107c:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
    1080:	80 ff       	sbrs	r24, 0
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <irSensorsTask+0x158>
    1084:	83 ff       	sbrs	r24, 3
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <IR_U>
		tcrt_read(&IR_U);
    108e:	89 ed       	ldi	r24, 0xD9	; 217
    1090:	95 e0       	ldi	r25, 0x05	; 5
    1092:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    1096:	89 ed       	ldi	r24, 0xD9	; 217
    1098:	95 e0       	ldi	r25, 0x05	; 5
    109a:	0e 94 8c 09 	call	0x1318	; 0x1318 <tcrt_is_box_detected>
    109e:	89 2b       	or	r24, r25
    10a0:	19 f1       	breq	.+70     	; 0x10e8 <irSensorsTask+0x1aa>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    10a2:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <IR_U>
    10a6:	82 95       	swap	r24
    10a8:	8f 70       	andi	r24, 0x0F	; 15
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	41 f4       	brne	.+16     	; 0x10be <irSensorsTask+0x180>
    10ae:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <hcsr04Detector+0x4>
    10b2:	91 fd       	sbrc	r25, 1
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <irSensorsTask+0x180>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    10b6:	92 60       	ori	r25, 0x02	; 2
    10b8:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <hcsr04Detector+0x4>
    10bc:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	19 f5       	brne	.+70     	; 0x1108 <irSensorsTask+0x1ca>
    10c2:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <hcsr04Detector+0x4>
    10c6:	81 ff       	sbrs	r24, 1
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <irSensorsTask+0x1ca>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			printf("IR U detecto: la caja salió\n");
    10ca:	85 ee       	ldi	r24, 0xE5	; 229
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    10d2:	e7 e2       	ldi	r30, 0x27	; 39
    10d4:	f6 e0       	ldi	r31, 0x06	; 6
    10d6:	84 81       	ldd	r24, Z+4	; 0x04
    10d8:	8d 7f       	andi	r24, 0xFD	; 253
    10da:	84 83       	std	Z+4, r24	; 0x04
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    10dc:	e9 ed       	ldi	r30, 0xD9	; 217
    10de:	f5 e0       	ldi	r31, 0x05	; 5
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	80 83       	st	Z, r24
    10e6:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    10e8:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <hcsr04Detector+0x4>
    10ec:	81 ff       	sbrs	r24, 1
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <irSensorsTask+0x1ca>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    10f0:	8d 7f       	andi	r24, 0xFD	; 253
    10f2:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    10f6:	e9 ed       	ldi	r30, 0xD9	; 217
    10f8:	f5 e0       	ldi	r31, 0x05	; 5
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 70       	andi	r24, 0x0F	; 15
    10fe:	80 83       	st	Z, r24
				printf("IR U Idle again\n");
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	94 e0       	ldi	r25, 0x04	; 4
    1104:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
    1108:	08 95       	ret

0000110a <servosTask>:
			}
	}
}

void servosTask() {
    110a:	08 95       	ret

0000110c <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    110c:	85 3b       	cpi	r24, 0xB5	; 181
    110e:	08 f0       	brcs	.+2      	; 0x1112 <calculate_angle_pulseUs+0x6>
    1110:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	a0 ed       	ldi	r26, 0xD0	; 208
    1118:	b7 e0       	ldi	r27, 0x07	; 7
    111a:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    111e:	24 eb       	ldi	r18, 0xB4	; 180
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>
}
    112a:	c9 01       	movw	r24, r18
    112c:	80 53       	subi	r24, 0x30	; 48
    112e:	98 4f       	sbci	r25, 0xF8	; 248
    1130:	08 95       	ret

00001132 <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	ec 01       	movw	r28, r24
    113c:	04 2f       	mov	r16, r20
    113e:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    1140:	1f 92       	push	r1
    1142:	6f 93       	push	r22
    1144:	81 e1       	ldi	r24, 0x11	; 17
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
	servo->flags.byte = 0;
    1150:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    1152:	81 2f       	mov	r24, r17
    1154:	0e 94 86 08 	call	0x110c	; 0x110c <calculate_angle_pulseUs>
    1158:	9b 83       	std	Y+3, r25	; 0x03
    115a:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    115c:	08 83       	st	Y, r16
	servo->angle = startAngle;
    115e:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    1160:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    117a:	87 b1       	in	r24, 0x07	; 7
    117c:	80 7f       	andi	r24, 0xF0	; 240
    117e:	87 b9       	out	0x07, r24	; 7
    1180:	88 b1       	in	r24, 0x08	; 8
    1182:	80 7f       	andi	r24, 0xF0	; 240
    1184:	88 b9       	out	0x08, r24	; 8
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    118c:	86 e8       	ldi	r24, 0x86	; 134
    118e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1192:	08 95       	ret

00001194 <tcrt_read_channel>:
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	a0 f4       	brcc	.+40     	; 0x11c0 <tcrt_read_channel+0x2c>
    1198:	ec e7       	ldi	r30, 0x7C	; 124
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	90 7f       	andi	r25, 0xF0	; 240
    11a0:	89 2b       	or	r24, r25
    11a2:	80 83       	st	Z, r24
    11a4:	ea e7       	ldi	r30, 0x7A	; 122
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 64       	ori	r24, 0x40	; 64
    11ac:	80 83       	st	Z, r24
    11ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11b2:	86 fd       	sbrc	r24, 6
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <tcrt_read_channel+0x1a>
    11b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    11ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    11be:	08 95       	ret
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <TCRT_init_Handlers>:
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	e8 e1       	ldi	r30, 0x18	; 24
    11cc:	f6 e0       	ldi	r31, 0x06	; 6
    11ce:	17 82       	std	Z+7, r1	; 0x07
    11d0:	10 86       	std	Z+8, r1	; 0x08
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	11 82       	std	Z+1, r1	; 0x01
    11d6:	16 82       	std	Z+6, r1	; 0x06
    11d8:	15 82       	std	Z+5, r1	; 0x05
    11da:	d4 e1       	ldi	r29, 0x14	; 20
    11dc:	d6 87       	std	Z+14, r29	; 0x0e
    11de:	c1 e0       	ldi	r28, 0x01	; 1
    11e0:	c0 83       	st	Z, r28
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	94 e0       	ldi	r25, 0x04	; 4
    11e6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
    11ea:	e1 ec       	ldi	r30, 0xC1	; 193
    11ec:	f5 e0       	ldi	r31, 0x05	; 5
    11ee:	10 82       	st	Z, r1
    11f0:	c7 83       	std	Z+7, r28	; 0x07
    11f2:	c0 87       	std	Z+8, r28	; 0x08
    11f4:	12 82       	std	Z+2, r1	; 0x02
    11f6:	11 82       	std	Z+1, r1	; 0x01
    11f8:	16 82       	std	Z+6, r1	; 0x06
    11fa:	15 82       	std	Z+5, r1	; 0x05
    11fc:	d6 87       	std	Z+14, r29	; 0x0e
    11fe:	e9 ee       	ldi	r30, 0xE9	; 233
    1200:	f5 e0       	ldi	r31, 0x05	; 5
    1202:	10 82       	st	Z, r1
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	87 83       	std	Z+7, r24	; 0x07
    1208:	80 87       	std	Z+8, r24	; 0x08
    120a:	12 82       	std	Z+2, r1	; 0x02
    120c:	11 82       	std	Z+1, r1	; 0x01
    120e:	16 82       	std	Z+6, r1	; 0x06
    1210:	15 82       	std	Z+5, r1	; 0x05
    1212:	d6 87       	std	Z+14, r29	; 0x0e
    1214:	e9 ed       	ldi	r30, 0xD9	; 217
    1216:	f5 e0       	ldi	r31, 0x05	; 5
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	87 83       	std	Z+7, r24	; 0x07
    121c:	80 87       	std	Z+8, r24	; 0x08
    121e:	12 82       	std	Z+2, r1	; 0x02
    1220:	11 82       	std	Z+1, r1	; 0x01
    1222:	16 82       	std	Z+6, r1	; 0x06
    1224:	15 82       	std	Z+5, r1	; 0x05
    1226:	d6 87       	std	Z+14, r29	; 0x0e
    1228:	c0 83       	st	Z, r28
    122a:	8f e2       	ldi	r24, 0x2F	; 47
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <puts>
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    123e:	88 81       	ld	r24, Y
    1240:	83 ff       	sbrs	r24, 3
    1242:	36 c0       	rjmp	.+108    	; 0x12b0 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	81 11       	cpse	r24, r1
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    124e:	1e 82       	std	Y+6, r1	; 0x06
    1250:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    1252:	8f 81       	ldd	r24, Y+7	; 0x07
    1254:	0e 94 ca 08 	call	0x1194	; 0x1194 <tcrt_read_channel>
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	3e 83       	std	Y+6, r19	; 0x06
    1262:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    1264:	99 85       	ldd	r25, Y+9	; 0x09
    1266:	9f 5f       	subi	r25, 0xFF	; 255
    1268:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    126a:	9a 30       	cpi	r25, 0x0A	; 10
    126c:	08 f1       	brcs	.+66     	; 0x12b0 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    126e:	ad ec       	ldi	r26, 0xCD	; 205
    1270:	bc ec       	ldi	r27, 0xCC	; 204
    1272:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1286:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1288:	28 81       	ld	r18, Y
    128a:	2b 7f       	andi	r18, 0xFB	; 251
    128c:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    128e:	2f 81       	ldd	r18, Y+7	; 0x07
    1290:	9f 93       	push	r25
    1292:	8f 93       	push	r24
    1294:	1f 92       	push	r1
    1296:	2f 93       	push	r18
    1298:	8e e3       	ldi	r24, 0x3E	; 62
    129a:	94 e0       	ldi	r25, 0x04	; 4
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <printf>
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
		}
	}
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	0e 94 ca 08 	call	0x1194	; 0x1194 <tcrt_read_channel>
	sensor->lastReading = lectura;
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    12ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    12cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    12ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    12d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    12d2:	8a 01       	movw	r16, r20
    12d4:	9b 01       	movw	r18, r22
    12d6:	08 0f       	add	r16, r24
    12d8:	19 1f       	adc	r17, r25
    12da:	21 1d       	adc	r18, r1
    12dc:	31 1d       	adc	r19, r1
    12de:	c9 01       	movw	r24, r18
    12e0:	b8 01       	movw	r22, r16
    12e2:	0a 87       	std	Y+10, r16	; 0x0a
    12e4:	1b 87       	std	Y+11, r17	; 0x0b
    12e6:	2c 87       	std	Y+12, r18	; 0x0c
    12e8:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    12ea:	29 85       	ldd	r18, Y+9	; 0x09
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    12f0:	2a 30       	cpi	r18, 0x0A	; 10
    12f2:	68 f0       	brcs	.+26     	; 0x130e <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>
    1300:	3a 83       	std	Y+2, r19	; 0x02
    1302:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1304:	1a 86       	std	Y+10, r1	; 0x0a
    1306:	1b 86       	std	Y+11, r1	; 0x0b
    1308:	1c 86       	std	Y+12, r1	; 0x0c
    130a:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    130c:	19 86       	std	Y+9, r1	; 0x09
	}
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1326:	ab 81       	ldd	r26, Y+3	; 0x03
    1328:	bc 81       	ldd	r27, Y+4	; 0x04
    132a:	8e 85       	ldd	r24, Y+14	; 0x0e
    132c:	0f 2e       	mov	r0, r31
    132e:	f4 e6       	ldi	r31, 0x64	; 100
    1330:	cf 2e       	mov	r12, r31
    1332:	d1 2c       	mov	r13, r1
    1334:	e1 2c       	mov	r14, r1
    1336:	f1 2c       	mov	r15, r1
    1338:	f0 2d       	mov	r31, r0
    133a:	a7 01       	movw	r20, r14
    133c:	96 01       	movw	r18, r12
    133e:	28 1b       	sub	r18, r24
    1340:	31 09       	sbc	r19, r1
    1342:	41 09       	sbc	r20, r1
    1344:	51 09       	sbc	r21, r1
    1346:	0e 94 8f 0b 	call	0x171e	; 0x171e <__muluhisi3>
    134a:	a7 01       	movw	r20, r14
    134c:	96 01       	movw	r18, r12
    134e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	6c 01       	movw	r12, r24
    1358:	e1 2c       	mov	r14, r1
    135a:	f1 2c       	mov	r15, r1
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	c2 16       	cp	r12, r18
    1360:	d3 06       	cpc	r13, r19
    1362:	e4 06       	cpc	r14, r20
    1364:	f5 06       	cpc	r15, r21
    1366:	08 f0       	brcs	.+2      	; 0x136a <tcrt_is_box_detected+0x52>
    1368:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    136a:	c2 16       	cp	r12, r18
    136c:	d3 06       	cpc	r13, r19
    136e:	e4 06       	cpc	r14, r20
    1370:	f5 06       	cpc	r15, r21
    1372:	50 f4       	brcc	.+20     	; 0x1388 <tcrt_is_box_detected+0x70>
    1374:	98 81       	ld	r25, Y
    1376:	e9 2f       	mov	r30, r25
    1378:	e2 95       	swap	r30
    137a:	ef 70       	andi	r30, 0x0F	; 15
    137c:	29 f4       	brne	.+10     	; 0x1388 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    137e:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    1380:	9f 70       	andi	r25, 0x0F	; 15
    1382:	90 61       	ori	r25, 0x10	; 16
    1384:	98 83       	st	Y, r25
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    1388:	c2 16       	cp	r12, r18
    138a:	d3 06       	cpc	r13, r19
    138c:	e4 06       	cpc	r14, r20
    138e:	f5 06       	cpc	r15, r21
    1390:	50 f0       	brcs	.+20     	; 0x13a6 <tcrt_is_box_detected+0x8e>
    1392:	98 81       	ld	r25, Y
    1394:	29 2f       	mov	r18, r25
    1396:	22 95       	swap	r18
    1398:	2f 70       	andi	r18, 0x0F	; 15
    139a:	21 30       	cpi	r18, 0x01	; 1
    139c:	21 f4       	brne	.+8      	; 0x13a6 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    139e:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    13a0:	9d 70       	andi	r25, 0x0D	; 13
    13a2:	90 62       	ori	r25, 0x20	; 32
    13a4:	98 83       	st	Y, r25
	}

	return box_now;
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	08 95       	ret

000013b4 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    13b4:	8b b1       	in	r24, 0x0b	; 11
    13b6:	88 60       	ori	r24, 0x08	; 8
    13b8:	8b b9       	out	0x0b, r24	; 11
    13ba:	08 95       	ret

000013bc <ultrasonic_hal_trigger_setLow>:
    13bc:	8b b1       	in	r24, 0x0b	; 11
    13be:	87 7f       	andi	r24, 0xF7	; 247
    13c0:	8b b9       	out	0x0b, r24	; 11
    13c2:	08 95       	ret

000013c4 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    13c4:	e1 e8       	ldi	r30, 0x81	; 129
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	80 83       	st	Z, r24
    13ce:	08 95       	ret

000013d0 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    13d0:	e1 e8       	ldi	r30, 0x81	; 129
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 7b       	andi	r24, 0xBF	; 191
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret

000013dc <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    13dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    13e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    13e4:	88 e1       	ldi	r24, 0x18	; 24
    13e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    13f0:	08 95       	ret

000013f2 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    13f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    13f6:	95 ff       	sbrs	r25, 5
    13f8:	fc cf       	rjmp	.-8      	; 0x13f2 <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    13fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13fe:	08 95       	ret

00001400 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    1400:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1404:	88 23       	and	r24, r24
    1406:	e4 f7       	brge	.-8      	; 0x1400 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    1408:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    140c:	08 95       	ret

0000140e <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    140e:	cf 93       	push	r28
    1410:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1412:	8a 30       	cpi	r24, 0x0A	; 10
    1414:	19 f4       	brne	.+6      	; 0x141c <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    1416:	8d e0       	ldi	r24, 0x0D	; 13
    1418:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <USART_Transmit>
	USART_Transmit(c);
    141c:	8c 2f       	mov	r24, r28
    141e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <USART_Transmit>
	return 0;
}
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    142a:	0e 94 00 0a 	call	0x1400	; 0x1400 <USART_Receive>
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	08 95       	ret

00001432 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1432:	fc 01       	movw	r30, r24
    1434:	66 87       	std	Z+14, r22	; 0x0e
    1436:	08 95       	ret

00001438 <ultrasonic_calculate_distance>:
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	ae 81       	ldd	r26, Y+6	; 0x06
    1448:	bf 81       	ldd	r27, Y+7	; 0x07
    144a:	48 81       	ld	r20, Y
    144c:	59 81       	ldd	r21, Y+1	; 0x01
    144e:	6a 81       	ldd	r22, Y+2	; 0x02
    1450:	7b 81       	ldd	r23, Y+3	; 0x03
    1452:	8c 01       	movw	r16, r24
    1454:	9d 01       	movw	r18, r26
    1456:	04 1b       	sub	r16, r20
    1458:	15 0b       	sbc	r17, r21
    145a:	26 0b       	sbc	r18, r22
    145c:	37 0b       	sbc	r19, r23
    145e:	b9 01       	movw	r22, r18
    1460:	a8 01       	movw	r20, r16
    1462:	d9 01       	movw	r26, r18
    1464:	c8 01       	movw	r24, r16
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	aa 1f       	adc	r26, r26
    146c:	bb 1f       	adc	r27, r27
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	aa 1f       	adc	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	aa 1f       	adc	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	aa 1f       	adc	r26, r26
    1484:	bb 1f       	adc	r27, r27
    1486:	8c 01       	movw	r16, r24
    1488:	9d 01       	movw	r18, r26
    148a:	04 0f       	add	r16, r20
    148c:	15 1f       	adc	r17, r21
    148e:	26 1f       	adc	r18, r22
    1490:	37 1f       	adc	r19, r23
    1492:	c9 01       	movw	r24, r18
    1494:	b8 01       	movw	r22, r16
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	20 e9       	ldi	r18, 0x90	; 144
    14a0:	31 e0       	ldi	r19, 0x01	; 1
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>
    14aa:	28 87       	std	Y+8, r18	; 0x08
    14ac:	39 87       	std	Y+9, r19	; 0x09
    14ae:	4a 87       	std	Y+10, r20	; 0x0a
    14b0:	5b 87       	std	Y+11, r21	; 0x0b
    14b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b4:	80 68       	ori	r24, 0x80	; 128
    14b6:	8c 87       	std	Y+12, r24	; 0x0c
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    14c2:	dc 01       	movw	r26, r24
    14c4:	1f 96       	adiw	r26, 0x0f	; 15
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	50 97       	sbiw	r26, 0x10	; 16
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <ultrasonic_print+0x12>
    14d0:	cb 01       	movw	r24, r22
		us->print_method(message);
    14d2:	09 95       	icall
    14d4:	08 95       	ret

000014d6 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    14dc:	18 82       	st	Y, r1
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	1a 82       	std	Y+2, r1	; 0x02
    14e2:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    14e4:	1c 82       	std	Y+4, r1	; 0x04
    14e6:	1d 82       	std	Y+5, r1	; 0x05
    14e8:	1e 82       	std	Y+6, r1	; 0x06
    14ea:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    14ec:	18 86       	std	Y+8, r1	; 0x08
    14ee:	19 86       	std	Y+9, r1	; 0x09
    14f0:	1a 86       	std	Y+10, r1	; 0x0a
    14f2:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    14f4:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    14f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14f8:	80 62       	ori	r24, 0x20	; 32
    14fa:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    14fc:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    14fe:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	98 89       	ldd	r25, Y+16	; 0x10
    1506:	89 2b       	or	r24, r25
    1508:	41 f0       	breq	.+16     	; 0x151a <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    150a:	8e 85       	ldd	r24, Y+14	; 0x0e
    150c:	88 23       	and	r24, r24
    150e:	29 f0       	breq	.+10     	; 0x151a <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1510:	6a e6       	ldi	r22, 0x6A	; 106
    1512:	74 e0       	ldi	r23, 0x04	; 4
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
		}
	}
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    152c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ultrasonic_init_flags>
	us->debugMode = true;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    1534:	01 15       	cp	r16, r1
    1536:	11 05       	cpc	r17, r1
    1538:	19 f4       	brne	.+6      	; 0x1540 <ultrasonic_init+0x20>
		us->print_method = NULL;
    153a:	18 8a       	std	Y+16, r1	; 0x10
    153c:	1f 86       	std	Y+15, r1	; 0x0f
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    1540:	18 8b       	std	Y+16, r17	; 0x10
    1542:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    1544:	8e 85       	ldd	r24, Y+14	; 0x0e
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    154a:	69 e8       	ldi	r22, 0x89	; 137
    154c:	74 e0       	ldi	r23, 0x04	; 4
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
		}
	}
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    1564:	fc 01       	movw	r30, r24
    1566:	25 85       	ldd	r18, Z+13	; 0x0d
    1568:	26 30       	cpi	r18, 0x06	; 6
    156a:	71 f4       	brne	.+28     	; 0x1588 <ultrasonic_timeout_clear+0x2a>
    156c:	16 2f       	mov	r17, r22
    156e:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    1570:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ultrasonic_init_flags>
		us->debugMode = state;
    1574:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    1576:	1e 85       	ldd	r17, Y+14	; 0x0e
    1578:	11 23       	and	r17, r17
    157a:	41 f0       	breq	.+16     	; 0x158c <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    157c:	64 e2       	ldi	r22, 0x24	; 36
    157e:	73 e0       	ldi	r23, 0x03	; 3
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
    1586:	03 c0       	rjmp	.+6      	; 0x158e <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	01 c0       	rjmp	.+2      	; 0x158e <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    158c:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    158e:	81 2f       	mov	r24, r17
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	08 95       	ret

00001598 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    1598:	cf 93       	push	r28
    159a:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    159c:	85 85       	ldd	r24, Z+13	; 0x0d
    159e:	88 23       	and	r24, r24
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <ultrasonic_start+0x10>
    15a2:	85 85       	ldd	r24, Z+13	; 0x0d
    15a4:	85 30       	cpi	r24, 0x05	; 5
    15a6:	c1 f4       	brne	.+48     	; 0x15d8 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    15a8:	84 85       	ldd	r24, Z+12	; 0x0c
    15aa:	85 ff       	sbrs	r24, 5
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    15b2:	c6 85       	ldd	r28, Z+14	; 0x0e
    15b4:	cc 23       	and	r28, r28
    15b6:	d1 f0       	breq	.+52     	; 0x15ec <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    15b8:	65 ea       	ldi	r22, 0xA5	; 165
    15ba:	74 e0       	ldi	r23, 0x04	; 4
    15bc:	cf 01       	movw	r24, r30
    15be:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
    15c2:	15 c0       	rjmp	.+42     	; 0x15ee <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    15c4:	c6 85       	ldd	r28, Z+14	; 0x0e
    15c6:	cc 23       	and	r28, r28
    15c8:	91 f0       	breq	.+36     	; 0x15ee <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    15ca:	64 ed       	ldi	r22, 0xD4	; 212
    15cc:	74 e0       	ldi	r23, 0x04	; 4
    15ce:	cf 01       	movw	r24, r30
    15d0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    15d4:	c0 e0       	ldi	r28, 0x00	; 0
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    15d8:	c6 85       	ldd	r28, Z+14	; 0x0e
    15da:	cc 23       	and	r28, r28
    15dc:	41 f0       	breq	.+16     	; 0x15ee <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    15de:	6b e0       	ldi	r22, 0x0B	; 11
    15e0:	75 e0       	ldi	r23, 0x05	; 5
    15e2:	cf 01       	movw	r24, r30
    15e4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
			}
	}
	return false;
    15e8:	c0 e0       	ldi	r28, 0x00	; 0
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    15ec:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    15ee:	8c 2f       	mov	r24, r28
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	ec 01       	movw	r28, r24
	switch (us->state)
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	71 f1       	breq	.+92     	; 0x165c <ultrasonic_update+0x68>
    1600:	28 f4       	brcc	.+10     	; 0x160c <ultrasonic_update+0x18>
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	49 f0       	breq	.+18     	; 0x1618 <ultrasonic_update+0x24>
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	a1 f0       	breq	.+40     	; 0x1632 <ultrasonic_update+0x3e>
    160a:	55 c0       	rjmp	.+170    	; 0x16b6 <ultrasonic_update+0xc2>
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	e1 f1       	breq	.+120    	; 0x1688 <ultrasonic_update+0x94>
    1610:	86 30       	cpi	r24, 0x06	; 6
    1612:	09 f4       	brne	.+2      	; 0x1616 <ultrasonic_update+0x22>
    1614:	4d c0       	rjmp	.+154    	; 0x16b0 <ultrasonic_update+0xbc>
    1616:	4f c0       	rjmp	.+158    	; 0x16b6 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1618:	8c 85       	ldd	r24, Y+12	; 0x0c
    161a:	81 ff       	sbrs	r24, 1
    161c:	4c c0       	rjmp	.+152    	; 0x16b6 <ultrasonic_update+0xc2>
				if(us->debugMode){
    161e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <ultrasonic_update+0x32>
    1624:	48 c0       	rjmp	.+144    	; 0x16b6 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1626:	68 e3       	ldi	r22, 0x38	; 56
    1628:	75 e0       	ldi	r23, 0x05	; 5
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
    1630:	42 c0       	rjmp	.+132    	; 0x16b6 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    1632:	8c 85       	ldd	r24, Y+12	; 0x0c
    1634:	84 fd       	sbrc	r24, 4
    1636:	0c c0       	rjmp	.+24     	; 0x1650 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    163c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    1640:	8e 85       	ldd	r24, Y+14	; 0x0e
    1642:	88 23       	and	r24, r24
    1644:	29 f0       	breq	.+10     	; 0x1650 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    1646:	67 e5       	ldi	r22, 0x57	; 87
    1648:	75 e0       	ldi	r23, 0x05	; 5
    164a:	ce 01       	movw	r24, r28
    164c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    1650:	8c 85       	ldd	r24, Y+12	; 0x0c
    1652:	83 ff       	sbrs	r24, 3
    1654:	30 c0       	rjmp	.+96     	; 0x16b6 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1656:	86 e0       	ldi	r24, 0x06	; 6
    1658:	8d 87       	std	Y+13, r24	; 0x0d
    165a:	2d c0       	rjmp	.+90     	; 0x16b6 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    165c:	8c 85       	ldd	r24, Y+12	; 0x0c
    165e:	86 ff       	sbrs	r24, 6
    1660:	0d c0       	rjmp	.+26     	; 0x167c <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    1666:	8e 85       	ldd	r24, Y+14	; 0x0e
    1668:	88 23       	and	r24, r24
    166a:	29 f0       	breq	.+10     	; 0x1676 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    166c:	64 e7       	ldi	r22, 0x74	; 116
    166e:	75 e0       	ldi	r23, 0x05	; 5
    1670:	ce 01       	movw	r24, r28
    1672:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    1676:	8c 85       	ldd	r24, Y+12	; 0x0c
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    167c:	8c 85       	ldd	r24, Y+12	; 0x0c
    167e:	83 ff       	sbrs	r24, 3
    1680:	1a c0       	rjmp	.+52     	; 0x16b6 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	8d 87       	std	Y+13, r24	; 0x0d
    1686:	17 c0       	rjmp	.+46     	; 0x16b6 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    1688:	8c 85       	ldd	r24, Y+12	; 0x0c
    168a:	82 ff       	sbrs	r24, 2
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    168e:	ce 01       	movw	r24, r28
    1690:	0e 94 1c 0a 	call	0x1438	; 0x1438 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    1694:	8c 85       	ldd	r24, Y+12	; 0x0c
    1696:	8b 7f       	andi	r24, 0xFB	; 251
    1698:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    169a:	8e 85       	ldd	r24, Y+14	; 0x0e
    169c:	88 23       	and	r24, r24
    169e:	29 f0       	breq	.+10     	; 0x16aa <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    16a0:	6b e8       	ldi	r22, 0x8B	; 139
    16a2:	75 e0       	ldi	r23, 0x05	; 5
    16a4:	ce 01       	movw	r24, r28
    16a6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    16aa:	85 e0       	ldi	r24, 0x05	; 5
    16ac:	8d 87       	std	Y+13, r24	; 0x0d
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    16b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16b2:	88 60       	ori	r24, 0x08	; 8
    16b4:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <__udivmodsi4>:
    16bc:	a1 e2       	ldi	r26, 0x21	; 33
    16be:	1a 2e       	mov	r1, r26
    16c0:	aa 1b       	sub	r26, r26
    16c2:	bb 1b       	sub	r27, r27
    16c4:	fd 01       	movw	r30, r26
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <__udivmodsi4_ep>

000016c8 <__udivmodsi4_loop>:
    16c8:	aa 1f       	adc	r26, r26
    16ca:	bb 1f       	adc	r27, r27
    16cc:	ee 1f       	adc	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	a2 17       	cp	r26, r18
    16d2:	b3 07       	cpc	r27, r19
    16d4:	e4 07       	cpc	r30, r20
    16d6:	f5 07       	cpc	r31, r21
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <__udivmodsi4_ep>
    16da:	a2 1b       	sub	r26, r18
    16dc:	b3 0b       	sbc	r27, r19
    16de:	e4 0b       	sbc	r30, r20
    16e0:	f5 0b       	sbc	r31, r21

000016e2 <__udivmodsi4_ep>:
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	1a 94       	dec	r1
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <__udivmodsi4_loop>
    16ee:	60 95       	com	r22
    16f0:	70 95       	com	r23
    16f2:	80 95       	com	r24
    16f4:	90 95       	com	r25
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	bd 01       	movw	r22, r26
    16fc:	cf 01       	movw	r24, r30
    16fe:	08 95       	ret

00001700 <__umulhisi3>:
    1700:	a2 9f       	mul	r26, r18
    1702:	b0 01       	movw	r22, r0
    1704:	b3 9f       	mul	r27, r19
    1706:	c0 01       	movw	r24, r0
    1708:	a3 9f       	mul	r26, r19
    170a:	70 0d       	add	r23, r0
    170c:	81 1d       	adc	r24, r1
    170e:	11 24       	eor	r1, r1
    1710:	91 1d       	adc	r25, r1
    1712:	b2 9f       	mul	r27, r18
    1714:	70 0d       	add	r23, r0
    1716:	81 1d       	adc	r24, r1
    1718:	11 24       	eor	r1, r1
    171a:	91 1d       	adc	r25, r1
    171c:	08 95       	ret

0000171e <__muluhisi3>:
    171e:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    1722:	a5 9f       	mul	r26, r21
    1724:	90 0d       	add	r25, r0
    1726:	b4 9f       	mul	r27, r20
    1728:	90 0d       	add	r25, r0
    172a:	a4 9f       	mul	r26, r20
    172c:	80 0d       	add	r24, r0
    172e:	91 1d       	adc	r25, r1
    1730:	11 24       	eor	r1, r1
    1732:	08 95       	ret

00001734 <printf>:
    1734:	a0 e0       	ldi	r26, 0x00	; 0
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e0 ea       	ldi	r30, 0xA0	; 160
    173a:	fb e0       	ldi	r31, 0x0B	; 11
    173c:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__prologue_saves__+0x20>
    1740:	ae 01       	movw	r20, r28
    1742:	4b 5f       	subi	r20, 0xFB	; 251
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	fa 01       	movw	r30, r20
    1748:	61 91       	ld	r22, Z+
    174a:	71 91       	ld	r23, Z+
    174c:	af 01       	movw	r20, r30
    174e:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <__iob+0x2>
    1752:	90 91 52 06 	lds	r25, 0x0652	; 0x800652 <__iob+0x3>
    1756:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <vfprintf>
    175a:	e2 e0       	ldi	r30, 0x02	; 2
    175c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__epilogue_restores__+0x20>

00001760 <puts>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	e0 91 51 06 	lds	r30, 0x0651	; 0x800651 <__iob+0x2>
    176c:	f0 91 52 06 	lds	r31, 0x0652	; 0x800652 <__iob+0x3>
    1770:	23 81       	ldd	r18, Z+3	; 0x03
    1772:	21 ff       	sbrs	r18, 1
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <puts+0x4c>
    1776:	8c 01       	movw	r16, r24
    1778:	d0 e0       	ldi	r29, 0x00	; 0
    177a:	c0 e0       	ldi	r28, 0x00	; 0
    177c:	f8 01       	movw	r30, r16
    177e:	81 91       	ld	r24, Z+
    1780:	8f 01       	movw	r16, r30
    1782:	60 91 51 06 	lds	r22, 0x0651	; 0x800651 <__iob+0x2>
    1786:	70 91 52 06 	lds	r23, 0x0652	; 0x800652 <__iob+0x3>
    178a:	db 01       	movw	r26, r22
    178c:	18 96       	adiw	r26, 0x08	; 8
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	19 97       	sbiw	r26, 0x09	; 9
    1794:	88 23       	and	r24, r24
    1796:	31 f0       	breq	.+12     	; 0x17a4 <puts+0x44>
    1798:	09 95       	icall
    179a:	89 2b       	or	r24, r25
    179c:	79 f3       	breq	.-34     	; 0x177c <puts+0x1c>
    179e:	df ef       	ldi	r29, 0xFF	; 255
    17a0:	cf ef       	ldi	r28, 0xFF	; 255
    17a2:	ec cf       	rjmp	.-40     	; 0x177c <puts+0x1c>
    17a4:	8a e0       	ldi	r24, 0x0A	; 10
    17a6:	09 95       	icall
    17a8:	89 2b       	or	r24, r25
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <puts+0x52>
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <puts+0x56>
    17b2:	8d 2f       	mov	r24, r29
    17b4:	9c 2f       	mov	r25, r28
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <vfprintf>:
    17c0:	ab e0       	ldi	r26, 0x0B	; 11
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e6 ee       	ldi	r30, 0xE6	; 230
    17c6:	fb e0       	ldi	r31, 0x0B	; 11
    17c8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__prologue_saves__>
    17cc:	6c 01       	movw	r12, r24
    17ce:	7b 01       	movw	r14, r22
    17d0:	8a 01       	movw	r16, r20
    17d2:	fc 01       	movw	r30, r24
    17d4:	17 82       	std	Z+7, r1	; 0x07
    17d6:	16 82       	std	Z+6, r1	; 0x06
    17d8:	83 81       	ldd	r24, Z+3	; 0x03
    17da:	81 ff       	sbrs	r24, 1
    17dc:	cc c1       	rjmp	.+920    	; 0x1b76 <vfprintf+0x3b6>
    17de:	ce 01       	movw	r24, r28
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	3c 01       	movw	r6, r24
    17e4:	f6 01       	movw	r30, r12
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	f7 01       	movw	r30, r14
    17ea:	93 fd       	sbrc	r25, 3
    17ec:	85 91       	lpm	r24, Z+
    17ee:	93 ff       	sbrs	r25, 3
    17f0:	81 91       	ld	r24, Z+
    17f2:	7f 01       	movw	r14, r30
    17f4:	88 23       	and	r24, r24
    17f6:	09 f4       	brne	.+2      	; 0x17fa <vfprintf+0x3a>
    17f8:	ba c1       	rjmp	.+884    	; 0x1b6e <vfprintf+0x3ae>
    17fa:	85 32       	cpi	r24, 0x25	; 37
    17fc:	39 f4       	brne	.+14     	; 0x180c <vfprintf+0x4c>
    17fe:	93 fd       	sbrc	r25, 3
    1800:	85 91       	lpm	r24, Z+
    1802:	93 ff       	sbrs	r25, 3
    1804:	81 91       	ld	r24, Z+
    1806:	7f 01       	movw	r14, r30
    1808:	85 32       	cpi	r24, 0x25	; 37
    180a:	29 f4       	brne	.+10     	; 0x1816 <vfprintf+0x56>
    180c:	b6 01       	movw	r22, r12
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1814:	e7 cf       	rjmp	.-50     	; 0x17e4 <vfprintf+0x24>
    1816:	91 2c       	mov	r9, r1
    1818:	21 2c       	mov	r2, r1
    181a:	31 2c       	mov	r3, r1
    181c:	ff e1       	ldi	r31, 0x1F	; 31
    181e:	f3 15       	cp	r31, r3
    1820:	d8 f0       	brcs	.+54     	; 0x1858 <vfprintf+0x98>
    1822:	8b 32       	cpi	r24, 0x2B	; 43
    1824:	79 f0       	breq	.+30     	; 0x1844 <vfprintf+0x84>
    1826:	38 f4       	brcc	.+14     	; 0x1836 <vfprintf+0x76>
    1828:	80 32       	cpi	r24, 0x20	; 32
    182a:	79 f0       	breq	.+30     	; 0x184a <vfprintf+0x8a>
    182c:	83 32       	cpi	r24, 0x23	; 35
    182e:	a1 f4       	brne	.+40     	; 0x1858 <vfprintf+0x98>
    1830:	23 2d       	mov	r18, r3
    1832:	20 61       	ori	r18, 0x10	; 16
    1834:	1d c0       	rjmp	.+58     	; 0x1870 <vfprintf+0xb0>
    1836:	8d 32       	cpi	r24, 0x2D	; 45
    1838:	61 f0       	breq	.+24     	; 0x1852 <vfprintf+0x92>
    183a:	80 33       	cpi	r24, 0x30	; 48
    183c:	69 f4       	brne	.+26     	; 0x1858 <vfprintf+0x98>
    183e:	23 2d       	mov	r18, r3
    1840:	21 60       	ori	r18, 0x01	; 1
    1842:	16 c0       	rjmp	.+44     	; 0x1870 <vfprintf+0xb0>
    1844:	83 2d       	mov	r24, r3
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	38 2e       	mov	r3, r24
    184a:	e3 2d       	mov	r30, r3
    184c:	e4 60       	ori	r30, 0x04	; 4
    184e:	3e 2e       	mov	r3, r30
    1850:	2a c0       	rjmp	.+84     	; 0x18a6 <vfprintf+0xe6>
    1852:	f3 2d       	mov	r31, r3
    1854:	f8 60       	ori	r31, 0x08	; 8
    1856:	1d c0       	rjmp	.+58     	; 0x1892 <vfprintf+0xd2>
    1858:	37 fc       	sbrc	r3, 7
    185a:	2d c0       	rjmp	.+90     	; 0x18b6 <vfprintf+0xf6>
    185c:	20 ed       	ldi	r18, 0xD0	; 208
    185e:	28 0f       	add	r18, r24
    1860:	2a 30       	cpi	r18, 0x0A	; 10
    1862:	40 f0       	brcs	.+16     	; 0x1874 <vfprintf+0xb4>
    1864:	8e 32       	cpi	r24, 0x2E	; 46
    1866:	b9 f4       	brne	.+46     	; 0x1896 <vfprintf+0xd6>
    1868:	36 fc       	sbrc	r3, 6
    186a:	81 c1       	rjmp	.+770    	; 0x1b6e <vfprintf+0x3ae>
    186c:	23 2d       	mov	r18, r3
    186e:	20 64       	ori	r18, 0x40	; 64
    1870:	32 2e       	mov	r3, r18
    1872:	19 c0       	rjmp	.+50     	; 0x18a6 <vfprintf+0xe6>
    1874:	36 fe       	sbrs	r3, 6
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0xc4>
    1878:	8a e0       	ldi	r24, 0x0A	; 10
    187a:	98 9e       	mul	r9, r24
    187c:	20 0d       	add	r18, r0
    187e:	11 24       	eor	r1, r1
    1880:	92 2e       	mov	r9, r18
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <vfprintf+0xe6>
    1884:	ea e0       	ldi	r30, 0x0A	; 10
    1886:	2e 9e       	mul	r2, r30
    1888:	20 0d       	add	r18, r0
    188a:	11 24       	eor	r1, r1
    188c:	22 2e       	mov	r2, r18
    188e:	f3 2d       	mov	r31, r3
    1890:	f0 62       	ori	r31, 0x20	; 32
    1892:	3f 2e       	mov	r3, r31
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <vfprintf+0xe6>
    1896:	8c 36       	cpi	r24, 0x6C	; 108
    1898:	21 f4       	brne	.+8      	; 0x18a2 <vfprintf+0xe2>
    189a:	83 2d       	mov	r24, r3
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	38 2e       	mov	r3, r24
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0xe6>
    18a2:	88 36       	cpi	r24, 0x68	; 104
    18a4:	41 f4       	brne	.+16     	; 0x18b6 <vfprintf+0xf6>
    18a6:	f7 01       	movw	r30, r14
    18a8:	93 fd       	sbrc	r25, 3
    18aa:	85 91       	lpm	r24, Z+
    18ac:	93 ff       	sbrs	r25, 3
    18ae:	81 91       	ld	r24, Z+
    18b0:	7f 01       	movw	r14, r30
    18b2:	81 11       	cpse	r24, r1
    18b4:	b3 cf       	rjmp	.-154    	; 0x181c <vfprintf+0x5c>
    18b6:	98 2f       	mov	r25, r24
    18b8:	9f 7d       	andi	r25, 0xDF	; 223
    18ba:	95 54       	subi	r25, 0x45	; 69
    18bc:	93 30       	cpi	r25, 0x03	; 3
    18be:	28 f4       	brcc	.+10     	; 0x18ca <vfprintf+0x10a>
    18c0:	0c 5f       	subi	r16, 0xFC	; 252
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	9f e3       	ldi	r25, 0x3F	; 63
    18c6:	99 83       	std	Y+1, r25	; 0x01
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <vfprintf+0x124>
    18ca:	83 36       	cpi	r24, 0x63	; 99
    18cc:	31 f0       	breq	.+12     	; 0x18da <vfprintf+0x11a>
    18ce:	83 37       	cpi	r24, 0x73	; 115
    18d0:	71 f0       	breq	.+28     	; 0x18ee <vfprintf+0x12e>
    18d2:	83 35       	cpi	r24, 0x53	; 83
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x118>
    18d6:	59 c0       	rjmp	.+178    	; 0x198a <vfprintf+0x1ca>
    18d8:	21 c0       	rjmp	.+66     	; 0x191c <vfprintf+0x15c>
    18da:	f8 01       	movw	r30, r16
    18dc:	80 81       	ld	r24, Z
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	0e 5f       	subi	r16, 0xFE	; 254
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	88 24       	eor	r8, r8
    18e6:	83 94       	inc	r8
    18e8:	91 2c       	mov	r9, r1
    18ea:	53 01       	movw	r10, r6
    18ec:	13 c0       	rjmp	.+38     	; 0x1914 <vfprintf+0x154>
    18ee:	28 01       	movw	r4, r16
    18f0:	f2 e0       	ldi	r31, 0x02	; 2
    18f2:	4f 0e       	add	r4, r31
    18f4:	51 1c       	adc	r5, r1
    18f6:	f8 01       	movw	r30, r16
    18f8:	a0 80       	ld	r10, Z
    18fa:	b1 80       	ldd	r11, Z+1	; 0x01
    18fc:	36 fe       	sbrs	r3, 6
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <vfprintf+0x146>
    1900:	69 2d       	mov	r22, r9
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x14a>
    1906:	6f ef       	ldi	r22, 0xFF	; 255
    1908:	7f ef       	ldi	r23, 0xFF	; 255
    190a:	c5 01       	movw	r24, r10
    190c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <strnlen>
    1910:	4c 01       	movw	r8, r24
    1912:	82 01       	movw	r16, r4
    1914:	f3 2d       	mov	r31, r3
    1916:	ff 77       	andi	r31, 0x7F	; 127
    1918:	3f 2e       	mov	r3, r31
    191a:	16 c0       	rjmp	.+44     	; 0x1948 <vfprintf+0x188>
    191c:	28 01       	movw	r4, r16
    191e:	22 e0       	ldi	r18, 0x02	; 2
    1920:	42 0e       	add	r4, r18
    1922:	51 1c       	adc	r5, r1
    1924:	f8 01       	movw	r30, r16
    1926:	a0 80       	ld	r10, Z
    1928:	b1 80       	ldd	r11, Z+1	; 0x01
    192a:	36 fe       	sbrs	r3, 6
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <vfprintf+0x174>
    192e:	69 2d       	mov	r22, r9
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x178>
    1934:	6f ef       	ldi	r22, 0xFF	; 255
    1936:	7f ef       	ldi	r23, 0xFF	; 255
    1938:	c5 01       	movw	r24, r10
    193a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <strnlen_P>
    193e:	4c 01       	movw	r8, r24
    1940:	f3 2d       	mov	r31, r3
    1942:	f0 68       	ori	r31, 0x80	; 128
    1944:	3f 2e       	mov	r3, r31
    1946:	82 01       	movw	r16, r4
    1948:	33 fc       	sbrc	r3, 3
    194a:	1b c0       	rjmp	.+54     	; 0x1982 <vfprintf+0x1c2>
    194c:	82 2d       	mov	r24, r2
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	88 16       	cp	r8, r24
    1952:	99 06       	cpc	r9, r25
    1954:	b0 f4       	brcc	.+44     	; 0x1982 <vfprintf+0x1c2>
    1956:	b6 01       	movw	r22, r12
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1960:	2a 94       	dec	r2
    1962:	f4 cf       	rjmp	.-24     	; 0x194c <vfprintf+0x18c>
    1964:	f5 01       	movw	r30, r10
    1966:	37 fc       	sbrc	r3, 7
    1968:	85 91       	lpm	r24, Z+
    196a:	37 fe       	sbrs	r3, 7
    196c:	81 91       	ld	r24, Z+
    196e:	5f 01       	movw	r10, r30
    1970:	b6 01       	movw	r22, r12
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1978:	21 10       	cpse	r2, r1
    197a:	2a 94       	dec	r2
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	82 1a       	sub	r8, r18
    1980:	91 08       	sbc	r9, r1
    1982:	81 14       	cp	r8, r1
    1984:	91 04       	cpc	r9, r1
    1986:	71 f7       	brne	.-36     	; 0x1964 <vfprintf+0x1a4>
    1988:	e8 c0       	rjmp	.+464    	; 0x1b5a <vfprintf+0x39a>
    198a:	84 36       	cpi	r24, 0x64	; 100
    198c:	11 f0       	breq	.+4      	; 0x1992 <vfprintf+0x1d2>
    198e:	89 36       	cpi	r24, 0x69	; 105
    1990:	41 f5       	brne	.+80     	; 0x19e2 <vfprintf+0x222>
    1992:	f8 01       	movw	r30, r16
    1994:	37 fe       	sbrs	r3, 7
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <vfprintf+0x1e6>
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	0c 5f       	subi	r16, 0xFC	; 252
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <vfprintf+0x1f6>
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	07 2e       	mov	r0, r23
    19ac:	00 0c       	add	r0, r0
    19ae:	88 0b       	sbc	r24, r24
    19b0:	99 0b       	sbc	r25, r25
    19b2:	0e 5f       	subi	r16, 0xFE	; 254
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	f3 2d       	mov	r31, r3
    19b8:	ff 76       	andi	r31, 0x6F	; 111
    19ba:	3f 2e       	mov	r3, r31
    19bc:	97 ff       	sbrs	r25, 7
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <vfprintf+0x212>
    19c0:	90 95       	com	r25
    19c2:	80 95       	com	r24
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	f0 68       	ori	r31, 0x80	; 128
    19d0:	3f 2e       	mov	r3, r31
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a3 01       	movw	r20, r6
    19d8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__ultoa_invert>
    19dc:	88 2e       	mov	r8, r24
    19de:	86 18       	sub	r8, r6
    19e0:	45 c0       	rjmp	.+138    	; 0x1a6c <vfprintf+0x2ac>
    19e2:	85 37       	cpi	r24, 0x75	; 117
    19e4:	31 f4       	brne	.+12     	; 0x19f2 <vfprintf+0x232>
    19e6:	23 2d       	mov	r18, r3
    19e8:	2f 7e       	andi	r18, 0xEF	; 239
    19ea:	b2 2e       	mov	r11, r18
    19ec:	2a e0       	ldi	r18, 0x0A	; 10
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	25 c0       	rjmp	.+74     	; 0x1a3c <vfprintf+0x27c>
    19f2:	93 2d       	mov	r25, r3
    19f4:	99 7f       	andi	r25, 0xF9	; 249
    19f6:	b9 2e       	mov	r11, r25
    19f8:	8f 36       	cpi	r24, 0x6F	; 111
    19fa:	c1 f0       	breq	.+48     	; 0x1a2c <vfprintf+0x26c>
    19fc:	18 f4       	brcc	.+6      	; 0x1a04 <vfprintf+0x244>
    19fe:	88 35       	cpi	r24, 0x58	; 88
    1a00:	79 f0       	breq	.+30     	; 0x1a20 <vfprintf+0x260>
    1a02:	b5 c0       	rjmp	.+362    	; 0x1b6e <vfprintf+0x3ae>
    1a04:	80 37       	cpi	r24, 0x70	; 112
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <vfprintf+0x24e>
    1a08:	88 37       	cpi	r24, 0x78	; 120
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <vfprintf+0x254>
    1a0c:	b0 c0       	rjmp	.+352    	; 0x1b6e <vfprintf+0x3ae>
    1a0e:	e9 2f       	mov	r30, r25
    1a10:	e0 61       	ori	r30, 0x10	; 16
    1a12:	be 2e       	mov	r11, r30
    1a14:	b4 fe       	sbrs	r11, 4
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <vfprintf+0x272>
    1a18:	fb 2d       	mov	r31, r11
    1a1a:	f4 60       	ori	r31, 0x04	; 4
    1a1c:	bf 2e       	mov	r11, r31
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <vfprintf+0x272>
    1a20:	34 fe       	sbrs	r3, 4
    1a22:	0a c0       	rjmp	.+20     	; 0x1a38 <vfprintf+0x278>
    1a24:	29 2f       	mov	r18, r25
    1a26:	26 60       	ori	r18, 0x06	; 6
    1a28:	b2 2e       	mov	r11, r18
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x278>
    1a2c:	28 e0       	ldi	r18, 0x08	; 8
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <vfprintf+0x27c>
    1a32:	20 e1       	ldi	r18, 0x10	; 16
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <vfprintf+0x27c>
    1a38:	20 e1       	ldi	r18, 0x10	; 16
    1a3a:	32 e0       	ldi	r19, 0x02	; 2
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	b7 fe       	sbrs	r11, 7
    1a40:	07 c0       	rjmp	.+14     	; 0x1a50 <vfprintf+0x290>
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	0c 5f       	subi	r16, 0xFC	; 252
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0x29c>
    1a50:	60 81       	ld	r22, Z
    1a52:	71 81       	ldd	r23, Z+1	; 0x01
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 5f       	subi	r16, 0xFE	; 254
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	a3 01       	movw	r20, r6
    1a5e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__ultoa_invert>
    1a62:	88 2e       	mov	r8, r24
    1a64:	86 18       	sub	r8, r6
    1a66:	fb 2d       	mov	r31, r11
    1a68:	ff 77       	andi	r31, 0x7F	; 127
    1a6a:	3f 2e       	mov	r3, r31
    1a6c:	36 fe       	sbrs	r3, 6
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <vfprintf+0x2ca>
    1a70:	23 2d       	mov	r18, r3
    1a72:	2e 7f       	andi	r18, 0xFE	; 254
    1a74:	a2 2e       	mov	r10, r18
    1a76:	89 14       	cp	r8, r9
    1a78:	58 f4       	brcc	.+22     	; 0x1a90 <vfprintf+0x2d0>
    1a7a:	34 fe       	sbrs	r3, 4
    1a7c:	0b c0       	rjmp	.+22     	; 0x1a94 <vfprintf+0x2d4>
    1a7e:	32 fc       	sbrc	r3, 2
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <vfprintf+0x2d4>
    1a82:	83 2d       	mov	r24, r3
    1a84:	8e 7e       	andi	r24, 0xEE	; 238
    1a86:	a8 2e       	mov	r10, r24
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <vfprintf+0x2d4>
    1a8a:	b8 2c       	mov	r11, r8
    1a8c:	a3 2c       	mov	r10, r3
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x2d6>
    1a90:	b8 2c       	mov	r11, r8
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <vfprintf+0x2d6>
    1a94:	b9 2c       	mov	r11, r9
    1a96:	a4 fe       	sbrs	r10, 4
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <vfprintf+0x2f8>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e8 0d       	add	r30, r8
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 33       	cpi	r24, 0x30	; 48
    1aa4:	21 f4       	brne	.+8      	; 0x1aae <vfprintf+0x2ee>
    1aa6:	9a 2d       	mov	r25, r10
    1aa8:	99 7e       	andi	r25, 0xE9	; 233
    1aaa:	a9 2e       	mov	r10, r25
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <vfprintf+0x300>
    1aae:	a2 fe       	sbrs	r10, 2
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0x2fe>
    1ab2:	b3 94       	inc	r11
    1ab4:	b3 94       	inc	r11
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <vfprintf+0x300>
    1ab8:	8a 2d       	mov	r24, r10
    1aba:	86 78       	andi	r24, 0x86	; 134
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <vfprintf+0x300>
    1abe:	b3 94       	inc	r11
    1ac0:	a3 fc       	sbrc	r10, 3
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <vfprintf+0x326>
    1ac4:	a0 fe       	sbrs	r10, 0
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0x314>
    1ac8:	b2 14       	cp	r11, r2
    1aca:	88 f4       	brcc	.+34     	; 0x1aee <vfprintf+0x32e>
    1acc:	28 0c       	add	r2, r8
    1ace:	92 2c       	mov	r9, r2
    1ad0:	9b 18       	sub	r9, r11
    1ad2:	0e c0       	rjmp	.+28     	; 0x1af0 <vfprintf+0x330>
    1ad4:	b2 14       	cp	r11, r2
    1ad6:	60 f4       	brcc	.+24     	; 0x1af0 <vfprintf+0x330>
    1ad8:	b6 01       	movw	r22, r12
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1ae2:	b3 94       	inc	r11
    1ae4:	f7 cf       	rjmp	.-18     	; 0x1ad4 <vfprintf+0x314>
    1ae6:	b2 14       	cp	r11, r2
    1ae8:	18 f4       	brcc	.+6      	; 0x1af0 <vfprintf+0x330>
    1aea:	2b 18       	sub	r2, r11
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfprintf+0x332>
    1aee:	98 2c       	mov	r9, r8
    1af0:	21 2c       	mov	r2, r1
    1af2:	a4 fe       	sbrs	r10, 4
    1af4:	10 c0       	rjmp	.+32     	; 0x1b16 <vfprintf+0x356>
    1af6:	b6 01       	movw	r22, r12
    1af8:	80 e3       	ldi	r24, 0x30	; 48
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1b00:	a2 fe       	sbrs	r10, 2
    1b02:	17 c0       	rjmp	.+46     	; 0x1b32 <vfprintf+0x372>
    1b04:	a1 fc       	sbrc	r10, 1
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <vfprintf+0x34e>
    1b08:	88 e7       	ldi	r24, 0x78	; 120
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <vfprintf+0x352>
    1b0e:	88 e5       	ldi	r24, 0x58	; 88
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	b6 01       	movw	r22, r12
    1b14:	0c c0       	rjmp	.+24     	; 0x1b2e <vfprintf+0x36e>
    1b16:	8a 2d       	mov	r24, r10
    1b18:	86 78       	andi	r24, 0x86	; 134
    1b1a:	59 f0       	breq	.+22     	; 0x1b32 <vfprintf+0x372>
    1b1c:	a1 fe       	sbrs	r10, 1
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x364>
    1b20:	8b e2       	ldi	r24, 0x2B	; 43
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <vfprintf+0x366>
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	a7 fc       	sbrc	r10, 7
    1b28:	8d e2       	ldi	r24, 0x2D	; 45
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1b32:	89 14       	cp	r8, r9
    1b34:	38 f4       	brcc	.+14     	; 0x1b44 <vfprintf+0x384>
    1b36:	b6 01       	movw	r22, r12
    1b38:	80 e3       	ldi	r24, 0x30	; 48
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1b40:	9a 94       	dec	r9
    1b42:	f7 cf       	rjmp	.-18     	; 0x1b32 <vfprintf+0x372>
    1b44:	8a 94       	dec	r8
    1b46:	f3 01       	movw	r30, r6
    1b48:	e8 0d       	add	r30, r8
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	80 81       	ld	r24, Z
    1b4e:	b6 01       	movw	r22, r12
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1b56:	81 10       	cpse	r8, r1
    1b58:	f5 cf       	rjmp	.-22     	; 0x1b44 <vfprintf+0x384>
    1b5a:	22 20       	and	r2, r2
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <vfprintf+0x3a0>
    1b5e:	42 ce       	rjmp	.-892    	; 0x17e4 <vfprintf+0x24>
    1b60:	b6 01       	movw	r22, r12
    1b62:	80 e2       	ldi	r24, 0x20	; 32
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <fputc>
    1b6a:	2a 94       	dec	r2
    1b6c:	f6 cf       	rjmp	.-20     	; 0x1b5a <vfprintf+0x39a>
    1b6e:	f6 01       	movw	r30, r12
    1b70:	86 81       	ldd	r24, Z+6	; 0x06
    1b72:	97 81       	ldd	r25, Z+7	; 0x07
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <vfprintf+0x3ba>
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	9f ef       	ldi	r25, 0xFF	; 255
    1b7a:	2b 96       	adiw	r28, 0x0b	; 11
    1b7c:	e2 e1       	ldi	r30, 0x12	; 18
    1b7e:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__epilogue_restores__>

00001b82 <strnlen_P>:
    1b82:	fc 01       	movw	r30, r24
    1b84:	05 90       	lpm	r0, Z+
    1b86:	61 50       	subi	r22, 0x01	; 1
    1b88:	70 40       	sbci	r23, 0x00	; 0
    1b8a:	01 10       	cpse	r0, r1
    1b8c:	d8 f7       	brcc	.-10     	; 0x1b84 <strnlen_P+0x2>
    1b8e:	80 95       	com	r24
    1b90:	90 95       	com	r25
    1b92:	8e 0f       	add	r24, r30
    1b94:	9f 1f       	adc	r25, r31
    1b96:	08 95       	ret

00001b98 <strnlen>:
    1b98:	fc 01       	movw	r30, r24
    1b9a:	61 50       	subi	r22, 0x01	; 1
    1b9c:	70 40       	sbci	r23, 0x00	; 0
    1b9e:	01 90       	ld	r0, Z+
    1ba0:	01 10       	cpse	r0, r1
    1ba2:	d8 f7       	brcc	.-10     	; 0x1b9a <strnlen+0x2>
    1ba4:	80 95       	com	r24
    1ba6:	90 95       	com	r25
    1ba8:	8e 0f       	add	r24, r30
    1baa:	9f 1f       	adc	r25, r31
    1bac:	08 95       	ret

00001bae <fputc>:
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	23 81       	ldd	r18, Z+3	; 0x03
    1bba:	21 fd       	sbrc	r18, 1
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <fputc+0x16>
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f ef       	ldi	r25, 0xFF	; 255
    1bc2:	2c c0       	rjmp	.+88     	; 0x1c1c <fputc+0x6e>
    1bc4:	22 ff       	sbrs	r18, 2
    1bc6:	16 c0       	rjmp	.+44     	; 0x1bf4 <fputc+0x46>
    1bc8:	46 81       	ldd	r20, Z+6	; 0x06
    1bca:	57 81       	ldd	r21, Z+7	; 0x07
    1bcc:	24 81       	ldd	r18, Z+4	; 0x04
    1bce:	35 81       	ldd	r19, Z+5	; 0x05
    1bd0:	42 17       	cp	r20, r18
    1bd2:	53 07       	cpc	r21, r19
    1bd4:	44 f4       	brge	.+16     	; 0x1be6 <fputc+0x38>
    1bd6:	a0 81       	ld	r26, Z
    1bd8:	b1 81       	ldd	r27, Z+1	; 0x01
    1bda:	9d 01       	movw	r18, r26
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	31 83       	std	Z+1, r19	; 0x01
    1be2:	20 83       	st	Z, r18
    1be4:	8c 93       	st	X, r24
    1be6:	26 81       	ldd	r18, Z+6	; 0x06
    1be8:	37 81       	ldd	r19, Z+7	; 0x07
    1bea:	2f 5f       	subi	r18, 0xFF	; 255
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	37 83       	std	Z+7, r19	; 0x07
    1bf0:	26 83       	std	Z+6, r18	; 0x06
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <fputc+0x6e>
    1bf4:	8b 01       	movw	r16, r22
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	00 84       	ldd	r0, Z+8	; 0x08
    1bfc:	f1 85       	ldd	r31, Z+9	; 0x09
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	09 95       	icall
    1c02:	89 2b       	or	r24, r25
    1c04:	e1 f6       	brne	.-72     	; 0x1bbe <fputc+0x10>
    1c06:	d8 01       	movw	r26, r16
    1c08:	16 96       	adiw	r26, 0x06	; 6
    1c0a:	8d 91       	ld	r24, X+
    1c0c:	9c 91       	ld	r25, X
    1c0e:	17 97       	sbiw	r26, 0x07	; 7
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	17 96       	adiw	r26, 0x07	; 7
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24
    1c18:	16 97       	sbiw	r26, 0x06	; 6
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <__ultoa_invert>:
    1c26:	fa 01       	movw	r30, r20
    1c28:	aa 27       	eor	r26, r26
    1c2a:	28 30       	cpi	r18, 0x08	; 8
    1c2c:	51 f1       	breq	.+84     	; 0x1c82 <__ultoa_invert+0x5c>
    1c2e:	20 31       	cpi	r18, 0x10	; 16
    1c30:	81 f1       	breq	.+96     	; 0x1c92 <__ultoa_invert+0x6c>
    1c32:	e8 94       	clt
    1c34:	6f 93       	push	r22
    1c36:	6e 7f       	andi	r22, 0xFE	; 254
    1c38:	6e 5f       	subi	r22, 0xFE	; 254
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	af 4f       	sbci	r26, 0xFF	; 255
    1c42:	b1 e0       	ldi	r27, 0x01	; 1
    1c44:	3e d0       	rcall	.+124    	; 0x1cc2 <__ultoa_invert+0x9c>
    1c46:	b4 e0       	ldi	r27, 0x04	; 4
    1c48:	3c d0       	rcall	.+120    	; 0x1cc2 <__ultoa_invert+0x9c>
    1c4a:	67 0f       	add	r22, r23
    1c4c:	78 1f       	adc	r23, r24
    1c4e:	89 1f       	adc	r24, r25
    1c50:	9a 1f       	adc	r25, r26
    1c52:	a1 1d       	adc	r26, r1
    1c54:	68 0f       	add	r22, r24
    1c56:	79 1f       	adc	r23, r25
    1c58:	8a 1f       	adc	r24, r26
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	a1 1d       	adc	r26, r1
    1c5e:	6a 0f       	add	r22, r26
    1c60:	71 1d       	adc	r23, r1
    1c62:	81 1d       	adc	r24, r1
    1c64:	91 1d       	adc	r25, r1
    1c66:	a1 1d       	adc	r26, r1
    1c68:	20 d0       	rcall	.+64     	; 0x1caa <__ultoa_invert+0x84>
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <__ultoa_invert+0x48>
    1c6c:	68 94       	set
    1c6e:	3f 91       	pop	r19
    1c70:	2a e0       	ldi	r18, 0x0A	; 10
    1c72:	26 9f       	mul	r18, r22
    1c74:	11 24       	eor	r1, r1
    1c76:	30 19       	sub	r19, r0
    1c78:	30 5d       	subi	r19, 0xD0	; 208
    1c7a:	31 93       	st	Z+, r19
    1c7c:	de f6       	brtc	.-74     	; 0x1c34 <__ultoa_invert+0xe>
    1c7e:	cf 01       	movw	r24, r30
    1c80:	08 95       	ret
    1c82:	46 2f       	mov	r20, r22
    1c84:	47 70       	andi	r20, 0x07	; 7
    1c86:	40 5d       	subi	r20, 0xD0	; 208
    1c88:	41 93       	st	Z+, r20
    1c8a:	b3 e0       	ldi	r27, 0x03	; 3
    1c8c:	0f d0       	rcall	.+30     	; 0x1cac <__ultoa_invert+0x86>
    1c8e:	c9 f7       	brne	.-14     	; 0x1c82 <__ultoa_invert+0x5c>
    1c90:	f6 cf       	rjmp	.-20     	; 0x1c7e <__ultoa_invert+0x58>
    1c92:	46 2f       	mov	r20, r22
    1c94:	4f 70       	andi	r20, 0x0F	; 15
    1c96:	40 5d       	subi	r20, 0xD0	; 208
    1c98:	4a 33       	cpi	r20, 0x3A	; 58
    1c9a:	18 f0       	brcs	.+6      	; 0x1ca2 <__ultoa_invert+0x7c>
    1c9c:	49 5d       	subi	r20, 0xD9	; 217
    1c9e:	31 fd       	sbrc	r19, 1
    1ca0:	40 52       	subi	r20, 0x20	; 32
    1ca2:	41 93       	st	Z+, r20
    1ca4:	02 d0       	rcall	.+4      	; 0x1caa <__ultoa_invert+0x84>
    1ca6:	a9 f7       	brne	.-22     	; 0x1c92 <__ultoa_invert+0x6c>
    1ca8:	ea cf       	rjmp	.-44     	; 0x1c7e <__ultoa_invert+0x58>
    1caa:	b4 e0       	ldi	r27, 0x04	; 4
    1cac:	a6 95       	lsr	r26
    1cae:	97 95       	ror	r25
    1cb0:	87 95       	ror	r24
    1cb2:	77 95       	ror	r23
    1cb4:	67 95       	ror	r22
    1cb6:	ba 95       	dec	r27
    1cb8:	c9 f7       	brne	.-14     	; 0x1cac <__ultoa_invert+0x86>
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	61 05       	cpc	r22, r1
    1cbe:	71 05       	cpc	r23, r1
    1cc0:	08 95       	ret
    1cc2:	9b 01       	movw	r18, r22
    1cc4:	ac 01       	movw	r20, r24
    1cc6:	0a 2e       	mov	r0, r26
    1cc8:	06 94       	lsr	r0
    1cca:	57 95       	ror	r21
    1ccc:	47 95       	ror	r20
    1cce:	37 95       	ror	r19
    1cd0:	27 95       	ror	r18
    1cd2:	ba 95       	dec	r27
    1cd4:	c9 f7       	brne	.-14     	; 0x1cc8 <__ultoa_invert+0xa2>
    1cd6:	62 0f       	add	r22, r18
    1cd8:	73 1f       	adc	r23, r19
    1cda:	84 1f       	adc	r24, r20
    1cdc:	95 1f       	adc	r25, r21
    1cde:	a0 1d       	adc	r26, r0
    1ce0:	08 95       	ret

00001ce2 <__prologue_saves__>:
    1ce2:	2f 92       	push	r2
    1ce4:	3f 92       	push	r3
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	ca 1b       	sub	r28, r26
    1d0c:	db 0b       	sbc	r29, r27
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	09 94       	ijmp

00001d1a <__epilogue_restores__>:
    1d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d1c:	39 88       	ldd	r3, Y+17	; 0x11
    1d1e:	48 88       	ldd	r4, Y+16	; 0x10
    1d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d30:	df 80       	ldd	r13, Y+7	; 0x07
    1d32:	ee 80       	ldd	r14, Y+6	; 0x06
    1d34:	fd 80       	ldd	r15, Y+5	; 0x05
    1d36:	0c 81       	ldd	r16, Y+4	; 0x04
    1d38:	1b 81       	ldd	r17, Y+3	; 0x03
    1d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d3e:	ce 0f       	add	r28, r30
    1d40:	d1 1d       	adc	r29, r1
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	ed 01       	movw	r28, r26
    1d4e:	08 95       	ret

00001d50 <_exit>:
    1d50:	f8 94       	cli

00001d52 <__stop_program>:
    1d52:	ff cf       	rjmp	.-2      	; 0x1d52 <__stop_program>
