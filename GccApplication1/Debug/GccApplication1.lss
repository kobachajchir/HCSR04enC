
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00000ff2  00001086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  008002e0  008002e0  00001266  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba6  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf4  00000000  00000000  00003012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0f  00000000  00000000  00003d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00004a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d6  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a0  00000000  00000000  00005672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 ee       	ldi	r26, 0xE0	; 224
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 03 02 	call	0x406	; 0x406 <main>
  9e:	0c 94 f7 07 	jmp	0xfee	; 0xfee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
  a6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
  aa:	08 95       	ret

000000ac <__vector_10>:
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
  c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
  d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
  d4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
  d8:	84 ff       	sbrs	r24, 4
  da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
  dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	dc 01       	movw	r26, r24
  f0:	99 27       	eor	r25, r25
  f2:	88 27       	eor	r24, r24
  f4:	82 0f       	add	r24, r18
  f6:	93 1f       	adc	r25, r19
  f8:	a1 1d       	adc	r26, r1
  fa:	b1 1d       	adc	r27, r1
  fc:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <ultraSensor>
 100:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <ultraSensor+0x1>
 104:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <ultraSensor+0x2>
 108:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <ultraSensor+0x3>
 10c:	e5 e0       	ldi	r30, 0x05	; 5
 10e:	f3 e0       	ldi	r31, 0x03	; 3
 110:	80 81       	ld	r24, Z
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	80 83       	st	Z, r24
 116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
 118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 120:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	dc 01       	movw	r26, r24
 12c:	99 27       	eor	r25, r25
 12e:	88 27       	eor	r24, r24
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <ultraSensor+0x4>
 13c:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <ultraSensor+0x5>
 140:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <ultraSensor+0x6>
 144:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <ultraSensor+0x7>
 148:	e5 e0       	ldi	r30, 0x05	; 5
 14a:	f3 e0       	ldi	r31, 0x03	; 3
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_13>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <ovf_count>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <ovf_count>
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_11>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	e8 e8       	ldi	r30, 0x88	; 136
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	80 5c       	subi	r24, 0xC0	; 192
 1b2:	93 46       	sbci	r25, 0x63	; 99
 1b4:	91 83       	std	Z+1, r25	; 0x01
 1b6:	80 83       	st	Z, r24
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
 1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
 1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
 1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_12>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_7>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
 23c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 240:	81 ff       	sbrs	r24, 1
 242:	89 c0       	rjmp	.+274    	; 0x356 <__vector_7+0x13c>
 244:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	99 f4       	brne	.+38     	; 0x272 <__vector_7+0x58>
 24c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__data_end>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	20 f4       	brcc	.+8      	; 0x25c <__vector_7+0x42>
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <__vector_7+0x58>
 25c:	e5 e0       	ldi	r30, 0x05	; 5
 25e:	f3 e0       	ldi	r31, 0x03	; 3
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
 26e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__data_end>
 272:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	d1 f4       	brne	.+52     	; 0x2ae <__vector_7+0x94>
 27a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <ultraSensor+0xc>
 27e:	94 ff       	sbrs	r25, 4
 280:	16 c0       	rjmp	.+44     	; 0x2ae <__vector_7+0x94>
 282:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <bandera2>
 286:	90 fd       	sbrc	r25, 0
 288:	12 c0       	rjmp	.+36     	; 0x2ae <__vector_7+0x94>
 28a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <veintems_counter>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	30 f4       	brcc	.+12     	; 0x29e <__vector_7+0x84>
 292:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <veintems_counter>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <veintems_counter>
 29c:	21 c0       	rjmp	.+66     	; 0x2e0 <__vector_7+0xc6>
 29e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
 2a8:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <veintems_counter>
 2ac:	19 c0       	rjmp	.+50     	; 0x2e0 <__vector_7+0xc6>
 2ae:	88 23       	and	r24, r24
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <__vector_7+0x9c>
 2b2:	85 30       	cpi	r24, 0x05	; 5
 2b4:	a9 f4       	brne	.+42     	; 0x2e0 <__vector_7+0xc6>
 2b6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
 2ba:	85 fd       	sbrc	r24, 5
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <__vector_7+0xb8>
 2be:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <wait_time>
 2c2:	87 30       	cpi	r24, 0x07	; 7
 2c4:	30 f4       	brcc	.+12     	; 0x2d2 <__vector_7+0xb8>
 2c6:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <wait_time>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <wait_time>
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <__vector_7+0xc6>
 2d2:	e5 e0       	ldi	r30, 0x05	; 5
 2d4:	f3 e0       	ldi	r31, 0x03	; 3
 2d6:	80 81       	ld	r24, Z
 2d8:	80 62       	ori	r24, 0x20	; 32
 2da:	80 83       	st	Z, r24
 2dc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <wait_time>
 2e0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <diezMsCounter>
 2e4:	84 31       	cpi	r24, 0x14	; 20
 2e6:	30 f4       	brcc	.+12     	; 0x2f4 <__vector_7+0xda>
 2e8:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <diezMsCounter>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <diezMsCounter>
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__vector_7+0xe8>
 2f4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <diezMsCounter>
 2f8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
 302:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 306:	86 ff       	sbrs	r24, 6
 308:	0e c0       	rjmp	.+28     	; 0x326 <__vector_7+0x10c>
 30a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
 30e:	8f 3f       	cpi	r24, 0xFF	; 255
 310:	29 f4       	brne	.+10     	; 0x31c <__vector_7+0x102>
 312:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 316:	84 60       	ori	r24, 0x04	; 4
 318:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
 31c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <btn_pressed_time>
 326:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 32a:	85 ff       	sbrs	r24, 5
 32c:	14 c0       	rjmp	.+40     	; 0x356 <__vector_7+0x13c>
 32e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <servo_counter>
 332:	8e 31       	cpi	r24, 0x1E	; 30
 334:	30 f4       	brcc	.+12     	; 0x342 <__vector_7+0x128>
 336:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <servo_counter>
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <servo_counter>
 340:	0a c0       	rjmp	.+20     	; 0x356 <__vector_7+0x13c>
 342:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <servo_counter>
 346:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 34a:	8f 7d       	andi	r24, 0xDF	; 223
 34c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
 350:	8a e5       	ldi	r24, 0x5A	; 90
 352:	0e 94 08 03 	call	0x610	; 0x610 <servoA_set_angle>
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <timer1_init>:
 378:	a4 e8       	ldi	r26, 0x84	; 132
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	1c 92       	st	X, r1
 380:	1e 92       	st	-X, r1
 382:	86 b3       	in	r24, 0x16	; 22
 384:	80 62       	ori	r24, 0x20	; 32
 386:	86 bb       	out	0x16, r24	; 22
 388:	ef e6       	ldi	r30, 0x6F	; 111
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	87 62       	ori	r24, 0x27	; 39
 390:	80 83       	st	Z, r24
 392:	e1 e8       	ldi	r30, 0x81	; 129
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	80 83       	st	Z, r24
 39c:	80 81       	ld	r24, Z
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	80 83       	st	Z, r24
 3a2:	8d 91       	ld	r24, X+
 3a4:	9c 91       	ld	r25, X
 3a6:	80 5c       	subi	r24, 0xC0	; 192
 3a8:	93 46       	sbci	r25, 0x63	; 99
 3aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3b2:	08 95       	ret

000003b4 <timer2_init>:
 3b4:	e1 eb       	ldi	r30, 0xB1	; 177
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	87 60       	ori	r24, 0x07	; 7
 3bc:	80 83       	st	Z, r24
 3be:	8b e9       	ldi	r24, 0x9B	; 155
 3c0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3c4:	e0 e7       	ldi	r30, 0x70	; 112
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	80 83       	st	Z, r24
 3ce:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 3d2:	08 95       	ret

000003d4 <gpio_pins_init>:
 3d4:	84 b1       	in	r24, 0x04	; 4
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	84 b9       	out	0x04, r24	; 4
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	85 b9       	out	0x05, r24	; 5
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	8a b9       	out	0x0a, r24	; 10
 3e6:	84 b1       	in	r24, 0x04	; 4
 3e8:	8e 7f       	andi	r24, 0xFE	; 254
 3ea:	84 b9       	out	0x04, r24	; 4
 3ec:	8a b1       	in	r24, 0x0a	; 10
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	8a b9       	out	0x0a, r24	; 10
 3f2:	8b b1       	in	r24, 0x0b	; 11
 3f4:	8f 7e       	andi	r24, 0xEF	; 239
 3f6:	8b b9       	out	0x0b, r24	; 11
 3f8:	84 b1       	in	r24, 0x04	; 4
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	84 b9       	out	0x04, r24	; 4
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	87 7f       	andi	r24, 0xF7	; 247
 402:	8b b9       	out	0x0b, r24	; 11
 404:	08 95       	ret

00000406 <main>:

int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
 406:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <bandera2>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
 40a:	82 e8       	ldi	r24, 0x82	; 130
 40c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 72 03 	call	0x6e4	; 0x6e4 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
 418:	e9 e0       	ldi	r30, 0x09	; 9
 41a:	f3 e0       	ldi	r31, 0x03	; 3
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	93 83       	std	Z+3, r25	; 0x03
 422:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	91 83       	std	Z+1, r25	; 0x01
 42a:	80 83       	st	Z, r24
	diezMsCounter = 0;
 42c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <diezMsCounter>
	outA.cinta_struct_full_mem = 0;
 430:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <outA>
 434:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <outA+0x1>
 438:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <outA+0x2>
 43c:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <outA+0x3>
	outB.cinta_struct_full_mem = 0;
 440:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <outB>
 444:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <outB+0x1>
 448:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <outB+0x2>
 44c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <outB+0x3>
	outC.cinta_struct_full_mem = 0;
 450:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <outC>
 454:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <outC+0x1>
 458:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <outC+0x2>
 45c:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <outC+0x3>
	outD.cinta_struct_full_mem = 0;
 460:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <outD>
 464:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <outD+0x1>
 468:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <outD+0x2>
 46c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <outD+0x3>
	// Inicializa los pines GPIO
	gpio_pins_init();
 470:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
 474:	0e 94 bc 01 	call	0x378	; 0x378 <timer1_init>
	timer2_init();
 478:	0e 94 da 01 	call	0x3b4	; 0x3b4 <timer2_init>
	//Inicia HCSR04
	ultrasonic_init(&ultraSensor);
 47c:	89 ef       	ldi	r24, 0xF9	; 249
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	0e 94 9d 03 	call	0x73a	; 0x73a <ultrasonic_init>
	ultrasonic_set_print_method(&ultraSensor, printfWrapper); //Iniciar el metodo de impresion printf del ultrasonido
 484:	63 e5       	ldi	r22, 0x53	; 83
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	89 ef       	ldi	r24, 0xF9	; 249
 48a:	92 e0       	ldi	r25, 0x02	; 2
 48c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <ultrasonic_set_print_method>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
 490:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 494:	82 60       	ori	r24, 0x02	; 2
 496:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
 49a:	86 e2       	ldi	r24, 0x26	; 38
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
	while (1)
	{ 
		if(ULTRASONIC_ENABLE && ultraSensor.TRIGGER_ALLOWED && EMIT_TRIGGER){ //Sensor habilitado, listo para emitir y señal de emitir en alto
 4a2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 4a6:	88 23       	and	r24, r24
 4a8:	e4 f4       	brge	.+56     	; 0x4e2 <main+0xdc>
 4aa:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
 4ae:	85 ff       	sbrs	r24, 5
 4b0:	18 c0       	rjmp	.+48     	; 0x4e2 <main+0xdc>
 4b2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 4b6:	81 ff       	sbrs	r24, 1
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <main+0xdc>
			if(ultrasonic_start(&ultraSensor)){ //Trata de iniciar, veremos el resultado
 4ba:	89 ef       	ldi	r24, 0xF9	; 249
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	0e 94 06 04 	call	0x80c	; 0x80c <ultrasonic_start>
 4c2:	88 23       	and	r24, r24
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <main+0xca>
				printf("InitHCSR04\n"); //Emitio
 4c6:	89 e3       	ldi	r24, 0x39	; 57
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <main+0xdc>
			}else{
				printf("ErrorInitHCSR04\n"); //No puedo iniciar, no emitio, no bajo la bandera de emision
 4d0:	84 e3       	ldi	r24, 0x34	; 52
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
				EMIT_FAILED = 1; //Fallo emision
 4d8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 4dc:	84 60       	ori	r24, 0x04	; 4
 4de:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
			}
		}
		ultrasonic_update(&ultraSensor);
 4e2:	89 ef       	ldi	r24, 0xF9	; 249
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	0e 94 22 04 	call	0x844	; 0x844 <ultrasonic_update>
		if(ultraSensor.state == ULTRA_TRIGGERING){ //Imprime 
 4ea:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	89 f4       	brne	.+34     	; 0x514 <main+0x10e>
			if(!ultraSensor.DO_TRIGGER && !ultraSensor.TRIGGER_ALLOWED && EMIT_TRIGGER){ //Ya lanzo trigger y quedo en tiempo de espera
 4f2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
 4f6:	81 72       	andi	r24, 0x21	; 33
 4f8:	69 f4       	brne	.+26     	; 0x514 <main+0x10e>
 4fa:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 4fe:	81 ff       	sbrs	r24, 1
 500:	09 c0       	rjmp	.+18     	; 0x514 <main+0x10e>
				printf("Trigger lanzado \n"); //Imprime hasta que cambia de estado la libreria
 502:	84 e4       	ldi	r24, 0x44	; 68
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
				EMIT_TRIGGER = 0; //Logro emitir poniendo pin en alto
 50a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
			}
		}
		if(ultraSensor.TRIGGER_FINISH && ultraSensor.ECHO_RISING){ //Termino trigger y el echo aun no volvio
 514:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <ultraSensor+0xc>
 518:	82 71       	andi	r24, 0x12	; 18
 51a:	82 31       	cpi	r24, 0x12	; 18
 51c:	21 f4       	brne	.+8      	; 0x526 <main+0x120>
			printf("Esperando ECHO \n");
 51e:	85 e5       	ldi	r24, 0x55	; 85
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
		}
		if(ultraSensor.state == ULTRA_DONE){
 526:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <ultraSensor+0xd>
 52a:	85 30       	cpi	r24, 0x05	; 5
 52c:	a1 f4       	brne	.+40     	; 0x556 <main+0x150>
			printf("HCSR04 Dist[mm] %ul\n", ultrasonic_get_distance(&ultraSensor));
 52e:	89 ef       	ldi	r24, 0xF9	; 249
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <ultrasonic_get_distance>
 536:	9f 93       	push	r25
 538:	8f 93       	push	r24
 53a:	7f 93       	push	r23
 53c:	6f 93       	push	r22
 53e:	85 e6       	ldi	r24, 0x65	; 101
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	9f 93       	push	r25
 544:	8f 93       	push	r24
 546:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <printf>
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
		}
		if(VEINTEMS_PASSED){
 556:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 55a:	80 ff       	sbrs	r24, 0
 55c:	0d c0       	rjmp	.+26     	; 0x578 <main+0x172>
			ultrasonic_hal_echo_timeout(&ultraSensor); //Wrapper fn para setear TIMEDOUT = 1 en la libreria
 55e:	89 ef       	ldi	r24, 0xF9	; 249
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	0e 94 48 03 	call	0x690	; 0x690 <ultrasonic_hal_echo_timeout>
			printf("HCSR04 perdio ECHO\n");
 566:	8a e7       	ldi	r24, 0x7A	; 122
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
			VEINTEMS_PASSED = 0; //Reiniciar bandera de timeout
 56e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <bandera2>
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <bandera2>
		}
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
 578:	4c 9b       	sbis	0x09, 4	; 9
 57a:	0a c0       	rjmp	.+20     	; 0x590 <main+0x18a>
 57c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 580:	86 fd       	sbrc	r24, 6
 582:	06 c0       	rjmp	.+12     	; 0x590 <main+0x18a>
			btn_pressed_time = 0;
 584:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <btn_pressed_time>
			BTN_PRESSED = 1;
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
 58e:	28 c0       	rjmp	.+80     	; 0x5e0 <main+0x1da>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
 590:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 594:	86 ff       	sbrs	r24, 6
 596:	24 c0       	rjmp	.+72     	; 0x5e0 <main+0x1da>
 598:	4c 99       	sbic	0x09, 4	; 9
 59a:	22 c0       	rjmp	.+68     	; 0x5e0 <main+0x1da>
			BTN_PRESSED = 0;
 59c:	8f 7b       	andi	r24, 0xBF	; 191
 59e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
 5a2:	82 ff       	sbrs	r24, 2
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <main+0x1a8>
				printf("Btn overflowed\n");
 5a6:	8d e8       	ldi	r24, 0x8D	; 141
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
 5ae:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <btn_pressed_time>
 5b2:	8a 30       	cpi	r24, 0x0A	; 10
 5b4:	30 f4       	brcc	.+12     	; 0x5c2 <main+0x1bc>
 5b6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 5ba:	98 2f       	mov	r25, r24
 5bc:	94 70       	andi	r25, 0x04	; 4
 5be:	82 ff       	sbrs	r24, 2
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <main+0x1c8>
				BTN_RELEASED = 1;
 5c2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <main+0x1da>
			}else{ //Reiniciar
				btn_pressed_time = 0;
 5ce:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <btn_pressed_time>
				if(BTN_OVF){
 5d2:	99 23       	and	r25, r25
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <main+0x1da>
					BTN_OVF = 0;
 5d6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 5da:	8b 7f       	andi	r24, 0xFB	; 251
 5dc:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			}
		}
		/*if(SECPASSED){ Aun no implementado
			SECPASSED = 0;
		}*/ 
		if(BTN_RELEASED){
 5e0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 5e4:	80 ff       	sbrs	r24, 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <main+0x1ea>
			BTN_RELEASED = 0; //TEST SERVO A
			SERVOA_MOVE = 1;
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	80 61       	ori	r24, 0x10	; 16
 5ec:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
		}
		if(SERVOA_MOVE){
 5f0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 5f4:	84 ff       	sbrs	r24, 4
 5f6:	55 cf       	rjmp	.-342    	; 0x4a2 <main+0x9c>
			SERVOA_MOVE = 0;
 5f8:	8f 7e       	andi	r24, 0xEF	; 239
 5fa:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
			servoA_set_angle(0);
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	0e 94 08 03 	call	0x610	; 0x610 <servoA_set_angle>
			SERVOA_RESET = 1;
 604:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bandera>
 608:	80 62       	ori	r24, 0x20	; 32
 60a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bandera>
 60e:	49 cf       	rjmp	.-366    	; 0x4a2 <main+0x9c>

00000610 <servoA_set_angle>:
#include <stdio.h>
#include "./../../main.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
 610:	85 3b       	cpi	r24, 0xB5	; 181
 612:	08 f0       	brcs	.+2      	; 0x616 <servoA_set_angle+0x6>
		angle = 180;
 614:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	a0 ed       	ldi	r26, 0xD0	; 208
 61c:	b7 e0       	ldi	r27, 0x07	; 7
 61e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__umulhisi3>
 622:	24 eb       	ldi	r18, 0xB4	; 180
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
 62e:	da 01       	movw	r26, r20
 630:	c9 01       	movw	r24, r18
 632:	80 53       	subi	r24, 0x30	; 48
 634:	98 4f       	sbci	r25, 0xF8	; 248
 636:	af 4f       	sbci	r26, 0xFF	; 255
 638:	bf 4f       	sbci	r27, 0xFF	; 255
 63a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
 63e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
 642:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
 646:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
 64a:	08 95       	ret

0000064c <ultrasonic_hal_trigger_setHigh>:
// IMPLEMENTACIÓN DE LAS FUNCIONES HAL
// -------------------------------------------------------------------------

void ultrasonic_hal_trigger_setHigh(ultrasonic_t *us)
{
	TRIGGER_PORT |= (1 << TRIGGER_PIN);
 64c:	2b b1       	in	r18, 0x0b	; 11
 64e:	28 60       	ori	r18, 0x08	; 8
 650:	2b b9       	out	0x0b, r18	; 11
	ultrasonic_print(us, "Trigger HIGH");
 652:	6c e9       	ldi	r22, 0x9C	; 156
 654:	71 e0       	ldi	r23, 0x01	; 1
 656:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
 65a:	08 95       	ret

0000065c <ultrasonic_hal_trigger_setLow>:
}

void ultrasonic_hal_trigger_setLow(ultrasonic_t *us)
{
	TRIGGER_PORT &= ~(1 << TRIGGER_PIN);
 65c:	2b b1       	in	r18, 0x0b	; 11
 65e:	27 7f       	andi	r18, 0xF7	; 247
 660:	2b b9       	out	0x0b, r18	; 11
	ultrasonic_print(us, "Trigger LOW");
 662:	69 ea       	ldi	r22, 0xA9	; 169
 664:	71 e0       	ldi	r23, 0x01	; 1
 666:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
 66a:	08 95       	ret

0000066c <ultrasonic_hal_setTrigger_timeout>:
}

void ultrasonic_hal_setTrigger_timeout(ultrasonic_t *us, uint32_t microseconds)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <ultrasonic_hal_setTrigger_timeout+0x6>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	89 83       	std	Y+1, r24	; 0x01
	ultrasonic_print(&us, "Timeout trigger configurado");
 67a:	65 eb       	ldi	r22, 0xB5	; 181
 67c:	71 e0       	ldi	r23, 0x01	; 1
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
}
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <ultrasonic_hal_echo_timeout>:

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 d0       	rcall	.+0      	; 0x696 <ultrasonic_hal_echo_timeout+0x6>
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	9a 83       	std	Y+2, r25	; 0x02
 69c:	89 83       	std	Y+1, r24	; 0x01
	us->TIMEDOUT = 1;
 69e:	fc 01       	movw	r30, r24
 6a0:	24 85       	ldd	r18, Z+12	; 0x0c
 6a2:	28 60       	ori	r18, 0x08	; 8
 6a4:	24 87       	std	Z+12, r18	; 0x0c
	ultrasonic_print(&us, "Echo timeout");
 6a6:	61 ed       	ldi	r22, 0xD1	; 209
 6a8:	71 e0       	ldi	r23, 0x01	; 1
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
}
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <ultrasonic_hal_echo_setRisingEdge>:

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
 6bc:	e1 e8       	ldi	r30, 0x81	; 129
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	20 81       	ld	r18, Z
 6c2:	20 64       	ori	r18, 0x40	; 64
 6c4:	20 83       	st	Z, r18
	ultrasonic_print(us, "Captura flanco ascendente");
 6c6:	6e ed       	ldi	r22, 0xDE	; 222
 6c8:	71 e0       	ldi	r23, 0x01	; 1
 6ca:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
 6ce:	08 95       	ret

000006d0 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
 6d0:	e1 e8       	ldi	r30, 0x81	; 129
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	20 81       	ld	r18, Z
 6d6:	2f 7b       	andi	r18, 0xBF	; 191
 6d8:	20 83       	st	Z, r18
	ultrasonic_print(us, "Captura flanco descendente");
 6da:	68 ef       	ldi	r22, 0xF8	; 248
 6dc:	71 e0       	ldi	r23, 0x01	; 1
 6de:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
 6e2:	08 95       	ret

000006e4 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
 6e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
 6e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
 6ec:	88 e1       	ldi	r24, 0x18	; 24
 6ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6f8:	08 95       	ret

000006fa <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
 6fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6fe:	95 ff       	sbrs	r25, 5
 700:	fc cf       	rjmp	.-8      	; 0x6fa <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
 702:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 706:	08 95       	ret

00000708 <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
 708:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 70c:	88 23       	and	r24, r24
 70e:	e4 f7       	brge	.-8      	; 0x708 <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
 710:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 714:	08 95       	ret

00000716 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
 716:	cf 93       	push	r28
 718:	c8 2f       	mov	r28, r24
	if (c == '\n')
 71a:	8a 30       	cpi	r24, 0x0A	; 10
 71c:	19 f4       	brne	.+6      	; 0x724 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
 71e:	8d e0       	ldi	r24, 0x0D	; 13
 720:	0e 94 7d 03 	call	0x6fa	; 0x6fa <USART_Transmit>
	USART_Transmit(c);
 724:	8c 2f       	mov	r24, r28
 726:	0e 94 7d 03 	call	0x6fa	; 0x6fa <USART_Transmit>
	return 0;
}
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
 732:	0e 94 84 03 	call	0x708	; 0x708 <USART_Receive>
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	08 95       	ret

0000073a <ultrasonic_init>:
#include "ultrasonic_hal.h"  // Funciones de bajo nivel (setTriggerHigh, setTriggerLow, etc.)
#include <stddef.h>

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us)
{
 73a:	fc 01       	movw	r30, r24
    us->echo_init_time    = 0;
 73c:	10 82       	st	Z, r1
 73e:	11 82       	std	Z+1, r1	; 0x01
 740:	12 82       	std	Z+2, r1	; 0x02
 742:	13 82       	std	Z+3, r1	; 0x03
    us->echo_finish_time  = 0;
 744:	14 82       	std	Z+4, r1	; 0x04
 746:	15 82       	std	Z+5, r1	; 0x05
 748:	16 82       	std	Z+6, r1	; 0x06
 74a:	17 82       	std	Z+7, r1	; 0x07
    us->distance_mm       = 0;
 74c:	10 86       	std	Z+8, r1	; 0x08
 74e:	11 86       	std	Z+9, r1	; 0x09
 750:	12 86       	std	Z+10, r1	; 0x0a
 752:	13 86       	std	Z+11, r1	; 0x0b
    us->ALL_FLAGS = 0;
    us->state = ULTRA_IDLE;
 754:	15 86       	std	Z+13, r1	; 0x0d
	us->TRIGGER_ALLOWED = 1;
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	84 87       	std	Z+12, r24	; 0x0c
	us->print_method = NULL;
 75a:	17 86       	std	Z+15, r1	; 0x0f
 75c:	16 86       	std	Z+14, r1	; 0x0e
 75e:	08 95       	ret

00000760 <ultrasonic_calculate_distance>:
    }
}

// Calcula la distancia en milímetros según el tiempo de pulso
void ultrasonic_calculate_distance(ultrasonic_t *us)
{
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	ec 01       	movw	r28, r24
    uint32_t pulse_duration = us->echo_finish_time - us->echo_init_time;
 76a:	8c 81       	ldd	r24, Y+4	; 0x04
 76c:	9d 81       	ldd	r25, Y+5	; 0x05
 76e:	ae 81       	ldd	r26, Y+6	; 0x06
 770:	bf 81       	ldd	r27, Y+7	; 0x07
 772:	48 81       	ld	r20, Y
 774:	59 81       	ldd	r21, Y+1	; 0x01
 776:	6a 81       	ldd	r22, Y+2	; 0x02
 778:	7b 81       	ldd	r23, Y+3	; 0x03
 77a:	8c 01       	movw	r16, r24
 77c:	9d 01       	movw	r18, r26
 77e:	04 1b       	sub	r16, r20
 780:	15 0b       	sbc	r17, r21
 782:	26 0b       	sbc	r18, r22
 784:	37 0b       	sbc	r19, r23
 786:	b9 01       	movw	r22, r18
 788:	a8 01       	movw	r20, r16
    us->distance_mm = (pulse_duration * 34UL) / 400UL;
 78a:	d9 01       	movw	r26, r18
 78c:	c8 01       	movw	r24, r16
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	aa 1f       	adc	r26, r26
 794:	bb 1f       	adc	r27, r27
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	aa 1f       	adc	r26, r26
 7a4:	bb 1f       	adc	r27, r27
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	8c 01       	movw	r16, r24
 7b0:	9d 01       	movw	r18, r26
 7b2:	04 0f       	add	r16, r20
 7b4:	15 1f       	adc	r17, r21
 7b6:	26 1f       	adc	r18, r22
 7b8:	37 1f       	adc	r19, r23
 7ba:	c9 01       	movw	r24, r18
 7bc:	b8 01       	movw	r22, r16
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	20 e9       	ldi	r18, 0x90	; 144
 7c8:	31 e0       	ldi	r19, 0x01	; 1
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodsi4>
 7d2:	28 87       	std	Y+8, r18	; 0x08
 7d4:	39 87       	std	Y+9, r19	; 0x09
 7d6:	4a 87       	std	Y+10, r20	; 0x0a
 7d8:	5b 87       	std	Y+11, r21	; 0x0b
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	08 95       	ret

000007e4 <ultrasonic_get_distance>:

// Función para que el usuario lea la distancia calculada
uint32_t ultrasonic_get_distance(const ultrasonic_t *us)
{
    return us->distance_mm;
 7e4:	fc 01       	movw	r30, r24
 7e6:	60 85       	ldd	r22, Z+8	; 0x08
 7e8:	71 85       	ldd	r23, Z+9	; 0x09
 7ea:	82 85       	ldd	r24, Z+10	; 0x0a
 7ec:	93 85       	ldd	r25, Z+11	; 0x0b
}
 7ee:	08 95       	ret

000007f0 <ultrasonic_set_print_method>:
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
 7f0:	fc 01       	movw	r30, r24
 7f2:	77 87       	std	Z+15, r23	; 0x0f
 7f4:	66 87       	std	Z+14, r22	; 0x0e
 7f6:	08 95       	ret

000007f8 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
 7f8:	dc 01       	movw	r26, r24
 7fa:	1e 96       	adiw	r26, 0x0e	; 14
 7fc:	ed 91       	ld	r30, X+
 7fe:	fc 91       	ld	r31, X
 800:	1f 97       	sbiw	r26, 0x0f	; 15
 802:	30 97       	sbiw	r30, 0x00	; 0
 804:	11 f0       	breq	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	cb 01       	movw	r24, r22
		us->print_method(message);
 808:	09 95       	icall
 80a:	08 95       	ret

0000080c <ultrasonic_start>:
	us->print_method = NULL;
}

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
	// Solo inicias si el sensor está en reposo o finalizado
	if (us->state == ULTRA_IDLE || us->state == ULTRA_DONE || us->state == ULTRA_TIMEOUT) {
 810:	fc 01       	movw	r30, r24
 812:	25 85       	ldd	r18, Z+13	; 0x0d
 814:	22 23       	and	r18, r18
 816:	21 f0       	breq	.+8      	; 0x820 <ultrasonic_start+0x14>
 818:	25 30       	cpi	r18, 0x05	; 5
 81a:	11 f0       	breq	.+4      	; 0x820 <ultrasonic_start+0x14>
 81c:	26 30       	cpi	r18, 0x06	; 6
 81e:	71 f4       	brne	.+28     	; 0x83c <ultrasonic_start+0x30>
 820:	ec 01       	movw	r28, r24
		us->ALL_FLAGS = 0;
		us->DO_TRIGGER = 1;        // Bandera de solicitud de disparo
 822:	81 e0       	ldi	r24, 0x01	; 1
		us->TRIGGER_ALLOWED = 1;
 824:	91 e2       	ldi	r25, 0x21	; 33
		us->TRIGGER_FINISH = 0;    // Asegurar en 0
		us->CALCULATE_DISTANCE = 0;
		us->TIMEDOUT = 0;
 826:	9c 87       	std	Y+12, r25	; 0x0c
		us->state = ULTRA_TRIGGERING;
 828:	8d 87       	std	Y+13, r24	; 0x0d
		ultrasonic_hal_echo_setRisingEdge();
 82a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ultrasonic_hal_echo_setRisingEdge>
		ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
 82e:	63 e1       	ldi	r22, 0x13	; 19
 830:	72 e0       	ldi	r23, 0x02	; 2
 832:	ce 01       	movw	r24, r28
 834:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
		return true;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	01 c0       	rjmp	.+2      	; 0x83e <ultrasonic_start+0x32>
	}else{
		return false;
 83c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	00 d0       	rcall	.+0      	; 0x84a <ultrasonic_update+0x6>
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	9a 83       	std	Y+2, r25	; 0x02
 850:	89 83       	std	Y+1, r24	; 0x01
    switch (us->state)
 852:	fc 01       	movw	r30, r24
 854:	95 85       	ldd	r25, Z+13	; 0x0d
 856:	92 30       	cpi	r25, 0x02	; 2
 858:	09 f4       	brne	.+2      	; 0x85c <ultrasonic_update+0x18>
 85a:	42 c0       	rjmp	.+132    	; 0x8e0 <ultrasonic_update+0x9c>
 85c:	30 f4       	brcc	.+12     	; 0x86a <ultrasonic_update+0x26>
 85e:	99 23       	and	r25, r25
 860:	09 f4       	brne	.+2      	; 0x864 <ultrasonic_update+0x20>
 862:	81 c0       	rjmp	.+258    	; 0x966 <__stack+0x67>
 864:	91 30       	cpi	r25, 0x01	; 1
 866:	51 f0       	breq	.+20     	; 0x87c <ultrasonic_update+0x38>
 868:	7b c0       	rjmp	.+246    	; 0x960 <__stack+0x61>
 86a:	94 30       	cpi	r25, 0x04	; 4
 86c:	09 f4       	brne	.+2      	; 0x870 <ultrasonic_update+0x2c>
 86e:	63 c0       	rjmp	.+198    	; 0x936 <__stack+0x37>
 870:	08 f4       	brcc	.+2      	; 0x874 <ultrasonic_update+0x30>
 872:	4a c0       	rjmp	.+148    	; 0x908 <__stack+0x9>
 874:	95 30       	cpi	r25, 0x05	; 5
 876:	09 f4       	brne	.+2      	; 0x87a <ultrasonic_update+0x36>
 878:	76 c0       	rjmp	.+236    	; 0x966 <__stack+0x67>
 87a:	72 c0       	rjmp	.+228    	; 0x960 <__stack+0x61>
			// Espera a que ultrasonic_start() lo saque de este estado
			break;
		}
        case ULTRA_TRIGGERING:
        {
			ultrasonic_print(us, "Here");
 87c:	6f e2       	ldi	r22, 0x2F	; 47
 87e:	72 e0       	ldi	r23, 0x02	; 2
 880:	cf 01       	movw	r24, r30
 882:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
			if(us->DO_TRIGGER){
 886:	e9 81       	ldd	r30, Y+1	; 0x01
 888:	fa 81       	ldd	r31, Y+2	; 0x02
 88a:	84 85       	ldd	r24, Z+12	; 0x0c
 88c:	80 ff       	sbrs	r24, 0
 88e:	16 c0       	rjmp	.+44     	; 0x8bc <ultrasonic_update+0x78>
				ultrasonic_hal_trigger_setHigh();
 890:	0e 94 26 03 	call	0x64c	; 0x64c <ultrasonic_hal_trigger_setHigh>
				ultrasonic_hal_setTrigger_timeout(&us, ULTRA_TRIGGER_PULSE_US);
 894:	4a e0       	ldi	r20, 0x0A	; 10
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	ce 01       	movw	r24, r28
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	0e 94 36 03 	call	0x66c	; 0x66c <ultrasonic_hal_setTrigger_timeout>
				us->DO_TRIGGER = 0;
 8a4:	e9 81       	ldd	r30, Y+1	; 0x01
 8a6:	fa 81       	ldd	r31, Y+2	; 0x02
 8a8:	94 85       	ldd	r25, Z+12	; 0x0c
				us->TRIGGER_ALLOWED = 0; //Ahora empieza a correr el timer de 70ms entre triggers
 8aa:	9e 7f       	andi	r25, 0xFE	; 254
 8ac:	9f 7d       	andi	r25, 0xDF	; 223
 8ae:	94 87       	std	Z+12, r25	; 0x0c
				ultrasonic_print(us, "LIB DEBUG - Hizo trigger");
 8b0:	64 e3       	ldi	r22, 0x34	; 52
 8b2:	72 e0       	ldi	r23, 0x02	; 2
 8b4:	cf 01       	movw	r24, r30
 8b6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
 8ba:	55 c0       	rjmp	.+170    	; 0x966 <__stack+0x67>
			}else if(us->TRIGGER_FINISH){ //Activado desde afuera de la liberia
 8bc:	81 ff       	sbrs	r24, 1
 8be:	53 c0       	rjmp	.+166    	; 0x966 <__stack+0x67>
				ultrasonic_hal_trigger_setLow();
 8c0:	0e 94 2e 03 	call	0x65c	; 0x65c <ultrasonic_hal_trigger_setLow>
				ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH alto detectado en lib");
 8c4:	6d e4       	ldi	r22, 0x4D	; 77
 8c6:	72 e0       	ldi	r23, 0x02	; 2
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	9a 81       	ldd	r25, Y+2	; 0x02
 8cc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
				us->state = ULTRA_WAIT_RISING;
 8d0:	e9 81       	ldd	r30, Y+1	; 0x01
 8d2:	fa 81       	ldd	r31, Y+2	; 0x02
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	85 87       	std	Z+13, r24	; 0x0d
				us->ECHO_RISING = 1; //Seteo bandera en alto desde que termino de emitir
 8d8:	84 85       	ldd	r24, Z+12	; 0x0c
 8da:	80 61       	ori	r24, 0x10	; 16
 8dc:	84 87       	std	Z+12, r24	; 0x0c
 8de:	43 c0       	rjmp	.+134    	; 0x966 <__stack+0x67>
            break;
        }
        case ULTRA_WAIT_RISING:
        {
            //HAL será la que detecte flanco y llene us->echo_init_time
            if (!us->ECHO_RISING) { //Bandera desactivada desde afuera para marcar que se guardo init time
 8e0:	84 85       	ldd	r24, Z+12	; 0x0c
 8e2:	84 fd       	sbrc	r24, 4
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <ultrasonic_update+0xb4>
                us->state = ULTRA_WAIT_FALLING;
 8e6:	83 e0       	ldi	r24, 0x03	; 3
 8e8:	85 87       	std	Z+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
 8ea:	6e e7       	ldi	r22, 0x7E	; 126
 8ec:	72 e0       	ldi	r23, 0x02	; 2
 8ee:	cf 01       	movw	r24, r30
 8f0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
				ultrasonic_hal_echo_setFallingEdge();
 8f4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ultrasonic_hal_echo_setFallingEdge>
            }
			if (us->TIMEDOUT) {
 8f8:	e9 81       	ldd	r30, Y+1	; 0x01
 8fa:	fa 81       	ldd	r31, Y+2	; 0x02
 8fc:	84 85       	ldd	r24, Z+12	; 0x0c
 8fe:	83 ff       	sbrs	r24, 3
 900:	32 c0       	rjmp	.+100    	; 0x966 <__stack+0x67>
				us->state = ULTRA_TIMEOUT;
 902:	86 e0       	ldi	r24, 0x06	; 6
 904:	85 87       	std	Z+13, r24	; 0x0d
 906:	2f c0       	rjmp	.+94     	; 0x966 <__stack+0x67>
            break;
        }
        case ULTRA_WAIT_FALLING:
        {
            //HAL será la que detecte flanco y llene us->echo_finish_time
			if(us->ECHO_RECEIVED){ //Bandera activada desde afuera para marcar que se guardo finish time
 908:	84 85       	ldd	r24, Z+12	; 0x0c
 90a:	86 ff       	sbrs	r24, 6
 90c:	0c c0       	rjmp	.+24     	; 0x926 <__stack+0x27>
				us->state = ULTRA_CALCULATING;
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	85 87       	std	Z+13, r24	; 0x0d
				ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
 912:	6b e9       	ldi	r22, 0x9B	; 155
 914:	72 e0       	ldi	r23, 0x02	; 2
 916:	cf 01       	movw	r24, r30
 918:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
				us->CALCULATE_DISTANCE = 1;
 91c:	e9 81       	ldd	r30, Y+1	; 0x01
 91e:	fa 81       	ldd	r31, Y+2	; 0x02
 920:	84 85       	ldd	r24, Z+12	; 0x0c
 922:	84 60       	ori	r24, 0x04	; 4
 924:	84 87       	std	Z+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
 926:	e9 81       	ldd	r30, Y+1	; 0x01
 928:	fa 81       	ldd	r31, Y+2	; 0x02
 92a:	84 85       	ldd	r24, Z+12	; 0x0c
 92c:	83 ff       	sbrs	r24, 3
 92e:	1b c0       	rjmp	.+54     	; 0x966 <__stack+0x67>
				us->state = ULTRA_TIMEOUT;
 930:	86 e0       	ldi	r24, 0x06	; 6
 932:	85 87       	std	Z+13, r24	; 0x0d
 934:	18 c0       	rjmp	.+48     	; 0x966 <__stack+0x67>
			}
            break;
        }
		case ULTRA_CALCULATING: 
		{
			if (us->CALCULATE_DISTANCE) { //Asi solo calcula una vez y queda registro
 936:	84 85       	ldd	r24, Z+12	; 0x0c
 938:	82 ff       	sbrs	r24, 2
 93a:	15 c0       	rjmp	.+42     	; 0x966 <__stack+0x67>
				ultrasonic_calculate_distance(us); //Calcular y guardar
 93c:	cf 01       	movw	r24, r30
 93e:	0e 94 b0 03 	call	0x760	; 0x760 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0; //No volver a pasar por aca
 942:	89 81       	ldd	r24, Y+1	; 0x01
 944:	9a 81       	ldd	r25, Y+2	; 0x02
 946:	fc 01       	movw	r30, r24
 948:	24 85       	ldd	r18, Z+12	; 0x0c
 94a:	2b 7f       	andi	r18, 0xFB	; 251
 94c:	24 87       	std	Z+12, r18	; 0x0c
				ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
 94e:	62 eb       	ldi	r22, 0xB2	; 178
 950:	72 e0       	ldi	r23, 0x02	; 2
 952:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ultrasonic_print>
				us->state = ULTRA_DONE; //Estado finalizado, aca leer el valor de distance_mm
 956:	e9 81       	ldd	r30, Y+1	; 0x01
 958:	fa 81       	ldd	r31, Y+2	; 0x02
 95a:	85 e0       	ldi	r24, 0x05	; 5
 95c:	85 87       	std	Z+13, r24	; 0x0d
 95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
            break;
        }
        // Posibles estados adicionales
        case ULTRA_TIMEOUT:
        default:
            us->TIMEDOUT = 1; //Bandera para saber si perdio el rebote
 960:	84 85       	ldd	r24, Z+12	; 0x0c
 962:	88 60       	ori	r24, 0x08	; 8
 964:	84 87       	std	Z+12, r24	; 0x0c
            break;
    }
}
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <__udivmodsi4>:
 970:	a1 e2       	ldi	r26, 0x21	; 33
 972:	1a 2e       	mov	r1, r26
 974:	aa 1b       	sub	r26, r26
 976:	bb 1b       	sub	r27, r27
 978:	fd 01       	movw	r30, r26
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__udivmodsi4_ep>

0000097c <__udivmodsi4_loop>:
 97c:	aa 1f       	adc	r26, r26
 97e:	bb 1f       	adc	r27, r27
 980:	ee 1f       	adc	r30, r30
 982:	ff 1f       	adc	r31, r31
 984:	a2 17       	cp	r26, r18
 986:	b3 07       	cpc	r27, r19
 988:	e4 07       	cpc	r30, r20
 98a:	f5 07       	cpc	r31, r21
 98c:	20 f0       	brcs	.+8      	; 0x996 <__udivmodsi4_ep>
 98e:	a2 1b       	sub	r26, r18
 990:	b3 0b       	sbc	r27, r19
 992:	e4 0b       	sbc	r30, r20
 994:	f5 0b       	sbc	r31, r21

00000996 <__udivmodsi4_ep>:
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	1a 94       	dec	r1
 9a0:	69 f7       	brne	.-38     	; 0x97c <__udivmodsi4_loop>
 9a2:	60 95       	com	r22
 9a4:	70 95       	com	r23
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	bd 01       	movw	r22, r26
 9b0:	cf 01       	movw	r24, r30
 9b2:	08 95       	ret

000009b4 <__umulhisi3>:
 9b4:	a2 9f       	mul	r26, r18
 9b6:	b0 01       	movw	r22, r0
 9b8:	b3 9f       	mul	r27, r19
 9ba:	c0 01       	movw	r24, r0
 9bc:	a3 9f       	mul	r26, r19
 9be:	70 0d       	add	r23, r0
 9c0:	81 1d       	adc	r24, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	b2 9f       	mul	r27, r18
 9c8:	70 0d       	add	r23, r0
 9ca:	81 1d       	adc	r24, r1
 9cc:	11 24       	eor	r1, r1
 9ce:	91 1d       	adc	r25, r1
 9d0:	08 95       	ret

000009d2 <printf>:
 9d2:	a0 e0       	ldi	r26, 0x00	; 0
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	ef ee       	ldi	r30, 0xEF	; 239
 9d8:	f4 e0       	ldi	r31, 0x04	; 4
 9da:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__prologue_saves__+0x20>
 9de:	ae 01       	movw	r20, r28
 9e0:	4b 5f       	subi	r20, 0xFB	; 251
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	fa 01       	movw	r30, r20
 9e6:	61 91       	ld	r22, Z+
 9e8:	71 91       	ld	r23, Z+
 9ea:	af 01       	movw	r20, r30
 9ec:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <__iob+0x2>
 9f0:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <__iob+0x3>
 9f4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <vfprintf>
 9f8:	e2 e0       	ldi	r30, 0x02	; 2
 9fa:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__epilogue_restores__+0x20>

000009fe <puts>:
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <__iob+0x2>
 a0a:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <__iob+0x3>
 a0e:	23 81       	ldd	r18, Z+3	; 0x03
 a10:	21 ff       	sbrs	r18, 1
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <puts+0x4c>
 a14:	8c 01       	movw	r16, r24
 a16:	d0 e0       	ldi	r29, 0x00	; 0
 a18:	c0 e0       	ldi	r28, 0x00	; 0
 a1a:	f8 01       	movw	r30, r16
 a1c:	81 91       	ld	r24, Z+
 a1e:	8f 01       	movw	r16, r30
 a20:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <__iob+0x2>
 a24:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <__iob+0x3>
 a28:	db 01       	movw	r26, r22
 a2a:	18 96       	adiw	r26, 0x08	; 8
 a2c:	ed 91       	ld	r30, X+
 a2e:	fc 91       	ld	r31, X
 a30:	19 97       	sbiw	r26, 0x09	; 9
 a32:	88 23       	and	r24, r24
 a34:	31 f0       	breq	.+12     	; 0xa42 <puts+0x44>
 a36:	09 95       	icall
 a38:	89 2b       	or	r24, r25
 a3a:	79 f3       	breq	.-34     	; 0xa1a <puts+0x1c>
 a3c:	df ef       	ldi	r29, 0xFF	; 255
 a3e:	cf ef       	ldi	r28, 0xFF	; 255
 a40:	ec cf       	rjmp	.-40     	; 0xa1a <puts+0x1c>
 a42:	8a e0       	ldi	r24, 0x0A	; 10
 a44:	09 95       	icall
 a46:	89 2b       	or	r24, r25
 a48:	19 f0       	breq	.+6      	; 0xa50 <puts+0x52>
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	9f ef       	ldi	r25, 0xFF	; 255
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <puts+0x56>
 a50:	8d 2f       	mov	r24, r29
 a52:	9c 2f       	mov	r25, r28
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	1f 91       	pop	r17
 a5a:	0f 91       	pop	r16
 a5c:	08 95       	ret

00000a5e <vfprintf>:
 a5e:	ab e0       	ldi	r26, 0x0B	; 11
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	e5 e3       	ldi	r30, 0x35	; 53
 a64:	f5 e0       	ldi	r31, 0x05	; 5
 a66:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__prologue_saves__>
 a6a:	6c 01       	movw	r12, r24
 a6c:	7b 01       	movw	r14, r22
 a6e:	8a 01       	movw	r16, r20
 a70:	fc 01       	movw	r30, r24
 a72:	17 82       	std	Z+7, r1	; 0x07
 a74:	16 82       	std	Z+6, r1	; 0x06
 a76:	83 81       	ldd	r24, Z+3	; 0x03
 a78:	81 ff       	sbrs	r24, 1
 a7a:	cc c1       	rjmp	.+920    	; 0xe14 <vfprintf+0x3b6>
 a7c:	ce 01       	movw	r24, r28
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	3c 01       	movw	r6, r24
 a82:	f6 01       	movw	r30, r12
 a84:	93 81       	ldd	r25, Z+3	; 0x03
 a86:	f7 01       	movw	r30, r14
 a88:	93 fd       	sbrc	r25, 3
 a8a:	85 91       	lpm	r24, Z+
 a8c:	93 ff       	sbrs	r25, 3
 a8e:	81 91       	ld	r24, Z+
 a90:	7f 01       	movw	r14, r30
 a92:	88 23       	and	r24, r24
 a94:	09 f4       	brne	.+2      	; 0xa98 <vfprintf+0x3a>
 a96:	ba c1       	rjmp	.+884    	; 0xe0c <vfprintf+0x3ae>
 a98:	85 32       	cpi	r24, 0x25	; 37
 a9a:	39 f4       	brne	.+14     	; 0xaaa <vfprintf+0x4c>
 a9c:	93 fd       	sbrc	r25, 3
 a9e:	85 91       	lpm	r24, Z+
 aa0:	93 ff       	sbrs	r25, 3
 aa2:	81 91       	ld	r24, Z+
 aa4:	7f 01       	movw	r14, r30
 aa6:	85 32       	cpi	r24, 0x25	; 37
 aa8:	29 f4       	brne	.+10     	; 0xab4 <vfprintf+0x56>
 aaa:	b6 01       	movw	r22, r12
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 ab2:	e7 cf       	rjmp	.-50     	; 0xa82 <vfprintf+0x24>
 ab4:	91 2c       	mov	r9, r1
 ab6:	21 2c       	mov	r2, r1
 ab8:	31 2c       	mov	r3, r1
 aba:	ff e1       	ldi	r31, 0x1F	; 31
 abc:	f3 15       	cp	r31, r3
 abe:	d8 f0       	brcs	.+54     	; 0xaf6 <vfprintf+0x98>
 ac0:	8b 32       	cpi	r24, 0x2B	; 43
 ac2:	79 f0       	breq	.+30     	; 0xae2 <vfprintf+0x84>
 ac4:	38 f4       	brcc	.+14     	; 0xad4 <vfprintf+0x76>
 ac6:	80 32       	cpi	r24, 0x20	; 32
 ac8:	79 f0       	breq	.+30     	; 0xae8 <vfprintf+0x8a>
 aca:	83 32       	cpi	r24, 0x23	; 35
 acc:	a1 f4       	brne	.+40     	; 0xaf6 <vfprintf+0x98>
 ace:	23 2d       	mov	r18, r3
 ad0:	20 61       	ori	r18, 0x10	; 16
 ad2:	1d c0       	rjmp	.+58     	; 0xb0e <vfprintf+0xb0>
 ad4:	8d 32       	cpi	r24, 0x2D	; 45
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <vfprintf+0x92>
 ad8:	80 33       	cpi	r24, 0x30	; 48
 ada:	69 f4       	brne	.+26     	; 0xaf6 <vfprintf+0x98>
 adc:	23 2d       	mov	r18, r3
 ade:	21 60       	ori	r18, 0x01	; 1
 ae0:	16 c0       	rjmp	.+44     	; 0xb0e <vfprintf+0xb0>
 ae2:	83 2d       	mov	r24, r3
 ae4:	82 60       	ori	r24, 0x02	; 2
 ae6:	38 2e       	mov	r3, r24
 ae8:	e3 2d       	mov	r30, r3
 aea:	e4 60       	ori	r30, 0x04	; 4
 aec:	3e 2e       	mov	r3, r30
 aee:	2a c0       	rjmp	.+84     	; 0xb44 <vfprintf+0xe6>
 af0:	f3 2d       	mov	r31, r3
 af2:	f8 60       	ori	r31, 0x08	; 8
 af4:	1d c0       	rjmp	.+58     	; 0xb30 <vfprintf+0xd2>
 af6:	37 fc       	sbrc	r3, 7
 af8:	2d c0       	rjmp	.+90     	; 0xb54 <vfprintf+0xf6>
 afa:	20 ed       	ldi	r18, 0xD0	; 208
 afc:	28 0f       	add	r18, r24
 afe:	2a 30       	cpi	r18, 0x0A	; 10
 b00:	40 f0       	brcs	.+16     	; 0xb12 <vfprintf+0xb4>
 b02:	8e 32       	cpi	r24, 0x2E	; 46
 b04:	b9 f4       	brne	.+46     	; 0xb34 <vfprintf+0xd6>
 b06:	36 fc       	sbrc	r3, 6
 b08:	81 c1       	rjmp	.+770    	; 0xe0c <vfprintf+0x3ae>
 b0a:	23 2d       	mov	r18, r3
 b0c:	20 64       	ori	r18, 0x40	; 64
 b0e:	32 2e       	mov	r3, r18
 b10:	19 c0       	rjmp	.+50     	; 0xb44 <vfprintf+0xe6>
 b12:	36 fe       	sbrs	r3, 6
 b14:	06 c0       	rjmp	.+12     	; 0xb22 <vfprintf+0xc4>
 b16:	8a e0       	ldi	r24, 0x0A	; 10
 b18:	98 9e       	mul	r9, r24
 b1a:	20 0d       	add	r18, r0
 b1c:	11 24       	eor	r1, r1
 b1e:	92 2e       	mov	r9, r18
 b20:	11 c0       	rjmp	.+34     	; 0xb44 <vfprintf+0xe6>
 b22:	ea e0       	ldi	r30, 0x0A	; 10
 b24:	2e 9e       	mul	r2, r30
 b26:	20 0d       	add	r18, r0
 b28:	11 24       	eor	r1, r1
 b2a:	22 2e       	mov	r2, r18
 b2c:	f3 2d       	mov	r31, r3
 b2e:	f0 62       	ori	r31, 0x20	; 32
 b30:	3f 2e       	mov	r3, r31
 b32:	08 c0       	rjmp	.+16     	; 0xb44 <vfprintf+0xe6>
 b34:	8c 36       	cpi	r24, 0x6C	; 108
 b36:	21 f4       	brne	.+8      	; 0xb40 <vfprintf+0xe2>
 b38:	83 2d       	mov	r24, r3
 b3a:	80 68       	ori	r24, 0x80	; 128
 b3c:	38 2e       	mov	r3, r24
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0xe6>
 b40:	88 36       	cpi	r24, 0x68	; 104
 b42:	41 f4       	brne	.+16     	; 0xb54 <vfprintf+0xf6>
 b44:	f7 01       	movw	r30, r14
 b46:	93 fd       	sbrc	r25, 3
 b48:	85 91       	lpm	r24, Z+
 b4a:	93 ff       	sbrs	r25, 3
 b4c:	81 91       	ld	r24, Z+
 b4e:	7f 01       	movw	r14, r30
 b50:	81 11       	cpse	r24, r1
 b52:	b3 cf       	rjmp	.-154    	; 0xaba <vfprintf+0x5c>
 b54:	98 2f       	mov	r25, r24
 b56:	9f 7d       	andi	r25, 0xDF	; 223
 b58:	95 54       	subi	r25, 0x45	; 69
 b5a:	93 30       	cpi	r25, 0x03	; 3
 b5c:	28 f4       	brcc	.+10     	; 0xb68 <vfprintf+0x10a>
 b5e:	0c 5f       	subi	r16, 0xFC	; 252
 b60:	1f 4f       	sbci	r17, 0xFF	; 255
 b62:	9f e3       	ldi	r25, 0x3F	; 63
 b64:	99 83       	std	Y+1, r25	; 0x01
 b66:	0d c0       	rjmp	.+26     	; 0xb82 <vfprintf+0x124>
 b68:	83 36       	cpi	r24, 0x63	; 99
 b6a:	31 f0       	breq	.+12     	; 0xb78 <vfprintf+0x11a>
 b6c:	83 37       	cpi	r24, 0x73	; 115
 b6e:	71 f0       	breq	.+28     	; 0xb8c <vfprintf+0x12e>
 b70:	83 35       	cpi	r24, 0x53	; 83
 b72:	09 f0       	breq	.+2      	; 0xb76 <vfprintf+0x118>
 b74:	59 c0       	rjmp	.+178    	; 0xc28 <vfprintf+0x1ca>
 b76:	21 c0       	rjmp	.+66     	; 0xbba <vfprintf+0x15c>
 b78:	f8 01       	movw	r30, r16
 b7a:	80 81       	ld	r24, Z
 b7c:	89 83       	std	Y+1, r24	; 0x01
 b7e:	0e 5f       	subi	r16, 0xFE	; 254
 b80:	1f 4f       	sbci	r17, 0xFF	; 255
 b82:	88 24       	eor	r8, r8
 b84:	83 94       	inc	r8
 b86:	91 2c       	mov	r9, r1
 b88:	53 01       	movw	r10, r6
 b8a:	13 c0       	rjmp	.+38     	; 0xbb2 <vfprintf+0x154>
 b8c:	28 01       	movw	r4, r16
 b8e:	f2 e0       	ldi	r31, 0x02	; 2
 b90:	4f 0e       	add	r4, r31
 b92:	51 1c       	adc	r5, r1
 b94:	f8 01       	movw	r30, r16
 b96:	a0 80       	ld	r10, Z
 b98:	b1 80       	ldd	r11, Z+1	; 0x01
 b9a:	36 fe       	sbrs	r3, 6
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <vfprintf+0x146>
 b9e:	69 2d       	mov	r22, r9
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0x14a>
 ba4:	6f ef       	ldi	r22, 0xFF	; 255
 ba6:	7f ef       	ldi	r23, 0xFF	; 255
 ba8:	c5 01       	movw	r24, r10
 baa:	0e 94 1b 07 	call	0xe36	; 0xe36 <strnlen>
 bae:	4c 01       	movw	r8, r24
 bb0:	82 01       	movw	r16, r4
 bb2:	f3 2d       	mov	r31, r3
 bb4:	ff 77       	andi	r31, 0x7F	; 127
 bb6:	3f 2e       	mov	r3, r31
 bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <vfprintf+0x188>
 bba:	28 01       	movw	r4, r16
 bbc:	22 e0       	ldi	r18, 0x02	; 2
 bbe:	42 0e       	add	r4, r18
 bc0:	51 1c       	adc	r5, r1
 bc2:	f8 01       	movw	r30, r16
 bc4:	a0 80       	ld	r10, Z
 bc6:	b1 80       	ldd	r11, Z+1	; 0x01
 bc8:	36 fe       	sbrs	r3, 6
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <vfprintf+0x174>
 bcc:	69 2d       	mov	r22, r9
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x178>
 bd2:	6f ef       	ldi	r22, 0xFF	; 255
 bd4:	7f ef       	ldi	r23, 0xFF	; 255
 bd6:	c5 01       	movw	r24, r10
 bd8:	0e 94 10 07 	call	0xe20	; 0xe20 <strnlen_P>
 bdc:	4c 01       	movw	r8, r24
 bde:	f3 2d       	mov	r31, r3
 be0:	f0 68       	ori	r31, 0x80	; 128
 be2:	3f 2e       	mov	r3, r31
 be4:	82 01       	movw	r16, r4
 be6:	33 fc       	sbrc	r3, 3
 be8:	1b c0       	rjmp	.+54     	; 0xc20 <vfprintf+0x1c2>
 bea:	82 2d       	mov	r24, r2
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	88 16       	cp	r8, r24
 bf0:	99 06       	cpc	r9, r25
 bf2:	b0 f4       	brcc	.+44     	; 0xc20 <vfprintf+0x1c2>
 bf4:	b6 01       	movw	r22, r12
 bf6:	80 e2       	ldi	r24, 0x20	; 32
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 bfe:	2a 94       	dec	r2
 c00:	f4 cf       	rjmp	.-24     	; 0xbea <vfprintf+0x18c>
 c02:	f5 01       	movw	r30, r10
 c04:	37 fc       	sbrc	r3, 7
 c06:	85 91       	lpm	r24, Z+
 c08:	37 fe       	sbrs	r3, 7
 c0a:	81 91       	ld	r24, Z+
 c0c:	5f 01       	movw	r10, r30
 c0e:	b6 01       	movw	r22, r12
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 c16:	21 10       	cpse	r2, r1
 c18:	2a 94       	dec	r2
 c1a:	21 e0       	ldi	r18, 0x01	; 1
 c1c:	82 1a       	sub	r8, r18
 c1e:	91 08       	sbc	r9, r1
 c20:	81 14       	cp	r8, r1
 c22:	91 04       	cpc	r9, r1
 c24:	71 f7       	brne	.-36     	; 0xc02 <vfprintf+0x1a4>
 c26:	e8 c0       	rjmp	.+464    	; 0xdf8 <vfprintf+0x39a>
 c28:	84 36       	cpi	r24, 0x64	; 100
 c2a:	11 f0       	breq	.+4      	; 0xc30 <vfprintf+0x1d2>
 c2c:	89 36       	cpi	r24, 0x69	; 105
 c2e:	41 f5       	brne	.+80     	; 0xc80 <vfprintf+0x222>
 c30:	f8 01       	movw	r30, r16
 c32:	37 fe       	sbrs	r3, 7
 c34:	07 c0       	rjmp	.+14     	; 0xc44 <vfprintf+0x1e6>
 c36:	60 81       	ld	r22, Z
 c38:	71 81       	ldd	r23, Z+1	; 0x01
 c3a:	82 81       	ldd	r24, Z+2	; 0x02
 c3c:	93 81       	ldd	r25, Z+3	; 0x03
 c3e:	0c 5f       	subi	r16, 0xFC	; 252
 c40:	1f 4f       	sbci	r17, 0xFF	; 255
 c42:	08 c0       	rjmp	.+16     	; 0xc54 <vfprintf+0x1f6>
 c44:	60 81       	ld	r22, Z
 c46:	71 81       	ldd	r23, Z+1	; 0x01
 c48:	07 2e       	mov	r0, r23
 c4a:	00 0c       	add	r0, r0
 c4c:	88 0b       	sbc	r24, r24
 c4e:	99 0b       	sbc	r25, r25
 c50:	0e 5f       	subi	r16, 0xFE	; 254
 c52:	1f 4f       	sbci	r17, 0xFF	; 255
 c54:	f3 2d       	mov	r31, r3
 c56:	ff 76       	andi	r31, 0x6F	; 111
 c58:	3f 2e       	mov	r3, r31
 c5a:	97 ff       	sbrs	r25, 7
 c5c:	09 c0       	rjmp	.+18     	; 0xc70 <vfprintf+0x212>
 c5e:	90 95       	com	r25
 c60:	80 95       	com	r24
 c62:	70 95       	com	r23
 c64:	61 95       	neg	r22
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	f0 68       	ori	r31, 0x80	; 128
 c6e:	3f 2e       	mov	r3, r31
 c70:	2a e0       	ldi	r18, 0x0A	; 10
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	a3 01       	movw	r20, r6
 c76:	0e 94 62 07 	call	0xec4	; 0xec4 <__ultoa_invert>
 c7a:	88 2e       	mov	r8, r24
 c7c:	86 18       	sub	r8, r6
 c7e:	45 c0       	rjmp	.+138    	; 0xd0a <vfprintf+0x2ac>
 c80:	85 37       	cpi	r24, 0x75	; 117
 c82:	31 f4       	brne	.+12     	; 0xc90 <vfprintf+0x232>
 c84:	23 2d       	mov	r18, r3
 c86:	2f 7e       	andi	r18, 0xEF	; 239
 c88:	b2 2e       	mov	r11, r18
 c8a:	2a e0       	ldi	r18, 0x0A	; 10
 c8c:	30 e0       	ldi	r19, 0x00	; 0
 c8e:	25 c0       	rjmp	.+74     	; 0xcda <vfprintf+0x27c>
 c90:	93 2d       	mov	r25, r3
 c92:	99 7f       	andi	r25, 0xF9	; 249
 c94:	b9 2e       	mov	r11, r25
 c96:	8f 36       	cpi	r24, 0x6F	; 111
 c98:	c1 f0       	breq	.+48     	; 0xcca <vfprintf+0x26c>
 c9a:	18 f4       	brcc	.+6      	; 0xca2 <vfprintf+0x244>
 c9c:	88 35       	cpi	r24, 0x58	; 88
 c9e:	79 f0       	breq	.+30     	; 0xcbe <vfprintf+0x260>
 ca0:	b5 c0       	rjmp	.+362    	; 0xe0c <vfprintf+0x3ae>
 ca2:	80 37       	cpi	r24, 0x70	; 112
 ca4:	19 f0       	breq	.+6      	; 0xcac <vfprintf+0x24e>
 ca6:	88 37       	cpi	r24, 0x78	; 120
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <vfprintf+0x254>
 caa:	b0 c0       	rjmp	.+352    	; 0xe0c <vfprintf+0x3ae>
 cac:	e9 2f       	mov	r30, r25
 cae:	e0 61       	ori	r30, 0x10	; 16
 cb0:	be 2e       	mov	r11, r30
 cb2:	b4 fe       	sbrs	r11, 4
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <vfprintf+0x272>
 cb6:	fb 2d       	mov	r31, r11
 cb8:	f4 60       	ori	r31, 0x04	; 4
 cba:	bf 2e       	mov	r11, r31
 cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <vfprintf+0x272>
 cbe:	34 fe       	sbrs	r3, 4
 cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <vfprintf+0x278>
 cc2:	29 2f       	mov	r18, r25
 cc4:	26 60       	ori	r18, 0x06	; 6
 cc6:	b2 2e       	mov	r11, r18
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x278>
 cca:	28 e0       	ldi	r18, 0x08	; 8
 ccc:	30 e0       	ldi	r19, 0x00	; 0
 cce:	05 c0       	rjmp	.+10     	; 0xcda <vfprintf+0x27c>
 cd0:	20 e1       	ldi	r18, 0x10	; 16
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x27c>
 cd6:	20 e1       	ldi	r18, 0x10	; 16
 cd8:	32 e0       	ldi	r19, 0x02	; 2
 cda:	f8 01       	movw	r30, r16
 cdc:	b7 fe       	sbrs	r11, 7
 cde:	07 c0       	rjmp	.+14     	; 0xcee <vfprintf+0x290>
 ce0:	60 81       	ld	r22, Z
 ce2:	71 81       	ldd	r23, Z+1	; 0x01
 ce4:	82 81       	ldd	r24, Z+2	; 0x02
 ce6:	93 81       	ldd	r25, Z+3	; 0x03
 ce8:	0c 5f       	subi	r16, 0xFC	; 252
 cea:	1f 4f       	sbci	r17, 0xFF	; 255
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x29c>
 cee:	60 81       	ld	r22, Z
 cf0:	71 81       	ldd	r23, Z+1	; 0x01
 cf2:	80 e0       	ldi	r24, 0x00	; 0
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	0e 5f       	subi	r16, 0xFE	; 254
 cf8:	1f 4f       	sbci	r17, 0xFF	; 255
 cfa:	a3 01       	movw	r20, r6
 cfc:	0e 94 62 07 	call	0xec4	; 0xec4 <__ultoa_invert>
 d00:	88 2e       	mov	r8, r24
 d02:	86 18       	sub	r8, r6
 d04:	fb 2d       	mov	r31, r11
 d06:	ff 77       	andi	r31, 0x7F	; 127
 d08:	3f 2e       	mov	r3, r31
 d0a:	36 fe       	sbrs	r3, 6
 d0c:	0d c0       	rjmp	.+26     	; 0xd28 <vfprintf+0x2ca>
 d0e:	23 2d       	mov	r18, r3
 d10:	2e 7f       	andi	r18, 0xFE	; 254
 d12:	a2 2e       	mov	r10, r18
 d14:	89 14       	cp	r8, r9
 d16:	58 f4       	brcc	.+22     	; 0xd2e <vfprintf+0x2d0>
 d18:	34 fe       	sbrs	r3, 4
 d1a:	0b c0       	rjmp	.+22     	; 0xd32 <vfprintf+0x2d4>
 d1c:	32 fc       	sbrc	r3, 2
 d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x2d4>
 d20:	83 2d       	mov	r24, r3
 d22:	8e 7e       	andi	r24, 0xEE	; 238
 d24:	a8 2e       	mov	r10, r24
 d26:	05 c0       	rjmp	.+10     	; 0xd32 <vfprintf+0x2d4>
 d28:	b8 2c       	mov	r11, r8
 d2a:	a3 2c       	mov	r10, r3
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <vfprintf+0x2d6>
 d2e:	b8 2c       	mov	r11, r8
 d30:	01 c0       	rjmp	.+2      	; 0xd34 <vfprintf+0x2d6>
 d32:	b9 2c       	mov	r11, r9
 d34:	a4 fe       	sbrs	r10, 4
 d36:	0f c0       	rjmp	.+30     	; 0xd56 <vfprintf+0x2f8>
 d38:	fe 01       	movw	r30, r28
 d3a:	e8 0d       	add	r30, r8
 d3c:	f1 1d       	adc	r31, r1
 d3e:	80 81       	ld	r24, Z
 d40:	80 33       	cpi	r24, 0x30	; 48
 d42:	21 f4       	brne	.+8      	; 0xd4c <vfprintf+0x2ee>
 d44:	9a 2d       	mov	r25, r10
 d46:	99 7e       	andi	r25, 0xE9	; 233
 d48:	a9 2e       	mov	r10, r25
 d4a:	09 c0       	rjmp	.+18     	; 0xd5e <vfprintf+0x300>
 d4c:	a2 fe       	sbrs	r10, 2
 d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0x2fe>
 d50:	b3 94       	inc	r11
 d52:	b3 94       	inc	r11
 d54:	04 c0       	rjmp	.+8      	; 0xd5e <vfprintf+0x300>
 d56:	8a 2d       	mov	r24, r10
 d58:	86 78       	andi	r24, 0x86	; 134
 d5a:	09 f0       	breq	.+2      	; 0xd5e <vfprintf+0x300>
 d5c:	b3 94       	inc	r11
 d5e:	a3 fc       	sbrc	r10, 3
 d60:	11 c0       	rjmp	.+34     	; 0xd84 <vfprintf+0x326>
 d62:	a0 fe       	sbrs	r10, 0
 d64:	06 c0       	rjmp	.+12     	; 0xd72 <vfprintf+0x314>
 d66:	b2 14       	cp	r11, r2
 d68:	88 f4       	brcc	.+34     	; 0xd8c <vfprintf+0x32e>
 d6a:	28 0c       	add	r2, r8
 d6c:	92 2c       	mov	r9, r2
 d6e:	9b 18       	sub	r9, r11
 d70:	0e c0       	rjmp	.+28     	; 0xd8e <vfprintf+0x330>
 d72:	b2 14       	cp	r11, r2
 d74:	60 f4       	brcc	.+24     	; 0xd8e <vfprintf+0x330>
 d76:	b6 01       	movw	r22, r12
 d78:	80 e2       	ldi	r24, 0x20	; 32
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d80:	b3 94       	inc	r11
 d82:	f7 cf       	rjmp	.-18     	; 0xd72 <vfprintf+0x314>
 d84:	b2 14       	cp	r11, r2
 d86:	18 f4       	brcc	.+6      	; 0xd8e <vfprintf+0x330>
 d88:	2b 18       	sub	r2, r11
 d8a:	02 c0       	rjmp	.+4      	; 0xd90 <vfprintf+0x332>
 d8c:	98 2c       	mov	r9, r8
 d8e:	21 2c       	mov	r2, r1
 d90:	a4 fe       	sbrs	r10, 4
 d92:	10 c0       	rjmp	.+32     	; 0xdb4 <vfprintf+0x356>
 d94:	b6 01       	movw	r22, r12
 d96:	80 e3       	ldi	r24, 0x30	; 48
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d9e:	a2 fe       	sbrs	r10, 2
 da0:	17 c0       	rjmp	.+46     	; 0xdd0 <vfprintf+0x372>
 da2:	a1 fc       	sbrc	r10, 1
 da4:	03 c0       	rjmp	.+6      	; 0xdac <vfprintf+0x34e>
 da6:	88 e7       	ldi	r24, 0x78	; 120
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x352>
 dac:	88 e5       	ldi	r24, 0x58	; 88
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	b6 01       	movw	r22, r12
 db2:	0c c0       	rjmp	.+24     	; 0xdcc <vfprintf+0x36e>
 db4:	8a 2d       	mov	r24, r10
 db6:	86 78       	andi	r24, 0x86	; 134
 db8:	59 f0       	breq	.+22     	; 0xdd0 <vfprintf+0x372>
 dba:	a1 fe       	sbrs	r10, 1
 dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x364>
 dbe:	8b e2       	ldi	r24, 0x2B	; 43
 dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <vfprintf+0x366>
 dc2:	80 e2       	ldi	r24, 0x20	; 32
 dc4:	a7 fc       	sbrc	r10, 7
 dc6:	8d e2       	ldi	r24, 0x2D	; 45
 dc8:	b6 01       	movw	r22, r12
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 dd0:	89 14       	cp	r8, r9
 dd2:	38 f4       	brcc	.+14     	; 0xde2 <vfprintf+0x384>
 dd4:	b6 01       	movw	r22, r12
 dd6:	80 e3       	ldi	r24, 0x30	; 48
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 dde:	9a 94       	dec	r9
 de0:	f7 cf       	rjmp	.-18     	; 0xdd0 <vfprintf+0x372>
 de2:	8a 94       	dec	r8
 de4:	f3 01       	movw	r30, r6
 de6:	e8 0d       	add	r30, r8
 de8:	f1 1d       	adc	r31, r1
 dea:	80 81       	ld	r24, Z
 dec:	b6 01       	movw	r22, r12
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 df4:	81 10       	cpse	r8, r1
 df6:	f5 cf       	rjmp	.-22     	; 0xde2 <vfprintf+0x384>
 df8:	22 20       	and	r2, r2
 dfa:	09 f4       	brne	.+2      	; 0xdfe <vfprintf+0x3a0>
 dfc:	42 ce       	rjmp	.-892    	; 0xa82 <vfprintf+0x24>
 dfe:	b6 01       	movw	r22, r12
 e00:	80 e2       	ldi	r24, 0x20	; 32
 e02:	90 e0       	ldi	r25, 0x00	; 0
 e04:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 e08:	2a 94       	dec	r2
 e0a:	f6 cf       	rjmp	.-20     	; 0xdf8 <vfprintf+0x39a>
 e0c:	f6 01       	movw	r30, r12
 e0e:	86 81       	ldd	r24, Z+6	; 0x06
 e10:	97 81       	ldd	r25, Z+7	; 0x07
 e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x3ba>
 e14:	8f ef       	ldi	r24, 0xFF	; 255
 e16:	9f ef       	ldi	r25, 0xFF	; 255
 e18:	2b 96       	adiw	r28, 0x0b	; 11
 e1a:	e2 e1       	ldi	r30, 0x12	; 18
 e1c:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__epilogue_restores__>

00000e20 <strnlen_P>:
 e20:	fc 01       	movw	r30, r24
 e22:	05 90       	lpm	r0, Z+
 e24:	61 50       	subi	r22, 0x01	; 1
 e26:	70 40       	sbci	r23, 0x00	; 0
 e28:	01 10       	cpse	r0, r1
 e2a:	d8 f7       	brcc	.-10     	; 0xe22 <strnlen_P+0x2>
 e2c:	80 95       	com	r24
 e2e:	90 95       	com	r25
 e30:	8e 0f       	add	r24, r30
 e32:	9f 1f       	adc	r25, r31
 e34:	08 95       	ret

00000e36 <strnlen>:
 e36:	fc 01       	movw	r30, r24
 e38:	61 50       	subi	r22, 0x01	; 1
 e3a:	70 40       	sbci	r23, 0x00	; 0
 e3c:	01 90       	ld	r0, Z+
 e3e:	01 10       	cpse	r0, r1
 e40:	d8 f7       	brcc	.-10     	; 0xe38 <strnlen+0x2>
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	8e 0f       	add	r24, r30
 e48:	9f 1f       	adc	r25, r31
 e4a:	08 95       	ret

00000e4c <fputc>:
 e4c:	0f 93       	push	r16
 e4e:	1f 93       	push	r17
 e50:	cf 93       	push	r28
 e52:	df 93       	push	r29
 e54:	fb 01       	movw	r30, r22
 e56:	23 81       	ldd	r18, Z+3	; 0x03
 e58:	21 fd       	sbrc	r18, 1
 e5a:	03 c0       	rjmp	.+6      	; 0xe62 <fputc+0x16>
 e5c:	8f ef       	ldi	r24, 0xFF	; 255
 e5e:	9f ef       	ldi	r25, 0xFF	; 255
 e60:	2c c0       	rjmp	.+88     	; 0xeba <fputc+0x6e>
 e62:	22 ff       	sbrs	r18, 2
 e64:	16 c0       	rjmp	.+44     	; 0xe92 <fputc+0x46>
 e66:	46 81       	ldd	r20, Z+6	; 0x06
 e68:	57 81       	ldd	r21, Z+7	; 0x07
 e6a:	24 81       	ldd	r18, Z+4	; 0x04
 e6c:	35 81       	ldd	r19, Z+5	; 0x05
 e6e:	42 17       	cp	r20, r18
 e70:	53 07       	cpc	r21, r19
 e72:	44 f4       	brge	.+16     	; 0xe84 <fputc+0x38>
 e74:	a0 81       	ld	r26, Z
 e76:	b1 81       	ldd	r27, Z+1	; 0x01
 e78:	9d 01       	movw	r18, r26
 e7a:	2f 5f       	subi	r18, 0xFF	; 255
 e7c:	3f 4f       	sbci	r19, 0xFF	; 255
 e7e:	31 83       	std	Z+1, r19	; 0x01
 e80:	20 83       	st	Z, r18
 e82:	8c 93       	st	X, r24
 e84:	26 81       	ldd	r18, Z+6	; 0x06
 e86:	37 81       	ldd	r19, Z+7	; 0x07
 e88:	2f 5f       	subi	r18, 0xFF	; 255
 e8a:	3f 4f       	sbci	r19, 0xFF	; 255
 e8c:	37 83       	std	Z+7, r19	; 0x07
 e8e:	26 83       	std	Z+6, r18	; 0x06
 e90:	14 c0       	rjmp	.+40     	; 0xeba <fputc+0x6e>
 e92:	8b 01       	movw	r16, r22
 e94:	ec 01       	movw	r28, r24
 e96:	fb 01       	movw	r30, r22
 e98:	00 84       	ldd	r0, Z+8	; 0x08
 e9a:	f1 85       	ldd	r31, Z+9	; 0x09
 e9c:	e0 2d       	mov	r30, r0
 e9e:	09 95       	icall
 ea0:	89 2b       	or	r24, r25
 ea2:	e1 f6       	brne	.-72     	; 0xe5c <fputc+0x10>
 ea4:	d8 01       	movw	r26, r16
 ea6:	16 96       	adiw	r26, 0x06	; 6
 ea8:	8d 91       	ld	r24, X+
 eaa:	9c 91       	ld	r25, X
 eac:	17 97       	sbiw	r26, 0x07	; 7
 eae:	01 96       	adiw	r24, 0x01	; 1
 eb0:	17 96       	adiw	r26, 0x07	; 7
 eb2:	9c 93       	st	X, r25
 eb4:	8e 93       	st	-X, r24
 eb6:	16 97       	sbiw	r26, 0x06	; 6
 eb8:	ce 01       	movw	r24, r28
 eba:	df 91       	pop	r29
 ebc:	cf 91       	pop	r28
 ebe:	1f 91       	pop	r17
 ec0:	0f 91       	pop	r16
 ec2:	08 95       	ret

00000ec4 <__ultoa_invert>:
 ec4:	fa 01       	movw	r30, r20
 ec6:	aa 27       	eor	r26, r26
 ec8:	28 30       	cpi	r18, 0x08	; 8
 eca:	51 f1       	breq	.+84     	; 0xf20 <__ultoa_invert+0x5c>
 ecc:	20 31       	cpi	r18, 0x10	; 16
 ece:	81 f1       	breq	.+96     	; 0xf30 <__ultoa_invert+0x6c>
 ed0:	e8 94       	clt
 ed2:	6f 93       	push	r22
 ed4:	6e 7f       	andi	r22, 0xFE	; 254
 ed6:	6e 5f       	subi	r22, 0xFE	; 254
 ed8:	7f 4f       	sbci	r23, 0xFF	; 255
 eda:	8f 4f       	sbci	r24, 0xFF	; 255
 edc:	9f 4f       	sbci	r25, 0xFF	; 255
 ede:	af 4f       	sbci	r26, 0xFF	; 255
 ee0:	b1 e0       	ldi	r27, 0x01	; 1
 ee2:	3e d0       	rcall	.+124    	; 0xf60 <__ultoa_invert+0x9c>
 ee4:	b4 e0       	ldi	r27, 0x04	; 4
 ee6:	3c d0       	rcall	.+120    	; 0xf60 <__ultoa_invert+0x9c>
 ee8:	67 0f       	add	r22, r23
 eea:	78 1f       	adc	r23, r24
 eec:	89 1f       	adc	r24, r25
 eee:	9a 1f       	adc	r25, r26
 ef0:	a1 1d       	adc	r26, r1
 ef2:	68 0f       	add	r22, r24
 ef4:	79 1f       	adc	r23, r25
 ef6:	8a 1f       	adc	r24, r26
 ef8:	91 1d       	adc	r25, r1
 efa:	a1 1d       	adc	r26, r1
 efc:	6a 0f       	add	r22, r26
 efe:	71 1d       	adc	r23, r1
 f00:	81 1d       	adc	r24, r1
 f02:	91 1d       	adc	r25, r1
 f04:	a1 1d       	adc	r26, r1
 f06:	20 d0       	rcall	.+64     	; 0xf48 <__ultoa_invert+0x84>
 f08:	09 f4       	brne	.+2      	; 0xf0c <__ultoa_invert+0x48>
 f0a:	68 94       	set
 f0c:	3f 91       	pop	r19
 f0e:	2a e0       	ldi	r18, 0x0A	; 10
 f10:	26 9f       	mul	r18, r22
 f12:	11 24       	eor	r1, r1
 f14:	30 19       	sub	r19, r0
 f16:	30 5d       	subi	r19, 0xD0	; 208
 f18:	31 93       	st	Z+, r19
 f1a:	de f6       	brtc	.-74     	; 0xed2 <__ultoa_invert+0xe>
 f1c:	cf 01       	movw	r24, r30
 f1e:	08 95       	ret
 f20:	46 2f       	mov	r20, r22
 f22:	47 70       	andi	r20, 0x07	; 7
 f24:	40 5d       	subi	r20, 0xD0	; 208
 f26:	41 93       	st	Z+, r20
 f28:	b3 e0       	ldi	r27, 0x03	; 3
 f2a:	0f d0       	rcall	.+30     	; 0xf4a <__ultoa_invert+0x86>
 f2c:	c9 f7       	brne	.-14     	; 0xf20 <__ultoa_invert+0x5c>
 f2e:	f6 cf       	rjmp	.-20     	; 0xf1c <__ultoa_invert+0x58>
 f30:	46 2f       	mov	r20, r22
 f32:	4f 70       	andi	r20, 0x0F	; 15
 f34:	40 5d       	subi	r20, 0xD0	; 208
 f36:	4a 33       	cpi	r20, 0x3A	; 58
 f38:	18 f0       	brcs	.+6      	; 0xf40 <__ultoa_invert+0x7c>
 f3a:	49 5d       	subi	r20, 0xD9	; 217
 f3c:	31 fd       	sbrc	r19, 1
 f3e:	40 52       	subi	r20, 0x20	; 32
 f40:	41 93       	st	Z+, r20
 f42:	02 d0       	rcall	.+4      	; 0xf48 <__ultoa_invert+0x84>
 f44:	a9 f7       	brne	.-22     	; 0xf30 <__ultoa_invert+0x6c>
 f46:	ea cf       	rjmp	.-44     	; 0xf1c <__ultoa_invert+0x58>
 f48:	b4 e0       	ldi	r27, 0x04	; 4
 f4a:	a6 95       	lsr	r26
 f4c:	97 95       	ror	r25
 f4e:	87 95       	ror	r24
 f50:	77 95       	ror	r23
 f52:	67 95       	ror	r22
 f54:	ba 95       	dec	r27
 f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0x86>
 f58:	00 97       	sbiw	r24, 0x00	; 0
 f5a:	61 05       	cpc	r22, r1
 f5c:	71 05       	cpc	r23, r1
 f5e:	08 95       	ret
 f60:	9b 01       	movw	r18, r22
 f62:	ac 01       	movw	r20, r24
 f64:	0a 2e       	mov	r0, r26
 f66:	06 94       	lsr	r0
 f68:	57 95       	ror	r21
 f6a:	47 95       	ror	r20
 f6c:	37 95       	ror	r19
 f6e:	27 95       	ror	r18
 f70:	ba 95       	dec	r27
 f72:	c9 f7       	brne	.-14     	; 0xf66 <__ultoa_invert+0xa2>
 f74:	62 0f       	add	r22, r18
 f76:	73 1f       	adc	r23, r19
 f78:	84 1f       	adc	r24, r20
 f7a:	95 1f       	adc	r25, r21
 f7c:	a0 1d       	adc	r26, r0
 f7e:	08 95       	ret

00000f80 <__prologue_saves__>:
 f80:	2f 92       	push	r2
 f82:	3f 92       	push	r3
 f84:	4f 92       	push	r4
 f86:	5f 92       	push	r5
 f88:	6f 92       	push	r6
 f8a:	7f 92       	push	r7
 f8c:	8f 92       	push	r8
 f8e:	9f 92       	push	r9
 f90:	af 92       	push	r10
 f92:	bf 92       	push	r11
 f94:	cf 92       	push	r12
 f96:	df 92       	push	r13
 f98:	ef 92       	push	r14
 f9a:	ff 92       	push	r15
 f9c:	0f 93       	push	r16
 f9e:	1f 93       	push	r17
 fa0:	cf 93       	push	r28
 fa2:	df 93       	push	r29
 fa4:	cd b7       	in	r28, 0x3d	; 61
 fa6:	de b7       	in	r29, 0x3e	; 62
 fa8:	ca 1b       	sub	r28, r26
 faa:	db 0b       	sbc	r29, r27
 fac:	0f b6       	in	r0, 0x3f	; 63
 fae:	f8 94       	cli
 fb0:	de bf       	out	0x3e, r29	; 62
 fb2:	0f be       	out	0x3f, r0	; 63
 fb4:	cd bf       	out	0x3d, r28	; 61
 fb6:	09 94       	ijmp

00000fb8 <__epilogue_restores__>:
 fb8:	2a 88       	ldd	r2, Y+18	; 0x12
 fba:	39 88       	ldd	r3, Y+17	; 0x11
 fbc:	48 88       	ldd	r4, Y+16	; 0x10
 fbe:	5f 84       	ldd	r5, Y+15	; 0x0f
 fc0:	6e 84       	ldd	r6, Y+14	; 0x0e
 fc2:	7d 84       	ldd	r7, Y+13	; 0x0d
 fc4:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc6:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc8:	aa 84       	ldd	r10, Y+10	; 0x0a
 fca:	b9 84       	ldd	r11, Y+9	; 0x09
 fcc:	c8 84       	ldd	r12, Y+8	; 0x08
 fce:	df 80       	ldd	r13, Y+7	; 0x07
 fd0:	ee 80       	ldd	r14, Y+6	; 0x06
 fd2:	fd 80       	ldd	r15, Y+5	; 0x05
 fd4:	0c 81       	ldd	r16, Y+4	; 0x04
 fd6:	1b 81       	ldd	r17, Y+3	; 0x03
 fd8:	aa 81       	ldd	r26, Y+2	; 0x02
 fda:	b9 81       	ldd	r27, Y+1	; 0x01
 fdc:	ce 0f       	add	r28, r30
 fde:	d1 1d       	adc	r29, r1
 fe0:	0f b6       	in	r0, 0x3f	; 63
 fe2:	f8 94       	cli
 fe4:	de bf       	out	0x3e, r29	; 62
 fe6:	0f be       	out	0x3f, r0	; 63
 fe8:	cd bf       	out	0x3d, r28	; 61
 fea:	ed 01       	movw	r28, r26
 fec:	08 95       	ret

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>
