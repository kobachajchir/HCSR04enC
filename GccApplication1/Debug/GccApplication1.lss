
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005f0  00800100  000022ee  00002382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  008006f0  008006f0  00002972  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045ad  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001681  00000000  00000000  0000725d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000235b  00000000  00000000  000088de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  0000ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f9e  00000000  00000000  0000b44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a60  00000000  00000000  0000c3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000de4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_18>
      4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	16 e0       	ldi	r17, 0x06	; 6
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ee       	ldi	r30, 0xEE	; 238
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3f       	cpi	r26, 0xF0	; 240
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 ef       	ldi	r26, 0xF0	; 240
      8e:	b6 e0       	ldi	r27, 0x06	; 6
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3b       	cpi	r26, 0xB8	; 184
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 82 04 	call	0x904	; 0x904 <main>
      9e:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// 	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
// 	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
// }

void printfWrapper(const char* message) {
	printf("%s\n", message);
      a6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
	// Verificamos el estado actual del sensor
	switch (ultraSensor.state)
      c6:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
	{
		case ULTRA_WAIT_RISING:
		{
			if(ultraSensor.ECHO_RISING){
      d4:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
				ultraSensor.echo_init_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno init time
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <ultraSensor>
     100:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <ultraSensor+0x1>
     104:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <ultraSensor+0x2>
     108:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <ultraSensor+0x3>
				ultraSensor.ECHO_RISING = 0; //Bajo la bandera para marcar que llene init time
     10c:	e7 e7       	ldi	r30, 0x77	; 119
     10e:	f7 e0       	ldi	r31, 0x07	; 7
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			ultraSensor.echo_finish_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno finish time
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <ultraSensor+0x4>
     13c:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <ultraSensor+0x5>
     140:	a0 93 71 07 	sts	0x0771, r26	; 0x800771 <ultraSensor+0x6>
     144:	b0 93 72 07 	sts	0x0772, r27	; 0x800772 <ultraSensor+0x7>
			ultraSensor.ECHO_RECEIVED = 1; //Esto lo pone en modo de calcular
     148:	e7 e7       	ldi	r30, 0x77	; 119
     14a:	f7 e0       	ldi	r31, 0x07	; 7
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
			break;
		}
	}
}
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
     178:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <ovf_count>
}
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
	IR_READ_INTERRUPT = 1;
     1ca:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	45 c0       	rjmp	.+138    	; 0x262 <__vector_11+0xd4>
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	ee 59       	subi	r30, 0x9E	; 158
     1e4:	f8 4f       	sbci	r31, 0xF8	; 248
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__vector_11+0xd2>
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
				// If in push mode, use maximum pulse
				servosArray[i]->pulse_us = SERVO_MAX_PULSE;
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_11+0x88>
				//printf("ISR COMPA PUSH %d...\n", servosArray[i]->pin);
				} else {
				// Otherwise use the angle setting
				servosArray[i]->pulse_us = calculate_angle_pulseUs(servosArray[i]->angle);
     208:	f8 01       	movw	r30, r16
     20a:	84 81       	ldd	r24, Z+4	; 0x04
     20c:	0e 94 44 0b 	call	0x1688	; 0x1688 <calculate_angle_pulseUs>
     210:	f8 01       	movw	r30, r16
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
			}

			// Set the pin high immediately if it's the first servo
			if (i == 0) {
     216:	c1 11       	cpse	r28, r1
     218:	23 c0       	rjmp	.+70     	; 0x260 <__vector_11+0xd2>
				PORTB |= (1 << servosArray[i]->pin);
     21a:	f7 01       	movw	r30, r14
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	ee 59       	subi	r30, 0x9E	; 158
     222:	f8 4f       	sbci	r31, 0xF8	; 248
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	2c 91       	ld	r18, X
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
				// Schedule turn-off with Compare B
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	01 90       	ld	r0, Z+
     248:	f0 81       	ld	r31, Z
     24a:	e0 2d       	mov	r30, r0
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				current_servo = 0; // Mark this as the active servo
     25c:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <current_servo>
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
	IR_READ_INTERRUPT = 1;
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     260:	cf 5f       	subi	r28, 0xFF	; 255
     262:	c3 30       	cpi	r28, 0x03	; 3
     264:	08 f4       	brcc	.+2      	; 0x268 <__vector_11+0xda>
     266:	b8 cf       	rjmp	.-144    	; 0x1d8 <__vector_11+0x4a>
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
				current_servo = 0; // Mark this as the active servo
			}
		}
	}
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	cf 91       	pop	r28
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
     2ba:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ee 59       	subi	r30, 0x9E	; 158
     2c6:	f8 4f       	sbci	r31, 0xF8	; 248
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 81       	ld	r18, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_12+0x46>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_12+0x42>
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	89 23       	and	r24, r25
     2e6:	85 b9       	out	0x05, r24	; 5
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     2e8:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	ee 59       	subi	r30, 0x9E	; 158
     2f4:	f8 4f       	sbci	r31, 0xF8	; 248
     2f6:	01 90       	ld	r0, Z+
     2f8:	f0 81       	ld	r31, Z
     2fa:	e0 2d       	mov	r30, r0
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	81 ff       	sbrs	r24, 1
     300:	6b c0       	rjmp	.+214    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
     302:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ee 59       	subi	r30, 0x9E	; 158
     30e:	f8 4f       	sbci	r31, 0xF8	; 248
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	81 81       	ldd	r24, Z+1	; 0x01
ISR(TIMER1_COMPB_vect) {
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     318:	82 ff       	sbrs	r24, 2
     31a:	5e c0       	rjmp	.+188    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
		
		// Clear the push and reset flags
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_RESET);
     31c:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ee 59       	subi	r30, 0x9E	; 158
     328:	f8 4f       	sbci	r31, 0xF8	; 248
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	81 81       	ldd	r24, Z+1	; 0x01
     332:	8b 7f       	andi	r24, 0xFB	; 251
     334:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_PUSH);
     336:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	ee 59       	subi	r30, 0x9E	; 158
     342:	f8 4f       	sbci	r31, 0xF8	; 248
     344:	01 90       	ld	r0, Z+
     346:	f0 81       	ld	r31, Z
     348:	e0 2d       	mov	r30, r0
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	81 83       	std	Z+1, r24	; 0x01
		// Return to idle angle
		servosArray[current_servo]->angle = SERVO_IDLE_ANGLE;
     350:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	ee 59       	subi	r30, 0x9E	; 158
     35c:	f8 4f       	sbci	r31, 0xF8	; 248
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	8a e5       	ldi	r24, 0x5A	; 90
     366:	84 83       	std	Z+4, r24	; 0x04
		servosArray[current_servo]->pulse_us = calculate_angle_pulseUs(servosArray[current_servo]->angle);
     368:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ee 59       	subi	r30, 0x9E	; 158
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	c0 81       	ld	r28, Z
     378:	d1 81       	ldd	r29, Z+1	; 0x01
     37a:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 59       	subi	r30, 0x9E	; 158
     386:	f8 4f       	sbci	r31, 0xF8	; 248
     388:	01 90       	ld	r0, Z+
     38a:	f0 81       	ld	r31, Z
     38c:	e0 2d       	mov	r30, r0
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	0e 94 44 0b 	call	0x1688	; 0x1688 <calculate_angle_pulseUs>
     394:	9b 83       	std	Y+3, r25	; 0x03
     396:	8a 83       	std	Y+2, r24	; 0x02
		if(current_servo == 0){
     398:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     39c:	81 11       	cpse	r24, r1
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <__vector_12+0x11a>
			SET_FLAG(salidaA.flags, OUTPUT_READY);
     3a0:	ec e0       	ldi	r30, 0x0C	; 12
     3a2:	f7 e0       	ldi	r31, 0x07	; 7
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaA.flags, OUTPUT_BUSY);
     3a8:	8e 7f       	andi	r24, 0xFE	; 254
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE A\n");
		}else if(current_servo == 1){
     3ae:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	39 f4       	brne	.+14     	; 0x3c4 <__vector_12+0x130>
			SET_FLAG(salidaB.flags, OUTPUT_READY);
     3b6:	ef ea       	ldi	r30, 0xAF	; 175
     3b8:	f7 e0       	ldi	r31, 0x07	; 7
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaB.flags, OUTPUT_BUSY);
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	82 83       	std	Z+2, r24	; 0x02
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE B\n");
		}else if(current_servo == 2){
     3c4:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <__vector_12+0x144>
			SET_FLAG(salidaC.flags, OUTPUT_READY);
     3cc:	e8 e6       	ldi	r30, 0x68	; 104
     3ce:	f7 e0       	ldi	r31, 0x07	; 7
     3d0:	82 81       	ldd	r24, Z+2	; 0x02
     3d2:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaC.flags, OUTPUT_BUSY);
     3d4:	8e 7f       	andi	r24, 0xFE	; 254
     3d6:	82 83       	std	Z+2, r24	; 0x02
			//printf("Volvio a posicion IDLE C\n");
		}
	}
	
	// Move to next servo, but only if there are more servos to process in this frame
	current_servo++;
     3d8:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <current_servo>
	if (current_servo < NUM_OUTPUTS) {
     3e2:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <__vector_12+0x158>
     3ea:	91 c0       	rjmp	.+290    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		// If there are more servos to process, activate the next one
		if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     3ec:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	ee 59       	subi	r30, 0x9E	; 158
     3f8:	f8 4f       	sbci	r31, 0xF8	; 248
     3fa:	01 90       	ld	r0, Z+
     3fc:	f0 81       	ld	r31, Z
     3fe:	e0 2d       	mov	r30, r0
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	80 ff       	sbrs	r24, 0
     404:	2c c0       	rjmp	.+88     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			// Turn on the pin for the next servo
			PORTB |= (1 << servosArray[current_servo]->pin);
     406:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ee 59       	subi	r30, 0x9E	; 158
     412:	f8 4f       	sbci	r31, 0xF8	; 248
     414:	01 90       	ld	r0, Z+
     416:	f0 81       	ld	r31, Z
     418:	e0 2d       	mov	r30, r0
     41a:	20 81       	ld	r18, Z
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	2a 95       	dec	r18
     428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42a:	95 b1       	in	r25, 0x05	; 5
     42c:	89 2b       	or	r24, r25
     42e:	85 b9       	out	0x05, r24	; 5
			// Schedule turn-off
			OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     430:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     434:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     438:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	ee 59       	subi	r30, 0x9E	; 158
     444:	f8 4f       	sbci	r31, 0xF8	; 248
     446:	01 90       	ld	r0, Z+
     448:	f0 81       	ld	r31, Z
     44a:	e0 2d       	mov	r30, r0
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     458:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     45c:	58 c0       	rjmp	.+176    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			} else {
			// If the next servo isn't enabled, skip to the one after
			// This is a recursive call to COMPB logic without the actual interrupt
			PORTB &= ~(1 << servosArray[current_servo]->pin); // Make sure the pin is low
     45e:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ee 59       	subi	r30, 0x9E	; 158
     46a:	f8 4f       	sbci	r31, 0xF8	; 248
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	20 81       	ld	r18, Z
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	2a 95       	dec	r18
     480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     482:	80 95       	com	r24
     484:	90 95       	com	r25
     486:	95 b1       	in	r25, 0x05	; 5
     488:	89 23       	and	r24, r25
     48a:	85 b9       	out	0x05, r24	; 5
			current_servo++;
     48c:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <current_servo>
			// Continue checking for the next enabled servo
			if (current_servo < NUM_OUTPUTS && IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     496:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <current_servo>
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	c0 f5       	brcc	.+112    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     49e:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	ee 59       	subi	r30, 0x9E	; 158
     4aa:	f8 4f       	sbci	r31, 0xF8	; 248
     4ac:	01 90       	ld	r0, Z+
     4ae:	f0 81       	ld	r31, Z
     4b0:	e0 2d       	mov	r30, r0
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
     4b4:	80 ff       	sbrs	r24, 0
     4b6:	2b c0       	rjmp	.+86     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
				PORTB |= (1 << servosArray[current_servo]->pin);
     4b8:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ee 59       	subi	r30, 0x9E	; 158
     4c4:	f8 4f       	sbci	r31, 0xF8	; 248
     4c6:	01 90       	ld	r0, Z+
     4c8:	f0 81       	ld	r31, Z
     4ca:	e0 2d       	mov	r30, r0
     4cc:	20 81       	ld	r18, Z
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	2a 95       	dec	r18
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4dc:	95 b1       	in	r25, 0x05	; 5
     4de:	89 2b       	or	r24, r25
     4e0:	85 b9       	out	0x05, r24	; 5
				OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     4e2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4e6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4ea:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <current_servo>
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	ee 59       	subi	r30, 0x9E	; 158
     4f6:	f8 4f       	sbci	r31, 0xF8	; 248
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	93 81       	ldd	r25, Z+3	; 0x03
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     50a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}
		}
	}
	// If current_servo >= NUM_OUTPUTS, we've processed all servos for this frame
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_18>:

ISR(USART_RX_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
	uint8_t received_byte = UDR0;  // Lee el byte recibido
     550:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Calcular el próximo índice de escritura en el buffer circular
	uint8_t next_indexW = (protocolService.indexW + 1) % PROTOCOL_BUFFER_SIZE;
     554:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <protocolService>
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	c9 01       	movw	r24, r18
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	8f 71       	andi	r24, 0x1F	; 31
     560:	90 78       	andi	r25, 0x80	; 128
     562:	99 23       	and	r25, r25
     564:	24 f4       	brge	.+8      	; 0x56e <__vector_18+0x3a>
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	80 6e       	ori	r24, 0xE0	; 224
     56a:	9f 6f       	ori	r25, 0xFF	; 255
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	48 2f       	mov	r20, r24

	// Verifica si el buffer está lleno: si el próximo índice de escritura es igual al índice de lectura
	if (next_indexW == protocolService.indexR) {
     570:	50 91 83 07 	lds	r21, 0x0783	; 0x800783 <protocolService+0x1>
     574:	85 13       	cpse	r24, r21
     576:	08 c0       	rjmp	.+16     	; 0x588 <__vector_18+0x54>
		// El buffer está lleno; activa la bandera para procesar datos antes de sobrescribir
			if (!(IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA))) {
     578:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     57c:	81 fd       	sbrc	r24, 1
     57e:	19 c0       	rjmp	.+50     	; 0x5b2 <__vector_18+0x7e>
				// Si la bandera de procesamiento no está activa, no se debe sobreescribir
				SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <protocolService+0x22>
     586:	15 c0       	rjmp	.+42     	; 0x5b2 <__vector_18+0x7e>
			}
		// Opcional: podrías descartar el byte recibido
		} else {
		// Hay espacio: copia el byte en el buffer
		protocolService.buffer[protocolService.indexW] = received_byte;
     588:	f9 01       	movw	r30, r18
     58a:	ee 57       	subi	r30, 0x7E	; 126
     58c:	f8 4f       	sbci	r31, 0xF8	; 248
     58e:	62 83       	std	Z+2, r22	; 0x02
		protocolService.indexW = next_indexW;
     590:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <protocolService>

		// Calcular la cantidad de bytes disponibles en el buffer (caso circular)
		uint8_t available;
		if (protocolService.indexW >= protocolService.indexR) {
     594:	85 17       	cp	r24, r21
     596:	10 f0       	brcs	.+4      	; 0x59c <__vector_18+0x68>
			available = protocolService.indexW - protocolService.indexR;
     598:	45 1b       	sub	r20, r21
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__vector_18+0x6c>
			} else {
			available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
     59c:	45 1b       	sub	r20, r21
     59e:	40 5e       	subi	r20, 0xE0	; 224
		}

		// Si hay al menos 6 bytes (mínimo para un paquete) disponibles, activa processData
        if (available >= PROTOCOL_MIN_BYTE_COUNT && !IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA)) {
     5a0:	46 30       	cpi	r20, 0x06	; 6
     5a2:	38 f0       	brcs	.+14     	; 0x5b2 <__vector_18+0x7e>
     5a4:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     5a8:	81 fd       	sbrc	r24, 1
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__vector_18+0x7e>
	        SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     5ac:	82 60       	ori	r24, 0x02	; 2
     5ae:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <protocolService+0x22>
        }
	}
}
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_19>:


ISR(USART_UDRE_vect)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
     5dc:	af 93       	push	r26
     5de:	bf 93       	push	r27
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
	// Si aún hay datos en el buffer...
	if (protocolService.indexR != protocolService.indexW) {
     5e4:	a2 e8       	ldi	r26, 0x82	; 130
     5e6:	b7 e0       	ldi	r27, 0x07	; 7
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	ec 91       	ld	r30, X
     5ec:	11 97       	sbiw	r26, 0x01	; 1
     5ee:	8c 91       	ld	r24, X
     5f0:	e8 17       	cp	r30, r24
     5f2:	a9 f0       	breq	.+42     	; 0x61e <__vector_19+0x50>
		// Enviar el siguiente byte
		UDR0 = protocolService.buffer[protocolService.indexR];
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	ee 57       	subi	r30, 0x7E	; 126
     5f8:	f8 4f       	sbci	r31, 0xF8	; 248
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
     600:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <protocolService+0x1>
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	8f 71       	andi	r24, 0x1F	; 31
     60a:	90 78       	andi	r25, 0x80	; 128
     60c:	99 23       	and	r25, r25
     60e:	24 f4       	brge	.+8      	; 0x618 <__vector_19+0x4a>
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	80 6e       	ori	r24, 0xE0	; 224
     614:	9f 6f       	ori	r25, 0xFF	; 255
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <protocolService+0x1>
     61c:	05 c0       	rjmp	.+10     	; 0x628 <__vector_19+0x5a>
		} else {
		// Si el buffer está vacío, deshabilitar la interrupción para no seguir disparando
		UCSR0B &= ~(1 << UDRIE0);
     61e:	e1 ec       	ldi	r30, 0xC1	; 193
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8f 7d       	andi	r24, 0xDF	; 223
     626:	80 83       	st	Z, r24
	}
}
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <timer1_init>:
/* Timer1 and External Interrupt Functions ---------------------------------*/

void timer1_init()
{
	// Reset the timer counter
	TCNT1 = 0;
     63e:	a4 e8       	ldi	r26, 0x84	; 132
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	1c 92       	st	X, r1
     646:	1e 92       	st	-X, r1
	// Clear input capture flag
	TIFR1 |= (1 << ICF1);
     648:	86 b3       	in	r24, 0x16	; 22
     64a:	80 62       	ori	r24, 0x20	; 32
     64c:	86 bb       	out	0x16, r24	; 22
	// Enable input capture interrupt and overflow interrupt
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
     64e:	ef e6       	ldi	r30, 0x6F	; 111
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	87 62       	ori	r24, 0x27	; 39
     656:	80 83       	st	Z, r24
	// Set to capture rising edge initially
	TCCR1B |= (1 << ICES1);
     658:	e1 e8       	ldi	r30, 0x81	; 129
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	80 83       	st	Z, r24
	// Set prescaler to 8 for adequate timing resolution
	TCCR1B |= (1 << CS11);  // Prescaler = 8
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 83       	st	Z, r24
	OCR1A = TCNT1 + SERVO_FRAME_PERIOD; // Primera interrupción en 20ms desde ya
     668:	8d 91       	ld	r24, X+
     66a:	9c 91       	ld	r25, X
     66c:	80 5c       	subi	r24, 0xC0	; 192
     66e:	93 46       	sbci	r25, 0x63	; 99
     670:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     674:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     678:	08 95       	ret

0000067a <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler de 1024
     67a:	e1 eb       	ldi	r30, 0xB1	; 177
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	87 60       	ori	r24, 0x07	; 7
     682:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
     684:	8b e9       	ldi	r24, 0x9B	; 155
     686:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
     68a:	e0 e7       	ldi	r30, 0x70	; 112
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	82 60       	ori	r24, 0x02	; 2
     692:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
     694:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     698:	08 95       	ret

0000069a <gpio_pins_init>:
	// El prescaler se configurará cuando necesitemos iniciar el timer
}

void gpio_pins_init() {
	DDRB |= (1 << LED_BUILTIN_PIN);   // LED pin salida
     69a:	84 b1       	in	r24, 0x04	; 4
     69c:	80 62       	ori	r24, 0x20	; 32
     69e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED_BUILTIN_PIN);  // LED HIGH
     6a0:	85 b1       	in	r24, 0x05	; 5
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1 << TRIGGER_PIN);       // TRIGGER pin salida
     6a6:	8a b1       	in	r24, 0x0a	; 10
     6a8:	88 60       	ori	r24, 0x08	; 8
     6aa:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << ECHO_PIN);         // ECHO pin como entrada
     6ac:	84 b1       	in	r24, 0x04	; 4
     6ae:	8e 7f       	andi	r24, 0xFE	; 254
     6b0:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BUTTON_PIN);       // BUTTON pin como entrada
     6b2:	8a b1       	in	r24, 0x0a	; 10
     6b4:	8f 7e       	andi	r24, 0xEF	; 239
     6b6:	8a b9       	out	0x0a, r24	; 10
	
	//Inicializar las salidas de servos
	DDRB |= (1 << SERVOA_PIN); // SERVOA_PIN como salida
     6b8:	84 b1       	in	r24, 0x04	; 4
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOB_PIN); // SERVOB_PIN como salida
     6be:	84 b1       	in	r24, 0x04	; 4
     6c0:	84 60       	ori	r24, 0x04	; 4
     6c2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOC_PIN); // SERVOC_PIN como salida
     6c4:	84 b1       	in	r24, 0x04	; 4
     6c6:	88 60       	ori	r24, 0x08	; 8
     6c8:	84 b9       	out	0x04, r24	; 4
	
	tcrt_init(); //Despues haremos esto para todos los sensores, modularizando
     6ca:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <tcrt_init>
	
	// Poner en bajo estos pines para asegurarnos
	PORTD &= ~(1 << TRIGGER_PIN);
     6ce:	8b b1       	in	r24, 0x0b	; 11
     6d0:	87 7f       	andi	r24, 0xF7	; 247
     6d2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << BUTTON_PIN);
     6d4:	8b b1       	in	r24, 0x0b	; 11
     6d6:	8f 7e       	andi	r24, 0xEF	; 239
     6d8:	8b b9       	out	0x0b, r24	; 11
     6da:	08 95       	ret

000006dc <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	2f 93       	push	r18
     6e8:	3f 93       	push	r19
     6ea:	4f 93       	push	r20
     6ec:	5f 93       	push	r21
     6ee:	6f 93       	push	r22
     6f0:	7f 93       	push	r23
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     6fe:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     702:	81 ff       	sbrs	r24, 1
     704:	ee c0       	rjmp	.+476    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     706:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <ultraSensor+0xd>
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	51 f5       	brne	.+84     	; 0x762 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     70e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     712:	85 fd       	sbrc	r24, 5
     714:	0d c0       	rjmp	.+26     	; 0x730 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     716:	0e 94 98 0c 	call	0x1930	; 0x1930 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     71a:	e7 e7       	ldi	r30, 0x77	; 119
     71c:	f7 e0       	ldi	r31, 0x07	; 7
     71e:	80 81       	ld	r24, Z
     720:	81 60       	ori	r24, 0x01	; 1
     722:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     724:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     728:	80 62       	ori	r24, 0x20	; 32
     72a:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
     72e:	19 c0       	rjmp	.+50     	; 0x762 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     730:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     734:	e7 e7       	ldi	r30, 0x77	; 119
     736:	f7 e0       	ldi	r31, 0x07	; 7
     738:	80 81       	ld	r24, Z
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     73e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     742:	8d 7d       	andi	r24, 0xDD	; 221
     744:	88 60       	ori	r24, 0x08	; 8
     746:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     74a:	80 81       	ld	r24, Z
     74c:	8f 7d       	andi	r24, 0xDF	; 223
     74e:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     756:	80 81       	ld	r24, Z
     758:	80 61       	ori	r24, 0x10	; 16
     75a:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     75c:	80 81       	ld	r24, Z
     75e:	8d 7f       	andi	r24, 0xFD	; 253
     760:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     762:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <ultraSensor+0xd>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	d1 f4       	brne	.+52     	; 0x79e <__vector_7+0xc2>
     76a:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <ultraSensor+0xc>
     76e:	84 ff       	sbrs	r24, 4
     770:	16 c0       	rjmp	.+44     	; 0x79e <__vector_7+0xc2>
     772:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     776:	89 70       	andi	r24, 0x09	; 9
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	89 f4       	brne	.+34     	; 0x79e <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     77c:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <veintems_counter>
     780:	81 11       	cpse	r24, r1
     782:	06 c0       	rjmp	.+12     	; 0x790 <__vector_7+0xb4>
				veintems_counter++;
     784:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <veintems_counter>
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <veintems_counter>
     78e:	07 c0       	rjmp	.+14     	; 0x79e <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     790:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     794:	81 60       	ori	r24, 0x01	; 1
     796:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
				veintems_counter = 0;
     79a:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     79e:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <ultraSensor+0xc>
     7a2:	85 fd       	sbrc	r24, 5
     7a4:	22 c0       	rjmp	.+68     	; 0x7ea <__vector_7+0x10e>
     7a6:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     7aa:	84 fd       	sbrc	r24, 4
     7ac:	1e c0       	rjmp	.+60     	; 0x7ea <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     7ae:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <wait_time>
     7b2:	87 30       	cpi	r24, 0x07	; 7
     7b4:	30 f4       	brcc	.+12     	; 0x7c2 <__vector_7+0xe6>
				wait_time++;
     7b6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <wait_time>
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <wait_time>
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     7c2:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     7c6:	80 61       	ori	r24, 0x10	; 16
     7c8:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
				wait_time = 0;
     7cc:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     7d0:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <ultraSensor+0xc>
     7d4:	83 ff       	sbrs	r24, 3
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     7d8:	60 91 47 07 	lds	r22, 0x0747	; 0x800747 <bandera2>
     7dc:	66 fb       	bst	r22, 6
     7de:	66 27       	eor	r22, r22
     7e0:	60 f9       	bld	r22, 0
     7e2:	8b e6       	ldi	r24, 0x6B	; 107
     7e4:	97 e0       	ldi	r25, 0x07	; 7
     7e6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     7ea:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <diezMsCounter>
     7ee:	8a 30       	cpi	r24, 0x0A	; 10
     7f0:	30 f4       	brcc	.+12     	; 0x7fe <__vector_7+0x122>
			diezMsCounter++;
     7f2:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <diezMsCounter>
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <diezMsCounter>
     7fc:	07 c0       	rjmp	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     7fe:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     802:	88 60       	ori	r24, 0x08	; 8
     804:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			diezMsCounter = 0;
     808:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     80c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     810:	86 ff       	sbrs	r24, 6
     812:	0e c0       	rjmp	.+28     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			if(btn_pressed_time == 255){
     814:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <btn_pressed_time>
     818:	8f 3f       	cpi	r24, 0xFF	; 255
     81a:	29 f4       	brne	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
				BTN_OVF = 1;
     81c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     820:	84 60       	ori	r24, 0x04	; 4
     822:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			}
			btn_pressed_time++;
     826:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <btn_pressed_time>
     82a:	8f 5f       	subi	r24, 0xFF	; 255
     82c:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     830:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <servoA+0x1>
     834:	81 ff       	sbrs	r24, 1
     836:	0d c0       	rjmp	.+26     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     838:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <servoA+0x5>
     83c:	9a 30       	cpi	r25, 0x0A	; 10
     83e:	20 f4       	brcc	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				servoA.state_time++;  // Increment time spent in PUSH mode
     840:	9f 5f       	subi	r25, 0xFF	; 255
     842:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <servoA+0x5>
     846:	05 c0       	rjmp	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     848:	e6 e0       	ldi	r30, 0x06	; 6
     84a:	f7 e0       	ldi	r31, 0x07	; 7
     84c:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     84e:	84 60       	ori	r24, 0x04	; 4
     850:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     852:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <servoB+0x1>
     856:	81 ff       	sbrs	r24, 1
     858:	0d c0       	rjmp	.+26     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     85a:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <servoB+0x5>
     85e:	9a 30       	cpi	r25, 0x0A	; 10
     860:	20 f4       	brcc	.+8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
				servoB.state_time++;  // Increment time spent in PUSH mode
     862:	9f 5f       	subi	r25, 0xFF	; 255
     864:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <servoB+0x5>
     868:	05 c0       	rjmp	.+10     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     86a:	ec e7       	ldi	r30, 0x7C	; 124
     86c:	f7 e0       	ldi	r31, 0x07	; 7
     86e:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     870:	84 60       	ori	r24, 0x04	; 4
     872:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     874:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <servoC+0x1>
     878:	81 ff       	sbrs	r24, 1
     87a:	0d c0       	rjmp	.+26     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     87c:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <servoC+0x5>
     880:	9a 30       	cpi	r25, 0x0A	; 10
     882:	20 f4       	brcc	.+8      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
				servoC.state_time++;  // Increment time spent in PUSH mode
     884:	9f 5f       	subi	r25, 0xFF	; 255
     886:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <servoC+0x5>
     88a:	05 c0       	rjmp	.+10     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     88c:	e8 e4       	ldi	r30, 0x48	; 72
     88e:	f7 e0       	ldi	r31, 0x07	; 7
     890:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     892:	84 60       	ori	r24, 0x04	; 4
     894:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     896:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
     89a:	80 ff       	sbrs	r24, 0
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     89e:	83 fd       	sbrc	r24, 3
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     8a2:	88 60       	ori	r24, 0x08	; 8
     8a4:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8a8:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
     8ac:	80 ff       	sbrs	r24, 0
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     8b0:	83 fd       	sbrc	r24, 3
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     8b4:	88 60       	ori	r24, 0x08	; 8
     8b6:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8ba:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
     8be:	80 ff       	sbrs	r24, 0
     8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8c2:	83 fd       	sbrc	r24, 3
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     8c6:	ef e0       	ldi	r30, 0x0F	; 15
     8c8:	f7 e0       	ldi	r31, 0x07	; 7
     8ca:	80 81       	ld	r24, Z
     8cc:	88 60       	ori	r24, 0x08	; 8
     8ce:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8d0:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
     8d4:	80 ff       	sbrs	r24, 0
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     8d8:	83 fd       	sbrc	r24, 3
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <IR_U>
		}
	}
}
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <main>:
int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
     904:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <bandera3>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
	IR_CALIBRATED = 0;
     90e:	82 e8       	ldi	r24, 0x82	; 130
     910:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 ac 0c 	call	0x1958	; 0x1958 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     91c:	e2 eb       	ldi	r30, 0xB2	; 178
     91e:	f7 e0       	ldi	r31, 0x07	; 7
     920:	8e e0       	ldi	r24, 0x0E	; 14
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	93 83       	std	Z+3, r25	; 0x03
     926:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	91 83       	std	Z+1, r25	; 0x01
     92e:	80 83       	st	Z, r24
	initProtocolService(&protocolService);
     930:	82 e8       	ldi	r24, 0x82	; 130
     932:	97 e0       	ldi	r25, 0x07	; 7
     934:	0e 94 aa 0a 	call	0x1554	; 0x1554 <initProtocolService>
	diezMsCounter = 0;
     938:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     93c:	0e 94 4d 03 	call	0x69a	; 0x69a <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     940:	0e 94 1f 03 	call	0x63e	; 0x63e <timer1_init>
	timer2_init();
     944:	0e 94 3d 03 	call	0x67a	; 0x67a <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     948:	0e 94 a1 0b 	call	0x1742	; 0x1742 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     94c:	63 e5       	ldi	r22, 0x53	; 83
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	8b e6       	ldi	r24, 0x6B	; 107
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     958:	60 91 47 07 	lds	r22, 0x0747	; 0x800747 <bandera2>
     95c:	66 fb       	bst	r22, 6
     95e:	66 27       	eor	r22, r22
     960:	60 f9       	bld	r22, 0
     962:	8b e6       	ldi	r24, 0x6B	; 107
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     96a:	4f e0       	ldi	r20, 0x0F	; 15
     96c:	57 e0       	ldi	r21, 0x07	; 7
     96e:	6b e6       	ldi	r22, 0x6B	; 107
     970:	77 e0       	ldi	r23, 0x07	; 7
     972:	8d e5       	ldi	r24, 0x5D	; 93
     974:	97 e0       	ldi	r25, 0x07	; 7
     976:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <initDetector>
	initSorter(&SorterSystem);
     97a:	8e e2       	ldi	r24, 0x2E	; 46
     97c:	97 e0       	ldi	r25, 0x07	; 7
     97e:	0e 94 3b 07 	call	0xe76	; 0xe76 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     982:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     986:	82 60       	ori	r24, 0x02	; 2
     988:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     98c:	82 ed       	ldi	r24, 0xD2	; 210
     98e:	95 e0       	ldi	r25, 0x05	; 5
     990:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
	sei();
     994:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     996:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     99a:	85 ff       	sbrs	r24, 5
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <main+0xa4>
			irSensorsTask(&SorterSystem);
     99e:	8e e2       	ldi	r24, 0x2E	; 46
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	0e 94 2f 09 	call	0x125e	; 0x125e <irSensorsTask>
     9a6:	75 c0       	rjmp	.+234    	; 0xa92 <main+0x18e>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     9a8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <__data_end>
     9ac:	81 11       	cpse	r24, r1
     9ae:	23 c0       	rjmp	.+70     	; 0x9f6 <main+0xf2>
		printf("Calibrando sensores IR...\n");
     9b0:	82 e2       	ldi	r24, 0x22	; 34
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     9b8:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
     9bc:	80 ff       	sbrs	r24, 0
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <main+0xc2>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     9c0:	84 60       	ori	r24, 0x04	; 4
     9c2:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     9c6:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
     9ca:	80 ff       	sbrs	r24, 0
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <main+0xd0>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     9ce:	84 60       	ori	r24, 0x04	; 4
     9d0:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     9d4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
     9d8:	80 ff       	sbrs	r24, 0
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <main+0xde>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     9dc:	84 60       	ori	r24, 0x04	; 4
     9de:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     9e2:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
     9e6:	80 ff       	sbrs	r24, 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <main+0xec>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     9ea:	84 60       	ori	r24, 0x04	; 4
     9ec:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <IR_U>
		}
		init_done = true;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     9f6:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
     9fa:	82 ff       	sbrs	r24, 2
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <main+0x102>
		calibrateIRSensor(&IR_A);
     9fe:	8e e4       	ldi	r24, 0x4E	; 78
     a00:	97 e0       	ldi	r25, 0x07	; 7
     a02:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     a06:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
     a0a:	82 ff       	sbrs	r24, 2
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <main+0x112>
		calibrateIRSensor(&IR_B);
     a0e:	87 ef       	ldi	r24, 0xF7	; 247
     a10:	96 e0       	ldi	r25, 0x06	; 6
     a12:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     a16:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
     a1a:	82 ff       	sbrs	r24, 2
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <main+0x122>
		calibrateIRSensor(&IR_C);
     a1e:	8f e1       	ldi	r24, 0x1F	; 31
     a20:	97 e0       	ldi	r25, 0x07	; 7
     a22:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     a26:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
     a2a:	82 ff       	sbrs	r24, 2
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <main+0x132>
		calibrateIRSensor(&IR_U);
     a2e:	8f e0       	ldi	r24, 0x0F	; 15
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a36:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
     a3a:	82 fd       	sbrc	r24, 2
     a3c:	0e c0       	rjmp	.+28     	; 0xa5a <main+0x156>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a3e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a42:	82 fd       	sbrc	r24, 2
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <main+0x15a>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a46:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a4a:	82 fd       	sbrc	r24, 2
     a4c:	0a c0       	rjmp	.+20     	; 0xa62 <main+0x15e>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     a4e:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a52:	82 ff       	sbrs	r24, 2
     a54:	08 c0       	rjmp	.+16     	; 0xa66 <main+0x162>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <main+0x164>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <main+0x164>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <main+0x164>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <main+0x164>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     a66:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     a68:	88 23       	and	r24, r24
     a6a:	99 f0       	breq	.+38     	; 0xa92 <main+0x18e>
				printf("Todos los sensores IR calibrados.\n");
     a6c:	8c e3       	ldi	r24, 0x3C	; 60
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
				IR_CALIBRATED = 1;
     a74:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     a78:	80 62       	ori	r24, 0x20	; 32
     a7a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
				IR_A.calibrationCounter = 0;
     a7e:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     a82:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     a86:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     a8a:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <IR_U+0x9>
				initOutputs();
     a8e:	0e 94 f6 06 	call	0xdec	; 0xdec <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     a92:	6e e2       	ldi	r22, 0x2E	; 46
     a94:	77 e0       	ldi	r23, 0x07	; 7
     a96:	8d e5       	ldi	r24, 0x5D	; 93
     a98:	97 e0       	ldi	r25, 0x07	; 7
     a9a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <ultraSensorTask>
		servosTask();
     a9e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     aa2:	4c 9b       	sbis	0x09, 4	; 9
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <main+0x1b6>
     aa6:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     aaa:	86 fd       	sbrc	r24, 6
     aac:	06 c0       	rjmp	.+12     	; 0xaba <main+0x1b6>
		btn_pressed_time = 0;
     aae:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <btn_pressed_time>
		BTN_PRESSED = 1;
     ab2:	80 64       	ori	r24, 0x40	; 64
     ab4:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
     ab8:	28 c0       	rjmp	.+80     	; 0xb0a <main+0x206>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     aba:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     abe:	86 ff       	sbrs	r24, 6
     ac0:	24 c0       	rjmp	.+72     	; 0xb0a <main+0x206>
     ac2:	4c 99       	sbic	0x09, 4	; 9
     ac4:	22 c0       	rjmp	.+68     	; 0xb0a <main+0x206>
		BTN_PRESSED = 0;
     ac6:	8f 7b       	andi	r24, 0xBF	; 191
     ac8:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     acc:	82 ff       	sbrs	r24, 2
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <main+0x1d4>
			printf("Btn overflowed\n");
     ad0:	8e e5       	ldi	r24, 0x5E	; 94
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     ad8:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <btn_pressed_time>
     adc:	8a 30       	cpi	r24, 0x0A	; 10
     ade:	30 f4       	brcc	.+12     	; 0xaec <main+0x1e8>
     ae0:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     ae4:	98 2f       	mov	r25, r24
     ae6:	94 70       	andi	r25, 0x04	; 4
     ae8:	82 ff       	sbrs	r24, 2
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <main+0x1f4>
			BTN_RELEASED = 1;
     aec:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
     af6:	09 c0       	rjmp	.+18     	; 0xb0a <main+0x206>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     af8:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <btn_pressed_time>
			if(BTN_OVF){
     afc:	99 23       	and	r25, r25
     afe:	29 f0       	breq	.+10     	; 0xb0a <main+0x206>
				BTN_OVF = 0;
     b00:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     b04:	8b 7f       	andi	r24, 0xFB	; 251
     b06:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if (IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA) && !IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)) {
     b0a:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     b0e:	81 ff       	sbrs	r24, 1
     b10:	16 c0       	rjmp	.+44     	; 0xb3e <main+0x23a>
     b12:	80 fd       	sbrc	r24, 0
     b14:	14 c0       	rjmp	.+40     	; 0xb3e <main+0x23a>
			printf("Procesar info\n");
     b16:	8d e6       	ldi	r24, 0x6D	; 109
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			if (process_protocol_buffer()) {
     b1e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <process_protocol_buffer>
     b22:	88 23       	and	r24, r24
     b24:	39 f0       	breq	.+14     	; 0xb34 <main+0x230>
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_HEADER);
     b26:	e2 e8       	ldi	r30, 0x82	; 130
     b28:	f7 e0       	ldi	r31, 0x07	; 7
     b2a:	82 a1       	ldd	r24, Z+34	; 0x22
     b2c:	8f 70       	andi	r24, 0x0F	; 15
				SET_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     b2e:	81 61       	ori	r24, 0x11	; 17
     b30:	82 a3       	std	Z+34, r24	; 0x22
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <main+0x23a>
			} else {
				SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     b34:	e2 e8       	ldi	r30, 0x82	; 130
     b36:	f7 e0       	ldi	r31, 0x07	; 7
     b38:	82 a1       	ldd	r24, Z+34	; 0x22
     b3a:	84 60       	ori	r24, 0x04	; 4
     b3c:	82 a3       	std	Z+34, r24	; 0x22
			}
		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_RESET)){
     b3e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     b42:	82 ff       	sbrs	r24, 2
     b44:	15 c0       	rjmp	.+42     	; 0xb70 <main+0x26c>
			protocolService.indexR = protocolService.indexW;
     b46:	c2 e8       	ldi	r28, 0x82	; 130
     b48:	d7 e0       	ldi	r29, 0x07	; 7
     b4a:	88 81       	ld	r24, Y
     b4c:	89 83       	std	Y+1, r24	; 0x01
			printf("Index R = indexW = %u", protocolService.indexR);
     b4e:	1f 92       	push	r1
     b50:	8f 93       	push	r24
     b52:	8b e7       	ldi	r24, 0x7B	; 123
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
			CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     b5e:	8a a1       	ldd	r24, Y+34	; 0x22
			CLEAR_FLAG(protocolService.flags, PROTOSERV_RESET);
			CLEAR_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
     b60:	88 70       	andi	r24, 0x08	; 8
     b62:	8a a3       	std	Y+34, r24	; 0x22
			clear_receive_pck();
     b64:	0e 94 9b 0a 	call	0x1536	; 0x1536 <clear_receive_pck>
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
		}
// 		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_CLEAR_PCK)){
// 			
// 		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)){
     b70:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     b74:	80 ff       	sbrs	r24, 0
     b76:	ab c0       	rjmp	.+342    	; 0xcce <main+0x3ca>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_LEN);
     b78:	a2 e8       	ldi	r26, 0x82	; 130
     b7a:	b7 e0       	ldi	r27, 0x07	; 7
			protocolService.indexR++; //Poner en dinde deberia estar length
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	ec 91       	ld	r30, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	ef 5f       	subi	r30, 0xFF	; 255
			protocolService.receivePck.length = protocolService.buffer[protocolService.indexR]; 
     b84:	ce 2f       	mov	r28, r30
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	ce 57       	subi	r28, 0x7E	; 126
     b8a:	d8 4f       	sbci	r29, 0xF8	; 248
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	97 96       	adiw	r26, 0x27	; 39
     b90:	9c 93       	st	X, r25
     b92:	97 97       	sbiw	r26, 0x27	; 39
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_TOKEN);
     b94:	8f 70       	andi	r24, 0x0F	; 15
     b96:	80 63       	ori	r24, 0x30	; 48
     b98:	92 96       	adiw	r26, 0x22	; 34
     b9a:	8c 93       	st	X, r24
     b9c:	92 97       	sbiw	r26, 0x22	; 34
			protocolService.indexR++; //Donde deberia estar token
     b9e:	ef 5f       	subi	r30, 0xFF	; 255
     ba0:	11 96       	adiw	r26, 0x01	; 1
     ba2:	ec 93       	st	X, r30
			if (protocolService.buffer[protocolService.indexR] != ':'){
     ba4:	ae 2f       	mov	r26, r30
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ae 57       	subi	r26, 0x7E	; 126
     baa:	b8 4f       	sbci	r27, 0xF8	; 248
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	2c 91       	ld	r18, X
     bb0:	2a 33       	cpi	r18, 0x3A	; 58
     bb2:	59 f0       	breq	.+22     	; 0xbca <main+0x2c6>
				printf("Token invalido\n");
     bb4:	81 e9       	ldi	r24, 0x91	; 145
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
				SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     bbc:	e2 e8       	ldi	r30, 0x82	; 130
     bbe:	f7 e0       	ldi	r31, 0x07	; 7
     bc0:	82 a1       	ldd	r24, Z+34	; 0x22
     bc2:	84 60       	ori	r24, 0x04	; 4
				CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	82 a3       	std	Z+34, r24	; 0x22
     bc8:	82 c0       	rjmp	.+260    	; 0xcce <main+0x3ca>
			}else{ //Token valido
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CMD);
     bca:	a2 e8       	ldi	r26, 0x82	; 130
     bcc:	b7 e0       	ldi	r27, 0x07	; 7
     bce:	8f 70       	andi	r24, 0x0F	; 15
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	92 96       	adiw	r26, 0x22	; 34
     bd4:	8c 93       	st	X, r24
     bd6:	92 97       	sbiw	r26, 0x22	; 34
				protocolService.indexR++; //Donde deberia estar CMD
     bd8:	ef 5f       	subi	r30, 0xFF	; 255
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	ec 93       	st	X, r30
     bde:	11 97       	sbiw	r26, 0x01	; 1
				protocolService.receivePck.cmd = protocolService.buffer[protocolService.indexR];
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ee 57       	subi	r30, 0x7E	; 126
     be4:	f8 4f       	sbci	r31, 0xF8	; 248
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	99 96       	adiw	r26, 0x29	; 41
     bea:	8c 93       	st	X, r24
				if(protocolService.receivePck.cmd == CMD_INVALID){
     bec:	80 3e       	cpi	r24, 0xE0	; 224
     bee:	59 f4       	brne	.+22     	; 0xc06 <main+0x302>
					printf("Comando invalido\n");
     bf0:	80 ea       	ldi	r24, 0xA0	; 160
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
					CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     bf8:	e2 e8       	ldi	r30, 0x82	; 130
     bfa:	f7 e0       	ldi	r31, 0x07	; 7
     bfc:	82 a1       	ldd	r24, Z+34	; 0x22
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
					SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	82 a3       	std	Z+34, r24	; 0x22
     c04:	64 c0       	rjmp	.+200    	; 0xcce <main+0x3ca>
				}else{
					printf("Length %u", protocolService.receivePck.length);
     c06:	1f 92       	push	r1
     c08:	9f 93       	push	r25
     c0a:	81 eb       	ldi	r24, 0xB1	; 177
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	9f 93       	push	r25
     c10:	8f 93       	push	r24
     c12:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
					if(protocolService.receivePck.length > PROTOCOL_MAX_BYTE_COUNT){ //Nunca deberia ser mayor a 24, porque + UNER+len+:+cmd == 32 y es el size del buffer
     c16:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <protocolService+0x27>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	89 31       	cpi	r24, 0x19	; 25
     c24:	20 f0       	brcs	.+8      	; 0xc2e <main+0x32a>
						printf("Length mayor a 24, se perderia data del buffer\n");
     c26:	8b eb       	ldi	r24, 0xBB	; 187
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
					}
					NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_PAYLOAD);
     c2e:	e2 e8       	ldi	r30, 0x82	; 130
     c30:	f7 e0       	ldi	r31, 0x07	; 7
     c32:	82 a1       	ldd	r24, Z+34	; 0x22
     c34:	8f 70       	andi	r24, 0x0F	; 15
     c36:	80 65       	ori	r24, 0x50	; 80
     c38:	82 a3       	std	Z+34, r24	; 0x22
					protocolService.indexR++; //Donde deberia estar el Payload
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	9f 5f       	subi	r25, 0xFF	; 255
     c3e:	91 83       	std	Z+1, r25	; 0x01
					protocolService.receivePck.payload = &protocolService.buffer[protocolService.indexR]; //Apunta a la direccion de memoria del primer elemento, esto deberia seguir hasta minimo 2, osea esta direccion y la siguiente
     c40:	29 2f       	mov	r18, r25
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	2c 57       	subi	r18, 0x7C	; 124
     c46:	38 4f       	sbci	r19, 0xF8	; 248
     c48:	33 a7       	std	Z+43, r19	; 0x2b
     c4a:	22 a7       	std	Z+42, r18	; 0x2a
					if(protocolService.receivePck.length > 0){
     c4c:	27 a1       	ldd	r18, Z+39	; 0x27
     c4e:	22 23       	and	r18, r18
     c50:	21 f0       	breq	.+8      	; 0xc5a <main+0x356>
						protocolService.indexR += (protocolService.receivePck.length-1); //Si es 0 no pasa nada porque daria lo mismo la suma
     c52:	92 0f       	add	r25, r18
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <protocolService+0x1>
					}
					protocolService.indexR++; //Donde deberia estar cks
     c5a:	c2 e8       	ldi	r28, 0x82	; 130
     c5c:	d7 e0       	ldi	r29, 0x07	; 7
     c5e:	e9 81       	ldd	r30, Y+1	; 0x01
     c60:	ef 5f       	subi	r30, 0xFF	; 255
     c62:	e9 83       	std	Y+1, r30	; 0x01
					NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CHK);
					protocolService.receivePck.checksum = protocolService.buffer[protocolService.indexR];
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	ee 57       	subi	r30, 0x7E	; 126
     c68:	f8 4f       	sbci	r31, 0xF8	; 248
     c6a:	92 81       	ldd	r25, Z+2	; 0x02
     c6c:	9c a7       	std	Y+44, r25	; 0x2c
					NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_CALCULATING_CHK);
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	80 67       	ori	r24, 0x70	; 112
     c72:	8a a3       	std	Y+34, r24	; 0x22
					if(calculatePayload() != protocolService.receivePck.checksum){
     c74:	0e 94 b6 0a 	call	0x156c	; 0x156c <calculatePayload>
     c78:	9c a5       	ldd	r25, Y+44	; 0x2c
     c7a:	89 17       	cp	r24, r25
     c7c:	49 f0       	breq	.+18     	; 0xc90 <main+0x38c>
						printf("Cks invalido\n");
     c7e:	8a ee       	ldi	r24, 0xEA	; 234
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
						CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     c86:	8a a1       	ldd	r24, Y+34	; 0x22
     c88:	8e 7f       	andi	r24, 0xFE	; 254
						SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     c8a:	84 60       	ori	r24, 0x04	; 4
     c8c:	8a a3       	std	Y+34, r24	; 0x22
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <main+0x3ca>
						}else{
						printf("Cks valido\n");
     c90:	87 ef       	ldi	r24, 0xF7	; 247
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
						NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_VALIDATED);
     c98:	c2 e8       	ldi	r28, 0x82	; 130
     c9a:	d7 e0       	ldi	r29, 0x07	; 7
     c9c:	8a a1       	ldd	r24, Y+34	; 0x22
     c9e:	8f 70       	andi	r24, 0x0F	; 15
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	8a a3       	std	Y+34, r24	; 0x22
						protocolService.receivePck.cmd = getResponseCommand(protocolService.buffer[protocolService.indexR]); //Asignar comando de respuesta
     ca4:	e9 81       	ldd	r30, Y+1	; 0x01
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ee 57       	subi	r30, 0x7E	; 126
     caa:	f8 4f       	sbci	r31, 0xF8	; 248
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 82 0a 	call	0x1504	; 0x1504 <getResponseCommand>
     cb4:	89 a7       	std	Y+41, r24	; 0x29
						SET_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
     cb6:	9a a1       	ldd	r25, Y+34	; 0x22
     cb8:	98 60       	ori	r25, 0x08	; 8
     cba:	9a a3       	std	Y+34, r25	; 0x22
						createPck(protocolService.receivePck.cmd, NULL, 0); //Sin respuesta, deberia enviar el payload si quisiera agregar algo
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 19 0b 	call	0x1632	; 0x1632 <createPck>
						CLEAR_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
     cc6:	8a a1       	ldd	r24, Y+34	; 0x22
						CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
						NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND);
     cc8:	86 70       	andi	r24, 0x06	; 6
     cca:	80 69       	ori	r24, 0x90	; 144
     ccc:	8a a3       	std	Y+34, r24	; 0x22
					}
				}
			}
		}
		if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND){
     cce:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     cd2:	82 95       	swap	r24
     cd4:	8f 70       	andi	r24, 0x0F	; 15
     cd6:	89 30       	cpi	r24, 0x09	; 9
     cd8:	71 f4       	brne	.+28     	; 0xcf6 <main+0x3f2>
			printf("Send");
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND_DONE);
     ce6:	e2 e8       	ldi	r30, 0x82	; 130
     ce8:	f7 e0       	ldi	r31, 0x07	; 7
     cea:	82 a1       	ldd	r24, Z+34	; 0x22
     cec:	8f 70       	andi	r24, 0x0F	; 15
     cee:	80 6a       	ori	r24, 0xA0	; 160
     cf0:	82 a3       	std	Z+34, r24	; 0x22
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
		}
		if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND_DONE){
     cf6:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <protocolService+0x22>
     cfa:	82 95       	swap	r24
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8a 30       	cpi	r24, 0x0A	; 10
     d00:	41 f4       	brne	.+16     	; 0xd12 <main+0x40e>
			printf("Send done");
     d02:	87 e0       	ldi	r24, 0x07	; 7
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
			//NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     d12:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     d16:	84 ff       	sbrs	r24, 4
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <main+0x426>
			WAIT_TIME_TRIGGER_PASSED = 0;
     d1a:	8f 7e       	andi	r24, 0xEF	; 239
     d1c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     d20:	e7 e7       	ldi	r30, 0x77	; 119
     d22:	f7 e0       	ldi	r31, 0x07	; 7
     d24:	80 81       	ld	r24, Z
     d26:	80 62       	ori	r24, 0x20	; 32
     d28:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     d2a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     d2e:	83 ff       	sbrs	r24, 3
     d30:	08 c0       	rjmp	.+16     	; 0xd42 <main+0x43e>
			ECHO_INTERVAL_FLAG = 0;
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			EMIT_TRIGGER = 1;
     d38:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     d3c:	82 60       	ori	r24, 0x02	; 2
     d3e:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     d42:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     d46:	80 ff       	sbrs	r24, 0
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <main+0x44c>
			BTN_RELEASED = 0; //TEST SERVO A
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     d50:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     d54:	84 ff       	sbrs	r24, 4
     d56:	1f ce       	rjmp	.-962    	; 0x996 <main+0x92>
			IR_READ_INTERRUPT = 0;
     d58:	8f 7e       	andi	r24, 0xEF	; 239
     d5a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     d5e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
     d62:	80 ff       	sbrs	r24, 0
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <main+0x470>
     d66:	82 ff       	sbrs	r24, 2
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <main+0x470>
     d6a:	83 fd       	sbrc	r24, 3
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <main+0x470>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d6e:	88 60       	ori	r24, 0x08	; 8
     d70:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     d74:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
     d78:	80 ff       	sbrs	r24, 0
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <main+0x486>
     d7c:	82 ff       	sbrs	r24, 2
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <main+0x486>
     d80:	83 fd       	sbrc	r24, 3
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <main+0x486>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     d8a:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
     d8e:	80 ff       	sbrs	r24, 0
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <main+0x49c>
     d92:	82 ff       	sbrs	r24, 2
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <main+0x49c>
     d96:	83 fd       	sbrc	r24, 3
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <main+0x49c>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d9a:	88 60       	ori	r24, 0x08	; 8
     d9c:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     da0:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
     da4:	80 ff       	sbrs	r24, 0
     da6:	f7 cd       	rjmp	.-1042   	; 0x996 <main+0x92>
     da8:	82 ff       	sbrs	r24, 2
     daa:	f5 cd       	rjmp	.-1046   	; 0x996 <main+0x92>
     dac:	83 fd       	sbrc	r24, 3
     dae:	f3 cd       	rjmp	.-1050   	; 0x996 <main+0x92>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <IR_U>
     db6:	ef cd       	rjmp	.-1058   	; 0x996 <main+0x92>

00000db8 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <initDetector+0x6>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	fc 01       	movw	r30, r24
     dc4:	5a 83       	std	Y+2, r21	; 0x02
     dc6:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     dc8:	8b e6       	ldi	r24, 0x6B	; 107
     dca:	97 e0       	ldi	r25, 0x07	; 7
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	93 83       	std	Z+3, r25	; 0x03
     dd6:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     dd8:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     dda:	81 e1       	ldi	r24, 0x11	; 17
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     df0:	2a e5       	ldi	r18, 0x5A	; 90
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	97 e0       	ldi	r25, 0x07	; 7
     e00:	0e 94 57 0b 	call	0x16ae	; 0x16ae <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     e04:	2a e5       	ldi	r18, 0x5A	; 90
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	42 e0       	ldi	r20, 0x02	; 2
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	8c e7       	ldi	r24, 0x7C	; 124
     e12:	97 e0       	ldi	r25, 0x07	; 7
     e14:	0e 94 57 0b 	call	0x16ae	; 0x16ae <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     e18:	e2 e6       	ldi	r30, 0x62	; 98
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     e24:	8c e7       	ldi	r24, 0x7C	; 124
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	93 83       	std	Z+3, r25	; 0x03
     e2a:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     e2c:	88 e4       	ldi	r24, 0x48	; 72
     e2e:	97 e0       	ldi	r25, 0x07	; 7
     e30:	95 83       	std	Z+5, r25	; 0x05
     e32:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     e34:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <current_servo>
	//printf("Init servos\n");
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     e38:	cc e0       	ldi	r28, 0x0C	; 12
     e3a:	d7 e0       	ldi	r29, 0x07	; 7
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     e40:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <IR_A+0x8>
     e44:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     e46:	af ea       	ldi	r26, 0xAF	; 175
     e48:	b7 e0       	ldi	r27, 0x07	; 7
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	8c 93       	st	X, r24
     e50:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     e52:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <IR_B+0x8>
     e56:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     e58:	e8 e6       	ldi	r30, 0x68	; 104
     e5a:	f7 e0       	ldi	r31, 0x07	; 7
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     e60:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <IR_C+0x8>
     e64:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     e6e:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     e76:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     e78:	8c e1       	ldi	r24, 0x1C	; 28
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	93 83       	std	Z+3, r25	; 0x03
     e86:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     e88:	8f ea       	ldi	r24, 0xAF	; 175
     e8a:	97 e0       	ldi	r25, 0x07	; 7
     e8c:	95 83       	std	Z+5, r25	; 0x05
     e8e:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     e90:	88 e6       	ldi	r24, 0x68	; 104
     e92:	97 e0       	ldi	r25, 0x07	; 7
     e94:	97 83       	std	Z+7, r25	; 0x07
     e96:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     e98:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     e9c:	88 23       	and	r24, r24
     e9e:	44 f4       	brge	.+16     	; 0xeb0 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     ea0:	82 e3       	ldi	r24, 0x32	; 50
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     ea8:	84 e6       	ldi	r24, 0x64	; 100
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
     eb0:	08 95       	ret

00000eb2 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     eb2:	8e 3b       	cpi	r24, 0xBE	; 190
     eb4:	98 f0       	brcs	.+38     	; 0xedc <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     eb6:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <bandera2>
     eba:	99 23       	and	r25, r25
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <classify_box+0xe>
     ebe:	83 c0       	rjmp	.+262    	; 0xfc6 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     ec0:	1f 92       	push	r1
     ec2:	8f 93       	push	r24
     ec4:	89 e8       	ldi	r24, 0x89	; 137
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
		}
		return NO_BOX;
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     edc:	9e eb       	ldi	r25, 0xBE	; 190
     ede:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     ee0:	97 33       	cpi	r25, 0x37	; 55
     ee2:	98 f4       	brcc	.+38     	; 0xf0a <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     ee4:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     ee8:	80 78       	andi	r24, 0x80	; 128
     eea:	09 f4       	brne	.+2      	; 0xeee <classify_box+0x3c>
     eec:	73 c0       	rjmp	.+230    	; 0xfd4 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     eee:	1f 92       	push	r1
     ef0:	9f 93       	push	r25
     ef2:	89 eb       	ldi	r24, 0xB9	; 185
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     f0a:	db 01       	movw	r26, r22
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	80 81       	ld	r24, Z
     f12:	98 17       	cp	r25, r24
     f14:	b0 f0       	brcs	.+44     	; 0xf42 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     f16:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     f18:	89 17       	cp	r24, r25
     f1a:	98 f0       	brcs	.+38     	; 0xf42 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f1c:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     f20:	88 23       	and	r24, r24
     f22:	0c f0       	brlt	.+2      	; 0xf26 <classify_box+0x74>
     f24:	52 c0       	rjmp	.+164    	; 0xfca <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     f26:	1f 92       	push	r1
     f28:	9f 93       	push	r25
     f2a:	82 ee       	ldi	r24, 0xE2	; 226
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	9f 93       	push	r25
     f30:	8f 93       	push	r24
     f32:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	98 17       	cp	r25, r24
     f46:	a8 f0       	brcs	.+42     	; 0xf72 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     f48:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     f4a:	89 17       	cp	r24, r25
     f4c:	90 f0       	brcs	.+36     	; 0xf72 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f4e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     f52:	88 23       	and	r24, r24
     f54:	e4 f5       	brge	.+120    	; 0xfce <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     f56:	1f 92       	push	r1
     f58:	9f 93       	push	r25
     f5a:	87 ef       	ldi	r24, 0xF7	; 247
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f72:	84 81       	ldd	r24, Z+4	; 0x04
     f74:	98 17       	cp	r25, r24
     f76:	a8 f0       	brcs	.+42     	; 0xfa2 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     f78:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f7a:	89 17       	cp	r24, r25
     f7c:	90 f0       	brcs	.+36     	; 0xfa2 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f7e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     f82:	88 23       	and	r24, r24
     f84:	34 f5       	brge	.+76     	; 0xfd2 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     f86:	1f 92       	push	r1
     f88:	9f 93       	push	r25
     f8a:	8c e0       	ldi	r24, 0x0C	; 12
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	9f 93       	push	r25
     f90:	8f 93       	push	r24
     f92:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     fa2:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     fa6:	80 78       	andi	r24, 0x80	; 128
     fa8:	a9 f0       	breq	.+42     	; 0xfd4 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     faa:	1f 92       	push	r1
     fac:	9f 93       	push	r25
     fae:	81 e2       	ldi	r24, 0x21	; 33
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	9f 93       	push	r25
     fb4:	8f 93       	push	r24
     fb6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     fd2:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     fd4:	08 95       	ret

00000fd6 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
     fe4:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
     fe8:	88 23       	and	r24, r24
     fea:	bc f5       	brge	.+110    	; 0x105a <ultraSensorTask+0x84>
     fec:	e8 81       	ld	r30, Y
     fee:	f9 81       	ldd	r31, Y+1	; 0x01
     ff0:	84 85       	ldd	r24, Z+12	; 0x0c
     ff2:	85 ff       	sbrs	r24, 5
     ff4:	32 c0       	rjmp	.+100    	; 0x105a <ultraSensorTask+0x84>
     ff6:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
     ffa:	81 ff       	sbrs	r24, 1
     ffc:	2e c0       	rjmp	.+92     	; 0x105a <ultraSensorTask+0x84>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	81 ff       	sbrs	r24, 1
    1002:	2b c0       	rjmp	.+86     	; 0x105a <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
    1004:	cf 01       	movw	r24, r30
    1006:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <ultrasonic_start>
    100a:	88 23       	and	r24, r24
    100c:	c1 f0       	breq	.+48     	; 0x103e <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
    100e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    1012:	86 ff       	sbrs	r24, 6
    1014:	04 c0       	rjmp	.+8      	; 0x101e <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
    1016:	8f e4       	ldi	r24, 0x4F	; 79
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
    101e:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
    1022:	8f 77       	andi	r24, 0x7F	; 127
    1024:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
    1028:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    102c:	8d 7f       	andi	r24, 0xFD	; 253
    102e:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
    1032:	e8 81       	ld	r30, Y
    1034:	f9 81       	ldd	r31, Y+1	; 0x01
    1036:	84 85       	ldd	r24, Z+12	; 0x0c
    1038:	8f 7d       	andi	r24, 0xDF	; 223
    103a:	84 87       	std	Z+12, r24	; 0x0c
    103c:	0e c0       	rjmp	.+28     	; 0x105a <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
    103e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    1042:	86 ff       	sbrs	r24, 6
    1044:	04 c0       	rjmp	.+8      	; 0x104e <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
    1046:	8a e4       	ldi	r24, 0x4A	; 74
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			}
			EMIT_FAILED = 1;
    104e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
			EMIT_TRIGGER = 0;
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8d 7f       	andi	r24, 0xFD	; 253
    1056:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
    105a:	88 81       	ld	r24, Y
    105c:	99 81       	ldd	r25, Y+1	; 0x01
    105e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
    1062:	e8 81       	ld	r30, Y
    1064:	f9 81       	ldd	r31, Y+1	; 0x01
    1066:	85 85       	ldd	r24, Z+13	; 0x0d
    1068:	85 30       	cpi	r24, 0x05	; 5
    106a:	09 f0       	breq	.+2      	; 0x106e <ultraSensorTask+0x98>
    106c:	c1 c0       	rjmp	.+386    	; 0x11f0 <ultraSensorTask+0x21a>
    106e:	84 85       	ldd	r24, Z+12	; 0x0c
    1070:	88 23       	and	r24, r24
    1072:	0c f0       	brlt	.+2      	; 0x1076 <ultraSensorTask+0xa0>
    1074:	bd c0       	rjmp	.+378    	; 0x11f0 <ultraSensorTask+0x21a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
    1076:	84 85       	ldd	r24, Z+12	; 0x0c
    1078:	8f 77       	andi	r24, 0x7F	; 127
    107a:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
    107c:	e8 81       	ld	r30, Y
    107e:	f9 81       	ldd	r31, Y+1	; 0x01
    1080:	80 85       	ldd	r24, Z+8	; 0x08
    1082:	91 85       	ldd	r25, Z+9	; 0x09
    1084:	a2 85       	ldd	r26, Z+10	; 0x0a
    1086:	b3 85       	ldd	r27, Z+11	; 0x0b
    1088:	8f 3b       	cpi	r24, 0xBF	; 191
    108a:	91 05       	cpc	r25, r1
    108c:	a1 05       	cpc	r26, r1
    108e:	b1 05       	cpc	r27, r1
    1090:	b0 f0       	brcs	.+44     	; 0x10be <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
    1098:	98 2f       	mov	r25, r24
    109a:	92 95       	swap	r25
    109c:	9f 70       	andi	r25, 0x0F	; 15
    109e:	92 30       	cpi	r25, 0x02	; 2
    10a0:	51 f4       	brne	.+20     	; 0x10b6 <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
    10a2:	8f 70       	andi	r24, 0x0F	; 15
    10a4:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
    10a6:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    10aa:	88 23       	and	r24, r24
    10ac:	24 f4       	brge	.+8      	; 0x10b6 <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
    10ae:	8a e5       	ldi	r24, 0x5A	; 90
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	8f 70       	andi	r24, 0x0F	; 15
    10ba:	8c 83       	std	Y+4, r24	; 0x04
    10bc:	8d c0       	rjmp	.+282    	; 0x11d8 <ultraSensorTask+0x202>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	98 2f       	mov	r25, r24
    10c2:	92 95       	swap	r25
    10c4:	9f 70       	andi	r25, 0x0F	; 15
    10c6:	09 f0       	breq	.+2      	; 0x10ca <ultraSensorTask+0xf4>
    10c8:	87 c0       	rjmp	.+270    	; 0x11d8 <ultraSensorTask+0x202>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
    10ca:	8f 70       	andi	r24, 0x0F	; 15
    10cc:	80 61       	ori	r24, 0x10	; 16
    10ce:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
    10d0:	80 85       	ldd	r24, Z+8	; 0x08
    10d2:	91 85       	ldd	r25, Z+9	; 0x09
    10d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    10d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    10d8:	b8 01       	movw	r22, r16
    10da:	0e 94 59 07 	call	0xeb2	; 0xeb2 <classify_box>
    10de:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	f8 16       	cp	r15, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <ultraSensorTask+0x112>
    10e6:	74 c0       	rjmp	.+232    	; 0x11d0 <ultraSensorTask+0x1fa>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
    10e8:	e8 81       	ld	r30, Y
    10ea:	f9 81       	ldd	r31, Y+1	; 0x01
    10ec:	80 85       	ldd	r24, Z+8	; 0x08
    10ee:	91 85       	ldd	r25, Z+9	; 0x09
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	fe 16       	cp	r15, r30
    10f8:	49 f0       	breq	.+18     	; 0x110c <ultraSensorTask+0x136>
    10fa:	fe 16       	cp	r15, r30
    10fc:	28 f1       	brcs	.+74     	; 0x1148 <ultraSensorTask+0x172>
    10fe:	f2 e0       	ldi	r31, 0x02	; 2
    1100:	ff 16       	cp	r15, r31
    1102:	71 f0       	breq	.+28     	; 0x1120 <ultraSensorTask+0x14a>
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	f8 16       	cp	r15, r24
    1108:	a9 f0       	breq	.+42     	; 0x1134 <ultraSensorTask+0x15e>
    110a:	23 c0       	rjmp	.+70     	; 0x1152 <ultraSensorTask+0x17c>
					{
						case BOX_SIZE_A: 
							printf("BOX_SIZE_A\n");
    110c:	83 e7       	ldi	r24, 0x73	; 115
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
							SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
    1114:	ec e0       	ldi	r30, 0x0C	; 12
    1116:	f7 e0       	ldi	r31, 0x07	; 7
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	82 83       	std	Z+2, r24	; 0x02
							break;
    111e:	1d c0       	rjmp	.+58     	; 0x115a <ultraSensorTask+0x184>
						case BOX_SIZE_B: 
							printf("BOX_SIZE_B\n");
    1120:	8e e7       	ldi	r24, 0x7E	; 126
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
							SET_FLAG(salidaB.flags, OUTPUT_BUSY);
    1128:	ef ea       	ldi	r30, 0xAF	; 175
    112a:	f7 e0       	ldi	r31, 0x07	; 7
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	82 83       	std	Z+2, r24	; 0x02
							break;
    1132:	13 c0       	rjmp	.+38     	; 0x115a <ultraSensorTask+0x184>
						case BOX_SIZE_C:
							printf("BOX_SIZE_C\n");
    1134:	89 e8       	ldi	r24, 0x89	; 137
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
							SET_FLAG(salidaC.flags, OUTPUT_BUSY);
    113c:	e8 e6       	ldi	r30, 0x68	; 104
    113e:	f7 e0       	ldi	r31, 0x07	; 7
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	82 83       	std	Z+2, r24	; 0x02
							break;
    1146:	09 c0       	rjmp	.+18     	; 0x115a <ultraSensorTask+0x184>
						case BOX_DISCARDED:
							printf("BOX_DISCARDED\n");
    1148:	84 e9       	ldi	r24, 0x94	; 148
    114a:	93 e0       	ldi	r25, 0x03	; 3
    114c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
							break;
    1150:	04 c0       	rjmp	.+8      	; 0x115a <ultraSensorTask+0x184>
						default: 
							printf("Tipo no reconocido\n");
    1152:	82 ea       	ldi	r24, 0xA2	; 162
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
							break;
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
    115a:	f1 10       	cpse	r15, r1
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <ultraSensorTask+0x1a2>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
    115e:	f8 01       	movw	r30, r16
    1160:	80 89       	ldd	r24, Z+16	; 0x10
    1162:	91 89       	ldd	r25, Z+17	; 0x11
    1164:	a2 89       	ldd	r26, Z+18	; 0x12
    1166:	b3 89       	ldd	r27, Z+19	; 0x13
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	a1 1d       	adc	r26, r1
    116c:	b1 1d       	adc	r27, r1
    116e:	80 8b       	std	Z+16, r24	; 0x10
    1170:	91 8b       	std	Z+17, r25	; 0x11
    1172:	a2 8b       	std	Z+18, r26	; 0x12
    1174:	b3 8b       	std	Z+19, r27	; 0x13
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <ultraSensorTask+0x1ba>
					}
					else
					{
						sorter->stats.total_selected++;
    1178:	f8 01       	movw	r30, r16
    117a:	84 85       	ldd	r24, Z+12	; 0x0c
    117c:	95 85       	ldd	r25, Z+13	; 0x0d
    117e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1180:	b7 85       	ldd	r27, Z+15	; 0x0f
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	a1 1d       	adc	r26, r1
    1186:	b1 1d       	adc	r27, r1
    1188:	84 87       	std	Z+12, r24	; 0x0c
    118a:	95 87       	std	Z+13, r25	; 0x0d
    118c:	a6 87       	std	Z+14, r26	; 0x0e
    118e:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
    1190:	f8 01       	movw	r30, r16
    1192:	80 85       	ldd	r24, Z+8	; 0x08
    1194:	91 85       	ldd	r25, Z+9	; 0x09
    1196:	a2 85       	ldd	r26, Z+10	; 0x0a
    1198:	b3 85       	ldd	r27, Z+11	; 0x0b
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	a1 1d       	adc	r26, r1
    119e:	b1 1d       	adc	r27, r1
    11a0:	80 87       	std	Z+8, r24	; 0x08
    11a2:	91 87       	std	Z+9, r25	; 0x09
    11a4:	a2 87       	std	Z+10, r26	; 0x0a
    11a6:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
    11a8:	ef 2d       	mov	r30, r15
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	35 96       	adiw	r30, 0x05	; 5
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	e0 0f       	add	r30, r16
    11b8:	f1 1f       	adc	r31, r17
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	a2 81       	ldd	r26, Z+2	; 0x02
    11c0:	b3 81       	ldd	r27, Z+3	; 0x03
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	a1 1d       	adc	r26, r1
    11c6:	b1 1d       	adc	r27, r1
    11c8:	80 83       	st	Z, r24
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	a2 83       	std	Z+2, r26	; 0x02
    11ce:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	8f 70       	andi	r24, 0x0F	; 15
    11d4:	80 62       	ori	r24, 0x20	; 32
    11d6:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
    11d8:	88 81       	ld	r24, Y
    11da:	99 81       	ldd	r25, Y+1	; 0x01
    11dc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
    11e0:	e8 81       	ld	r30, Y
    11e2:	f9 81       	ldd	r31, Y+1	; 0x01
    11e4:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
    11e6:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
    11f0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    11f4:	80 ff       	sbrs	r24, 0
    11f6:	2d c0       	rjmp	.+90     	; 0x1252 <ultraSensorTask+0x27c>
	{
		if (DEBUG_FLAGS)
    11f8:	86 ff       	sbrs	r24, 6
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <ultraSensorTask+0x22e>
		{
			printf("HCSR04 perdio ECHO\n");
    11fc:	85 eb       	ldi	r24, 0xB5	; 181
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}
		VEINTEMS_PASSED = 0;
    1204:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
		WAITING_ECHO = 0;
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
    1210:	e8 81       	ld	r30, Y
    1212:	f9 81       	ldd	r31, Y+1	; 0x01
    1214:	84 85       	ldd	r24, Z+12	; 0x0c
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
    121a:	e8 81       	ld	r30, Y
    121c:	f9 81       	ldd	r31, Y+1	; 0x01
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
    1222:	60 91 47 07 	lds	r22, 0x0747	; 0x800747 <bandera2>
    1226:	66 fb       	bst	r22, 6
    1228:	66 27       	eor	r22, r22
    122a:	60 f9       	bld	r22, 0
    122c:	88 81       	ld	r24, Y
    122e:	99 81       	ldd	r25, Y+1	; 0x01
    1230:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ultrasonic_timeout_clear>
    1234:	88 23       	and	r24, r24
    1236:	41 f0       	breq	.+16     	; 0x1248 <ultraSensorTask+0x272>
    1238:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <bandera2>
    123c:	86 ff       	sbrs	r24, 6
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <ultraSensorTask+0x272>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
    1240:	88 ec       	ldi	r24, 0xC8	; 200
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}

		ULTRASONIC_ENABLE = 1;
    1248:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <bandera>
    124c:	80 68       	ori	r24, 0x80	; 128
    124e:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <bandera>
	}
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	08 95       	ret

0000125e <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
    125e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
    1262:	80 ff       	sbrs	r24, 0
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <irSensorsTask+0x1a>
    1266:	83 ff       	sbrs	r24, 3
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <IR_A>
		tcrt_read(&IR_A);
    1270:	8e e4       	ldi	r24, 0x4E	; 78
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	0e 94 19 0c 	call	0x1832	; 0x1832 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
    1278:	8e e4       	ldi	r24, 0x4E	; 78
    127a:	97 e0       	ldi	r25, 0x07	; 7
    127c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <tcrt_is_box_detected>
    1280:	89 2b       	or	r24, r25
    1282:	11 f1       	breq	.+68     	; 0x12c8 <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1284:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <IR_A>
    1288:	82 95       	swap	r24
    128a:	8f 70       	andi	r24, 0x0F	; 15
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	e1 f4       	brne	.+56     	; 0x12c8 <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
    1290:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <salidaA+0x2>
    1294:	83 ff       	sbrs	r24, 3
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <irSensorsTask+0x58>
    1298:	80 ff       	sbrs	r24, 0
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
    12a2:	e6 e0       	ldi	r30, 0x06	; 6
    12a4:	f7 e0       	ldi	r31, 0x07	; 7
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
    12ac:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
    12ae:	8a ee       	ldi	r24, 0xEA	; 234
    12b0:	93 e0       	ldi	r25, 0x03	; 3
    12b2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
    12b6:	ee e4       	ldi	r30, 0x4E	; 78
    12b8:	f7 e0       	ldi	r31, 0x07	; 7
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 70       	andi	r24, 0x0F	; 15
    12be:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
    12c0:	8f e0       	ldi	r24, 0x0F	; 15
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    12c8:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
    12cc:	80 ff       	sbrs	r24, 0
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <irSensorsTask+0x84>
    12d0:	83 ff       	sbrs	r24, 3
    12d2:	07 c0       	rjmp	.+14     	; 0x12e2 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
    12d4:	87 7f       	andi	r24, 0xF7	; 247
    12d6:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <IR_B>
		tcrt_read(&IR_B);
    12da:	87 ef       	ldi	r24, 0xF7	; 247
    12dc:	96 e0       	ldi	r25, 0x06	; 6
    12de:	0e 94 19 0c 	call	0x1832	; 0x1832 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
    12e2:	87 ef       	ldi	r24, 0xF7	; 247
    12e4:	96 e0       	ldi	r25, 0x06	; 6
    12e6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <tcrt_is_box_detected>
    12ea:	89 2b       	or	r24, r25
    12ec:	11 f1       	breq	.+68     	; 0x1332 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    12ee:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <IR_B>
    12f2:	82 95       	swap	r24
    12f4:	8f 70       	andi	r24, 0x0F	; 15
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	e1 f4       	brne	.+56     	; 0x1332 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
    12fa:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <salidaB+0x2>
    12fe:	83 ff       	sbrs	r24, 3
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <irSensorsTask+0xc2>
    1302:	80 ff       	sbrs	r24, 0
    1304:	0d c0       	rjmp	.+26     	; 0x1320 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
    130c:	ec e7       	ldi	r30, 0x7C	; 124
    130e:	f7 e0       	ldi	r31, 0x07	; 7
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
    1316:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
    1318:	8f e1       	ldi	r24, 0x1F	; 31
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    1320:	e7 ef       	ldi	r30, 0xF7	; 247
    1322:	f6 e0       	ldi	r31, 0x06	; 6
    1324:	80 81       	ld	r24, Z
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    132a:	84 e4       	ldi	r24, 0x44	; 68
    132c:	94 e0       	ldi	r25, 0x04	; 4
    132e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    1332:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
    1336:	80 ff       	sbrs	r24, 0
    1338:	09 c0       	rjmp	.+18     	; 0x134c <irSensorsTask+0xee>
    133a:	83 ff       	sbrs	r24, 3
    133c:	07 c0       	rjmp	.+14     	; 0x134c <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <IR_C>
		tcrt_read(&IR_C);
    1344:	8f e1       	ldi	r24, 0x1F	; 31
    1346:	97 e0       	ldi	r25, 0x07	; 7
    1348:	0e 94 19 0c 	call	0x1832	; 0x1832 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    134c:	8f e1       	ldi	r24, 0x1F	; 31
    134e:	97 e0       	ldi	r25, 0x07	; 7
    1350:	0e 94 4a 0c 	call	0x1894	; 0x1894 <tcrt_is_box_detected>
    1354:	89 2b       	or	r24, r25
    1356:	11 f1       	breq	.+68     	; 0x139c <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1358:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <IR_C>
    135c:	82 95       	swap	r24
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	e1 f4       	brne	.+56     	; 0x139c <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    1364:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <salidaC+0x2>
    1368:	83 ff       	sbrs	r24, 3
    136a:	0f c0       	rjmp	.+30     	; 0x138a <irSensorsTask+0x12c>
    136c:	80 ff       	sbrs	r24, 0
    136e:	0d c0       	rjmp	.+26     	; 0x138a <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    1370:	87 7f       	andi	r24, 0xF7	; 247
    1372:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    1376:	e8 e4       	ldi	r30, 0x48	; 72
    1378:	f7 e0       	ldi	r31, 0x07	; 7
    137a:	81 81       	ldd	r24, Z+1	; 0x01
    137c:	82 60       	ori	r24, 0x02	; 2
    137e:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1380:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1382:	84 e5       	ldi	r24, 0x54	; 84
    1384:	94 e0       	ldi	r25, 0x04	; 4
    1386:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    138a:	ef e1       	ldi	r30, 0x1F	; 31
    138c:	f7 e0       	ldi	r31, 0x07	; 7
    138e:	80 81       	ld	r24, Z
    1390:	8f 70       	andi	r24, 0x0F	; 15
    1392:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1394:	89 e7       	ldi	r24, 0x79	; 121
    1396:	94 e0       	ldi	r25, 0x04	; 4
    1398:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    139c:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_U>
    13a0:	80 ff       	sbrs	r24, 0
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <irSensorsTask+0x158>
    13a4:	83 ff       	sbrs	r24, 3
    13a6:	07 c0       	rjmp	.+14     	; 0x13b6 <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    13a8:	87 7f       	andi	r24, 0xF7	; 247
    13aa:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <IR_U>
		tcrt_read(&IR_U);
    13ae:	8f e0       	ldi	r24, 0x0F	; 15
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	0e 94 19 0c 	call	0x1832	; 0x1832 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    13b6:	8f e0       	ldi	r24, 0x0F	; 15
    13b8:	97 e0       	ldi	r25, 0x07	; 7
    13ba:	0e 94 4a 0c 	call	0x1894	; 0x1894 <tcrt_is_box_detected>
    13be:	89 2b       	or	r24, r25
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <irSensorsTask+0x19c>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13c2:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <IR_U>
    13c6:	89 2f       	mov	r24, r25
    13c8:	82 95       	swap	r24
    13ca:	8f 70       	andi	r24, 0x0F	; 15
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <irSensorsTask+0x182>
    13d0:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <hcsr04Detector+0x4>
    13d4:	21 fd       	sbrc	r18, 1
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <irSensorsTask+0x182>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    13d8:	22 60       	ori	r18, 0x02	; 2
    13da:	20 93 61 07 	sts	0x0761, r18	; 0x800761 <hcsr04Detector+0x4>
    13de:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	b9 f4       	brne	.+46     	; 0x1412 <irSensorsTask+0x1b4>
    13e4:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <hcsr04Detector+0x4>
    13e8:	81 ff       	sbrs	r24, 1
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <irSensorsTask+0x1b4>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			//printf("IR U detecto: la caja salió\n");
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    13ec:	8d 7f       	andi	r24, 0xFD	; 253
    13ee:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <hcsr04Detector+0x4>
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    13f2:	9f 70       	andi	r25, 0x0F	; 15
    13f4:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <IR_U>
    13f8:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13fa:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <hcsr04Detector+0x4>
    13fe:	81 ff       	sbrs	r24, 1
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <irSensorsTask+0x1b4>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    1408:	ef e0       	ldi	r30, 0x0F	; 15
    140a:	f7 e0       	ldi	r31, 0x07	; 7
    140c:	80 81       	ld	r24, Z
    140e:	8f 70       	andi	r24, 0x0F	; 15
    1410:	80 83       	st	Z, r24
    1412:	08 95       	ret

00001414 <servosTask>:
				//printf("IR U Idle again\n");
			}
	}
}

void servosTask() {
    1414:	08 95       	ret

00001416 <verify_header>:
}

bool verify_header() {
	// Verificar si hay al menos 4 bytes disponibles
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    1416:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <protocolService+0x1>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	fc 01       	movw	r30, r24
    141e:	ee 57       	subi	r30, 0x7E	; 126
    1420:	f8 4f       	sbci	r31, 0xF8	; 248
    1422:	42 81       	ldd	r20, Z+2	; 0x02
    1424:	45 35       	cpi	r20, 0x55	; 85
    1426:	09 f0       	breq	.+2      	; 0x142a <verify_header+0x14>
    1428:	4b c0       	rjmp	.+150    	; 0x14c0 <verify_header+0xaa>
		return false; // No es un header candidato.
	}

	// Calcular los índices para los 4 bytes del header, considerando el buffer circular.
	uint8_t idx0 = protocolService.indexR;
	uint8_t idx1 = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    142a:	9c 01       	movw	r18, r24
    142c:	2f 5f       	subi	r18, 0xFF	; 255
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	2f 71       	andi	r18, 0x1F	; 31
    1432:	30 78       	andi	r19, 0x80	; 128
    1434:	33 23       	and	r19, r19
    1436:	34 f4       	brge	.+12     	; 0x1444 <verify_header+0x2e>
    1438:	21 50       	subi	r18, 0x01	; 1
    143a:	31 09       	sbc	r19, r1
    143c:	20 6e       	ori	r18, 0xE0	; 224
    143e:	3f 6f       	ori	r19, 0xFF	; 255
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	f9 01       	movw	r30, r18
	uint8_t idx2 = (protocolService.indexR + 2) % PROTOCOL_BUFFER_SIZE;
    1446:	9c 01       	movw	r18, r24
    1448:	2e 5f       	subi	r18, 0xFE	; 254
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	2f 71       	andi	r18, 0x1F	; 31
    144e:	30 78       	andi	r19, 0x80	; 128
    1450:	33 23       	and	r19, r19
    1452:	34 f4       	brge	.+12     	; 0x1460 <verify_header+0x4a>
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	31 09       	sbc	r19, r1
    1458:	20 6e       	ori	r18, 0xE0	; 224
    145a:	3f 6f       	ori	r19, 0xFF	; 255
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t idx3 = (protocolService.indexR + 3) % PROTOCOL_BUFFER_SIZE;
    1460:	03 96       	adiw	r24, 0x03	; 3
    1462:	8f 71       	andi	r24, 0x1F	; 31
    1464:	90 78       	andi	r25, 0x80	; 128
    1466:	99 23       	and	r25, r25
    1468:	24 f4       	brge	.+8      	; 0x1472 <verify_header+0x5c>
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	80 6e       	ori	r24, 0xE0	; 224
    146e:	9f 6f       	ori	r25, 0xFF	; 255
    1470:	01 96       	adiw	r24, 0x01	; 1

	// Calcular la suma ponderada de los 4 bytes usando pesos: 4, 3, 2, 1
	uint16_t sum = 0;
	sum += (uint16_t)protocolService.buffer[idx0] * 4;  // 'U'
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	44 0f       	add	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
	sum += (uint16_t)protocolService.buffer[idx1] * 3;  // 'N'
    147c:	ff 27       	eor	r31, r31
    147e:	ee 57       	subi	r30, 0x7E	; 126
    1480:	f8 4f       	sbci	r31, 0xF8	; 248
    1482:	62 81       	ldd	r22, Z+2	; 0x02
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	fb 01       	movw	r30, r22
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	6e 0f       	add	r22, r30
    148e:	7f 1f       	adc	r23, r31
    1490:	46 0f       	add	r20, r22
    1492:	57 1f       	adc	r21, r23
	sum += (uint16_t)protocolService.buffer[idx2] * 2;  // 'E'
    1494:	33 27       	eor	r19, r19
    1496:	f9 01       	movw	r30, r18
    1498:	ee 57       	subi	r30, 0x7E	; 126
    149a:	f8 4f       	sbci	r31, 0xF8	; 248
    149c:	22 81       	ldd	r18, Z+2	; 0x02
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	42 0f       	add	r20, r18
    14a6:	53 1f       	adc	r21, r19
	sum += (uint16_t)protocolService.buffer[idx3] * 1;  // 'R'
    14a8:	fc 01       	movw	r30, r24
    14aa:	ff 27       	eor	r31, r31
    14ac:	ee 57       	subi	r30, 0x7E	; 126
    14ae:	f8 4f       	sbci	r31, 0xF8	; 248
    14b0:	22 81       	ldd	r18, Z+2	; 0x02
	
	// Reducir a 8 bits: tomar los 8 bits menos significativos
	uint8_t computed = (uint8_t)(sum & 0xFF);
    14b2:	42 0f       	add	r20, r18

	// Comparar con el valor esperado
	if (computed == EXPECTED_HEADER_SUM) {
    14b4:	4a 31       	cpi	r20, 0x1A	; 26
    14b6:	31 f4       	brne	.+12     	; 0x14c4 <verify_header+0xae>
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
    14b8:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <protocolService+0x1>
		return true;  // La cabecera es válida.
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	08 95       	ret
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
		return false; // No es un header candidato.
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret
	if (computed == EXPECTED_HEADER_SUM) {
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
		return true;  // La cabecera es válida.
	} else {
		// No coincide; descartar este header.
		return false;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    14c6:	08 95       	ret

000014c8 <process_protocol_buffer>:

bool process_protocol_buffer() {
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    14c8:	e2 e8       	ldi	r30, 0x82	; 130
    14ca:	f7 e0       	ldi	r31, 0x07	; 7
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	89 17       	cp	r24, r25
    14d2:	10 f0       	brcs	.+4      	; 0x14d8 <process_protocol_buffer+0x10>
		available = protocolService.indexW - protocolService.indexR;
    14d4:	89 1b       	sub	r24, r25
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <process_protocol_buffer+0x14>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    14d8:	89 1b       	sub	r24, r25
    14da:	80 5e       	subi	r24, 0xE0	; 224
	}

	if (available < PROTOCOL_MIN_BYTE_COUNT) {
    14dc:	86 30       	cpi	r24, 0x06	; 6
    14de:	78 f4       	brcc	.+30     	; 0x14fe <process_protocol_buffer+0x36>
		printf("Menos de %u bytes en buffer\n", PROTOCOL_MIN_BYTE_COUNT);
    14e0:	1f 92       	push	r1
    14e2:	86 e0       	ldi	r24, 0x06	; 6
    14e4:	8f 93       	push	r24
    14e6:	89 e8       	ldi	r24, 0x89	; 137
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	9f 93       	push	r25
    14ec:	8f 93       	push	r24
    14ee:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
		return false;
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	08 95       	ret
	}
	
	if (verify_header()) {
    14fe:	0e 94 0b 0a 	call	0x1416	; 0x1416 <verify_header>
		// Se continúa procesando el paquete...
		return true;
		} else {
		return false;
	}
}
    1502:	08 95       	ret

00001504 <getResponseCommand>:

Command getResponseCommand(Command req) {
	for (size_t i = 0; i < NUM_COMMANDS; i++) {
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	11 c0       	rjmp	.+34     	; 0x152c <getResponseCommand+0x28>
		if (commandMap[i].request == req) {
    150a:	f9 01       	movw	r30, r18
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	e3 5c       	subi	r30, 0xC3	; 195
    1512:	fa 4f       	sbci	r31, 0xFA	; 250
    1514:	90 81       	ld	r25, Z
    1516:	98 13       	cpse	r25, r24
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <getResponseCommand+0x24>
			return commandMap[i].response;
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	f9 01       	movw	r30, r18
    1520:	e3 5c       	subi	r30, 0xC3	; 195
    1522:	fa 4f       	sbci	r31, 0xFA	; 250
    1524:	81 81       	ldd	r24, Z+1	; 0x01
    1526:	08 95       	ret
		return false;
	}
}

Command getResponseCommand(Command req) {
	for (size_t i = 0; i < NUM_COMMANDS; i++) {
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	25 30       	cpi	r18, 0x05	; 5
    152e:	31 05       	cpc	r19, r1
    1530:	60 f3       	brcs	.-40     	; 0x150a <getResponseCommand+0x6>
		if (commandMap[i].request == req) {
			return commandMap[i].response;
		}
	}
	// En caso de no encontrar coincidencia, se retorna CMD_ALIVE como valor por defecto
	return CMD_ALIVE;
    1532:	80 ea       	ldi	r24, 0xA0	; 160
}
    1534:	08 95       	ret

00001536 <clear_receive_pck>:

void clear_receive_pck(){
	protocolService.receivePck.checksum = 0;
    1536:	e2 e8       	ldi	r30, 0x82	; 130
    1538:	f7 e0       	ldi	r31, 0x07	; 7
    153a:	14 a6       	std	Z+44, r1	; 0x2c
	protocolService.receivePck.cmd = 0;
    153c:	11 a6       	std	Z+41, r1	; 0x29
	protocolService.receivePck.length = 0;
    153e:	17 a2       	std	Z+39, r1	; 0x27
	protocolService.receivePck.token = 0;
    1540:	10 a6       	std	Z+40, r1	; 0x28
	protocolService.receivePck.payload[0] = NULL;
    1542:	a2 a5       	ldd	r26, Z+42	; 0x2a
    1544:	b3 a5       	ldd	r27, Z+43	; 0x2b
    1546:	1c 92       	st	X, r1
	protocolService.receivePck.header[0] = NULL;
    1548:	13 a2       	std	Z+35, r1	; 0x23
	printf("Paquete RCV cleared \n");
    154a:	86 ea       	ldi	r24, 0xA6	; 166
    154c:	94 e0       	ldi	r25, 0x04	; 4
    154e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    1552:	08 95       	ret

00001554 <initProtocolService>:
 */ 
#include "../../main.h"
#include "protocol_utils.h"
#include "../usart/usart_utils.h"

void initProtocolService(ProtocolService* service){
    1554:	fc 01       	movw	r30, r24
	service->buffer[0] = NULL;
    1556:	12 82       	std	Z+2, r1	; 0x02
	service->indexR = 0;
    1558:	11 82       	std	Z+1, r1	; 0x01
	service->indexW = 0;
    155a:	10 82       	st	Z, r1
	service->flags.byte = 0;
    155c:	12 a2       	std	Z+34, r1	; 0x22
	clear_receive_pck();
    155e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <clear_receive_pck>
	printf("Init protocol service\n");
    1562:	8b eb       	ldi	r24, 0xBB	; 187
    1564:	94 e0       	ldi	r25, 0x04	; 4
    1566:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    156a:	08 95       	ret

0000156c <calculatePayload>:
	protocolService.receivePck.payload[0] = NULL;
	protocolService.receivePck.header[0] = NULL;
	printf("Paquete RCV cleared \n");
}

uint8_t calculatePayload() {
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
	checksum ^= 'N';  // XOR de 'N'
	checksum ^= 'E';  // XOR de 'E'
	checksum ^= 'R';  // XOR de 'R'
	
	// Sumar el byte de LENGTH
	checksum ^= protocolService.receivePck.length;
    1574:	e2 e8       	ldi	r30, 0x82	; 130
    1576:	f7 e0       	ldi	r31, 0x07	; 7
    1578:	07 a1       	ldd	r16, Z+39	; 0x27
	
	// Sumar el byte de TOKEN (usamos el valor de PROTOCOL_TOKEN)
	checksum ^= PROTOCOL_TOKEN;
    157a:	86 e3       	ldi	r24, 0x36	; 54
    157c:	08 27       	eor	r16, r24
	
	// Sumar el byte de CMD
	checksum ^= protocolService.receivePck.cmd;
    157e:	81 a5       	ldd	r24, Z+41	; 0x29
    1580:	08 27       	eor	r16, r24
	
	// Imprimir los valores del payload
	printf("Payload en Hex:\n");
    1582:	81 ed       	ldi	r24, 0xD1	; 209
    1584:	94 e0       	ldi	r25, 0x04	; 4
    1586:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    158a:	c0 e0       	ldi	r28, 0x00	; 0
    158c:	d0 e0       	ldi	r29, 0x00	; 0
    158e:	1d c0       	rjmp	.+58     	; 0x15ca <calculatePayload+0x5e>
		uint8_t payload_byte = *(protocolService.receivePck.payload + i);
    1590:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <protocolService+0x2a>
    1594:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <protocolService+0x2b>
    1598:	ec 0f       	add	r30, r28
    159a:	fd 1f       	adc	r31, r29
    159c:	10 81       	ld	r17, Z
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
    159e:	1f 92       	push	r1
    15a0:	1f 93       	push	r17
    15a2:	1f 92       	push	r1
    15a4:	1f 93       	push	r17
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	81 ee       	ldi	r24, 0xE1	; 225
    15ac:	94 e0       	ldi	r25, 0x04	; 4
    15ae:	9f 93       	push	r25
    15b0:	8f 93       	push	r24
    15b2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
		checksum ^= payload_byte;  // XOR de cada byte del payload
    15b6:	01 27       	eor	r16, r17
	checksum ^= protocolService.receivePck.cmd;
	
	// Imprimir los valores del payload
	printf("Payload en Hex:\n");
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    15b8:	21 96       	adiw	r28, 0x01	; 1
    15ba:	8d b7       	in	r24, 0x3d	; 61
    15bc:	9e b7       	in	r25, 0x3e	; 62
    15be:	08 96       	adiw	r24, 0x08	; 8
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	9e bf       	out	0x3e, r25	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	8d bf       	out	0x3d, r24	; 61
    15ca:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <protocolService+0x27>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	c8 17       	cp	r28, r24
    15d2:	d9 07       	cpc	r29, r25
    15d4:	ec f2       	brlt	.-70     	; 0x1590 <calculatePayload+0x24>
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
		checksum ^= payload_byte;  // XOR de cada byte del payload
	}
	
	// Imprimir el checksum calculado en hexadecimal
	printf("CHECKSUM CALC %02X\n", checksum);
    15d6:	1f 92       	push	r1
    15d8:	0f 93       	push	r16
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	95 e0       	ldi	r25, 0x05	; 5
    15de:	9f 93       	push	r25
    15e0:	8f 93       	push	r24
    15e2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
	
	// Imprimir el checksum esperado
	printf("CHECKSUM ESPERADO: %02X\n", protocolService.receivePck.checksum);
    15e6:	c2 e8       	ldi	r28, 0x82	; 130
    15e8:	d7 e0       	ldi	r29, 0x07	; 7
    15ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    15ec:	1f 92       	push	r1
    15ee:	8f 93       	push	r24
    15f0:	84 e1       	ldi	r24, 0x14	; 20
    15f2:	95 e0       	ldi	r25, 0x05	; 5
    15f4:	9f 93       	push	r25
    15f6:	8f 93       	push	r24
    15f8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
	
	// Comparar el checksum calculado con el esperado
	if (checksum == protocolService.receivePck.checksum) {
    15fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    15fe:	2d b7       	in	r18, 0x3d	; 61
    1600:	3e b7       	in	r19, 0x3e	; 62
    1602:	28 5f       	subi	r18, 0xF8	; 248
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	3e bf       	out	0x3e, r19	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	2d bf       	out	0x3d, r18	; 61
    1610:	08 13       	cpse	r16, r24
    1612:	05 c0       	rjmp	.+10     	; 0x161e <calculatePayload+0xb2>
		printf("Cks valido\n");
    1614:	87 ef       	ldi	r24, 0xF7	; 247
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <calculatePayload+0xba>
		} else {
		printf("Cks invalido\n");
    161e:	8a ee       	ldi	r24, 0xEA	; 234
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
	}
	
	// Devuelve el checksum calculado
	return checksum;
}
    1626:	80 2f       	mov	r24, r16
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <createPck>:

void createPck(uint8_t cmd, uint8_t* payload, uint8_t payloadLength) {
	// Fill the header with 'UNER'
	protocolService.receivePck.header[0] = 'U';
    1632:	e2 e8       	ldi	r30, 0x82	; 130
    1634:	f7 e0       	ldi	r31, 0x07	; 7
    1636:	95 e5       	ldi	r25, 0x55	; 85
    1638:	93 a3       	std	Z+35, r25	; 0x23
	protocolService.receivePck.header[1] = 'N';
    163a:	9e e4       	ldi	r25, 0x4E	; 78
    163c:	94 a3       	std	Z+36, r25	; 0x24
	protocolService.receivePck.header[2] = 'E';
    163e:	95 e4       	ldi	r25, 0x45	; 69
    1640:	95 a3       	std	Z+37, r25	; 0x25
	protocolService.receivePck.header[3] = 'R';
    1642:	92 e5       	ldi	r25, 0x52	; 82
    1644:	96 a3       	std	Z+38, r25	; 0x26
	
	// Set the length field to the payload length
	protocolService.receivePck.length = payloadLength;
    1646:	47 a3       	std	Z+39, r20	; 0x27
	
	// Set the token
	protocolService.receivePck.token = PROTOCOL_TOKEN; // Assuming PROTOCOL_TOKEN is defined as 0x3A
    1648:	9a e3       	ldi	r25, 0x3A	; 58
    164a:	90 a7       	std	Z+40, r25	; 0x28
	
	// Set the command
	protocolService.receivePck.cmd = cmd;
    164c:	81 a7       	std	Z+41, r24	; 0x29
	checksum ^= protocolService.receivePck.header[1]; // 'N'
	checksum ^= protocolService.receivePck.header[2]; // 'E'
	checksum ^= protocolService.receivePck.header[3]; // 'R'
	
	// XOR with length
	checksum ^= protocolService.receivePck.length;
    164e:	2c e0       	ldi	r18, 0x0C	; 12
    1650:	24 27       	eor	r18, r20
	
	// XOR with token
	checksum ^= protocolService.receivePck.token;
    1652:	92 27       	eor	r25, r18
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
    1654:	89 27       	eor	r24, r25
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	0a c0       	rjmp	.+20     	; 0x1670 <createPck+0x3e>
		checksum ^= *(protocolService.receivePck.payload + i);
    165c:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <protocolService+0x2a>
    1660:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <protocolService+0x2b>
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	90 81       	ld	r25, Z
    166a:	89 27       	eor	r24, r25
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	64 2f       	mov	r22, r20
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	26 17       	cp	r18, r22
    1676:	37 07       	cpc	r19, r23
    1678:	8c f3       	brlt	.-30     	; 0x165c <createPck+0x2a>
		checksum ^= *(protocolService.receivePck.payload + i);
	}
	
	// Set the checksum field
	protocolService.receivePck.checksum = checksum;
    167a:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <protocolService+0x2c>
	printf("Paquete creado \n");
    167e:	8d e2       	ldi	r24, 0x2D	; 45
    1680:	95 e0       	ldi	r25, 0x05	; 5
    1682:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    1686:	08 95       	ret

00001688 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    1688:	85 3b       	cpi	r24, 0xB5	; 181
    168a:	08 f0       	brcs	.+2      	; 0x168e <calculate_angle_pulseUs+0x6>
    168c:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	a0 ed       	ldi	r26, 0xD0	; 208
    1694:	b7 e0       	ldi	r27, 0x07	; 7
    1696:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__umulhisi3>
    169a:	24 eb       	ldi	r18, 0xB4	; 180
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__udivmodsi4>
}
    16a6:	c9 01       	movw	r24, r18
    16a8:	80 53       	subi	r24, 0x30	; 48
    16aa:	98 4f       	sbci	r25, 0xF8	; 248
    16ac:	08 95       	ret

000016ae <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	04 2f       	mov	r16, r20
    16ba:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    16bc:	1f 92       	push	r1
    16be:	6f 93       	push	r22
    16c0:	87 e4       	ldi	r24, 0x47	; 71
    16c2:	95 e0       	ldi	r25, 0x05	; 5
    16c4:	9f 93       	push	r25
    16c6:	8f 93       	push	r24
    16c8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
	servo->flags.byte = 0;
    16cc:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    16ce:	81 2f       	mov	r24, r17
    16d0:	0e 94 44 0b 	call	0x1688	; 0x1688 <calculate_angle_pulseUs>
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    16d8:	08 83       	st	Y, r16
	servo->angle = startAngle;
    16da:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    16dc:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    16f6:	87 b1       	in	r24, 0x07	; 7
    16f8:	80 7f       	andi	r24, 0xF0	; 240
    16fa:	87 b9       	out	0x07, r24	; 7
    16fc:	88 b1       	in	r24, 0x08	; 8
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	88 b9       	out	0x08, r24	; 8
    1702:	80 e4       	ldi	r24, 0x40	; 64
    1704:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1708:	86 e8       	ldi	r24, 0x86	; 134
    170a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    170e:	08 95       	ret

00001710 <tcrt_read_channel>:
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	a0 f4       	brcc	.+40     	; 0x173c <tcrt_read_channel+0x2c>
    1714:	ec e7       	ldi	r30, 0x7C	; 124
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	90 81       	ld	r25, Z
    171a:	90 7f       	andi	r25, 0xF0	; 240
    171c:	89 2b       	or	r24, r25
    171e:	80 83       	st	Z, r24
    1720:	ea e7       	ldi	r30, 0x7A	; 122
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 64       	ori	r24, 0x40	; 64
    1728:	80 83       	st	Z, r24
    172a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    172e:	86 fd       	sbrc	r24, 6
    1730:	fc cf       	rjmp	.-8      	; 0x172a <tcrt_read_channel+0x1a>
    1732:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1736:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    173a:	08 95       	ret
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	08 95       	ret

00001742 <TCRT_init_Handlers>:
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ee e4       	ldi	r30, 0x4E	; 78
    1748:	f7 e0       	ldi	r31, 0x07	; 7
    174a:	17 82       	std	Z+7, r1	; 0x07
    174c:	10 86       	std	Z+8, r1	; 0x08
    174e:	12 82       	std	Z+2, r1	; 0x02
    1750:	11 82       	std	Z+1, r1	; 0x01
    1752:	16 82       	std	Z+6, r1	; 0x06
    1754:	15 82       	std	Z+5, r1	; 0x05
    1756:	d4 e1       	ldi	r29, 0x14	; 20
    1758:	d6 87       	std	Z+14, r29	; 0x0e
    175a:	c1 e0       	ldi	r28, 0x01	; 1
    175c:	c0 83       	st	Z, r28
    175e:	86 e5       	ldi	r24, 0x56	; 86
    1760:	95 e0       	ldi	r25, 0x05	; 5
    1762:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    1766:	e7 ef       	ldi	r30, 0xF7	; 247
    1768:	f6 e0       	ldi	r31, 0x06	; 6
    176a:	10 82       	st	Z, r1
    176c:	c7 83       	std	Z+7, r28	; 0x07
    176e:	c0 87       	std	Z+8, r28	; 0x08
    1770:	12 82       	std	Z+2, r1	; 0x02
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	16 82       	std	Z+6, r1	; 0x06
    1776:	15 82       	std	Z+5, r1	; 0x05
    1778:	d6 87       	std	Z+14, r29	; 0x0e
    177a:	ef e1       	ldi	r30, 0x1F	; 31
    177c:	f7 e0       	ldi	r31, 0x07	; 7
    177e:	10 82       	st	Z, r1
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	87 83       	std	Z+7, r24	; 0x07
    1784:	80 87       	std	Z+8, r24	; 0x08
    1786:	12 82       	std	Z+2, r1	; 0x02
    1788:	11 82       	std	Z+1, r1	; 0x01
    178a:	16 82       	std	Z+6, r1	; 0x06
    178c:	15 82       	std	Z+5, r1	; 0x05
    178e:	d6 87       	std	Z+14, r29	; 0x0e
    1790:	ef e0       	ldi	r30, 0x0F	; 15
    1792:	f7 e0       	ldi	r31, 0x07	; 7
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	87 83       	std	Z+7, r24	; 0x07
    1798:	80 87       	std	Z+8, r24	; 0x08
    179a:	12 82       	std	Z+2, r1	; 0x02
    179c:	11 82       	std	Z+1, r1	; 0x01
    179e:	16 82       	std	Z+6, r1	; 0x06
    17a0:	15 82       	std	Z+5, r1	; 0x05
    17a2:	d6 87       	std	Z+14, r29	; 0x0e
    17a4:	c0 83       	st	Z, r28
    17a6:	85 e6       	ldi	r24, 0x65	; 101
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <puts>
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    17ba:	88 81       	ld	r24, Y
    17bc:	83 ff       	sbrs	r24, 3
    17be:	36 c0       	rjmp	.+108    	; 0x182c <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    17c0:	87 7f       	andi	r24, 0xF7	; 247
    17c2:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	81 11       	cpse	r24, r1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    17ca:	1e 82       	std	Y+6, r1	; 0x06
    17cc:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    17ce:	8f 81       	ldd	r24, Y+7	; 0x07
    17d0:	0e 94 88 0b 	call	0x1710	; 0x1710 <tcrt_read_channel>
    17d4:	2d 81       	ldd	r18, Y+5	; 0x05
    17d6:	3e 81       	ldd	r19, Y+6	; 0x06
    17d8:	28 0f       	add	r18, r24
    17da:	39 1f       	adc	r19, r25
    17dc:	3e 83       	std	Y+6, r19	; 0x06
    17de:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    17e0:	99 85       	ldd	r25, Y+9	; 0x09
    17e2:	9f 5f       	subi	r25, 0xFF	; 255
    17e4:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    17e6:	9a 30       	cpi	r25, 0x0A	; 10
    17e8:	08 f1       	brcs	.+66     	; 0x182c <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    17ea:	ad ec       	ldi	r26, 0xCD	; 205
    17ec:	bc ec       	ldi	r27, 0xCC	; 204
    17ee:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__umulhisi3>
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	96 95       	lsr	r25
    17f8:	87 95       	ror	r24
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1802:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1804:	28 81       	ld	r18, Y
    1806:	2b 7f       	andi	r18, 0xFB	; 251
    1808:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    180a:	2f 81       	ldd	r18, Y+7	; 0x07
    180c:	9f 93       	push	r25
    180e:	8f 93       	push	r24
    1810:	1f 92       	push	r1
    1812:	2f 93       	push	r18
    1814:	84 e7       	ldi	r24, 0x74	; 116
    1816:	95 e0       	ldi	r25, 0x05	; 5
    1818:	9f 93       	push	r25
    181a:	8f 93       	push	r24
    181c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
		}
	}
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    183c:	8f 81       	ldd	r24, Y+7	; 0x07
    183e:	0e 94 88 0b 	call	0x1710	; 0x1710 <tcrt_read_channel>
	sensor->lastReading = lectura;
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    1846:	4a 85       	ldd	r20, Y+10	; 0x0a
    1848:	5b 85       	ldd	r21, Y+11	; 0x0b
    184a:	6c 85       	ldd	r22, Y+12	; 0x0c
    184c:	7d 85       	ldd	r23, Y+13	; 0x0d
    184e:	8a 01       	movw	r16, r20
    1850:	9b 01       	movw	r18, r22
    1852:	08 0f       	add	r16, r24
    1854:	19 1f       	adc	r17, r25
    1856:	21 1d       	adc	r18, r1
    1858:	31 1d       	adc	r19, r1
    185a:	c9 01       	movw	r24, r18
    185c:	b8 01       	movw	r22, r16
    185e:	0a 87       	std	Y+10, r16	; 0x0a
    1860:	1b 87       	std	Y+11, r17	; 0x0b
    1862:	2c 87       	std	Y+12, r18	; 0x0c
    1864:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    1866:	29 85       	ldd	r18, Y+9	; 0x09
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    186c:	2a 30       	cpi	r18, 0x0A	; 10
    186e:	68 f0       	brcs	.+26     	; 0x188a <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    1870:	2a e0       	ldi	r18, 0x0A	; 10
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__udivmodsi4>
    187c:	3a 83       	std	Y+2, r19	; 0x02
    187e:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1880:	1a 86       	std	Y+10, r1	; 0x0a
    1882:	1b 86       	std	Y+11, r1	; 0x0b
    1884:	1c 86       	std	Y+12, r1	; 0x0c
    1886:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1888:	19 86       	std	Y+9, r1	; 0x09
	}
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    18a2:	ab 81       	ldd	r26, Y+3	; 0x03
    18a4:	bc 81       	ldd	r27, Y+4	; 0x04
    18a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18a8:	0f 2e       	mov	r0, r31
    18aa:	f4 e6       	ldi	r31, 0x64	; 100
    18ac:	cf 2e       	mov	r12, r31
    18ae:	d1 2c       	mov	r13, r1
    18b0:	e1 2c       	mov	r14, r1
    18b2:	f1 2c       	mov	r15, r1
    18b4:	f0 2d       	mov	r31, r0
    18b6:	a7 01       	movw	r20, r14
    18b8:	96 01       	movw	r18, r12
    18ba:	28 1b       	sub	r18, r24
    18bc:	31 09       	sbc	r19, r1
    18be:	41 09       	sbc	r20, r1
    18c0:	51 09       	sbc	r21, r1
    18c2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__muluhisi3>
    18c6:	a7 01       	movw	r20, r14
    18c8:	96 01       	movw	r18, r12
    18ca:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	6c 01       	movw	r12, r24
    18d4:	e1 2c       	mov	r14, r1
    18d6:	f1 2c       	mov	r15, r1
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	c2 16       	cp	r12, r18
    18dc:	d3 06       	cpc	r13, r19
    18de:	e4 06       	cpc	r14, r20
    18e0:	f5 06       	cpc	r15, r21
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <tcrt_is_box_detected+0x52>
    18e4:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    18e6:	c2 16       	cp	r12, r18
    18e8:	d3 06       	cpc	r13, r19
    18ea:	e4 06       	cpc	r14, r20
    18ec:	f5 06       	cpc	r15, r21
    18ee:	50 f4       	brcc	.+20     	; 0x1904 <tcrt_is_box_detected+0x70>
    18f0:	98 81       	ld	r25, Y
    18f2:	e9 2f       	mov	r30, r25
    18f4:	e2 95       	swap	r30
    18f6:	ef 70       	andi	r30, 0x0F	; 15
    18f8:	29 f4       	brne	.+10     	; 0x1904 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    18fa:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    18fc:	9f 70       	andi	r25, 0x0F	; 15
    18fe:	90 61       	ori	r25, 0x10	; 16
    1900:	98 83       	st	Y, r25
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    1904:	c2 16       	cp	r12, r18
    1906:	d3 06       	cpc	r13, r19
    1908:	e4 06       	cpc	r14, r20
    190a:	f5 06       	cpc	r15, r21
    190c:	50 f0       	brcs	.+20     	; 0x1922 <tcrt_is_box_detected+0x8e>
    190e:	98 81       	ld	r25, Y
    1910:	29 2f       	mov	r18, r25
    1912:	22 95       	swap	r18
    1914:	2f 70       	andi	r18, 0x0F	; 15
    1916:	21 30       	cpi	r18, 0x01	; 1
    1918:	21 f4       	brne	.+8      	; 0x1922 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    191a:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    191c:	9d 70       	andi	r25, 0x0D	; 13
    191e:	90 62       	ori	r25, 0x20	; 32
    1920:	98 83       	st	Y, r25
	}

	return box_now;
}
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	08 95       	ret

00001930 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    1930:	8b b1       	in	r24, 0x0b	; 11
    1932:	88 60       	ori	r24, 0x08	; 8
    1934:	8b b9       	out	0x0b, r24	; 11
    1936:	08 95       	ret

00001938 <ultrasonic_hal_trigger_setLow>:
    1938:	8b b1       	in	r24, 0x0b	; 11
    193a:	87 7f       	andi	r24, 0xF7	; 247
    193c:	8b b9       	out	0x0b, r24	; 11
    193e:	08 95       	ret

00001940 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    1940:	e1 e8       	ldi	r30, 0x81	; 129
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	80 83       	st	Z, r24
    194a:	08 95       	ret

0000194c <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    194c:	e1 e8       	ldi	r30, 0x81	; 129
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8f 7b       	andi	r24, 0xBF	; 191
    1954:	80 83       	st	Z, r24
    1956:	08 95       	ret

00001958 <USART_Init>:
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
}
    1958:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    195c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1960:	88 e9       	ldi	r24, 0x98	; 152
    1962:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    196c:	08 95       	ret

0000196e <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    196e:	cf 93       	push	r28
    1970:	c8 2f       	mov	r28, r24
	// Si se desea manejar la nueva línea con retorno de carro:
	if (c == '\n')
    1972:	8a 30       	cpi	r24, 0x0A	; 10
    1974:	19 f4       	brne	.+6      	; 0x197c <USART_putchar+0xe>
	USART_putchar('\r', stream);
    1976:	8d e0       	ldi	r24, 0x0D	; 13
    1978:	0e 94 b7 0c 	call	0x196e	; 0x196e <USART_putchar>
	
	// Esperar a que el buffer de transmisión (hardware) esté vacío
	while (!(UCSR0A & (1 << UDRE0)))
    197c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1980:	85 ff       	sbrs	r24, 5
    1982:	fc cf       	rjmp	.-8      	; 0x197c <USART_putchar+0xe>
	;  // Espera activa
	
	// Enviar el carácter
	UDR0 = c;
    1984:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <USART_getchar>:


int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
    1990:	e2 e8       	ldi	r30, 0x82	; 130
    1992:	f7 e0       	ldi	r31, 0x07	; 7
    1994:	21 81       	ldd	r18, Z+1	; 0x01
    1996:	80 81       	ld	r24, Z
    1998:	28 17       	cp	r18, r24
    199a:	a9 f0       	breq	.+42     	; 0x19c6 <USART_getchar+0x36>
	return -1;
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	ee 57       	subi	r30, 0x7E	; 126
    19a2:	f8 4f       	sbci	r31, 0xF8	; 248
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	2f 71       	andi	r18, 0x1F	; 31
    19ac:	30 78       	andi	r19, 0x80	; 128
    19ae:	33 23       	and	r19, r19
    19b0:	34 f4       	brge	.+12     	; 0x19be <USART_getchar+0x2e>
    19b2:	21 50       	subi	r18, 0x01	; 1
    19b4:	31 09       	sbc	r19, r1
    19b6:	20 6e       	ori	r18, 0xE0	; 224
    19b8:	3f 6f       	ori	r19, 0xFF	; 255
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	20 93 83 07 	sts	0x0783, r18	; 0x800783 <protocolService+0x1>
	return data;
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	08 95       	ret

int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
	return -1;
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	9f ef       	ldi	r25, 0xFF	; 255
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	return data;
}
    19ca:	08 95       	ret

000019cc <ultrasonic_set_debug_mode>:
    19cc:	fc 01       	movw	r30, r24
    19ce:	66 87       	std	Z+14, r22	; 0x0e
    19d0:	08 95       	ret

000019d2 <ultrasonic_calculate_distance>:
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	ae 81       	ldd	r26, Y+6	; 0x06
    19e2:	bf 81       	ldd	r27, Y+7	; 0x07
    19e4:	48 81       	ld	r20, Y
    19e6:	59 81       	ldd	r21, Y+1	; 0x01
    19e8:	6a 81       	ldd	r22, Y+2	; 0x02
    19ea:	7b 81       	ldd	r23, Y+3	; 0x03
    19ec:	8c 01       	movw	r16, r24
    19ee:	9d 01       	movw	r18, r26
    19f0:	04 1b       	sub	r16, r20
    19f2:	15 0b       	sbc	r17, r21
    19f4:	26 0b       	sbc	r18, r22
    19f6:	37 0b       	sbc	r19, r23
    19f8:	b9 01       	movw	r22, r18
    19fa:	a8 01       	movw	r20, r16
    19fc:	d9 01       	movw	r26, r18
    19fe:	c8 01       	movw	r24, r16
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	aa 1f       	adc	r26, r26
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	aa 1f       	adc	r26, r26
    1a16:	bb 1f       	adc	r27, r27
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	8c 01       	movw	r16, r24
    1a22:	9d 01       	movw	r18, r26
    1a24:	04 0f       	add	r16, r20
    1a26:	15 1f       	adc	r17, r21
    1a28:	26 1f       	adc	r18, r22
    1a2a:	37 1f       	adc	r19, r23
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	b8 01       	movw	r22, r16
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	20 e9       	ldi	r18, 0x90	; 144
    1a3a:	31 e0       	ldi	r19, 0x01	; 1
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__udivmodsi4>
    1a44:	28 87       	std	Y+8, r18	; 0x08
    1a46:	39 87       	std	Y+9, r19	; 0x09
    1a48:	4a 87       	std	Y+10, r20	; 0x0a
    1a4a:	5b 87       	std	Y+11, r21	; 0x0b
    1a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a4e:	80 68       	ori	r24, 0x80	; 128
    1a50:	8c 87       	std	Y+12, r24	; 0x0c
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	08 95       	ret

00001a5c <ultrasonic_print>:
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	1f 96       	adiw	r26, 0x0f	; 15
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	50 97       	sbiw	r26, 0x10	; 16
    1a66:	30 97       	sbiw	r30, 0x00	; 0
    1a68:	11 f0       	breq	.+4      	; 0x1a6e <ultrasonic_print+0x12>
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	09 95       	icall
    1a6e:	08 95       	ret

00001a70 <ultrasonic_init_flags>:
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
    1a76:	18 82       	st	Y, r1
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	1a 82       	std	Y+2, r1	; 0x02
    1a7c:	1b 82       	std	Y+3, r1	; 0x03
    1a7e:	1c 82       	std	Y+4, r1	; 0x04
    1a80:	1d 82       	std	Y+5, r1	; 0x05
    1a82:	1e 82       	std	Y+6, r1	; 0x06
    1a84:	1f 82       	std	Y+7, r1	; 0x07
    1a86:	18 86       	std	Y+8, r1	; 0x08
    1a88:	19 86       	std	Y+9, r1	; 0x09
    1a8a:	1a 86       	std	Y+10, r1	; 0x0a
    1a8c:	1b 86       	std	Y+11, r1	; 0x0b
    1a8e:	1c 86       	std	Y+12, r1	; 0x0c
    1a90:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a92:	80 62       	ori	r24, 0x20	; 32
    1a94:	8c 87       	std	Y+12, r24	; 0x0c
    1a96:	1d 86       	std	Y+13, r1	; 0x0d
    1a98:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ultrasonic_hal_echo_setRisingEdge>
    1a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9e:	98 89       	ldd	r25, Y+16	; 0x10
    1aa0:	89 2b       	or	r24, r25
    1aa2:	41 f0       	breq	.+16     	; 0x1ab4 <ultrasonic_init_flags+0x44>
    1aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aa6:	88 23       	and	r24, r24
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <ultrasonic_init_flags+0x44>
    1aaa:	60 ea       	ldi	r22, 0xA0	; 160
    1aac:	75 e0       	ldi	r23, 0x05	; 5
    1aae:	ce 01       	movw	r24, r28
    1ab0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <ultrasonic_init>:
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	ec 01       	movw	r28, r24
    1ac4:	8b 01       	movw	r16, r22
    1ac6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <ultrasonic_init_flags>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	8e 87       	std	Y+14, r24	; 0x0e
    1ace:	01 15       	cp	r16, r1
    1ad0:	11 05       	cpc	r17, r1
    1ad2:	19 f4       	brne	.+6      	; 0x1ada <ultrasonic_init+0x20>
    1ad4:	18 8a       	std	Y+16, r1	; 0x10
    1ad6:	1f 86       	std	Y+15, r1	; 0x0f
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <ultrasonic_init+0x34>
    1ada:	18 8b       	std	Y+16, r17	; 0x10
    1adc:	0f 87       	std	Y+15, r16	; 0x0f
    1ade:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae0:	88 23       	and	r24, r24
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <ultrasonic_init+0x34>
    1ae4:	6f eb       	ldi	r22, 0xBF	; 191
    1ae6:	75 e0       	ldi	r23, 0x05	; 5
    1ae8:	ce 01       	movw	r24, r28
    1aea:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	08 95       	ret

00001af8 <ultrasonic_timeout_clear>:
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	fc 01       	movw	r30, r24
    1b00:	25 85       	ldd	r18, Z+13	; 0x0d
    1b02:	26 30       	cpi	r18, 0x06	; 6
    1b04:	71 f4       	brne	.+28     	; 0x1b22 <ultrasonic_timeout_clear+0x2a>
    1b06:	16 2f       	mov	r17, r22
    1b08:	ec 01       	movw	r28, r24
    1b0a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <ultrasonic_init_flags>
    1b0e:	1e 87       	std	Y+14, r17	; 0x0e
    1b10:	1e 85       	ldd	r17, Y+14	; 0x0e
    1b12:	11 23       	and	r17, r17
    1b14:	41 f0       	breq	.+16     	; 0x1b26 <ultrasonic_timeout_clear+0x2e>
    1b16:	68 ec       	ldi	r22, 0xC8	; 200
    1b18:	73 e0       	ldi	r23, 0x03	; 3
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <ultrasonic_timeout_clear+0x30>
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <ultrasonic_timeout_clear+0x30>
    1b26:	11 e0       	ldi	r17, 0x01	; 1
    1b28:	81 2f       	mov	r24, r17
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	08 95       	ret

00001b32 <ultrasonic_start>:
    1b32:	cf 93       	push	r28
    1b34:	fc 01       	movw	r30, r24
    1b36:	85 85       	ldd	r24, Z+13	; 0x0d
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <ultrasonic_start+0x10>
    1b3c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b3e:	85 30       	cpi	r24, 0x05	; 5
    1b40:	c1 f4       	brne	.+48     	; 0x1b72 <ultrasonic_start+0x40>
    1b42:	84 85       	ldd	r24, Z+12	; 0x0c
    1b44:	85 ff       	sbrs	r24, 5
    1b46:	0b c0       	rjmp	.+22     	; 0x1b5e <ultrasonic_start+0x2c>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	85 87       	std	Z+13, r24	; 0x0d
    1b4c:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b4e:	cc 23       	and	r28, r28
    1b50:	d1 f0       	breq	.+52     	; 0x1b86 <ultrasonic_start+0x54>
    1b52:	6b ed       	ldi	r22, 0xDB	; 219
    1b54:	75 e0       	ldi	r23, 0x05	; 5
    1b56:	cf 01       	movw	r24, r30
    1b58:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1b5c:	15 c0       	rjmp	.+42     	; 0x1b88 <ultrasonic_start+0x56>
    1b5e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b60:	cc 23       	and	r28, r28
    1b62:	91 f0       	breq	.+36     	; 0x1b88 <ultrasonic_start+0x56>
    1b64:	6a e0       	ldi	r22, 0x0A	; 10
    1b66:	76 e0       	ldi	r23, 0x06	; 6
    1b68:	cf 01       	movw	r24, r30
    1b6a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1b6e:	c0 e0       	ldi	r28, 0x00	; 0
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <ultrasonic_start+0x56>
    1b72:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b74:	cc 23       	and	r28, r28
    1b76:	41 f0       	breq	.+16     	; 0x1b88 <ultrasonic_start+0x56>
    1b78:	61 e4       	ldi	r22, 0x41	; 65
    1b7a:	76 e0       	ldi	r23, 0x06	; 6
    1b7c:	cf 01       	movw	r24, r30
    1b7e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1b82:	c0 e0       	ldi	r28, 0x00	; 0
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <ultrasonic_start+0x56>
    1b86:	c1 e0       	ldi	r28, 0x01	; 1
    1b88:	8c 2f       	mov	r24, r28
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <ultrasonic_update>:
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	71 f1       	breq	.+92     	; 0x1bf6 <ultrasonic_update+0x68>
    1b9a:	28 f4       	brcc	.+10     	; 0x1ba6 <ultrasonic_update+0x18>
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	49 f0       	breq	.+18     	; 0x1bb2 <ultrasonic_update+0x24>
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	a1 f0       	breq	.+40     	; 0x1bcc <ultrasonic_update+0x3e>
    1ba4:	55 c0       	rjmp	.+170    	; 0x1c50 <ultrasonic_update+0xc2>
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	e1 f1       	breq	.+120    	; 0x1c22 <ultrasonic_update+0x94>
    1baa:	86 30       	cpi	r24, 0x06	; 6
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <ultrasonic_update+0x22>
    1bae:	4d c0       	rjmp	.+154    	; 0x1c4a <ultrasonic_update+0xbc>
    1bb0:	4f c0       	rjmp	.+158    	; 0x1c50 <ultrasonic_update+0xc2>
    1bb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb4:	81 ff       	sbrs	r24, 1
    1bb6:	4c c0       	rjmp	.+152    	; 0x1c50 <ultrasonic_update+0xc2>
    1bb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bba:	88 23       	and	r24, r24
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <ultrasonic_update+0x32>
    1bbe:	48 c0       	rjmp	.+144    	; 0x1c50 <ultrasonic_update+0xc2>
    1bc0:	6e e6       	ldi	r22, 0x6E	; 110
    1bc2:	76 e0       	ldi	r23, 0x06	; 6
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1bca:	42 c0       	rjmp	.+132    	; 0x1c50 <ultrasonic_update+0xc2>
    1bcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bce:	84 fd       	sbrc	r24, 4
    1bd0:	0c c0       	rjmp	.+24     	; 0x1bea <ultrasonic_update+0x5c>
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	8d 87       	std	Y+13, r24	; 0x0d
    1bd6:	0e 94 a6 0c 	call	0x194c	; 0x194c <ultrasonic_hal_echo_setFallingEdge>
    1bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bdc:	88 23       	and	r24, r24
    1bde:	29 f0       	breq	.+10     	; 0x1bea <ultrasonic_update+0x5c>
    1be0:	6d e8       	ldi	r22, 0x8D	; 141
    1be2:	76 e0       	ldi	r23, 0x06	; 6
    1be4:	ce 01       	movw	r24, r28
    1be6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1bea:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bec:	83 ff       	sbrs	r24, 3
    1bee:	30 c0       	rjmp	.+96     	; 0x1c50 <ultrasonic_update+0xc2>
    1bf0:	86 e0       	ldi	r24, 0x06	; 6
    1bf2:	8d 87       	std	Y+13, r24	; 0x0d
    1bf4:	2d c0       	rjmp	.+90     	; 0x1c50 <ultrasonic_update+0xc2>
    1bf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bf8:	86 ff       	sbrs	r24, 6
    1bfa:	0d c0       	rjmp	.+26     	; 0x1c16 <ultrasonic_update+0x88>
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	8d 87       	std	Y+13, r24	; 0x0d
    1c00:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c02:	88 23       	and	r24, r24
    1c04:	29 f0       	breq	.+10     	; 0x1c10 <ultrasonic_update+0x82>
    1c06:	6a ea       	ldi	r22, 0xAA	; 170
    1c08:	76 e0       	ldi	r23, 0x06	; 6
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1c10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c12:	84 60       	ori	r24, 0x04	; 4
    1c14:	8c 87       	std	Y+12, r24	; 0x0c
    1c16:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c18:	83 ff       	sbrs	r24, 3
    1c1a:	1a c0       	rjmp	.+52     	; 0x1c50 <ultrasonic_update+0xc2>
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	8d 87       	std	Y+13, r24	; 0x0d
    1c20:	17 c0       	rjmp	.+46     	; 0x1c50 <ultrasonic_update+0xc2>
    1c22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c24:	82 ff       	sbrs	r24, 2
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <ultrasonic_update+0xc2>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <ultrasonic_calculate_distance>
    1c2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c30:	8b 7f       	andi	r24, 0xFB	; 251
    1c32:	8c 87       	std	Y+12, r24	; 0x0c
    1c34:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c36:	88 23       	and	r24, r24
    1c38:	29 f0       	breq	.+10     	; 0x1c44 <ultrasonic_update+0xb6>
    1c3a:	61 ec       	ldi	r22, 0xC1	; 193
    1c3c:	76 e0       	ldi	r23, 0x06	; 6
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ultrasonic_print>
    1c44:	85 e0       	ldi	r24, 0x05	; 5
    1c46:	8d 87       	std	Y+13, r24	; 0x0d
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <ultrasonic_update+0xc2>
    1c4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	8c 87       	std	Y+12, r24	; 0x0c
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <__udivmodsi4>:
    1c56:	a1 e2       	ldi	r26, 0x21	; 33
    1c58:	1a 2e       	mov	r1, r26
    1c5a:	aa 1b       	sub	r26, r26
    1c5c:	bb 1b       	sub	r27, r27
    1c5e:	fd 01       	movw	r30, r26
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <__udivmodsi4_ep>

00001c62 <__udivmodsi4_loop>:
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	ee 1f       	adc	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	a2 17       	cp	r26, r18
    1c6c:	b3 07       	cpc	r27, r19
    1c6e:	e4 07       	cpc	r30, r20
    1c70:	f5 07       	cpc	r31, r21
    1c72:	20 f0       	brcs	.+8      	; 0x1c7c <__udivmodsi4_ep>
    1c74:	a2 1b       	sub	r26, r18
    1c76:	b3 0b       	sbc	r27, r19
    1c78:	e4 0b       	sbc	r30, r20
    1c7a:	f5 0b       	sbc	r31, r21

00001c7c <__udivmodsi4_ep>:
    1c7c:	66 1f       	adc	r22, r22
    1c7e:	77 1f       	adc	r23, r23
    1c80:	88 1f       	adc	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	1a 94       	dec	r1
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <__udivmodsi4_loop>
    1c88:	60 95       	com	r22
    1c8a:	70 95       	com	r23
    1c8c:	80 95       	com	r24
    1c8e:	90 95       	com	r25
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	bd 01       	movw	r22, r26
    1c96:	cf 01       	movw	r24, r30
    1c98:	08 95       	ret

00001c9a <__umulhisi3>:
    1c9a:	a2 9f       	mul	r26, r18
    1c9c:	b0 01       	movw	r22, r0
    1c9e:	b3 9f       	mul	r27, r19
    1ca0:	c0 01       	movw	r24, r0
    1ca2:	a3 9f       	mul	r26, r19
    1ca4:	70 0d       	add	r23, r0
    1ca6:	81 1d       	adc	r24, r1
    1ca8:	11 24       	eor	r1, r1
    1caa:	91 1d       	adc	r25, r1
    1cac:	b2 9f       	mul	r27, r18
    1cae:	70 0d       	add	r23, r0
    1cb0:	81 1d       	adc	r24, r1
    1cb2:	11 24       	eor	r1, r1
    1cb4:	91 1d       	adc	r25, r1
    1cb6:	08 95       	ret

00001cb8 <__muluhisi3>:
    1cb8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__umulhisi3>
    1cbc:	a5 9f       	mul	r26, r21
    1cbe:	90 0d       	add	r25, r0
    1cc0:	b4 9f       	mul	r27, r20
    1cc2:	90 0d       	add	r25, r0
    1cc4:	a4 9f       	mul	r26, r20
    1cc6:	80 0d       	add	r24, r0
    1cc8:	91 1d       	adc	r25, r1
    1cca:	11 24       	eor	r1, r1
    1ccc:	08 95       	ret

00001cce <printf>:
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x20>
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4b 5f       	subi	r20, 0xFB	; 251
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	fa 01       	movw	r30, r20
    1ce2:	61 91       	ld	r22, Z+
    1ce4:	71 91       	ld	r23, Z+
    1ce6:	af 01       	movw	r20, r30
    1ce8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <__iob+0x2>
    1cec:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <__iob+0x3>
    1cf0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vfprintf>
    1cf4:	e2 e0       	ldi	r30, 0x02	; 2
    1cf6:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x20>

00001cfa <puts>:
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <__iob+0x2>
    1d06:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <__iob+0x3>
    1d0a:	23 81       	ldd	r18, Z+3	; 0x03
    1d0c:	21 ff       	sbrs	r18, 1
    1d0e:	1b c0       	rjmp	.+54     	; 0x1d46 <puts+0x4c>
    1d10:	8c 01       	movw	r16, r24
    1d12:	d0 e0       	ldi	r29, 0x00	; 0
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	f8 01       	movw	r30, r16
    1d18:	81 91       	ld	r24, Z+
    1d1a:	8f 01       	movw	r16, r30
    1d1c:	60 91 b4 07 	lds	r22, 0x07B4	; 0x8007b4 <__iob+0x2>
    1d20:	70 91 b5 07 	lds	r23, 0x07B5	; 0x8007b5 <__iob+0x3>
    1d24:	db 01       	movw	r26, r22
    1d26:	18 96       	adiw	r26, 0x08	; 8
    1d28:	ed 91       	ld	r30, X+
    1d2a:	fc 91       	ld	r31, X
    1d2c:	19 97       	sbiw	r26, 0x09	; 9
    1d2e:	88 23       	and	r24, r24
    1d30:	31 f0       	breq	.+12     	; 0x1d3e <puts+0x44>
    1d32:	09 95       	icall
    1d34:	89 2b       	or	r24, r25
    1d36:	79 f3       	breq	.-34     	; 0x1d16 <puts+0x1c>
    1d38:	df ef       	ldi	r29, 0xFF	; 255
    1d3a:	cf ef       	ldi	r28, 0xFF	; 255
    1d3c:	ec cf       	rjmp	.-40     	; 0x1d16 <puts+0x1c>
    1d3e:	8a e0       	ldi	r24, 0x0A	; 10
    1d40:	09 95       	icall
    1d42:	89 2b       	or	r24, r25
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <puts+0x52>
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <puts+0x56>
    1d4c:	8d 2f       	mov	r24, r29
    1d4e:	9c 2f       	mov	r25, r28
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <vfprintf>:
    1d5a:	ab e0       	ldi	r26, 0x0B	; 11
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e3 eb       	ldi	r30, 0xB3	; 179
    1d60:	fe e0       	ldi	r31, 0x0E	; 14
    1d62:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__>
    1d66:	6c 01       	movw	r12, r24
    1d68:	7b 01       	movw	r14, r22
    1d6a:	8a 01       	movw	r16, r20
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	17 82       	std	Z+7, r1	; 0x07
    1d70:	16 82       	std	Z+6, r1	; 0x06
    1d72:	83 81       	ldd	r24, Z+3	; 0x03
    1d74:	81 ff       	sbrs	r24, 1
    1d76:	cc c1       	rjmp	.+920    	; 0x2110 <vfprintf+0x3b6>
    1d78:	ce 01       	movw	r24, r28
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	3c 01       	movw	r6, r24
    1d7e:	f6 01       	movw	r30, r12
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	f7 01       	movw	r30, r14
    1d84:	93 fd       	sbrc	r25, 3
    1d86:	85 91       	lpm	r24, Z+
    1d88:	93 ff       	sbrs	r25, 3
    1d8a:	81 91       	ld	r24, Z+
    1d8c:	7f 01       	movw	r14, r30
    1d8e:	88 23       	and	r24, r24
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <vfprintf+0x3a>
    1d92:	ba c1       	rjmp	.+884    	; 0x2108 <vfprintf+0x3ae>
    1d94:	85 32       	cpi	r24, 0x25	; 37
    1d96:	39 f4       	brne	.+14     	; 0x1da6 <vfprintf+0x4c>
    1d98:	93 fd       	sbrc	r25, 3
    1d9a:	85 91       	lpm	r24, Z+
    1d9c:	93 ff       	sbrs	r25, 3
    1d9e:	81 91       	ld	r24, Z+
    1da0:	7f 01       	movw	r14, r30
    1da2:	85 32       	cpi	r24, 0x25	; 37
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <vfprintf+0x56>
    1da6:	b6 01       	movw	r22, r12
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    1dae:	e7 cf       	rjmp	.-50     	; 0x1d7e <vfprintf+0x24>
    1db0:	91 2c       	mov	r9, r1
    1db2:	21 2c       	mov	r2, r1
    1db4:	31 2c       	mov	r3, r1
    1db6:	ff e1       	ldi	r31, 0x1F	; 31
    1db8:	f3 15       	cp	r31, r3
    1dba:	d8 f0       	brcs	.+54     	; 0x1df2 <vfprintf+0x98>
    1dbc:	8b 32       	cpi	r24, 0x2B	; 43
    1dbe:	79 f0       	breq	.+30     	; 0x1dde <vfprintf+0x84>
    1dc0:	38 f4       	brcc	.+14     	; 0x1dd0 <vfprintf+0x76>
    1dc2:	80 32       	cpi	r24, 0x20	; 32
    1dc4:	79 f0       	breq	.+30     	; 0x1de4 <vfprintf+0x8a>
    1dc6:	83 32       	cpi	r24, 0x23	; 35
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <vfprintf+0x98>
    1dca:	23 2d       	mov	r18, r3
    1dcc:	20 61       	ori	r18, 0x10	; 16
    1dce:	1d c0       	rjmp	.+58     	; 0x1e0a <vfprintf+0xb0>
    1dd0:	8d 32       	cpi	r24, 0x2D	; 45
    1dd2:	61 f0       	breq	.+24     	; 0x1dec <vfprintf+0x92>
    1dd4:	80 33       	cpi	r24, 0x30	; 48
    1dd6:	69 f4       	brne	.+26     	; 0x1df2 <vfprintf+0x98>
    1dd8:	23 2d       	mov	r18, r3
    1dda:	21 60       	ori	r18, 0x01	; 1
    1ddc:	16 c0       	rjmp	.+44     	; 0x1e0a <vfprintf+0xb0>
    1dde:	83 2d       	mov	r24, r3
    1de0:	82 60       	ori	r24, 0x02	; 2
    1de2:	38 2e       	mov	r3, r24
    1de4:	e3 2d       	mov	r30, r3
    1de6:	e4 60       	ori	r30, 0x04	; 4
    1de8:	3e 2e       	mov	r3, r30
    1dea:	2a c0       	rjmp	.+84     	; 0x1e40 <vfprintf+0xe6>
    1dec:	f3 2d       	mov	r31, r3
    1dee:	f8 60       	ori	r31, 0x08	; 8
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <vfprintf+0xd2>
    1df2:	37 fc       	sbrc	r3, 7
    1df4:	2d c0       	rjmp	.+90     	; 0x1e50 <vfprintf+0xf6>
    1df6:	20 ed       	ldi	r18, 0xD0	; 208
    1df8:	28 0f       	add	r18, r24
    1dfa:	2a 30       	cpi	r18, 0x0A	; 10
    1dfc:	40 f0       	brcs	.+16     	; 0x1e0e <vfprintf+0xb4>
    1dfe:	8e 32       	cpi	r24, 0x2E	; 46
    1e00:	b9 f4       	brne	.+46     	; 0x1e30 <vfprintf+0xd6>
    1e02:	36 fc       	sbrc	r3, 6
    1e04:	81 c1       	rjmp	.+770    	; 0x2108 <vfprintf+0x3ae>
    1e06:	23 2d       	mov	r18, r3
    1e08:	20 64       	ori	r18, 0x40	; 64
    1e0a:	32 2e       	mov	r3, r18
    1e0c:	19 c0       	rjmp	.+50     	; 0x1e40 <vfprintf+0xe6>
    1e0e:	36 fe       	sbrs	r3, 6
    1e10:	06 c0       	rjmp	.+12     	; 0x1e1e <vfprintf+0xc4>
    1e12:	8a e0       	ldi	r24, 0x0A	; 10
    1e14:	98 9e       	mul	r9, r24
    1e16:	20 0d       	add	r18, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	92 2e       	mov	r9, r18
    1e1c:	11 c0       	rjmp	.+34     	; 0x1e40 <vfprintf+0xe6>
    1e1e:	ea e0       	ldi	r30, 0x0A	; 10
    1e20:	2e 9e       	mul	r2, r30
    1e22:	20 0d       	add	r18, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	22 2e       	mov	r2, r18
    1e28:	f3 2d       	mov	r31, r3
    1e2a:	f0 62       	ori	r31, 0x20	; 32
    1e2c:	3f 2e       	mov	r3, r31
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <vfprintf+0xe6>
    1e30:	8c 36       	cpi	r24, 0x6C	; 108
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <vfprintf+0xe2>
    1e34:	83 2d       	mov	r24, r3
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	38 2e       	mov	r3, r24
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0xe6>
    1e3c:	88 36       	cpi	r24, 0x68	; 104
    1e3e:	41 f4       	brne	.+16     	; 0x1e50 <vfprintf+0xf6>
    1e40:	f7 01       	movw	r30, r14
    1e42:	93 fd       	sbrc	r25, 3
    1e44:	85 91       	lpm	r24, Z+
    1e46:	93 ff       	sbrs	r25, 3
    1e48:	81 91       	ld	r24, Z+
    1e4a:	7f 01       	movw	r14, r30
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	b3 cf       	rjmp	.-154    	; 0x1db6 <vfprintf+0x5c>
    1e50:	98 2f       	mov	r25, r24
    1e52:	9f 7d       	andi	r25, 0xDF	; 223
    1e54:	95 54       	subi	r25, 0x45	; 69
    1e56:	93 30       	cpi	r25, 0x03	; 3
    1e58:	28 f4       	brcc	.+10     	; 0x1e64 <vfprintf+0x10a>
    1e5a:	0c 5f       	subi	r16, 0xFC	; 252
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	9f e3       	ldi	r25, 0x3F	; 63
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	0d c0       	rjmp	.+26     	; 0x1e7e <vfprintf+0x124>
    1e64:	83 36       	cpi	r24, 0x63	; 99
    1e66:	31 f0       	breq	.+12     	; 0x1e74 <vfprintf+0x11a>
    1e68:	83 37       	cpi	r24, 0x73	; 115
    1e6a:	71 f0       	breq	.+28     	; 0x1e88 <vfprintf+0x12e>
    1e6c:	83 35       	cpi	r24, 0x53	; 83
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <vfprintf+0x118>
    1e70:	59 c0       	rjmp	.+178    	; 0x1f24 <vfprintf+0x1ca>
    1e72:	21 c0       	rjmp	.+66     	; 0x1eb6 <vfprintf+0x15c>
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 81       	ld	r24, Z
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	88 24       	eor	r8, r8
    1e80:	83 94       	inc	r8
    1e82:	91 2c       	mov	r9, r1
    1e84:	53 01       	movw	r10, r6
    1e86:	13 c0       	rjmp	.+38     	; 0x1eae <vfprintf+0x154>
    1e88:	28 01       	movw	r4, r16
    1e8a:	f2 e0       	ldi	r31, 0x02	; 2
    1e8c:	4f 0e       	add	r4, r31
    1e8e:	51 1c       	adc	r5, r1
    1e90:	f8 01       	movw	r30, r16
    1e92:	a0 80       	ld	r10, Z
    1e94:	b1 80       	ldd	r11, Z+1	; 0x01
    1e96:	36 fe       	sbrs	r3, 6
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <vfprintf+0x146>
    1e9a:	69 2d       	mov	r22, r9
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <vfprintf+0x14a>
    1ea0:	6f ef       	ldi	r22, 0xFF	; 255
    1ea2:	7f ef       	ldi	r23, 0xFF	; 255
    1ea4:	c5 01       	movw	r24, r10
    1ea6:	0e 94 99 10 	call	0x2132	; 0x2132 <strnlen>
    1eaa:	4c 01       	movw	r8, r24
    1eac:	82 01       	movw	r16, r4
    1eae:	f3 2d       	mov	r31, r3
    1eb0:	ff 77       	andi	r31, 0x7F	; 127
    1eb2:	3f 2e       	mov	r3, r31
    1eb4:	16 c0       	rjmp	.+44     	; 0x1ee2 <vfprintf+0x188>
    1eb6:	28 01       	movw	r4, r16
    1eb8:	22 e0       	ldi	r18, 0x02	; 2
    1eba:	42 0e       	add	r4, r18
    1ebc:	51 1c       	adc	r5, r1
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	a0 80       	ld	r10, Z
    1ec2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ec4:	36 fe       	sbrs	r3, 6
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <vfprintf+0x174>
    1ec8:	69 2d       	mov	r22, r9
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <vfprintf+0x178>
    1ece:	6f ef       	ldi	r22, 0xFF	; 255
    1ed0:	7f ef       	ldi	r23, 0xFF	; 255
    1ed2:	c5 01       	movw	r24, r10
    1ed4:	0e 94 8e 10 	call	0x211c	; 0x211c <strnlen_P>
    1ed8:	4c 01       	movw	r8, r24
    1eda:	f3 2d       	mov	r31, r3
    1edc:	f0 68       	ori	r31, 0x80	; 128
    1ede:	3f 2e       	mov	r3, r31
    1ee0:	82 01       	movw	r16, r4
    1ee2:	33 fc       	sbrc	r3, 3
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <vfprintf+0x1c2>
    1ee6:	82 2d       	mov	r24, r2
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	88 16       	cp	r8, r24
    1eec:	99 06       	cpc	r9, r25
    1eee:	b0 f4       	brcc	.+44     	; 0x1f1c <vfprintf+0x1c2>
    1ef0:	b6 01       	movw	r22, r12
    1ef2:	80 e2       	ldi	r24, 0x20	; 32
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    1efa:	2a 94       	dec	r2
    1efc:	f4 cf       	rjmp	.-24     	; 0x1ee6 <vfprintf+0x18c>
    1efe:	f5 01       	movw	r30, r10
    1f00:	37 fc       	sbrc	r3, 7
    1f02:	85 91       	lpm	r24, Z+
    1f04:	37 fe       	sbrs	r3, 7
    1f06:	81 91       	ld	r24, Z+
    1f08:	5f 01       	movw	r10, r30
    1f0a:	b6 01       	movw	r22, r12
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    1f12:	21 10       	cpse	r2, r1
    1f14:	2a 94       	dec	r2
    1f16:	21 e0       	ldi	r18, 0x01	; 1
    1f18:	82 1a       	sub	r8, r18
    1f1a:	91 08       	sbc	r9, r1
    1f1c:	81 14       	cp	r8, r1
    1f1e:	91 04       	cpc	r9, r1
    1f20:	71 f7       	brne	.-36     	; 0x1efe <vfprintf+0x1a4>
    1f22:	e8 c0       	rjmp	.+464    	; 0x20f4 <vfprintf+0x39a>
    1f24:	84 36       	cpi	r24, 0x64	; 100
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <vfprintf+0x1d2>
    1f28:	89 36       	cpi	r24, 0x69	; 105
    1f2a:	41 f5       	brne	.+80     	; 0x1f7c <vfprintf+0x222>
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	37 fe       	sbrs	r3, 7
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <vfprintf+0x1e6>
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	0c 5f       	subi	r16, 0xFC	; 252
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <vfprintf+0x1f6>
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	07 2e       	mov	r0, r23
    1f46:	00 0c       	add	r0, r0
    1f48:	88 0b       	sbc	r24, r24
    1f4a:	99 0b       	sbc	r25, r25
    1f4c:	0e 5f       	subi	r16, 0xFE	; 254
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	f3 2d       	mov	r31, r3
    1f52:	ff 76       	andi	r31, 0x6F	; 111
    1f54:	3f 2e       	mov	r3, r31
    1f56:	97 ff       	sbrs	r25, 7
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <vfprintf+0x212>
    1f5a:	90 95       	com	r25
    1f5c:	80 95       	com	r24
    1f5e:	70 95       	com	r23
    1f60:	61 95       	neg	r22
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	f0 68       	ori	r31, 0x80	; 128
    1f6a:	3f 2e       	mov	r3, r31
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	a3 01       	movw	r20, r6
    1f72:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__ultoa_invert>
    1f76:	88 2e       	mov	r8, r24
    1f78:	86 18       	sub	r8, r6
    1f7a:	45 c0       	rjmp	.+138    	; 0x2006 <vfprintf+0x2ac>
    1f7c:	85 37       	cpi	r24, 0x75	; 117
    1f7e:	31 f4       	brne	.+12     	; 0x1f8c <vfprintf+0x232>
    1f80:	23 2d       	mov	r18, r3
    1f82:	2f 7e       	andi	r18, 0xEF	; 239
    1f84:	b2 2e       	mov	r11, r18
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	25 c0       	rjmp	.+74     	; 0x1fd6 <vfprintf+0x27c>
    1f8c:	93 2d       	mov	r25, r3
    1f8e:	99 7f       	andi	r25, 0xF9	; 249
    1f90:	b9 2e       	mov	r11, r25
    1f92:	8f 36       	cpi	r24, 0x6F	; 111
    1f94:	c1 f0       	breq	.+48     	; 0x1fc6 <vfprintf+0x26c>
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <vfprintf+0x244>
    1f98:	88 35       	cpi	r24, 0x58	; 88
    1f9a:	79 f0       	breq	.+30     	; 0x1fba <vfprintf+0x260>
    1f9c:	b5 c0       	rjmp	.+362    	; 0x2108 <vfprintf+0x3ae>
    1f9e:	80 37       	cpi	r24, 0x70	; 112
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <vfprintf+0x24e>
    1fa2:	88 37       	cpi	r24, 0x78	; 120
    1fa4:	21 f0       	breq	.+8      	; 0x1fae <vfprintf+0x254>
    1fa6:	b0 c0       	rjmp	.+352    	; 0x2108 <vfprintf+0x3ae>
    1fa8:	e9 2f       	mov	r30, r25
    1faa:	e0 61       	ori	r30, 0x10	; 16
    1fac:	be 2e       	mov	r11, r30
    1fae:	b4 fe       	sbrs	r11, 4
    1fb0:	0d c0       	rjmp	.+26     	; 0x1fcc <vfprintf+0x272>
    1fb2:	fb 2d       	mov	r31, r11
    1fb4:	f4 60       	ori	r31, 0x04	; 4
    1fb6:	bf 2e       	mov	r11, r31
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <vfprintf+0x272>
    1fba:	34 fe       	sbrs	r3, 4
    1fbc:	0a c0       	rjmp	.+20     	; 0x1fd2 <vfprintf+0x278>
    1fbe:	29 2f       	mov	r18, r25
    1fc0:	26 60       	ori	r18, 0x06	; 6
    1fc2:	b2 2e       	mov	r11, r18
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vfprintf+0x278>
    1fc6:	28 e0       	ldi	r18, 0x08	; 8
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <vfprintf+0x27c>
    1fcc:	20 e1       	ldi	r18, 0x10	; 16
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x27c>
    1fd2:	20 e1       	ldi	r18, 0x10	; 16
    1fd4:	32 e0       	ldi	r19, 0x02	; 2
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	b7 fe       	sbrs	r11, 7
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <vfprintf+0x290>
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0c 5f       	subi	r16, 0xFC	; 252
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	06 c0       	rjmp	.+12     	; 0x1ff6 <vfprintf+0x29c>
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	a3 01       	movw	r20, r6
    1ff8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__ultoa_invert>
    1ffc:	88 2e       	mov	r8, r24
    1ffe:	86 18       	sub	r8, r6
    2000:	fb 2d       	mov	r31, r11
    2002:	ff 77       	andi	r31, 0x7F	; 127
    2004:	3f 2e       	mov	r3, r31
    2006:	36 fe       	sbrs	r3, 6
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <vfprintf+0x2ca>
    200a:	23 2d       	mov	r18, r3
    200c:	2e 7f       	andi	r18, 0xFE	; 254
    200e:	a2 2e       	mov	r10, r18
    2010:	89 14       	cp	r8, r9
    2012:	58 f4       	brcc	.+22     	; 0x202a <vfprintf+0x2d0>
    2014:	34 fe       	sbrs	r3, 4
    2016:	0b c0       	rjmp	.+22     	; 0x202e <vfprintf+0x2d4>
    2018:	32 fc       	sbrc	r3, 2
    201a:	09 c0       	rjmp	.+18     	; 0x202e <vfprintf+0x2d4>
    201c:	83 2d       	mov	r24, r3
    201e:	8e 7e       	andi	r24, 0xEE	; 238
    2020:	a8 2e       	mov	r10, r24
    2022:	05 c0       	rjmp	.+10     	; 0x202e <vfprintf+0x2d4>
    2024:	b8 2c       	mov	r11, r8
    2026:	a3 2c       	mov	r10, r3
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <vfprintf+0x2d6>
    202a:	b8 2c       	mov	r11, r8
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <vfprintf+0x2d6>
    202e:	b9 2c       	mov	r11, r9
    2030:	a4 fe       	sbrs	r10, 4
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <vfprintf+0x2f8>
    2034:	fe 01       	movw	r30, r28
    2036:	e8 0d       	add	r30, r8
    2038:	f1 1d       	adc	r31, r1
    203a:	80 81       	ld	r24, Z
    203c:	80 33       	cpi	r24, 0x30	; 48
    203e:	21 f4       	brne	.+8      	; 0x2048 <vfprintf+0x2ee>
    2040:	9a 2d       	mov	r25, r10
    2042:	99 7e       	andi	r25, 0xE9	; 233
    2044:	a9 2e       	mov	r10, r25
    2046:	09 c0       	rjmp	.+18     	; 0x205a <vfprintf+0x300>
    2048:	a2 fe       	sbrs	r10, 2
    204a:	06 c0       	rjmp	.+12     	; 0x2058 <vfprintf+0x2fe>
    204c:	b3 94       	inc	r11
    204e:	b3 94       	inc	r11
    2050:	04 c0       	rjmp	.+8      	; 0x205a <vfprintf+0x300>
    2052:	8a 2d       	mov	r24, r10
    2054:	86 78       	andi	r24, 0x86	; 134
    2056:	09 f0       	breq	.+2      	; 0x205a <vfprintf+0x300>
    2058:	b3 94       	inc	r11
    205a:	a3 fc       	sbrc	r10, 3
    205c:	11 c0       	rjmp	.+34     	; 0x2080 <vfprintf+0x326>
    205e:	a0 fe       	sbrs	r10, 0
    2060:	06 c0       	rjmp	.+12     	; 0x206e <vfprintf+0x314>
    2062:	b2 14       	cp	r11, r2
    2064:	88 f4       	brcc	.+34     	; 0x2088 <vfprintf+0x32e>
    2066:	28 0c       	add	r2, r8
    2068:	92 2c       	mov	r9, r2
    206a:	9b 18       	sub	r9, r11
    206c:	0e c0       	rjmp	.+28     	; 0x208a <vfprintf+0x330>
    206e:	b2 14       	cp	r11, r2
    2070:	60 f4       	brcc	.+24     	; 0x208a <vfprintf+0x330>
    2072:	b6 01       	movw	r22, r12
    2074:	80 e2       	ldi	r24, 0x20	; 32
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    207c:	b3 94       	inc	r11
    207e:	f7 cf       	rjmp	.-18     	; 0x206e <vfprintf+0x314>
    2080:	b2 14       	cp	r11, r2
    2082:	18 f4       	brcc	.+6      	; 0x208a <vfprintf+0x330>
    2084:	2b 18       	sub	r2, r11
    2086:	02 c0       	rjmp	.+4      	; 0x208c <vfprintf+0x332>
    2088:	98 2c       	mov	r9, r8
    208a:	21 2c       	mov	r2, r1
    208c:	a4 fe       	sbrs	r10, 4
    208e:	10 c0       	rjmp	.+32     	; 0x20b0 <vfprintf+0x356>
    2090:	b6 01       	movw	r22, r12
    2092:	80 e3       	ldi	r24, 0x30	; 48
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    209a:	a2 fe       	sbrs	r10, 2
    209c:	17 c0       	rjmp	.+46     	; 0x20cc <vfprintf+0x372>
    209e:	a1 fc       	sbrc	r10, 1
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <vfprintf+0x34e>
    20a2:	88 e7       	ldi	r24, 0x78	; 120
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <vfprintf+0x352>
    20a8:	88 e5       	ldi	r24, 0x58	; 88
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	b6 01       	movw	r22, r12
    20ae:	0c c0       	rjmp	.+24     	; 0x20c8 <vfprintf+0x36e>
    20b0:	8a 2d       	mov	r24, r10
    20b2:	86 78       	andi	r24, 0x86	; 134
    20b4:	59 f0       	breq	.+22     	; 0x20cc <vfprintf+0x372>
    20b6:	a1 fe       	sbrs	r10, 1
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <vfprintf+0x364>
    20ba:	8b e2       	ldi	r24, 0x2B	; 43
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <vfprintf+0x366>
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	a7 fc       	sbrc	r10, 7
    20c2:	8d e2       	ldi	r24, 0x2D	; 45
    20c4:	b6 01       	movw	r22, r12
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    20cc:	89 14       	cp	r8, r9
    20ce:	38 f4       	brcc	.+14     	; 0x20de <vfprintf+0x384>
    20d0:	b6 01       	movw	r22, r12
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    20da:	9a 94       	dec	r9
    20dc:	f7 cf       	rjmp	.-18     	; 0x20cc <vfprintf+0x372>
    20de:	8a 94       	dec	r8
    20e0:	f3 01       	movw	r30, r6
    20e2:	e8 0d       	add	r30, r8
    20e4:	f1 1d       	adc	r31, r1
    20e6:	80 81       	ld	r24, Z
    20e8:	b6 01       	movw	r22, r12
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    20f0:	81 10       	cpse	r8, r1
    20f2:	f5 cf       	rjmp	.-22     	; 0x20de <vfprintf+0x384>
    20f4:	22 20       	and	r2, r2
    20f6:	09 f4       	brne	.+2      	; 0x20fa <vfprintf+0x3a0>
    20f8:	42 ce       	rjmp	.-892    	; 0x1d7e <vfprintf+0x24>
    20fa:	b6 01       	movw	r22, r12
    20fc:	80 e2       	ldi	r24, 0x20	; 32
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 a4 10 	call	0x2148	; 0x2148 <fputc>
    2104:	2a 94       	dec	r2
    2106:	f6 cf       	rjmp	.-20     	; 0x20f4 <vfprintf+0x39a>
    2108:	f6 01       	movw	r30, r12
    210a:	86 81       	ldd	r24, Z+6	; 0x06
    210c:	97 81       	ldd	r25, Z+7	; 0x07
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <vfprintf+0x3ba>
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	2b 96       	adiw	r28, 0x0b	; 11
    2116:	e2 e1       	ldi	r30, 0x12	; 18
    2118:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__>

0000211c <strnlen_P>:
    211c:	fc 01       	movw	r30, r24
    211e:	05 90       	lpm	r0, Z+
    2120:	61 50       	subi	r22, 0x01	; 1
    2122:	70 40       	sbci	r23, 0x00	; 0
    2124:	01 10       	cpse	r0, r1
    2126:	d8 f7       	brcc	.-10     	; 0x211e <strnlen_P+0x2>
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	8e 0f       	add	r24, r30
    212e:	9f 1f       	adc	r25, r31
    2130:	08 95       	ret

00002132 <strnlen>:
    2132:	fc 01       	movw	r30, r24
    2134:	61 50       	subi	r22, 0x01	; 1
    2136:	70 40       	sbci	r23, 0x00	; 0
    2138:	01 90       	ld	r0, Z+
    213a:	01 10       	cpse	r0, r1
    213c:	d8 f7       	brcc	.-10     	; 0x2134 <strnlen+0x2>
    213e:	80 95       	com	r24
    2140:	90 95       	com	r25
    2142:	8e 0f       	add	r24, r30
    2144:	9f 1f       	adc	r25, r31
    2146:	08 95       	ret

00002148 <fputc>:
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	fb 01       	movw	r30, r22
    2152:	23 81       	ldd	r18, Z+3	; 0x03
    2154:	21 fd       	sbrc	r18, 1
    2156:	03 c0       	rjmp	.+6      	; 0x215e <fputc+0x16>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f ef       	ldi	r25, 0xFF	; 255
    215c:	2c c0       	rjmp	.+88     	; 0x21b6 <fputc+0x6e>
    215e:	22 ff       	sbrs	r18, 2
    2160:	16 c0       	rjmp	.+44     	; 0x218e <fputc+0x46>
    2162:	46 81       	ldd	r20, Z+6	; 0x06
    2164:	57 81       	ldd	r21, Z+7	; 0x07
    2166:	24 81       	ldd	r18, Z+4	; 0x04
    2168:	35 81       	ldd	r19, Z+5	; 0x05
    216a:	42 17       	cp	r20, r18
    216c:	53 07       	cpc	r21, r19
    216e:	44 f4       	brge	.+16     	; 0x2180 <fputc+0x38>
    2170:	a0 81       	ld	r26, Z
    2172:	b1 81       	ldd	r27, Z+1	; 0x01
    2174:	9d 01       	movw	r18, r26
    2176:	2f 5f       	subi	r18, 0xFF	; 255
    2178:	3f 4f       	sbci	r19, 0xFF	; 255
    217a:	31 83       	std	Z+1, r19	; 0x01
    217c:	20 83       	st	Z, r18
    217e:	8c 93       	st	X, r24
    2180:	26 81       	ldd	r18, Z+6	; 0x06
    2182:	37 81       	ldd	r19, Z+7	; 0x07
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	37 83       	std	Z+7, r19	; 0x07
    218a:	26 83       	std	Z+6, r18	; 0x06
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <fputc+0x6e>
    218e:	8b 01       	movw	r16, r22
    2190:	ec 01       	movw	r28, r24
    2192:	fb 01       	movw	r30, r22
    2194:	00 84       	ldd	r0, Z+8	; 0x08
    2196:	f1 85       	ldd	r31, Z+9	; 0x09
    2198:	e0 2d       	mov	r30, r0
    219a:	09 95       	icall
    219c:	89 2b       	or	r24, r25
    219e:	e1 f6       	brne	.-72     	; 0x2158 <fputc+0x10>
    21a0:	d8 01       	movw	r26, r16
    21a2:	16 96       	adiw	r26, 0x06	; 6
    21a4:	8d 91       	ld	r24, X+
    21a6:	9c 91       	ld	r25, X
    21a8:	17 97       	sbiw	r26, 0x07	; 7
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	17 96       	adiw	r26, 0x07	; 7
    21ae:	9c 93       	st	X, r25
    21b0:	8e 93       	st	-X, r24
    21b2:	16 97       	sbiw	r26, 0x06	; 6
    21b4:	ce 01       	movw	r24, r28
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <__ultoa_invert>:
    21c0:	fa 01       	movw	r30, r20
    21c2:	aa 27       	eor	r26, r26
    21c4:	28 30       	cpi	r18, 0x08	; 8
    21c6:	51 f1       	breq	.+84     	; 0x221c <__ultoa_invert+0x5c>
    21c8:	20 31       	cpi	r18, 0x10	; 16
    21ca:	81 f1       	breq	.+96     	; 0x222c <__ultoa_invert+0x6c>
    21cc:	e8 94       	clt
    21ce:	6f 93       	push	r22
    21d0:	6e 7f       	andi	r22, 0xFE	; 254
    21d2:	6e 5f       	subi	r22, 0xFE	; 254
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	8f 4f       	sbci	r24, 0xFF	; 255
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	af 4f       	sbci	r26, 0xFF	; 255
    21dc:	b1 e0       	ldi	r27, 0x01	; 1
    21de:	3e d0       	rcall	.+124    	; 0x225c <__ultoa_invert+0x9c>
    21e0:	b4 e0       	ldi	r27, 0x04	; 4
    21e2:	3c d0       	rcall	.+120    	; 0x225c <__ultoa_invert+0x9c>
    21e4:	67 0f       	add	r22, r23
    21e6:	78 1f       	adc	r23, r24
    21e8:	89 1f       	adc	r24, r25
    21ea:	9a 1f       	adc	r25, r26
    21ec:	a1 1d       	adc	r26, r1
    21ee:	68 0f       	add	r22, r24
    21f0:	79 1f       	adc	r23, r25
    21f2:	8a 1f       	adc	r24, r26
    21f4:	91 1d       	adc	r25, r1
    21f6:	a1 1d       	adc	r26, r1
    21f8:	6a 0f       	add	r22, r26
    21fa:	71 1d       	adc	r23, r1
    21fc:	81 1d       	adc	r24, r1
    21fe:	91 1d       	adc	r25, r1
    2200:	a1 1d       	adc	r26, r1
    2202:	20 d0       	rcall	.+64     	; 0x2244 <__ultoa_invert+0x84>
    2204:	09 f4       	brne	.+2      	; 0x2208 <__ultoa_invert+0x48>
    2206:	68 94       	set
    2208:	3f 91       	pop	r19
    220a:	2a e0       	ldi	r18, 0x0A	; 10
    220c:	26 9f       	mul	r18, r22
    220e:	11 24       	eor	r1, r1
    2210:	30 19       	sub	r19, r0
    2212:	30 5d       	subi	r19, 0xD0	; 208
    2214:	31 93       	st	Z+, r19
    2216:	de f6       	brtc	.-74     	; 0x21ce <__ultoa_invert+0xe>
    2218:	cf 01       	movw	r24, r30
    221a:	08 95       	ret
    221c:	46 2f       	mov	r20, r22
    221e:	47 70       	andi	r20, 0x07	; 7
    2220:	40 5d       	subi	r20, 0xD0	; 208
    2222:	41 93       	st	Z+, r20
    2224:	b3 e0       	ldi	r27, 0x03	; 3
    2226:	0f d0       	rcall	.+30     	; 0x2246 <__ultoa_invert+0x86>
    2228:	c9 f7       	brne	.-14     	; 0x221c <__ultoa_invert+0x5c>
    222a:	f6 cf       	rjmp	.-20     	; 0x2218 <__ultoa_invert+0x58>
    222c:	46 2f       	mov	r20, r22
    222e:	4f 70       	andi	r20, 0x0F	; 15
    2230:	40 5d       	subi	r20, 0xD0	; 208
    2232:	4a 33       	cpi	r20, 0x3A	; 58
    2234:	18 f0       	brcs	.+6      	; 0x223c <__ultoa_invert+0x7c>
    2236:	49 5d       	subi	r20, 0xD9	; 217
    2238:	31 fd       	sbrc	r19, 1
    223a:	40 52       	subi	r20, 0x20	; 32
    223c:	41 93       	st	Z+, r20
    223e:	02 d0       	rcall	.+4      	; 0x2244 <__ultoa_invert+0x84>
    2240:	a9 f7       	brne	.-22     	; 0x222c <__ultoa_invert+0x6c>
    2242:	ea cf       	rjmp	.-44     	; 0x2218 <__ultoa_invert+0x58>
    2244:	b4 e0       	ldi	r27, 0x04	; 4
    2246:	a6 95       	lsr	r26
    2248:	97 95       	ror	r25
    224a:	87 95       	ror	r24
    224c:	77 95       	ror	r23
    224e:	67 95       	ror	r22
    2250:	ba 95       	dec	r27
    2252:	c9 f7       	brne	.-14     	; 0x2246 <__ultoa_invert+0x86>
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	61 05       	cpc	r22, r1
    2258:	71 05       	cpc	r23, r1
    225a:	08 95       	ret
    225c:	9b 01       	movw	r18, r22
    225e:	ac 01       	movw	r20, r24
    2260:	0a 2e       	mov	r0, r26
    2262:	06 94       	lsr	r0
    2264:	57 95       	ror	r21
    2266:	47 95       	ror	r20
    2268:	37 95       	ror	r19
    226a:	27 95       	ror	r18
    226c:	ba 95       	dec	r27
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__ultoa_invert+0xa2>
    2270:	62 0f       	add	r22, r18
    2272:	73 1f       	adc	r23, r19
    2274:	84 1f       	adc	r24, r20
    2276:	95 1f       	adc	r25, r21
    2278:	a0 1d       	adc	r26, r0
    227a:	08 95       	ret

0000227c <__prologue_saves__>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	ca 1b       	sub	r28, r26
    22a6:	db 0b       	sbc	r29, r27
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	09 94       	ijmp

000022b4 <__epilogue_restores__>:
    22b4:	2a 88       	ldd	r2, Y+18	; 0x12
    22b6:	39 88       	ldd	r3, Y+17	; 0x11
    22b8:	48 88       	ldd	r4, Y+16	; 0x10
    22ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    22bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    22be:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c6:	b9 84       	ldd	r11, Y+9	; 0x09
    22c8:	c8 84       	ldd	r12, Y+8	; 0x08
    22ca:	df 80       	ldd	r13, Y+7	; 0x07
    22cc:	ee 80       	ldd	r14, Y+6	; 0x06
    22ce:	fd 80       	ldd	r15, Y+5	; 0x05
    22d0:	0c 81       	ldd	r16, Y+4	; 0x04
    22d2:	1b 81       	ldd	r17, Y+3	; 0x03
    22d4:	aa 81       	ldd	r26, Y+2	; 0x02
    22d6:	b9 81       	ldd	r27, Y+1	; 0x01
    22d8:	ce 0f       	add	r28, r30
    22da:	d1 1d       	adc	r29, r1
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	ed 01       	movw	r28, r26
    22e8:	08 95       	ret

000022ea <_exit>:
    22ea:	f8 94       	cli

000022ec <__stop_program>:
    22ec:	ff cf       	rjmp	.-2      	; 0x22ec <__stop_program>
