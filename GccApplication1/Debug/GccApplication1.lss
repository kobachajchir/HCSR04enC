
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005e2  00800100  00002292  00002326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  008006e2  008006e2  00002908  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000444f  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001667  00000000  00000000  00007083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002252  00000000  00000000  000086ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  0000a93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f44  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad4  00000000  00000000  0000c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_18>
      4c:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	16 e0       	ldi	r17, 0x06	; 6
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e9       	ldi	r30, 0x92	; 146
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3e       	cpi	r26, 0xE2	; 226
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a2 ee       	ldi	r26, 0xE2	; 226
      8e:	b6 e0       	ldi	r27, 0x06	; 6
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3a       	cpi	r26, 0xAA	; 170
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
      9e:	0c 94 47 11 	jmp	0x228e	; 0x228e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// 	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
// 	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
// }

void printfWrapper(const char* message) {
	printf("%s\n", message);
      a6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
	// Verificamos el estado actual del sensor
	switch (ultraSensor.state)
      c6:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
	{
		case ULTRA_WAIT_RISING:
		{
			if(ultraSensor.ECHO_RISING){
      d4:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
				ultraSensor.echo_init_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno init time
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <ultraSensor>
     100:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <ultraSensor+0x1>
     104:	a0 93 5f 07 	sts	0x075F, r26	; 0x80075f <ultraSensor+0x2>
     108:	b0 93 60 07 	sts	0x0760, r27	; 0x800760 <ultraSensor+0x3>
				ultraSensor.ECHO_RISING = 0; //Bajo la bandera para marcar que llene init time
     10c:	e9 e6       	ldi	r30, 0x69	; 105
     10e:	f7 e0       	ldi	r31, 0x07	; 7
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			ultraSensor.echo_finish_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno finish time
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <ultraSensor+0x4>
     13c:	90 93 62 07 	sts	0x0762, r25	; 0x800762 <ultraSensor+0x5>
     140:	a0 93 63 07 	sts	0x0763, r26	; 0x800763 <ultraSensor+0x6>
     144:	b0 93 64 07 	sts	0x0764, r27	; 0x800764 <ultraSensor+0x7>
			ultraSensor.ECHO_RECEIVED = 1; //Esto lo pone en modo de calcular
     148:	e9 e6       	ldi	r30, 0x69	; 105
     14a:	f7 e0       	ldi	r31, 0x07	; 7
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
			break;
		}
	}
}
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
     178:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <ovf_count>
}
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	cf 93       	push	r28
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
     1ba:	e8 e8       	ldi	r30, 0x88	; 136
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	80 5c       	subi	r24, 0xC0	; 192
     1c4:	93 46       	sbci	r25, 0x63	; 99
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
	IR_READ_INTERRUPT = 1;
     1ca:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	45 c0       	rjmp	.+138    	; 0x262 <__vector_11+0xd4>
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
     1d8:	ec 2e       	mov	r14, r28
     1da:	f1 2c       	mov	r15, r1
     1dc:	f7 01       	movw	r30, r14
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	ec 5a       	subi	r30, 0xAC	; 172
     1e4:	f8 4f       	sbci	r31, 0xF8	; 248
     1e6:	00 81       	ld	r16, Z
     1e8:	11 81       	ldd	r17, Z+1	; 0x01
     1ea:	f8 01       	movw	r30, r16
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__vector_11+0xd2>
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     1fa:	82 fd       	sbrc	r24, 2
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
				// If in push mode, use maximum pulse
				servosArray[i]->pulse_us = SERVO_MAX_PULSE;
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	82 83       	std	Z+2, r24	; 0x02
     206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_11+0x88>
				//printf("ISR COMPA PUSH %d...\n", servosArray[i]->pin);
				} else {
				// Otherwise use the angle setting
				servosArray[i]->pulse_us = calculate_angle_pulseUs(servosArray[i]->angle);
     208:	f8 01       	movw	r30, r16
     20a:	84 81       	ldd	r24, Z+4	; 0x04
     20c:	0e 94 16 0b 	call	0x162c	; 0x162c <calculate_angle_pulseUs>
     210:	f8 01       	movw	r30, r16
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
			}

			// Set the pin high immediately if it's the first servo
			if (i == 0) {
     216:	c1 11       	cpse	r28, r1
     218:	23 c0       	rjmp	.+70     	; 0x260 <__vector_11+0xd2>
				PORTB |= (1 << servosArray[i]->pin);
     21a:	f7 01       	movw	r30, r14
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	ec 5a       	subi	r30, 0xAC	; 172
     222:	f8 4f       	sbci	r31, 0xF8	; 248
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	2c 91       	ld	r18, X
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
				// Schedule turn-off with Compare B
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	01 90       	ld	r0, Z+
     248:	f0 81       	ld	r31, Z
     24a:	e0 2d       	mov	r30, r0
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				current_servo = 0; // Mark this as the active servo
     25c:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <current_servo>
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
	IR_READ_INTERRUPT = 1;
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     260:	cf 5f       	subi	r28, 0xFF	; 255
     262:	c3 30       	cpi	r28, 0x03	; 3
     264:	08 f4       	brcc	.+2      	; 0x268 <__vector_11+0xda>
     266:	b8 cf       	rjmp	.-144    	; 0x1d8 <__vector_11+0x4a>
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
				current_servo = 0; // Mark this as the active servo
			}
		}
	}
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	cf 91       	pop	r28
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
     2ba:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ec 5a       	subi	r30, 0xAC	; 172
     2c6:	f8 4f       	sbci	r31, 0xF8	; 248
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 81       	ld	r18, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_12+0x46>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_12+0x42>
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	95 b1       	in	r25, 0x05	; 5
     2e4:	89 23       	and	r24, r25
     2e6:	85 b9       	out	0x05, r24	; 5
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     2e8:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	ec 5a       	subi	r30, 0xAC	; 172
     2f4:	f8 4f       	sbci	r31, 0xF8	; 248
     2f6:	01 90       	ld	r0, Z+
     2f8:	f0 81       	ld	r31, Z
     2fa:	e0 2d       	mov	r30, r0
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	81 ff       	sbrs	r24, 1
     300:	6b c0       	rjmp	.+214    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
     302:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ec 5a       	subi	r30, 0xAC	; 172
     30e:	f8 4f       	sbci	r31, 0xF8	; 248
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	81 81       	ldd	r24, Z+1	; 0x01
ISR(TIMER1_COMPB_vect) {
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     318:	82 ff       	sbrs	r24, 2
     31a:	5e c0       	rjmp	.+188    	; 0x3d8 <__vector_12+0x144>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
		
		// Clear the push and reset flags
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_RESET);
     31c:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ec 5a       	subi	r30, 0xAC	; 172
     328:	f8 4f       	sbci	r31, 0xF8	; 248
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	81 81       	ldd	r24, Z+1	; 0x01
     332:	8b 7f       	andi	r24, 0xFB	; 251
     334:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_PUSH);
     336:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	ec 5a       	subi	r30, 0xAC	; 172
     342:	f8 4f       	sbci	r31, 0xF8	; 248
     344:	01 90       	ld	r0, Z+
     346:	f0 81       	ld	r31, Z
     348:	e0 2d       	mov	r30, r0
     34a:	81 81       	ldd	r24, Z+1	; 0x01
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	81 83       	std	Z+1, r24	; 0x01
		// Return to idle angle
		servosArray[current_servo]->angle = SERVO_IDLE_ANGLE;
     350:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	ec 5a       	subi	r30, 0xAC	; 172
     35c:	f8 4f       	sbci	r31, 0xF8	; 248
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	8a e5       	ldi	r24, 0x5A	; 90
     366:	84 83       	std	Z+4, r24	; 0x04
		servosArray[current_servo]->pulse_us = calculate_angle_pulseUs(servosArray[current_servo]->angle);
     368:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ec 5a       	subi	r30, 0xAC	; 172
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	c0 81       	ld	r28, Z
     378:	d1 81       	ldd	r29, Z+1	; 0x01
     37a:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ec 5a       	subi	r30, 0xAC	; 172
     386:	f8 4f       	sbci	r31, 0xF8	; 248
     388:	01 90       	ld	r0, Z+
     38a:	f0 81       	ld	r31, Z
     38c:	e0 2d       	mov	r30, r0
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	0e 94 16 0b 	call	0x162c	; 0x162c <calculate_angle_pulseUs>
     394:	9b 83       	std	Y+3, r25	; 0x03
     396:	8a 83       	std	Y+2, r24	; 0x02
		if(current_servo == 0){
     398:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     39c:	81 11       	cpse	r24, r1
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <__vector_12+0x11a>
			SET_FLAG(salidaA.flags, OUTPUT_READY);
     3a0:	ee ef       	ldi	r30, 0xFE	; 254
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaA.flags, OUTPUT_BUSY);
     3a8:	8e 7f       	andi	r24, 0xFE	; 254
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE A\n");
		}else if(current_servo == 1){
     3ae:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	39 f4       	brne	.+14     	; 0x3c4 <__vector_12+0x130>
			SET_FLAG(salidaB.flags, OUTPUT_READY);
     3b6:	e1 ea       	ldi	r30, 0xA1	; 161
     3b8:	f7 e0       	ldi	r31, 0x07	; 7
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaB.flags, OUTPUT_BUSY);
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	82 83       	std	Z+2, r24	; 0x02
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <__vector_12+0x144>
			//printf("Volvio a posicion IDLE B\n");
		}else if(current_servo == 2){
     3c4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <__vector_12+0x144>
			SET_FLAG(salidaC.flags, OUTPUT_READY);
     3cc:	ea e5       	ldi	r30, 0x5A	; 90
     3ce:	f7 e0       	ldi	r31, 0x07	; 7
     3d0:	82 81       	ldd	r24, Z+2	; 0x02
     3d2:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaC.flags, OUTPUT_BUSY);
     3d4:	8e 7f       	andi	r24, 0xFE	; 254
     3d6:	82 83       	std	Z+2, r24	; 0x02
			//printf("Volvio a posicion IDLE C\n");
		}
	}
	
	// Move to next servo, but only if there are more servos to process in this frame
	current_servo++;
     3d8:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <current_servo>
	if (current_servo < NUM_OUTPUTS) {
     3e2:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <__vector_12+0x158>
     3ea:	91 c0       	rjmp	.+290    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		// If there are more servos to process, activate the next one
		if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     3ec:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	ec 5a       	subi	r30, 0xAC	; 172
     3f8:	f8 4f       	sbci	r31, 0xF8	; 248
     3fa:	01 90       	ld	r0, Z+
     3fc:	f0 81       	ld	r31, Z
     3fe:	e0 2d       	mov	r30, r0
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	80 ff       	sbrs	r24, 0
     404:	2c c0       	rjmp	.+88     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			// Turn on the pin for the next servo
			PORTB |= (1 << servosArray[current_servo]->pin);
     406:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ec 5a       	subi	r30, 0xAC	; 172
     412:	f8 4f       	sbci	r31, 0xF8	; 248
     414:	01 90       	ld	r0, Z+
     416:	f0 81       	ld	r31, Z
     418:	e0 2d       	mov	r30, r0
     41a:	20 81       	ld	r18, Z
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	2a 95       	dec	r18
     428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42a:	95 b1       	in	r25, 0x05	; 5
     42c:	89 2b       	or	r24, r25
     42e:	85 b9       	out	0x05, r24	; 5
			// Schedule turn-off
			OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     430:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     434:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     438:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	ec 5a       	subi	r30, 0xAC	; 172
     444:	f8 4f       	sbci	r31, 0xF8	; 248
     446:	01 90       	ld	r0, Z+
     448:	f0 81       	ld	r31, Z
     44a:	e0 2d       	mov	r30, r0
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	82 0f       	add	r24, r18
     452:	93 1f       	adc	r25, r19
     454:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     458:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     45c:	58 c0       	rjmp	.+176    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			} else {
			// If the next servo isn't enabled, skip to the one after
			// This is a recursive call to COMPB logic without the actual interrupt
			PORTB &= ~(1 << servosArray[current_servo]->pin); // Make sure the pin is low
     45e:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ec 5a       	subi	r30, 0xAC	; 172
     46a:	f8 4f       	sbci	r31, 0xF8	; 248
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	20 81       	ld	r18, Z
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	2a 95       	dec	r18
     480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     482:	80 95       	com	r24
     484:	90 95       	com	r25
     486:	95 b1       	in	r25, 0x05	; 5
     488:	89 23       	and	r24, r25
     48a:	85 b9       	out	0x05, r24	; 5
			current_servo++;
     48c:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <current_servo>
			// Continue checking for the next enabled servo
			if (current_servo < NUM_OUTPUTS && IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     496:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <current_servo>
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	c0 f5       	brcc	.+112    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     49e:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	ec 5a       	subi	r30, 0xAC	; 172
     4aa:	f8 4f       	sbci	r31, 0xF8	; 248
     4ac:	01 90       	ld	r0, Z+
     4ae:	f0 81       	ld	r31, Z
     4b0:	e0 2d       	mov	r30, r0
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
     4b4:	80 ff       	sbrs	r24, 0
     4b6:	2b c0       	rjmp	.+86     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
				PORTB |= (1 << servosArray[current_servo]->pin);
     4b8:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ec 5a       	subi	r30, 0xAC	; 172
     4c4:	f8 4f       	sbci	r31, 0xF8	; 248
     4c6:	01 90       	ld	r0, Z+
     4c8:	f0 81       	ld	r31, Z
     4ca:	e0 2d       	mov	r30, r0
     4cc:	20 81       	ld	r18, Z
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	2a 95       	dec	r18
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4dc:	95 b1       	in	r25, 0x05	; 5
     4de:	89 2b       	or	r24, r25
     4e0:	85 b9       	out	0x05, r24	; 5
				OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     4e2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4e6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4ea:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <current_servo>
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	ec 5a       	subi	r30, 0xAC	; 172
     4f6:	f8 4f       	sbci	r31, 0xF8	; 248
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	93 81       	ldd	r25, Z+3	; 0x03
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     50a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}
		}
	}
	// If current_servo >= NUM_OUTPUTS, we've processed all servos for this frame
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_18>:

ISR(USART_RX_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
	uint8_t received_byte = UDR0;  // Lee el byte recibido
     550:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Calcular el próximo índice de escritura en el buffer circular
	uint8_t next_indexW = (protocolService.indexW + 1) % PROTOCOL_BUFFER_SIZE;
     554:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <protocolService>
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	c9 01       	movw	r24, r18
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	8f 71       	andi	r24, 0x1F	; 31
     560:	90 78       	andi	r25, 0x80	; 128
     562:	99 23       	and	r25, r25
     564:	24 f4       	brge	.+8      	; 0x56e <__vector_18+0x3a>
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	80 6e       	ori	r24, 0xE0	; 224
     56a:	9f 6f       	ori	r25, 0xFF	; 255
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	48 2f       	mov	r20, r24

	// Verifica si el buffer está lleno: si el próximo índice de escritura es igual al índice de lectura
	if (next_indexW == protocolService.indexR) {
     570:	50 91 75 07 	lds	r21, 0x0775	; 0x800775 <protocolService+0x1>
     574:	85 13       	cpse	r24, r21
     576:	06 c0       	rjmp	.+12     	; 0x584 <__vector_18+0x50>
		// El buffer está lleno; activa la bandera para procesar datos antes de sobrescribir
		SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     578:	e4 e7       	ldi	r30, 0x74	; 116
     57a:	f7 e0       	ldi	r31, 0x07	; 7
     57c:	82 a1       	ldd	r24, Z+34	; 0x22
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	82 a3       	std	Z+34, r24	; 0x22
     582:	13 c0       	rjmp	.+38     	; 0x5aa <__vector_18+0x76>
		// Opcional: podrías descartar el byte recibido
		} else {
		// Hay espacio: copia el byte en el buffer
		protocolService.buffer[protocolService.indexW] = received_byte;
     584:	f9 01       	movw	r30, r18
     586:	ec 58       	subi	r30, 0x8C	; 140
     588:	f8 4f       	sbci	r31, 0xF8	; 248
     58a:	62 83       	std	Z+2, r22	; 0x02
		protocolService.indexW = next_indexW;
     58c:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <protocolService>

		// Calcular la cantidad de bytes disponibles en el buffer (caso circular)
		uint8_t available;
		if (protocolService.indexW >= protocolService.indexR) {
     590:	85 17       	cp	r24, r21
     592:	10 f0       	brcs	.+4      	; 0x598 <__vector_18+0x64>
			available = protocolService.indexW - protocolService.indexR;
     594:	45 1b       	sub	r20, r21
     596:	02 c0       	rjmp	.+4      	; 0x59c <__vector_18+0x68>
			} else {
			available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
     598:	45 1b       	sub	r20, r21
     59a:	40 5e       	subi	r20, 0xE0	; 224
		}

		// Si hay al menos 6 bytes (mínimo para un paquete) disponibles, activa processData
		if (available >= 6) {
     59c:	46 30       	cpi	r20, 0x06	; 6
     59e:	28 f0       	brcs	.+10     	; 0x5aa <__vector_18+0x76>
			SET_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     5a0:	e4 e7       	ldi	r30, 0x74	; 116
     5a2:	f7 e0       	ldi	r31, 0x07	; 7
     5a4:	82 a1       	ldd	r24, Z+34	; 0x22
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	82 a3       	std	Z+34, r24	; 0x22
		}
	}
}
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	6f 91       	pop	r22
     5b4:	5f 91       	pop	r21
     5b6:	4f 91       	pop	r20
     5b8:	3f 91       	pop	r19
     5ba:	2f 91       	pop	r18
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <__vector_19>:


ISR(USART_UDRE_vect)
{
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	8f 93       	push	r24
     5d2:	9f 93       	push	r25
     5d4:	af 93       	push	r26
     5d6:	bf 93       	push	r27
     5d8:	ef 93       	push	r30
     5da:	ff 93       	push	r31
	// Si aún hay datos en el buffer...
	if (protocolService.indexR != protocolService.indexW) {
     5dc:	a4 e7       	ldi	r26, 0x74	; 116
     5de:	b7 e0       	ldi	r27, 0x07	; 7
     5e0:	11 96       	adiw	r26, 0x01	; 1
     5e2:	ec 91       	ld	r30, X
     5e4:	11 97       	sbiw	r26, 0x01	; 1
     5e6:	8c 91       	ld	r24, X
     5e8:	e8 17       	cp	r30, r24
     5ea:	a9 f0       	breq	.+42     	; 0x616 <__vector_19+0x50>
		// Enviar el siguiente byte
		UDR0 = protocolService.buffer[protocolService.indexR];
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	ec 58       	subi	r30, 0x8C	; 140
     5f0:	f8 4f       	sbci	r31, 0xF8	; 248
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
     5f8:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <protocolService+0x1>
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	8f 71       	andi	r24, 0x1F	; 31
     602:	90 78       	andi	r25, 0x80	; 128
     604:	99 23       	and	r25, r25
     606:	24 f4       	brge	.+8      	; 0x610 <__vector_19+0x4a>
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	80 6e       	ori	r24, 0xE0	; 224
     60c:	9f 6f       	ori	r25, 0xFF	; 255
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <protocolService+0x1>
     614:	05 c0       	rjmp	.+10     	; 0x620 <__vector_19+0x5a>
		} else {
		// Si el buffer está vacío, deshabilitar la interrupción para no seguir disparando
		UCSR0B &= ~(1 << UDRIE0);
     616:	e1 ec       	ldi	r30, 0xC1	; 193
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	8f 7d       	andi	r24, 0xDF	; 223
     61e:	80 83       	st	Z, r24
	}
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <timer1_init>:
/* Timer1 and External Interrupt Functions ---------------------------------*/

void timer1_init()
{
	// Reset the timer counter
	TCNT1 = 0;
     636:	a4 e8       	ldi	r26, 0x84	; 132
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	11 96       	adiw	r26, 0x01	; 1
     63c:	1c 92       	st	X, r1
     63e:	1e 92       	st	-X, r1
	// Clear input capture flag
	TIFR1 |= (1 << ICF1);
     640:	86 b3       	in	r24, 0x16	; 22
     642:	80 62       	ori	r24, 0x20	; 32
     644:	86 bb       	out	0x16, r24	; 22
	// Enable input capture interrupt and overflow interrupt
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
     646:	ef e6       	ldi	r30, 0x6F	; 111
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	87 62       	ori	r24, 0x27	; 39
     64e:	80 83       	st	Z, r24
	// Set to capture rising edge initially
	TCCR1B |= (1 << ICES1);
     650:	e1 e8       	ldi	r30, 0x81	; 129
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	80 64       	ori	r24, 0x40	; 64
     658:	80 83       	st	Z, r24
	// Set prescaler to 8 for adequate timing resolution
	TCCR1B |= (1 << CS11);  // Prescaler = 8
     65a:	80 81       	ld	r24, Z
     65c:	82 60       	ori	r24, 0x02	; 2
     65e:	80 83       	st	Z, r24
	OCR1A = TCNT1 + SERVO_FRAME_PERIOD; // Primera interrupción en 20ms desde ya
     660:	8d 91       	ld	r24, X+
     662:	9c 91       	ld	r25, X
     664:	80 5c       	subi	r24, 0xC0	; 192
     666:	93 46       	sbci	r25, 0x63	; 99
     668:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     66c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     670:	08 95       	ret

00000672 <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler de 1024
     672:	e1 eb       	ldi	r30, 0xB1	; 177
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	87 60       	ori	r24, 0x07	; 7
     67a:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
     67c:	8b e9       	ldi	r24, 0x9B	; 155
     67e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
     682:	e0 e7       	ldi	r30, 0x70	; 112
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	82 60       	ori	r24, 0x02	; 2
     68a:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
     68c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     690:	08 95       	ret

00000692 <gpio_pins_init>:
	// El prescaler se configurará cuando necesitemos iniciar el timer
}

void gpio_pins_init() {
	DDRB |= (1 << LED_BUILTIN_PIN);   // LED pin salida
     692:	84 b1       	in	r24, 0x04	; 4
     694:	80 62       	ori	r24, 0x20	; 32
     696:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED_BUILTIN_PIN);  // LED HIGH
     698:	85 b1       	in	r24, 0x05	; 5
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1 << TRIGGER_PIN);       // TRIGGER pin salida
     69e:	8a b1       	in	r24, 0x0a	; 10
     6a0:	88 60       	ori	r24, 0x08	; 8
     6a2:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << ECHO_PIN);         // ECHO pin como entrada
     6a4:	84 b1       	in	r24, 0x04	; 4
     6a6:	8e 7f       	andi	r24, 0xFE	; 254
     6a8:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BUTTON_PIN);       // BUTTON pin como entrada
     6aa:	8a b1       	in	r24, 0x0a	; 10
     6ac:	8f 7e       	andi	r24, 0xEF	; 239
     6ae:	8a b9       	out	0x0a, r24	; 10
	
	//Inicializar las salidas de servos
	DDRB |= (1 << SERVOA_PIN); // SERVOA_PIN como salida
     6b0:	84 b1       	in	r24, 0x04	; 4
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOB_PIN); // SERVOB_PIN como salida
     6b6:	84 b1       	in	r24, 0x04	; 4
     6b8:	84 60       	ori	r24, 0x04	; 4
     6ba:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOC_PIN); // SERVOC_PIN como salida
     6bc:	84 b1       	in	r24, 0x04	; 4
     6be:	88 60       	ori	r24, 0x08	; 8
     6c0:	84 b9       	out	0x04, r24	; 4
	
	tcrt_init(); //Despues haremos esto para todos los sensores, modularizando
     6c2:	0e 94 4d 0b 	call	0x169a	; 0x169a <tcrt_init>
	
	// Poner en bajo estos pines para asegurarnos
	PORTD &= ~(1 << TRIGGER_PIN);
     6c6:	8b b1       	in	r24, 0x0b	; 11
     6c8:	87 7f       	andi	r24, 0xF7	; 247
     6ca:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << BUTTON_PIN);
     6cc:	8b b1       	in	r24, 0x0b	; 11
     6ce:	8f 7e       	andi	r24, 0xEF	; 239
     6d0:	8b b9       	out	0x0b, r24	; 11
     6d2:	08 95       	ret

000006d4 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     6f6:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     6fa:	81 ff       	sbrs	r24, 1
     6fc:	ee c0       	rjmp	.+476    	; 0x8da <__DATA_REGION_LENGTH__+0xda>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     6fe:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <ultraSensor+0xd>
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	51 f5       	brne	.+84     	; 0x75a <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     706:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     70a:	85 fd       	sbrc	r24, 5
     70c:	0d c0       	rjmp	.+26     	; 0x728 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     70e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     712:	e9 e6       	ldi	r30, 0x69	; 105
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	80 81       	ld	r24, Z
     718:	81 60       	ori	r24, 0x01	; 1
     71a:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     71c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     720:	80 62       	ori	r24, 0x20	; 32
     722:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
     726:	19 c0       	rjmp	.+50     	; 0x75a <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     728:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     72c:	e9 e6       	ldi	r30, 0x69	; 105
     72e:	f7 e0       	ldi	r31, 0x07	; 7
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     736:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     73a:	8d 7d       	andi	r24, 0xDD	; 221
     73c:	88 60       	ori	r24, 0x08	; 8
     73e:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     742:	80 81       	ld	r24, Z
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     74e:	80 81       	ld	r24, Z
     750:	80 61       	ori	r24, 0x10	; 16
     752:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     754:	80 81       	ld	r24, Z
     756:	8d 7f       	andi	r24, 0xFD	; 253
     758:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     75a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <ultraSensor+0xd>
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	d1 f4       	brne	.+52     	; 0x796 <__vector_7+0xc2>
     762:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <ultraSensor+0xc>
     766:	84 ff       	sbrs	r24, 4
     768:	16 c0       	rjmp	.+44     	; 0x796 <__vector_7+0xc2>
     76a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     76e:	89 70       	andi	r24, 0x09	; 9
     770:	88 30       	cpi	r24, 0x08	; 8
     772:	89 f4       	brne	.+34     	; 0x796 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     774:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <veintems_counter>
     778:	81 11       	cpse	r24, r1
     77a:	06 c0       	rjmp	.+12     	; 0x788 <__vector_7+0xb4>
				veintems_counter++;
     77c:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <veintems_counter>
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <veintems_counter>
     786:	07 c0       	rjmp	.+14     	; 0x796 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     788:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     78c:	81 60       	ori	r24, 0x01	; 1
     78e:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
				veintems_counter = 0;
     792:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     796:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <ultraSensor+0xc>
     79a:	85 fd       	sbrc	r24, 5
     79c:	22 c0       	rjmp	.+68     	; 0x7e2 <__vector_7+0x10e>
     79e:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     7a2:	84 fd       	sbrc	r24, 4
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     7a6:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <wait_time>
     7aa:	87 30       	cpi	r24, 0x07	; 7
     7ac:	30 f4       	brcc	.+12     	; 0x7ba <__vector_7+0xe6>
				wait_time++;
     7ae:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <wait_time>
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <wait_time>
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     7ba:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     7be:	80 61       	ori	r24, 0x10	; 16
     7c0:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
				wait_time = 0;
     7c4:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     7c8:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <ultraSensor+0xc>
     7cc:	83 ff       	sbrs	r24, 3
     7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     7d0:	60 91 39 07 	lds	r22, 0x0739	; 0x800739 <bandera2>
     7d4:	66 fb       	bst	r22, 6
     7d6:	66 27       	eor	r22, r22
     7d8:	60 f9       	bld	r22, 0
     7da:	8d e5       	ldi	r24, 0x5D	; 93
     7dc:	97 e0       	ldi	r25, 0x07	; 7
     7de:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     7e2:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <diezMsCounter>
     7e6:	8a 30       	cpi	r24, 0x0A	; 10
     7e8:	30 f4       	brcc	.+12     	; 0x7f6 <__vector_7+0x122>
			diezMsCounter++;
     7ea:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <diezMsCounter>
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <diezMsCounter>
     7f4:	07 c0       	rjmp	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     7f6:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     7fa:	88 60       	ori	r24, 0x08	; 8
     7fc:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			diezMsCounter = 0;
     800:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     804:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     808:	86 ff       	sbrs	r24, 6
     80a:	0e c0       	rjmp	.+28     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			if(btn_pressed_time == 255){
     80c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <btn_pressed_time>
     810:	8f 3f       	cpi	r24, 0xFF	; 255
     812:	29 f4       	brne	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
				BTN_OVF = 1;
     814:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     818:	84 60       	ori	r24, 0x04	; 4
     81a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			}
			btn_pressed_time++;
     81e:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <btn_pressed_time>
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     828:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <servoA+0x1>
     82c:	81 ff       	sbrs	r24, 1
     82e:	0d c0       	rjmp	.+26     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     830:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <servoA+0x5>
     834:	9a 30       	cpi	r25, 0x0A	; 10
     836:	20 f4       	brcc	.+8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
				servoA.state_time++;  // Increment time spent in PUSH mode
     838:	9f 5f       	subi	r25, 0xFF	; 255
     83a:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <servoA+0x5>
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     840:	e8 ef       	ldi	r30, 0xF8	; 248
     842:	f6 e0       	ldi	r31, 0x06	; 6
     844:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     846:	84 60       	ori	r24, 0x04	; 4
     848:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     84a:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <servoB+0x1>
     84e:	81 ff       	sbrs	r24, 1
     850:	0d c0       	rjmp	.+26     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     852:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <servoB+0x5>
     856:	9a 30       	cpi	r25, 0x0A	; 10
     858:	20 f4       	brcc	.+8      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
				servoB.state_time++;  // Increment time spent in PUSH mode
     85a:	9f 5f       	subi	r25, 0xFF	; 255
     85c:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <servoB+0x5>
     860:	05 c0       	rjmp	.+10     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     862:	ee e6       	ldi	r30, 0x6E	; 110
     864:	f7 e0       	ldi	r31, 0x07	; 7
     866:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     868:	84 60       	ori	r24, 0x04	; 4
     86a:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     86c:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <servoC+0x1>
     870:	81 ff       	sbrs	r24, 1
     872:	0d c0       	rjmp	.+26     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     874:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <servoC+0x5>
     878:	9a 30       	cpi	r25, 0x0A	; 10
     87a:	20 f4       	brcc	.+8      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
				servoC.state_time++;  // Increment time spent in PUSH mode
     87c:	9f 5f       	subi	r25, 0xFF	; 255
     87e:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <servoC+0x5>
     882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     884:	ea e3       	ldi	r30, 0x3A	; 58
     886:	f7 e0       	ldi	r31, 0x07	; 7
     888:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     88a:	84 60       	ori	r24, 0x04	; 4
     88c:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     88e:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
     892:	80 ff       	sbrs	r24, 0
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     896:	83 fd       	sbrc	r24, 3
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     89a:	88 60       	ori	r24, 0x08	; 8
     89c:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8a0:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
     8a4:	80 ff       	sbrs	r24, 0
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8a8:	83 fd       	sbrc	r24, 3
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8b2:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
     8b6:	80 ff       	sbrs	r24, 0
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
     8ba:	83 fd       	sbrc	r24, 3
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     8be:	e1 e0       	ldi	r30, 0x01	; 1
     8c0:	f7 e0       	ldi	r31, 0x07	; 7
     8c2:	80 81       	ld	r24, Z
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     8c8:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
     8cc:	80 ff       	sbrs	r24, 0
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d0:	83 fd       	sbrc	r24, 3
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     8d4:	88 60       	ori	r24, 0x08	; 8
     8d6:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <IR_U>
		}
	}
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <main>:
int main()
{
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
     8fc:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <bandera3>
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     900:	80 e8       	ldi	r24, 0x80	; 128
     902:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
	IR_CALIBRATED = 0;
     906:	82 e8       	ldi	r24, 0x82	; 130
     908:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     914:	e4 ea       	ldi	r30, 0xA4	; 164
     916:	f7 e0       	ldi	r31, 0x07	; 7
     918:	8e e0       	ldi	r24, 0x0E	; 14
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	93 83       	std	Z+3, r25	; 0x03
     91e:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
	initProtocolService(&protocolService);
     928:	84 e7       	ldi	r24, 0x74	; 116
     92a:	97 e0       	ldi	r25, 0x07	; 7
     92c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <initProtocolService>
	diezMsCounter = 0;
     930:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     934:	0e 94 49 03 	call	0x692	; 0x692 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     938:	0e 94 1b 03 	call	0x636	; 0x636 <timer1_init>
	timer2_init();
     93c:	0e 94 39 03 	call	0x672	; 0x672 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     940:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     944:	63 e5       	ldi	r22, 0x53	; 83
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	8d e5       	ldi	r24, 0x5D	; 93
     94a:	97 e0       	ldi	r25, 0x07	; 7
     94c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     950:	60 91 39 07 	lds	r22, 0x0739	; 0x800739 <bandera2>
     954:	66 fb       	bst	r22, 6
     956:	66 27       	eor	r22, r22
     958:	60 f9       	bld	r22, 0
     95a:	8d e5       	ldi	r24, 0x5D	; 93
     95c:	97 e0       	ldi	r25, 0x07	; 7
     95e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	57 e0       	ldi	r21, 0x07	; 7
     966:	6d e5       	ldi	r22, 0x5D	; 93
     968:	77 e0       	ldi	r23, 0x07	; 7
     96a:	8f e4       	ldi	r24, 0x4F	; 79
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <initDetector>
	initSorter(&SorterSystem);
     972:	80 e2       	ldi	r24, 0x20	; 32
     974:	97 e0       	ldi	r25, 0x07	; 7
     976:	0e 94 14 07 	call	0xe28	; 0xe28 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     97a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     984:	84 ec       	ldi	r24, 0xC4	; 196
     986:	95 e0       	ldi	r25, 0x05	; 5
     988:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
	sei();
     98c:	78 94       	sei
	while (1)
	{ 
		if(IR_CALIBRATED){
     98e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     992:	85 ff       	sbrs	r24, 5
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <__stack+0xa1>
			irSensorsTask(&SorterSystem);
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	97 e0       	ldi	r25, 0x07	; 7
     99a:	0e 94 08 09 	call	0x1210	; 0x1210 <irSensorsTask>
     99e:	75 c0       	rjmp	.+234    	; 0xa8a <__stack+0x18b>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     9a0:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <__data_end>
     9a4:	81 11       	cpse	r24, r1
     9a6:	23 c0       	rjmp	.+70     	; 0x9ee <__stack+0xef>
		printf("Calibrando sensores IR...\n");
     9a8:	82 e2       	ldi	r24, 0x22	; 34
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     9b0:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
     9b4:	80 ff       	sbrs	r24, 0
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <__stack+0xbf>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     9b8:	84 60       	ori	r24, 0x04	; 4
     9ba:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     9be:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
     9c2:	80 ff       	sbrs	r24, 0
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__stack+0xcd>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     9c6:	84 60       	ori	r24, 0x04	; 4
     9c8:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     9cc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
     9d0:	80 ff       	sbrs	r24, 0
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <__stack+0xdb>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     9da:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
     9de:	80 ff       	sbrs	r24, 0
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__stack+0xe9>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     9e2:	84 60       	ori	r24, 0x04	; 4
     9e4:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <IR_U>
		}
		init_done = true;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     9ee:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
     9f2:	82 ff       	sbrs	r24, 2
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__stack+0xff>
		calibrateIRSensor(&IR_A);
     9f6:	80 e4       	ldi	r24, 0x40	; 64
     9f8:	97 e0       	ldi	r25, 0x07	; 7
     9fa:	0e 94 ac 0b 	call	0x1758	; 0x1758 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     9fe:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
     a02:	82 ff       	sbrs	r24, 2
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__stack+0x10f>
		calibrateIRSensor(&IR_B);
     a06:	89 ee       	ldi	r24, 0xE9	; 233
     a08:	96 e0       	ldi	r25, 0x06	; 6
     a0a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     a0e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
     a12:	82 ff       	sbrs	r24, 2
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__stack+0x11f>
		calibrateIRSensor(&IR_C);
     a16:	81 e1       	ldi	r24, 0x11	; 17
     a18:	97 e0       	ldi	r25, 0x07	; 7
     a1a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     a1e:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
     a22:	82 ff       	sbrs	r24, 2
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__stack+0x12f>
		calibrateIRSensor(&IR_U);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	97 e0       	ldi	r25, 0x07	; 7
     a2a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a2e:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
     a32:	82 fd       	sbrc	r24, 2
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__stack+0x153>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a36:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     a3a:	82 fd       	sbrc	r24, 2
     a3c:	0c c0       	rjmp	.+24     	; 0xa56 <__stack+0x157>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a3e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     a42:	82 fd       	sbrc	r24, 2
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <__stack+0x15b>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     a46:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     a4a:	82 ff       	sbrs	r24, 2
     a4c:	08 c0       	rjmp	.+16     	; 0xa5e <__stack+0x15f>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x161>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <__stack+0x161>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <__stack+0x161>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <__stack+0x161>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     a5e:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     a60:	88 23       	and	r24, r24
     a62:	99 f0       	breq	.+38     	; 0xa8a <__stack+0x18b>
				printf("Todos los sensores IR calibrados.\n");
     a64:	8c e3       	ldi	r24, 0x3C	; 60
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
				IR_CALIBRATED = 1;
     a6c:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
				IR_A.calibrationCounter = 0;
     a76:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     a7a:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     a7e:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     a82:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <IR_U+0x9>
				initOutputs();
     a86:	0e 94 cf 06 	call	0xd9e	; 0xd9e <initOutputs>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     a8a:	60 e2       	ldi	r22, 0x20	; 32
     a8c:	77 e0       	ldi	r23, 0x07	; 7
     a8e:	8f e4       	ldi	r24, 0x4F	; 79
     a90:	97 e0       	ldi	r25, 0x07	; 7
     a92:	0e 94 c4 07 	call	0xf88	; 0xf88 <ultraSensorTask>
		servosTask();
     a96:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     a9a:	4c 9b       	sbis	0x09, 4	; 9
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <__stack+0x1b3>
     a9e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     aa2:	86 fd       	sbrc	r24, 6
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <__stack+0x1b3>
		btn_pressed_time = 0;
     aa6:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <btn_pressed_time>
		BTN_PRESSED = 1;
     aaa:	80 64       	ori	r24, 0x40	; 64
     aac:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
     ab0:	28 c0       	rjmp	.+80     	; 0xb02 <__stack+0x203>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     ab2:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     ab6:	86 ff       	sbrs	r24, 6
     ab8:	24 c0       	rjmp	.+72     	; 0xb02 <__stack+0x203>
     aba:	4c 99       	sbic	0x09, 4	; 9
     abc:	22 c0       	rjmp	.+68     	; 0xb02 <__stack+0x203>
		BTN_PRESSED = 0;
     abe:	8f 7b       	andi	r24, 0xBF	; 191
     ac0:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     ac4:	82 ff       	sbrs	r24, 2
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__stack+0x1d1>
			printf("Btn overflowed\n");
     ac8:	8e e5       	ldi	r24, 0x5E	; 94
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     ad0:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <btn_pressed_time>
     ad4:	8a 30       	cpi	r24, 0x0A	; 10
     ad6:	30 f4       	brcc	.+12     	; 0xae4 <__stack+0x1e5>
     ad8:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     adc:	98 2f       	mov	r25, r24
     ade:	94 70       	andi	r25, 0x04	; 4
     ae0:	82 ff       	sbrs	r24, 2
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <__stack+0x1f1>
			BTN_RELEASED = 1;
     ae4:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
     aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x203>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     af0:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <btn_pressed_time>
			if(BTN_OVF){
     af4:	99 23       	and	r25, r25
     af6:	29 f0       	breq	.+10     	; 0xb02 <__stack+0x203>
				BTN_OVF = 0;
     af8:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     afc:	8b 7f       	andi	r24, 0xFB	; 251
     afe:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		if (IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA) && !IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)) {
     b02:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <protocolService+0x22>
     b06:	81 ff       	sbrs	r24, 1
     b08:	29 c0       	rjmp	.+82     	; 0xb5c <__stack+0x25d>
     b0a:	80 fd       	sbrc	r24, 0
     b0c:	27 c0       	rjmp	.+78     	; 0xb5c <__stack+0x25d>
			printf("Procesar info\n");
     b0e:	8d e6       	ldi	r24, 0x6D	; 109
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			if (process_protocol_buffer()) {
     b16:	0e 94 b5 0a 	call	0x156a	; 0x156a <process_protocol_buffer>
     b1a:	88 23       	and	r24, r24
     b1c:	39 f0       	breq	.+14     	; 0xb2c <__stack+0x22d>
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_HEADER);
     b1e:	e4 e7       	ldi	r30, 0x74	; 116
     b20:	f7 e0       	ldi	r31, 0x07	; 7
     b22:	82 a1       	ldd	r24, Z+34	; 0x22
     b24:	8f 70       	andi	r24, 0x0F	; 15
				SET_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     b26:	81 61       	ori	r24, 0x11	; 17
     b28:	82 a3       	std	Z+34, r24	; 0x22
     b2a:	13 c0       	rjmp	.+38     	; 0xb52 <__stack+0x253>
			} else {
				protocolService.indexR = protocolService.indexW;
     b2c:	c4 e7       	ldi	r28, 0x74	; 116
     b2e:	d7 e0       	ldi	r29, 0x07	; 7
     b30:	88 81       	ld	r24, Y
     b32:	89 83       	std	Y+1, r24	; 0x01
				printf("Index R = indexW = %u", protocolService.indexR);
     b34:	1f 92       	push	r1
     b36:	8f 93       	push	r24
     b38:	8b e7       	ldi	r24, 0x7B	; 123
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	9f 93       	push	r25
     b3e:	8f 93       	push	r24
     b40:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
				CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     b44:	8a a1       	ldd	r24, Y+34	; 0x22
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
     b46:	8e 70       	andi	r24, 0x0E	; 14
     b48:	8a a3       	std	Y+34, r24	; 0x22
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
			}
			CLEAR_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     b52:	e4 e7       	ldi	r30, 0x74	; 116
     b54:	f7 e0       	ldi	r31, 0x07	; 7
     b56:	82 a1       	ldd	r24, Z+34	; 0x22
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	82 a3       	std	Z+34, r24	; 0x22
		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_RESET)){
     b5c:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <protocolService+0x22>
     b60:	82 ff       	sbrs	r24, 2
     b62:	15 c0       	rjmp	.+42     	; 0xb8e <__stack+0x28f>
			protocolService.indexR = protocolService.indexW;
     b64:	c4 e7       	ldi	r28, 0x74	; 116
     b66:	d7 e0       	ldi	r29, 0x07	; 7
     b68:	88 81       	ld	r24, Y
     b6a:	89 83       	std	Y+1, r24	; 0x01
			printf("Index R = indexW = %u", protocolService.indexR);
     b6c:	1f 92       	push	r1
     b6e:	8f 93       	push	r24
     b70:	8b e7       	ldi	r24, 0x7B	; 123
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
			CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     b7c:	8a a1       	ldd	r24, Y+34	; 0x22
			CLEAR_FLAG(protocolService.flags, PROTOSERV_RESET);
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
     b7e:	8a 70       	andi	r24, 0x0A	; 10
     b80:	8a a3       	std	Y+34, r24	; 0x22
			clear_receive_pck();
     b82:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <clear_receive_pck>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
		}
// 		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_CLEAR_PCK)){
// 			
// 		}
		if(IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)){
     b8e:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <protocolService+0x22>
     b92:	80 ff       	sbrs	r24, 0
     b94:	97 c0       	rjmp	.+302    	; 0xcc4 <__stack+0x3c5>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_LEN);
     b96:	a4 e7       	ldi	r26, 0x74	; 116
     b98:	b7 e0       	ldi	r27, 0x07	; 7
			protocolService.indexR++; //Poner en dinde deberia estar length
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	ec 91       	ld	r30, X
     b9e:	11 97       	sbiw	r26, 0x01	; 1
     ba0:	ef 5f       	subi	r30, 0xFF	; 255
			protocolService.receivePck.length = protocolService.buffer[protocolService.indexR]; 
     ba2:	ce 2f       	mov	r28, r30
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	cc 58       	subi	r28, 0x8C	; 140
     ba8:	d8 4f       	sbci	r29, 0xF8	; 248
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	97 96       	adiw	r26, 0x27	; 39
     bae:	9c 93       	st	X, r25
     bb0:	97 97       	sbiw	r26, 0x27	; 39
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_TOKEN);
     bb2:	8f 70       	andi	r24, 0x0F	; 15
     bb4:	80 63       	ori	r24, 0x30	; 48
     bb6:	92 96       	adiw	r26, 0x22	; 34
     bb8:	8c 93       	st	X, r24
     bba:	92 97       	sbiw	r26, 0x22	; 34
			protocolService.indexR++; //Donde deberia estar token
     bbc:	ef 5f       	subi	r30, 0xFF	; 255
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	ec 93       	st	X, r30
			if (protocolService.buffer[protocolService.indexR] != ':'){
     bc2:	ae 2f       	mov	r26, r30
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ac 58       	subi	r26, 0x8C	; 140
     bc8:	b8 4f       	sbci	r27, 0xF8	; 248
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	9c 91       	ld	r25, X
     bce:	9a 33       	cpi	r25, 0x3A	; 58
     bd0:	79 f0       	breq	.+30     	; 0xbf0 <__stack+0x2f1>
				printf("Token invalido");
     bd2:	81 e9       	ldi	r24, 0x91	; 145
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	9f 93       	push	r25
     bd8:	8f 93       	push	r24
     bda:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
				SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     bde:	e4 e7       	ldi	r30, 0x74	; 116
     be0:	f7 e0       	ldi	r31, 0x07	; 7
     be2:	82 a1       	ldd	r24, Z+34	; 0x22
     be4:	84 60       	ori	r24, 0x04	; 4
				CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     be6:	8e 7f       	andi	r24, 0xFE	; 254
     be8:	82 a3       	std	Z+34, r24	; 0x22
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	6a c0       	rjmp	.+212    	; 0xcc4 <__stack+0x3c5>
			}else{ //Token valido
				NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CMD);
     bf0:	c4 e7       	ldi	r28, 0x74	; 116
     bf2:	d7 e0       	ldi	r29, 0x07	; 7
     bf4:	8f 70       	andi	r24, 0x0F	; 15
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8a a3       	std	Y+34, r24	; 0x22
				protocolService.indexR++; //Donde deberia estar CMD
     bfa:	ef 5f       	subi	r30, 0xFF	; 255
     bfc:	e9 83       	std	Y+1, r30	; 0x01
				protocolService.receivePck.cmd = getResponseCommand(protocolService.buffer[protocolService.indexR]);
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ec 58       	subi	r30, 0x8C	; 140
     c02:	f8 4f       	sbci	r31, 0xF8	; 248
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <getResponseCommand>
     c0c:	89 a7       	std	Y+41, r24	; 0x29
				printf("El comando de respuesta para 0x%X es 0x%X\n", protocolService.buffer[protocolService.indexR], protocolService.receivePck.cmd);
     c0e:	e9 81       	ldd	r30, Y+1	; 0x01
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ec 58       	subi	r30, 0x8C	; 140
     c14:	f8 4f       	sbci	r31, 0xF8	; 248
     c16:	92 81       	ldd	r25, Z+2	; 0x02
     c18:	1f 92       	push	r1
     c1a:	8f 93       	push	r24
     c1c:	1f 92       	push	r1
     c1e:	9f 93       	push	r25
     c20:	80 ea       	ldi	r24, 0xA0	; 160
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
				if(protocolService.receivePck.cmd == CMD_INVALID){
     c2c:	89 a5       	ldd	r24, Y+41	; 0x29
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	80 3e       	cpi	r24, 0xE0	; 224
     c3c:	69 f4       	brne	.+26     	; 0xc58 <__stack+0x359>
					printf("Comando invalido");
     c3e:	8b ec       	ldi	r24, 0xCB	; 203
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
					CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
     c4a:	8a a1       	ldd	r24, Y+34	; 0x22
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
					SET_FLAG(protocolService.flags, PROTOSERV_RESET);
     c4e:	84 60       	ori	r24, 0x04	; 4
     c50:	8a a3       	std	Y+34, r24	; 0x22
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	36 c0       	rjmp	.+108    	; 0xcc4 <__stack+0x3c5>
				}else{
					printf("Comando valido");
     c58:	8c ed       	ldi	r24, 0xDC	; 220
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
					printf("Length %u", protocolService.receivePck.length);
     c64:	c4 e7       	ldi	r28, 0x74	; 116
     c66:	d7 e0       	ldi	r29, 0x07	; 7
     c68:	8f a1       	ldd	r24, Y+39	; 0x27
     c6a:	1f 92       	push	r1
     c6c:	8f 93       	push	r24
     c6e:	8b ee       	ldi	r24, 0xEB	; 235
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	9f 93       	push	r25
     c74:	8f 93       	push	r24
     c76:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
					if(protocolService.receivePck.length < 2){ //Nunca deberia ser menor a 2
     c7a:	8f a1       	ldd	r24, Y+39	; 0x27
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	40 f4       	brcc	.+16     	; 0xc9c <__stack+0x39d>
						printf("Length menor a 2");
     c8c:	85 ef       	ldi	r24, 0xF5	; 245
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
					}
					protocolService.receivePck.payload = &protocolService.buffer[protocolService.indexR]; //Apunta a la direccion de memoria del primer elemento, esto deberia seguir hasta minimo 2, osea esta direccion y la siguiente
     c9c:	c4 e7       	ldi	r28, 0x74	; 116
     c9e:	d7 e0       	ldi	r29, 0x07	; 7
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	8a 58       	subi	r24, 0x8A	; 138
     ca6:	98 4f       	sbci	r25, 0xF8	; 248
     ca8:	9b a7       	std	Y+43, r25	; 0x2b
     caa:	8a a7       	std	Y+42, r24	; 0x2a
					printf("Guardo & a payload");
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
					NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_PAYLOAD);
     cb8:	8a a1       	ldd	r24, Y+34	; 0x22
     cba:	8f 70       	andi	r24, 0x0F	; 15
     cbc:	80 65       	ori	r24, 0x50	; 80
     cbe:	8a a3       	std	Y+34, r24	; 0x22
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     cc4:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     cc8:	84 ff       	sbrs	r24, 4
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <__stack+0x3dd>
			WAIT_TIME_TRIGGER_PASSED = 0;
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     cd2:	e9 e6       	ldi	r30, 0x69	; 105
     cd4:	f7 e0       	ldi	r31, 0x07	; 7
     cd6:	80 81       	ld	r24, Z
     cd8:	80 62       	ori	r24, 0x20	; 32
     cda:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     cdc:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     ce0:	83 ff       	sbrs	r24, 3
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <__stack+0x3f5>
			ECHO_INTERVAL_FLAG = 0;
     ce4:	87 7f       	andi	r24, 0xF7	; 247
     ce6:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			EMIT_TRIGGER = 1;
     cea:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     cee:	82 60       	ori	r24, 0x02	; 2
     cf0:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     cf4:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     cf8:	80 ff       	sbrs	r24, 0
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <__stack+0x403>
			BTN_RELEASED = 0; //TEST SERVO A
     cfc:	8e 7f       	andi	r24, 0xFE	; 254
     cfe:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			//EMIT_TRIGGER = 1;
		}
		if(IR_READ_INTERRUPT){
     d02:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     d06:	84 ff       	sbrs	r24, 4
     d08:	42 ce       	rjmp	.-892    	; 0x98e <__stack+0x8f>
			IR_READ_INTERRUPT = 0;
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     d10:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
     d14:	80 ff       	sbrs	r24, 0
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <__stack+0x427>
     d18:	82 ff       	sbrs	r24, 2
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <__stack+0x427>
     d1c:	83 fd       	sbrc	r24, 3
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <__stack+0x427>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     d26:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
     d2a:	80 ff       	sbrs	r24, 0
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <__stack+0x43d>
     d2e:	82 ff       	sbrs	r24, 2
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <__stack+0x43d>
     d32:	83 fd       	sbrc	r24, 3
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <__stack+0x43d>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     d3c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
     d40:	80 ff       	sbrs	r24, 0
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <__stack+0x453>
     d44:	82 ff       	sbrs	r24, 2
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <__stack+0x453>
     d48:	83 fd       	sbrc	r24, 3
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <__stack+0x453>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d4c:	88 60       	ori	r24, 0x08	; 8
     d4e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     d52:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
     d56:	80 ff       	sbrs	r24, 0
     d58:	1a ce       	rjmp	.-972    	; 0x98e <__stack+0x8f>
     d5a:	82 ff       	sbrs	r24, 2
     d5c:	18 ce       	rjmp	.-976    	; 0x98e <__stack+0x8f>
     d5e:	83 fd       	sbrc	r24, 3
     d60:	16 ce       	rjmp	.-980    	; 0x98e <__stack+0x8f>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <IR_U>
     d68:	12 ce       	rjmp	.-988    	; 0x98e <__stack+0x8f>

00000d6a <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <initDetector+0x6>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	fc 01       	movw	r30, r24
     d76:	5a 83       	std	Y+2, r21	; 0x02
     d78:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     d7a:	8d e5       	ldi	r24, 0x5D	; 93
     d7c:	97 e0       	ldi	r25, 0x07	; 7
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	93 83       	std	Z+3, r25	; 0x03
     d88:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     d8a:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     d8c:	89 e1       	ldi	r24, 0x19	; 25
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     da2:	2a e5       	ldi	r18, 0x5A	; 90
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	88 ef       	ldi	r24, 0xF8	; 248
     db0:	96 e0       	ldi	r25, 0x06	; 6
     db2:	0e 94 29 0b 	call	0x1652	; 0x1652 <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     db6:	2a e5       	ldi	r18, 0x5A	; 90
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	42 e0       	ldi	r20, 0x02	; 2
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8e e6       	ldi	r24, 0x6E	; 110
     dc4:	97 e0       	ldi	r25, 0x07	; 7
     dc6:	0e 94 29 0b 	call	0x1652	; 0x1652 <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     dca:	e4 e5       	ldi	r30, 0x54	; 84
     dcc:	f7 e0       	ldi	r31, 0x07	; 7
     dce:	88 ef       	ldi	r24, 0xF8	; 248
     dd0:	96 e0       	ldi	r25, 0x06	; 6
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     dd6:	8e e6       	ldi	r24, 0x6E	; 110
     dd8:	97 e0       	ldi	r25, 0x07	; 7
     dda:	93 83       	std	Z+3, r25	; 0x03
     ddc:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     dde:	8a e3       	ldi	r24, 0x3A	; 58
     de0:	97 e0       	ldi	r25, 0x07	; 7
     de2:	95 83       	std	Z+5, r25	; 0x05
     de4:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     de6:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <current_servo>
	//printf("Init servos\n");
}

void initOutputs(){
	initServos();
	salidaA.actuator_pin = SERVOA_PIN;
     dea:	ce ef       	ldi	r28, 0xFE	; 254
     dec:	d6 e0       	ldi	r29, 0x06	; 6
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     df2:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <IR_A+0x8>
     df6:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     df8:	a1 ea       	ldi	r26, 0xA1	; 161
     dfa:	b7 e0       	ldi	r27, 0x07	; 7
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	8c 93       	st	X, r24
     e02:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     e04:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <IR_B+0x8>
     e08:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     e0a:	ea e5       	ldi	r30, 0x5A	; 90
     e0c:	f7 e0       	ldi	r31, 0x07	; 7
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     e12:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <IR_C+0x8>
     e16:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     e18:	88 e0       	ldi	r24, 0x08	; 8
     e1a:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     e1c:	12 96       	adiw	r26, 0x02	; 2
     e1e:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     e20:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     e28:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     e2a:	8c e1       	ldi	r24, 0x1C	; 28
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	96 e0       	ldi	r25, 0x06	; 6
     e36:	93 83       	std	Z+3, r25	; 0x03
     e38:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     e3a:	81 ea       	ldi	r24, 0xA1	; 161
     e3c:	97 e0       	ldi	r25, 0x07	; 7
     e3e:	95 83       	std	Z+5, r25	; 0x05
     e40:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     e42:	8a e5       	ldi	r24, 0x5A	; 90
     e44:	97 e0       	ldi	r25, 0x07	; 7
     e46:	97 83       	std	Z+7, r25	; 0x07
     e48:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     e4a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     e4e:	88 23       	and	r24, r24
     e50:	44 f4       	brge	.+16     	; 0xe62 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     e52:	8a e3       	ldi	r24, 0x3A	; 58
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     e5a:	8c e6       	ldi	r24, 0x6C	; 108
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
     e62:	08 95       	ret

00000e64 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     e64:	8e 3b       	cpi	r24, 0xBE	; 190
     e66:	98 f0       	brcs	.+38     	; 0xe8e <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     e68:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <bandera2>
     e6c:	99 23       	and	r25, r25
     e6e:	0c f0       	brlt	.+2      	; 0xe72 <classify_box+0xe>
     e70:	83 c0       	rjmp	.+262    	; 0xf78 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     e72:	1f 92       	push	r1
     e74:	8f 93       	push	r24
     e76:	81 e9       	ldi	r24, 0x91	; 145
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
		}
		return NO_BOX;
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     e8e:	9e eb       	ldi	r25, 0xBE	; 190
     e90:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     e92:	97 33       	cpi	r25, 0x37	; 55
     e94:	98 f4       	brcc	.+38     	; 0xebc <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     e96:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     e9a:	80 78       	andi	r24, 0x80	; 128
     e9c:	09 f4       	brne	.+2      	; 0xea0 <classify_box+0x3c>
     e9e:	73 c0       	rjmp	.+230    	; 0xf86 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     ea0:	1f 92       	push	r1
     ea2:	9f 93       	push	r25
     ea4:	81 ec       	ldi	r24, 0xC1	; 193
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     ebc:	db 01       	movw	r26, r22
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	80 81       	ld	r24, Z
     ec4:	98 17       	cp	r25, r24
     ec6:	b0 f0       	brcs	.+44     	; 0xef4 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     eca:	89 17       	cp	r24, r25
     ecc:	98 f0       	brcs	.+38     	; 0xef4 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     ece:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     ed2:	88 23       	and	r24, r24
     ed4:	0c f0       	brlt	.+2      	; 0xed8 <classify_box+0x74>
     ed6:	52 c0       	rjmp	.+164    	; 0xf7c <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     ed8:	1f 92       	push	r1
     eda:	9f 93       	push	r25
     edc:	8a ee       	ldi	r24, 0xEA	; 234
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	98 17       	cp	r25, r24
     ef8:	a8 f0       	brcs	.+42     	; 0xf24 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     efa:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     efc:	89 17       	cp	r24, r25
     efe:	90 f0       	brcs	.+36     	; 0xf24 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f00:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     f04:	88 23       	and	r24, r24
     f06:	e4 f5       	brge	.+120    	; 0xf80 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     f08:	1f 92       	push	r1
     f0a:	9f 93       	push	r25
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f24:	84 81       	ldd	r24, Z+4	; 0x04
     f26:	98 17       	cp	r25, r24
     f28:	a8 f0       	brcs	.+42     	; 0xf54 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     f2a:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f2c:	89 17       	cp	r24, r25
     f2e:	90 f0       	brcs	.+36     	; 0xf54 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f30:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     f34:	88 23       	and	r24, r24
     f36:	34 f5       	brge	.+76     	; 0xf84 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     f38:	1f 92       	push	r1
     f3a:	9f 93       	push	r25
     f3c:	84 e1       	ldi	r24, 0x14	; 20
     f3e:	93 e0       	ldi	r25, 0x03	; 3
     f40:	9f 93       	push	r25
     f42:	8f 93       	push	r24
     f44:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     f54:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     f58:	80 78       	andi	r24, 0x80	; 128
     f5a:	a9 f0       	breq	.+42     	; 0xf86 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     f5c:	1f 92       	push	r1
     f5e:	9f 93       	push	r25
     f60:	89 e2       	ldi	r24, 0x29	; 41
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     f84:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     f86:	08 95       	ret

00000f88 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
     f94:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
     f96:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     f9a:	88 23       	and	r24, r24
     f9c:	bc f5       	brge	.+110    	; 0x100c <ultraSensorTask+0x84>
     f9e:	e8 81       	ld	r30, Y
     fa0:	f9 81       	ldd	r31, Y+1	; 0x01
     fa2:	84 85       	ldd	r24, Z+12	; 0x0c
     fa4:	85 ff       	sbrs	r24, 5
     fa6:	32 c0       	rjmp	.+100    	; 0x100c <ultraSensorTask+0x84>
     fa8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     fac:	81 ff       	sbrs	r24, 1
     fae:	2e c0       	rjmp	.+92     	; 0x100c <ultraSensorTask+0x84>
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	81 ff       	sbrs	r24, 1
     fb4:	2b c0       	rjmp	.+86     	; 0x100c <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     fb6:	cf 01       	movw	r24, r30
     fb8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <ultrasonic_start>
     fbc:	88 23       	and	r24, r24
     fbe:	c1 f0       	breq	.+48     	; 0xff0 <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
     fc0:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     fc4:	86 ff       	sbrs	r24, 6
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
     fc8:	87 e5       	ldi	r24, 0x57	; 87
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     fd0:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
     fd4:	8f 77       	andi	r24, 0x7F	; 127
     fd6:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     fda:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     fe4:	e8 81       	ld	r30, Y
     fe6:	f9 81       	ldd	r31, Y+1	; 0x01
     fe8:	84 85       	ldd	r24, Z+12	; 0x0c
     fea:	8f 7d       	andi	r24, 0xDF	; 223
     fec:	84 87       	std	Z+12, r24	; 0x0c
     fee:	0e c0       	rjmp	.+28     	; 0x100c <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
     ff0:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
     ff4:	86 ff       	sbrs	r24, 6
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
     ff8:	82 e5       	ldi	r24, 0x52	; 82
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			}
			EMIT_FAILED = 1;
    1000:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
			EMIT_TRIGGER = 0;
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
    100c:	88 81       	ld	r24, Y
    100e:	99 81       	ldd	r25, Y+1	; 0x01
    1010:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	85 85       	ldd	r24, Z+13	; 0x0d
    101a:	85 30       	cpi	r24, 0x05	; 5
    101c:	09 f0       	breq	.+2      	; 0x1020 <ultraSensorTask+0x98>
    101e:	c1 c0       	rjmp	.+386    	; 0x11a2 <ultraSensorTask+0x21a>
    1020:	84 85       	ldd	r24, Z+12	; 0x0c
    1022:	88 23       	and	r24, r24
    1024:	0c f0       	brlt	.+2      	; 0x1028 <ultraSensorTask+0xa0>
    1026:	bd c0       	rjmp	.+378    	; 0x11a2 <ultraSensorTask+0x21a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
    1028:	84 85       	ldd	r24, Z+12	; 0x0c
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
    102e:	e8 81       	ld	r30, Y
    1030:	f9 81       	ldd	r31, Y+1	; 0x01
    1032:	80 85       	ldd	r24, Z+8	; 0x08
    1034:	91 85       	ldd	r25, Z+9	; 0x09
    1036:	a2 85       	ldd	r26, Z+10	; 0x0a
    1038:	b3 85       	ldd	r27, Z+11	; 0x0b
    103a:	8f 3b       	cpi	r24, 0xBF	; 191
    103c:	91 05       	cpc	r25, r1
    103e:	a1 05       	cpc	r26, r1
    1040:	b1 05       	cpc	r27, r1
    1042:	b0 f0       	brcs	.+44     	; 0x1070 <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
    104a:	98 2f       	mov	r25, r24
    104c:	92 95       	swap	r25
    104e:	9f 70       	andi	r25, 0x0F	; 15
    1050:	92 30       	cpi	r25, 0x02	; 2
    1052:	51 f4       	brne	.+20     	; 0x1068 <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
    1054:	8f 70       	andi	r24, 0x0F	; 15
    1056:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
    1058:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
    105c:	88 23       	and	r24, r24
    105e:	24 f4       	brge	.+8      	; 0x1068 <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
    1060:	82 e6       	ldi	r24, 0x62	; 98
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	8f 70       	andi	r24, 0x0F	; 15
    106c:	8c 83       	std	Y+4, r24	; 0x04
    106e:	8d c0       	rjmp	.+282    	; 0x118a <ultraSensorTask+0x202>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	98 2f       	mov	r25, r24
    1074:	92 95       	swap	r25
    1076:	9f 70       	andi	r25, 0x0F	; 15
    1078:	09 f0       	breq	.+2      	; 0x107c <ultraSensorTask+0xf4>
    107a:	87 c0       	rjmp	.+270    	; 0x118a <ultraSensorTask+0x202>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	80 61       	ori	r24, 0x10	; 16
    1080:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
    1082:	80 85       	ldd	r24, Z+8	; 0x08
    1084:	91 85       	ldd	r25, Z+9	; 0x09
    1086:	a2 85       	ldd	r26, Z+10	; 0x0a
    1088:	b3 85       	ldd	r27, Z+11	; 0x0b
    108a:	b8 01       	movw	r22, r16
    108c:	0e 94 32 07 	call	0xe64	; 0xe64 <classify_box>
    1090:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	f8 16       	cp	r15, r24
    1096:	09 f4       	brne	.+2      	; 0x109a <ultraSensorTask+0x112>
    1098:	74 c0       	rjmp	.+232    	; 0x1182 <ultraSensorTask+0x1fa>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
    109a:	e8 81       	ld	r30, Y
    109c:	f9 81       	ldd	r31, Y+1	; 0x01
    109e:	80 85       	ldd	r24, Z+8	; 0x08
    10a0:	91 85       	ldd	r25, Z+9	; 0x09
    10a2:	a2 85       	ldd	r26, Z+10	; 0x0a
    10a4:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
    10a6:	e1 e0       	ldi	r30, 0x01	; 1
    10a8:	fe 16       	cp	r15, r30
    10aa:	49 f0       	breq	.+18     	; 0x10be <ultraSensorTask+0x136>
    10ac:	fe 16       	cp	r15, r30
    10ae:	28 f1       	brcs	.+74     	; 0x10fa <ultraSensorTask+0x172>
    10b0:	f2 e0       	ldi	r31, 0x02	; 2
    10b2:	ff 16       	cp	r15, r31
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <ultraSensorTask+0x14a>
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	f8 16       	cp	r15, r24
    10ba:	a9 f0       	breq	.+42     	; 0x10e6 <ultraSensorTask+0x15e>
    10bc:	23 c0       	rjmp	.+70     	; 0x1104 <ultraSensorTask+0x17c>
					{
						case BOX_SIZE_A: 
							printf("BOX_SIZE_A\n");
    10be:	8b e7       	ldi	r24, 0x7B	; 123
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
							SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
    10c6:	ee ef       	ldi	r30, 0xFE	; 254
    10c8:	f6 e0       	ldi	r31, 0x06	; 6
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	82 83       	std	Z+2, r24	; 0x02
							break;
    10d0:	1d c0       	rjmp	.+58     	; 0x110c <ultraSensorTask+0x184>
						case BOX_SIZE_B: 
							printf("BOX_SIZE_B\n");
    10d2:	86 e8       	ldi	r24, 0x86	; 134
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
							SET_FLAG(salidaB.flags, OUTPUT_BUSY);
    10da:	e1 ea       	ldi	r30, 0xA1	; 161
    10dc:	f7 e0       	ldi	r31, 0x07	; 7
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	82 83       	std	Z+2, r24	; 0x02
							break;
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <ultraSensorTask+0x184>
						case BOX_SIZE_C:
							printf("BOX_SIZE_C\n");
    10e6:	81 e9       	ldi	r24, 0x91	; 145
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
							SET_FLAG(salidaC.flags, OUTPUT_BUSY);
    10ee:	ea e5       	ldi	r30, 0x5A	; 90
    10f0:	f7 e0       	ldi	r31, 0x07	; 7
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	82 83       	std	Z+2, r24	; 0x02
							break;
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <ultraSensorTask+0x184>
						case BOX_DISCARDED:
							printf("BOX_DISCARDED\n");
    10fa:	8c e9       	ldi	r24, 0x9C	; 156
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
							break;
    1102:	04 c0       	rjmp	.+8      	; 0x110c <ultraSensorTask+0x184>
						default: 
							printf("Tipo no reconocido\n");
    1104:	8a ea       	ldi	r24, 0xAA	; 170
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
							break;
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
    110c:	f1 10       	cpse	r15, r1
    110e:	0d c0       	rjmp	.+26     	; 0x112a <ultraSensorTask+0x1a2>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
    1110:	f8 01       	movw	r30, r16
    1112:	80 89       	ldd	r24, Z+16	; 0x10
    1114:	91 89       	ldd	r25, Z+17	; 0x11
    1116:	a2 89       	ldd	r26, Z+18	; 0x12
    1118:	b3 89       	ldd	r27, Z+19	; 0x13
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	a1 1d       	adc	r26, r1
    111e:	b1 1d       	adc	r27, r1
    1120:	80 8b       	std	Z+16, r24	; 0x10
    1122:	91 8b       	std	Z+17, r25	; 0x11
    1124:	a2 8b       	std	Z+18, r26	; 0x12
    1126:	b3 8b       	std	Z+19, r27	; 0x13
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <ultraSensorTask+0x1ba>
					}
					else
					{
						sorter->stats.total_selected++;
    112a:	f8 01       	movw	r30, r16
    112c:	84 85       	ldd	r24, Z+12	; 0x0c
    112e:	95 85       	ldd	r25, Z+13	; 0x0d
    1130:	a6 85       	ldd	r26, Z+14	; 0x0e
    1132:	b7 85       	ldd	r27, Z+15	; 0x0f
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	a1 1d       	adc	r26, r1
    1138:	b1 1d       	adc	r27, r1
    113a:	84 87       	std	Z+12, r24	; 0x0c
    113c:	95 87       	std	Z+13, r25	; 0x0d
    113e:	a6 87       	std	Z+14, r26	; 0x0e
    1140:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
    1142:	f8 01       	movw	r30, r16
    1144:	80 85       	ldd	r24, Z+8	; 0x08
    1146:	91 85       	ldd	r25, Z+9	; 0x09
    1148:	a2 85       	ldd	r26, Z+10	; 0x0a
    114a:	b3 85       	ldd	r27, Z+11	; 0x0b
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	80 87       	std	Z+8, r24	; 0x08
    1154:	91 87       	std	Z+9, r25	; 0x09
    1156:	a2 87       	std	Z+10, r26	; 0x0a
    1158:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
    115a:	ef 2d       	mov	r30, r15
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	35 96       	adiw	r30, 0x05	; 5
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	e0 0f       	add	r30, r16
    116a:	f1 1f       	adc	r31, r17
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	a2 81       	ldd	r26, Z+2	; 0x02
    1172:	b3 81       	ldd	r27, Z+3	; 0x03
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	a1 1d       	adc	r26, r1
    1178:	b1 1d       	adc	r27, r1
    117a:	80 83       	st	Z, r24
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	a2 83       	std	Z+2, r26	; 0x02
    1180:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	8f 70       	andi	r24, 0x0F	; 15
    1186:	80 62       	ori	r24, 0x20	; 32
    1188:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
    118a:	88 81       	ld	r24, Y
    118c:	99 81       	ldd	r25, Y+1	; 0x01
    118e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
    1192:	e8 81       	ld	r30, Y
    1194:	f9 81       	ldd	r31, Y+1	; 0x01
    1196:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
    1198:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
    119c:	80 68       	ori	r24, 0x80	; 128
    119e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
    11a2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
    11a6:	80 ff       	sbrs	r24, 0
    11a8:	2d c0       	rjmp	.+90     	; 0x1204 <ultraSensorTask+0x27c>
	{
		if (DEBUG_FLAGS)
    11aa:	86 ff       	sbrs	r24, 6
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <ultraSensorTask+0x22e>
		{
			printf("HCSR04 perdio ECHO\n");
    11ae:	8d eb       	ldi	r24, 0xBD	; 189
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}
		VEINTEMS_PASSED = 0;
    11b6:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
		WAITING_ECHO = 0;
    11ba:	8e 7f       	andi	r24, 0xFE	; 254
    11bc:	87 7f       	andi	r24, 0xF7	; 247
    11be:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
    11c2:	e8 81       	ld	r30, Y
    11c4:	f9 81       	ldd	r31, Y+1	; 0x01
    11c6:	84 85       	ldd	r24, Z+12	; 0x0c
    11c8:	88 60       	ori	r24, 0x08	; 8
    11ca:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
    11cc:	e8 81       	ld	r30, Y
    11ce:	f9 81       	ldd	r31, Y+1	; 0x01
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
    11d4:	60 91 39 07 	lds	r22, 0x0739	; 0x800739 <bandera2>
    11d8:	66 fb       	bst	r22, 6
    11da:	66 27       	eor	r22, r22
    11dc:	60 f9       	bld	r22, 0
    11de:	88 81       	ld	r24, Y
    11e0:	99 81       	ldd	r25, Y+1	; 0x01
    11e2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <ultrasonic_timeout_clear>
    11e6:	88 23       	and	r24, r24
    11e8:	41 f0       	breq	.+16     	; 0x11fa <ultraSensorTask+0x272>
    11ea:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <bandera2>
    11ee:	86 ff       	sbrs	r24, 6
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <ultraSensorTask+0x272>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
    11f2:	80 ed       	ldi	r24, 0xD0	; 208
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}

		ULTRASONIC_ENABLE = 1;
    11fa:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <bandera>
    11fe:	80 68       	ori	r24, 0x80	; 128
    1200:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <bandera>
	}
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	08 95       	ret

00001210 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
    1210:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
    1214:	80 ff       	sbrs	r24, 0
    1216:	09 c0       	rjmp	.+18     	; 0x122a <irSensorsTask+0x1a>
    1218:	83 ff       	sbrs	r24, 3
    121a:	07 c0       	rjmp	.+14     	; 0x122a <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
    121c:	87 7f       	andi	r24, 0xF7	; 247
    121e:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <IR_A>
		tcrt_read(&IR_A);
    1222:	80 e4       	ldi	r24, 0x40	; 64
    1224:	97 e0       	ldi	r25, 0x07	; 7
    1226:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
    122a:	80 e4       	ldi	r24, 0x40	; 64
    122c:	97 e0       	ldi	r25, 0x07	; 7
    122e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tcrt_is_box_detected>
    1232:	89 2b       	or	r24, r25
    1234:	11 f1       	breq	.+68     	; 0x127a <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1236:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <IR_A>
    123a:	82 95       	swap	r24
    123c:	8f 70       	andi	r24, 0x0F	; 15
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	e1 f4       	brne	.+56     	; 0x127a <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
    1242:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <salidaA+0x2>
    1246:	83 ff       	sbrs	r24, 3
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <irSensorsTask+0x58>
    124a:	80 ff       	sbrs	r24, 0
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
    1254:	e8 ef       	ldi	r30, 0xF8	; 248
    1256:	f6 e0       	ldi	r31, 0x06	; 6
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
    125e:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
    1260:	82 ef       	ldi	r24, 0xF2	; 242
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
    1268:	e0 e4       	ldi	r30, 0x40	; 64
    126a:	f7 e0       	ldi	r31, 0x07	; 7
    126c:	80 81       	ld	r24, Z
    126e:	8f 70       	andi	r24, 0x0F	; 15
    1270:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
    1272:	87 e1       	ldi	r24, 0x17	; 23
    1274:	94 e0       	ldi	r25, 0x04	; 4
    1276:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    127a:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
    127e:	80 ff       	sbrs	r24, 0
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <irSensorsTask+0x84>
    1282:	83 ff       	sbrs	r24, 3
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
    1286:	87 7f       	andi	r24, 0xF7	; 247
    1288:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <IR_B>
		tcrt_read(&IR_B);
    128c:	89 ee       	ldi	r24, 0xE9	; 233
    128e:	96 e0       	ldi	r25, 0x06	; 6
    1290:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
    1294:	89 ee       	ldi	r24, 0xE9	; 233
    1296:	96 e0       	ldi	r25, 0x06	; 6
    1298:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tcrt_is_box_detected>
    129c:	89 2b       	or	r24, r25
    129e:	11 f1       	breq	.+68     	; 0x12e4 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    12a0:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <IR_B>
    12a4:	82 95       	swap	r24
    12a6:	8f 70       	andi	r24, 0x0F	; 15
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	e1 f4       	brne	.+56     	; 0x12e4 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
    12ac:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <salidaB+0x2>
    12b0:	83 ff       	sbrs	r24, 3
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <irSensorsTask+0xc2>
    12b4:	80 ff       	sbrs	r24, 0
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
    12b8:	87 7f       	andi	r24, 0xF7	; 247
    12ba:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
    12be:	ee e6       	ldi	r30, 0x6E	; 110
    12c0:	f7 e0       	ldi	r31, 0x07	; 7
    12c2:	81 81       	ldd	r24, Z+1	; 0x01
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
    12c8:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
    12ca:	87 e2       	ldi	r24, 0x27	; 39
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    12d2:	e9 ee       	ldi	r30, 0xE9	; 233
    12d4:	f6 e0       	ldi	r31, 0x06	; 6
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    12dc:	8c e4       	ldi	r24, 0x4C	; 76
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    12e4:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
    12e8:	80 ff       	sbrs	r24, 0
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <irSensorsTask+0xee>
    12ec:	83 ff       	sbrs	r24, 3
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    12f0:	87 7f       	andi	r24, 0xF7	; 247
    12f2:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <IR_C>
		tcrt_read(&IR_C);
    12f6:	81 e1       	ldi	r24, 0x11	; 17
    12f8:	97 e0       	ldi	r25, 0x07	; 7
    12fa:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    12fe:	81 e1       	ldi	r24, 0x11	; 17
    1300:	97 e0       	ldi	r25, 0x07	; 7
    1302:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tcrt_is_box_detected>
    1306:	89 2b       	or	r24, r25
    1308:	11 f1       	breq	.+68     	; 0x134e <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    130a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <IR_C>
    130e:	82 95       	swap	r24
    1310:	8f 70       	andi	r24, 0x0F	; 15
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	e1 f4       	brne	.+56     	; 0x134e <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    1316:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <salidaC+0x2>
    131a:	83 ff       	sbrs	r24, 3
    131c:	0f c0       	rjmp	.+30     	; 0x133c <irSensorsTask+0x12c>
    131e:	80 ff       	sbrs	r24, 0
    1320:	0d c0       	rjmp	.+26     	; 0x133c <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    1322:	87 7f       	andi	r24, 0xF7	; 247
    1324:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    1328:	ea e3       	ldi	r30, 0x3A	; 58
    132a:	f7 e0       	ldi	r31, 0x07	; 7
    132c:	81 81       	ldd	r24, Z+1	; 0x01
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1332:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1334:	8c e5       	ldi	r24, 0x5C	; 92
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    133c:	e1 e1       	ldi	r30, 0x11	; 17
    133e:	f7 e0       	ldi	r31, 0x07	; 7
    1340:	80 81       	ld	r24, Z
    1342:	8f 70       	andi	r24, 0x0F	; 15
    1344:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1346:	81 e8       	ldi	r24, 0x81	; 129
    1348:	94 e0       	ldi	r25, 0x04	; 4
    134a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    134e:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <IR_U>
    1352:	80 ff       	sbrs	r24, 0
    1354:	09 c0       	rjmp	.+18     	; 0x1368 <irSensorsTask+0x158>
    1356:	83 ff       	sbrs	r24, 3
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    135a:	87 7f       	andi	r24, 0xF7	; 247
    135c:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <IR_U>
		tcrt_read(&IR_U);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	97 e0       	ldi	r25, 0x07	; 7
    1364:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	97 e0       	ldi	r25, 0x07	; 7
    136c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tcrt_is_box_detected>
    1370:	89 2b       	or	r24, r25
    1372:	e1 f0       	breq	.+56     	; 0x13ac <irSensorsTask+0x19c>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    1374:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <IR_U>
    1378:	89 2f       	mov	r24, r25
    137a:	82 95       	swap	r24
    137c:	8f 70       	andi	r24, 0x0F	; 15
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	41 f4       	brne	.+16     	; 0x1392 <irSensorsTask+0x182>
    1382:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <hcsr04Detector+0x4>
    1386:	21 fd       	sbrc	r18, 1
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <irSensorsTask+0x182>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    138a:	22 60       	ori	r18, 0x02	; 2
    138c:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <hcsr04Detector+0x4>
    1390:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	b9 f4       	brne	.+46     	; 0x13c4 <irSensorsTask+0x1b4>
    1396:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <hcsr04Detector+0x4>
    139a:	81 ff       	sbrs	r24, 1
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <irSensorsTask+0x1b4>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			//printf("IR U detecto: la caja salió\n");
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    139e:	8d 7f       	andi	r24, 0xFD	; 253
    13a0:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <hcsr04Detector+0x4>
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    13a4:	9f 70       	andi	r25, 0x0F	; 15
    13a6:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <IR_U>
    13aa:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13ac:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <hcsr04Detector+0x4>
    13b0:	81 ff       	sbrs	r24, 1
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <irSensorsTask+0x1b4>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    13b4:	8d 7f       	andi	r24, 0xFD	; 253
    13b6:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    13ba:	e1 e0       	ldi	r30, 0x01	; 1
    13bc:	f7 e0       	ldi	r31, 0x07	; 7
    13be:	80 81       	ld	r24, Z
    13c0:	8f 70       	andi	r24, 0x0F	; 15
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <servosTask>:
				//printf("IR U Idle again\n");
			}
	}
}

void servosTask() {
    13c6:	08 95       	ret

000013c8 <verify_header>:
// 		printf("Error: Checksum inválido\n");
// 	}
// 	return pak;
}

bool verify_header() {
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
	// Verificar si hay al menos 4 bytes disponibles
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    13e0:	e4 e7       	ldi	r30, 0x74	; 116
    13e2:	f7 e0       	ldi	r31, 0x07	; 7
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	89 17       	cp	r24, r25
    13ea:	10 f0       	brcs	.+4      	; 0x13f0 <verify_header+0x28>
		available = protocolService.indexW - protocolService.indexR;
    13ec:	89 1b       	sub	r24, r25
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <verify_header+0x2c>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    13f0:	89 1b       	sub	r24, r25
    13f2:	80 5e       	subi	r24, 0xE0	; 224
	}
	if (available < 4) {
    13f4:	84 30       	cpi	r24, 0x04	; 4
    13f6:	08 f4       	brcc	.+2      	; 0x13fa <verify_header+0x32>
    13f8:	a6 c0       	rjmp	.+332    	; 0x1546 <verify_header+0x17e>
		return false; // No hay suficientes bytes para el header
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
    13fa:	89 2f       	mov	r24, r25
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	ec 58       	subi	r30, 0x8C	; 140
    1402:	f8 4f       	sbci	r31, 0xF8	; 248
    1404:	22 81       	ldd	r18, Z+2	; 0x02
    1406:	25 35       	cpi	r18, 0x55	; 85
    1408:	09 f0       	breq	.+2      	; 0x140c <verify_header+0x44>
    140a:	9f c0       	rjmp	.+318    	; 0x154a <verify_header+0x182>
		return false; // No es un header candidato.
	}

	// Calcular los índices para los 4 bytes del header, considerando el buffer circular.
	uint8_t idx0 = protocolService.indexR;
	uint8_t idx1 = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    140c:	7c 01       	movw	r14, r24
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	e3 1a       	sub	r14, r19
    1412:	f3 0a       	sbc	r15, r19
    1414:	4f e1       	ldi	r20, 0x1F	; 31
    1416:	e4 22       	and	r14, r20
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	f4 22       	and	r15, r20
    141c:	ff 20       	and	r15, r15
    141e:	54 f4       	brge	.+20     	; 0x1434 <verify_header+0x6c>
    1420:	51 e0       	ldi	r21, 0x01	; 1
    1422:	e5 1a       	sub	r14, r21
    1424:	f1 08       	sbc	r15, r1
    1426:	60 ee       	ldi	r22, 0xE0	; 224
    1428:	e6 2a       	or	r14, r22
    142a:	ff 24       	eor	r15, r15
    142c:	fa 94       	dec	r15
    142e:	7f ef       	ldi	r23, 0xFF	; 255
    1430:	e7 1a       	sub	r14, r23
    1432:	f7 0a       	sbc	r15, r23
	uint8_t idx2 = (protocolService.indexR + 2) % PROTOCOL_BUFFER_SIZE;
    1434:	8c 01       	movw	r16, r24
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	0f 71       	andi	r16, 0x1F	; 31
    143c:	10 78       	andi	r17, 0x80	; 128
    143e:	11 23       	and	r17, r17
    1440:	34 f4       	brge	.+12     	; 0x144e <verify_header+0x86>
    1442:	01 50       	subi	r16, 0x01	; 1
    1444:	11 09       	sbc	r17, r1
    1446:	00 6e       	ori	r16, 0xE0	; 224
    1448:	1f 6f       	ori	r17, 0xFF	; 255
    144a:	0f 5f       	subi	r16, 0xFF	; 255
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t idx3 = (protocolService.indexR + 3) % PROTOCOL_BUFFER_SIZE;
    144e:	03 96       	adiw	r24, 0x03	; 3
    1450:	ec 01       	movw	r28, r24
    1452:	cf 71       	andi	r28, 0x1F	; 31
    1454:	d0 78       	andi	r29, 0x80	; 128
    1456:	dd 23       	and	r29, r29
    1458:	24 f4       	brge	.+8      	; 0x1462 <verify_header+0x9a>
    145a:	21 97       	sbiw	r28, 0x01	; 1
    145c:	c0 6e       	ori	r28, 0xE0	; 224
    145e:	df 6f       	ori	r29, 0xFF	; 255
    1460:	21 96       	adiw	r28, 0x01	; 1

	// Calcular la suma ponderada de los 4 bytes usando pesos: 4, 3, 2, 1
	uint16_t sum = 0;
	sum += (uint16_t)protocolService.buffer[idx0] * 4;  // 'U'
    1462:	82 2f       	mov	r24, r18
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	6c 01       	movw	r12, r24
    1468:	cc 0c       	add	r12, r12
    146a:	dd 1c       	adc	r13, r13
    146c:	cc 0c       	add	r12, r12
    146e:	dd 1c       	adc	r13, r13
    1470:	c7 01       	movw	r24, r14
    1472:	99 27       	eor	r25, r25
	sum += (uint16_t)protocolService.buffer[idx1] * 3;  // 'N'
    1474:	fc 01       	movw	r30, r24
    1476:	ec 58       	subi	r30, 0x8C	; 140
    1478:	f8 4f       	sbci	r31, 0xF8	; 248
    147a:	7f 01       	movw	r14, r30
    147c:	92 81       	ldd	r25, Z+2	; 0x02
    147e:	89 2f       	mov	r24, r25
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	ac 01       	movw	r20, r24
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	84 0f       	add	r24, r20
    148a:	95 1f       	adc	r25, r21
    148c:	8c 0d       	add	r24, r12
    148e:	9d 1d       	adc	r25, r13
    1490:	11 27       	eor	r17, r17
	sum += (uint16_t)protocolService.buffer[idx2] * 2;  // 'E'
    1492:	0c 58       	subi	r16, 0x8C	; 140
    1494:	18 4f       	sbci	r17, 0xF8	; 248
    1496:	f8 01       	movw	r30, r16
    1498:	c2 80       	ldd	r12, Z+2	; 0x02
    149a:	d1 2c       	mov	r13, r1
    149c:	cc 0c       	add	r12, r12
    149e:	dd 1c       	adc	r13, r13
    14a0:	8c 0d       	add	r24, r12
    14a2:	9d 1d       	adc	r25, r13
    14a4:	ae 01       	movw	r20, r28
    14a6:	55 27       	eor	r21, r21
	sum += (uint16_t)protocolService.buffer[idx3] * 1;  // 'R'
    14a8:	ba 01       	movw	r22, r20
    14aa:	6c 58       	subi	r22, 0x8C	; 140
    14ac:	78 4f       	sbci	r23, 0xF8	; 248
    14ae:	4b 01       	movw	r8, r22
    14b0:	fb 01       	movw	r30, r22
    14b2:	32 81       	ldd	r19, Z+2	; 0x02
    14b4:	6c 01       	movw	r12, r24
    14b6:	c3 0e       	add	r12, r19
    14b8:	d1 1c       	adc	r13, r1
	
	printf("Recibió %c\n", protocolService.buffer[idx0]);
    14ba:	1f 92       	push	r1
    14bc:	2f 93       	push	r18
    14be:	0f 2e       	mov	r0, r31
    14c0:	f1 e9       	ldi	r31, 0x91	; 145
    14c2:	af 2e       	mov	r10, r31
    14c4:	f4 e0       	ldi	r31, 0x04	; 4
    14c6:	bf 2e       	mov	r11, r31
    14c8:	f0 2d       	mov	r31, r0
    14ca:	bf 92       	push	r11
    14cc:	af 92       	push	r10
    14ce:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("Recibió %c\n", protocolService.buffer[idx1]);
    14d2:	f7 01       	movw	r30, r14
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	1f 92       	push	r1
    14d8:	8f 93       	push	r24
    14da:	bf 92       	push	r11
    14dc:	af 92       	push	r10
    14de:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("Recibió %c\n", protocolService.buffer[idx2]);
    14e2:	f8 01       	movw	r30, r16
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	1f 92       	push	r1
    14e8:	8f 93       	push	r24
    14ea:	bf 92       	push	r11
    14ec:	af 92       	push	r10
    14ee:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("Recibió %c\n", protocolService.buffer[idx3]);
    14f2:	f4 01       	movw	r30, r8
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	1f 92       	push	r1
    14f8:	8f 93       	push	r24
    14fa:	bf 92       	push	r11
    14fc:	af 92       	push	r10
    14fe:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	
	// Reducir a 8 bits: tomar los 8 bits menos significativos
	uint8_t computed = (uint8_t)(sum & 0xFF);

	// Comparar con el valor esperado
	if (computed == EXPECTED_HEADER_SUM) {
    1502:	4d b7       	in	r20, 0x3d	; 61
    1504:	5e b7       	in	r21, 0x3e	; 62
    1506:	40 5f       	subi	r20, 0xF0	; 240
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	5e bf       	out	0x3e, r21	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	4d bf       	out	0x3d, r20	; 61
    1514:	5a e1       	ldi	r21, 0x1A	; 26
    1516:	c5 12       	cpse	r12, r21
    1518:	1a c0       	rjmp	.+52     	; 0x154e <verify_header+0x186>
		printf("Computado %u, Esperaba %u\n", computed, EXPECTED_HEADER_SUM);
    151a:	1f 92       	push	r1
    151c:	8a e1       	ldi	r24, 0x1A	; 26
    151e:	8f 93       	push	r24
    1520:	dd 24       	eor	r13, r13
    1522:	df 92       	push	r13
    1524:	cf 92       	push	r12
    1526:	8d e9       	ldi	r24, 0x9D	; 157
    1528:	94 e0       	ldi	r25, 0x04	; 4
    152a:	9f 93       	push	r25
    152c:	8f 93       	push	r24
    152e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
    1532:	c0 93 75 07 	sts	0x0775, r28	; 0x800775 <protocolService+0x1>
		return true;  // La cabecera es válida.
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <verify_header+0x188>
		available = protocolService.indexW - protocolService.indexR;
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}
	if (available < 4) {
		return false; // No hay suficientes bytes para el header
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <verify_header+0x188>
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
		return false; // No es un header candidato.
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <verify_header+0x188>
		printf("Computado %u, Esperaba %u\n", computed, EXPECTED_HEADER_SUM);
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
		return true;  // La cabecera es válida.
	} else {
		// No coincide; descartar este header.
		return false;
    154e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	08 95       	ret

0000156a <process_protocol_buffer>:

bool process_protocol_buffer() {
    156a:	cf 93       	push	r28
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    156c:	e4 e7       	ldi	r30, 0x74	; 116
    156e:	f7 e0       	ldi	r31, 0x07	; 7
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	89 17       	cp	r24, r25
    1576:	10 f0       	brcs	.+4      	; 0x157c <process_protocol_buffer+0x12>
		available = protocolService.indexW - protocolService.indexR;
    1578:	89 1b       	sub	r24, r25
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <process_protocol_buffer+0x16>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    157c:	89 1b       	sub	r24, r25
    157e:	80 5e       	subi	r24, 0xE0	; 224
	}

	if (available < PROTOCOL_MIN_BYTE_COUNT) {
    1580:	86 30       	cpi	r24, 0x06	; 6
    1582:	78 f4       	brcc	.+30     	; 0x15a2 <process_protocol_buffer+0x38>
		printf("Menos de %u bytes en buffer\n", PROTOCOL_MIN_BYTE_COUNT);
    1584:	1f 92       	push	r1
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	8f 93       	push	r24
    158a:	88 eb       	ldi	r24, 0xB8	; 184
    158c:	94 e0       	ldi	r25, 0x04	; 4
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
		return false;
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	c0 e0       	ldi	r28, 0x00	; 0
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <process_protocol_buffer+0x54>
	}
	
	if (verify_header()) {
    15a2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <verify_header>
    15a6:	c8 2f       	mov	r28, r24
    15a8:	88 23       	and	r24, r24
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <process_protocol_buffer+0x4c>
		printf("Header UNER válido\n");
    15ac:	85 ed       	ldi	r24, 0xD5	; 213
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		// Se continúa procesando el paquete...
		return true;
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <process_protocol_buffer+0x54>
		} else {
		printf("Header inválido, descartado\n");
    15b6:	88 ee       	ldi	r24, 0xE8	; 232
    15b8:	94 e0       	ldi	r25, 0x04	; 4
    15ba:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		return false;
	}
}
    15be:	8c 2f       	mov	r24, r28
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <getResponseCommand>:

Command getResponseCommand(Command req) {
	for (size_t i = 0; i < NUM_COMMANDS; i++) {
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	11 c0       	rjmp	.+34     	; 0x15ec <getResponseCommand+0x28>
		if (commandMap[i].request == req) {
    15ca:	f9 01       	movw	r30, r18
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	e1 5d       	subi	r30, 0xD1	; 209
    15d2:	fa 4f       	sbci	r31, 0xFA	; 250
    15d4:	90 81       	ld	r25, Z
    15d6:	98 13       	cpse	r25, r24
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <getResponseCommand+0x24>
			return commandMap[i].response;
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	f9 01       	movw	r30, r18
    15e0:	e1 5d       	subi	r30, 0xD1	; 209
    15e2:	fa 4f       	sbci	r31, 0xFA	; 250
    15e4:	81 81       	ldd	r24, Z+1	; 0x01
    15e6:	08 95       	ret
		return false;
	}
}

Command getResponseCommand(Command req) {
	for (size_t i = 0; i < NUM_COMMANDS; i++) {
    15e8:	2f 5f       	subi	r18, 0xFF	; 255
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	25 30       	cpi	r18, 0x05	; 5
    15ee:	31 05       	cpc	r19, r1
    15f0:	60 f3       	brcs	.-40     	; 0x15ca <getResponseCommand+0x6>
		if (commandMap[i].request == req) {
			return commandMap[i].response;
		}
	}
	// En caso de no encontrar coincidencia, se retorna CMD_ALIVE como valor por defecto
	return CMD_ALIVE;
    15f2:	80 ea       	ldi	r24, 0xA0	; 160
}
    15f4:	08 95       	ret

000015f6 <clear_receive_pck>:

void clear_receive_pck(){
	protocolService.receivePck.checksum = 0;
    15f6:	e4 e7       	ldi	r30, 0x74	; 116
    15f8:	f7 e0       	ldi	r31, 0x07	; 7
    15fa:	14 a6       	std	Z+44, r1	; 0x2c
	protocolService.receivePck.cmd = 0;
    15fc:	11 a6       	std	Z+41, r1	; 0x29
	protocolService.receivePck.length = 0;
    15fe:	17 a2       	std	Z+39, r1	; 0x27
	protocolService.receivePck.token = 0;
    1600:	10 a6       	std	Z+40, r1	; 0x28
	protocolService.receivePck.payload[0] = NULL;
    1602:	a2 a5       	ldd	r26, Z+42	; 0x2a
    1604:	b3 a5       	ldd	r27, Z+43	; 0x2b
    1606:	1c 92       	st	X, r1
	protocolService.receivePck.header[0] = NULL;
    1608:	13 a2       	std	Z+35, r1	; 0x23
	printf("Paquete RCV cleared \n");
    160a:	84 e0       	ldi	r24, 0x04	; 4
    160c:	95 e0       	ldi	r25, 0x05	; 5
    160e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
    1612:	08 95       	ret

00001614 <initProtocolService>:
 */ 
#include "../../main.h"
#include "protocol_utils.h"
#include "../usart/usart_utils.h"

void initProtocolService(ProtocolService* service){
    1614:	fc 01       	movw	r30, r24
	service->buffer[0] = NULL;
    1616:	12 82       	std	Z+2, r1	; 0x02
	service->indexR = 0;
    1618:	11 82       	std	Z+1, r1	; 0x01
	service->indexW = 0;
    161a:	10 82       	st	Z, r1
	service->flags.byte = 0;
    161c:	12 a2       	std	Z+34, r1	; 0x22
	clear_receive_pck();
    161e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <clear_receive_pck>
	printf("Init protocol service\n");
    1622:	89 e1       	ldi	r24, 0x19	; 25
    1624:	95 e0       	ldi	r25, 0x05	; 5
    1626:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
    162a:	08 95       	ret

0000162c <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    162c:	85 3b       	cpi	r24, 0xB5	; 181
    162e:	08 f0       	brcs	.+2      	; 0x1632 <calculate_angle_pulseUs+0x6>
    1630:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	a0 ed       	ldi	r26, 0xD0	; 208
    1638:	b7 e0       	ldi	r27, 0x07	; 7
    163a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
    163e:	24 eb       	ldi	r18, 0xB4	; 180
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__udivmodsi4>
}
    164a:	c9 01       	movw	r24, r18
    164c:	80 53       	subi	r24, 0x30	; 48
    164e:	98 4f       	sbci	r25, 0xF8	; 248
    1650:	08 95       	ret

00001652 <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	04 2f       	mov	r16, r20
    165e:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    1660:	1f 92       	push	r1
    1662:	6f 93       	push	r22
    1664:	89 e3       	ldi	r24, 0x39	; 57
    1666:	95 e0       	ldi	r25, 0x05	; 5
    1668:	9f 93       	push	r25
    166a:	8f 93       	push	r24
    166c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	servo->flags.byte = 0;
    1670:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    1672:	81 2f       	mov	r24, r17
    1674:	0e 94 16 0b 	call	0x162c	; 0x162c <calculate_angle_pulseUs>
    1678:	9b 83       	std	Y+3, r25	; 0x03
    167a:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    167c:	08 83       	st	Y, r16
	servo->angle = startAngle;
    167e:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    1680:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    169a:	87 b1       	in	r24, 0x07	; 7
    169c:	80 7f       	andi	r24, 0xF0	; 240
    169e:	87 b9       	out	0x07, r24	; 7
    16a0:	88 b1       	in	r24, 0x08	; 8
    16a2:	80 7f       	andi	r24, 0xF0	; 240
    16a4:	88 b9       	out	0x08, r24	; 8
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    16ac:	86 e8       	ldi	r24, 0x86	; 134
    16ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    16b2:	08 95       	ret

000016b4 <tcrt_read_channel>:
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	a0 f4       	brcc	.+40     	; 0x16e0 <tcrt_read_channel+0x2c>
    16b8:	ec e7       	ldi	r30, 0x7C	; 124
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	90 7f       	andi	r25, 0xF0	; 240
    16c0:	89 2b       	or	r24, r25
    16c2:	80 83       	st	Z, r24
    16c4:	ea e7       	ldi	r30, 0x7A	; 122
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 64       	ori	r24, 0x40	; 64
    16cc:	80 83       	st	Z, r24
    16ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    16d2:	86 fd       	sbrc	r24, 6
    16d4:	fc cf       	rjmp	.-8      	; 0x16ce <tcrt_read_channel+0x1a>
    16d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    16da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    16de:	08 95       	ret
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	08 95       	ret

000016e6 <TCRT_init_Handlers>:
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	e0 e4       	ldi	r30, 0x40	; 64
    16ec:	f7 e0       	ldi	r31, 0x07	; 7
    16ee:	17 82       	std	Z+7, r1	; 0x07
    16f0:	10 86       	std	Z+8, r1	; 0x08
    16f2:	12 82       	std	Z+2, r1	; 0x02
    16f4:	11 82       	std	Z+1, r1	; 0x01
    16f6:	16 82       	std	Z+6, r1	; 0x06
    16f8:	15 82       	std	Z+5, r1	; 0x05
    16fa:	d4 e1       	ldi	r29, 0x14	; 20
    16fc:	d6 87       	std	Z+14, r29	; 0x0e
    16fe:	c1 e0       	ldi	r28, 0x01	; 1
    1700:	c0 83       	st	Z, r28
    1702:	88 e4       	ldi	r24, 0x48	; 72
    1704:	95 e0       	ldi	r25, 0x05	; 5
    1706:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
    170a:	e9 ee       	ldi	r30, 0xE9	; 233
    170c:	f6 e0       	ldi	r31, 0x06	; 6
    170e:	10 82       	st	Z, r1
    1710:	c7 83       	std	Z+7, r28	; 0x07
    1712:	c0 87       	std	Z+8, r28	; 0x08
    1714:	12 82       	std	Z+2, r1	; 0x02
    1716:	11 82       	std	Z+1, r1	; 0x01
    1718:	16 82       	std	Z+6, r1	; 0x06
    171a:	15 82       	std	Z+5, r1	; 0x05
    171c:	d6 87       	std	Z+14, r29	; 0x0e
    171e:	e1 e1       	ldi	r30, 0x11	; 17
    1720:	f7 e0       	ldi	r31, 0x07	; 7
    1722:	10 82       	st	Z, r1
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	87 83       	std	Z+7, r24	; 0x07
    1728:	80 87       	std	Z+8, r24	; 0x08
    172a:	12 82       	std	Z+2, r1	; 0x02
    172c:	11 82       	std	Z+1, r1	; 0x01
    172e:	16 82       	std	Z+6, r1	; 0x06
    1730:	15 82       	std	Z+5, r1	; 0x05
    1732:	d6 87       	std	Z+14, r29	; 0x0e
    1734:	e1 e0       	ldi	r30, 0x01	; 1
    1736:	f7 e0       	ldi	r31, 0x07	; 7
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	87 83       	std	Z+7, r24	; 0x07
    173c:	80 87       	std	Z+8, r24	; 0x08
    173e:	12 82       	std	Z+2, r1	; 0x02
    1740:	11 82       	std	Z+1, r1	; 0x01
    1742:	16 82       	std	Z+6, r1	; 0x06
    1744:	15 82       	std	Z+5, r1	; 0x05
    1746:	d6 87       	std	Z+14, r29	; 0x0e
    1748:	c0 83       	st	Z, r28
    174a:	87 e5       	ldi	r24, 0x57	; 87
    174c:	95 e0       	ldi	r25, 0x05	; 5
    174e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    175e:	88 81       	ld	r24, Y
    1760:	83 ff       	sbrs	r24, 3
    1762:	36 c0       	rjmp	.+108    	; 0x17d0 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	81 11       	cpse	r24, r1
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    176e:	1e 82       	std	Y+6, r1	; 0x06
    1770:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    1772:	8f 81       	ldd	r24, Y+7	; 0x07
    1774:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <tcrt_read_channel>
    1778:	2d 81       	ldd	r18, Y+5	; 0x05
    177a:	3e 81       	ldd	r19, Y+6	; 0x06
    177c:	28 0f       	add	r18, r24
    177e:	39 1f       	adc	r19, r25
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    1784:	99 85       	ldd	r25, Y+9	; 0x09
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    178a:	9a 30       	cpi	r25, 0x0A	; 10
    178c:	08 f1       	brcs	.+66     	; 0x17d0 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    178e:	ad ec       	ldi	r26, 0xCD	; 205
    1790:	bc ec       	ldi	r27, 0xCC	; 204
    1792:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
    1796:	96 95       	lsr	r25
    1798:	87 95       	ror	r24
    179a:	96 95       	lsr	r25
    179c:	87 95       	ror	r24
    179e:	96 95       	lsr	r25
    17a0:	87 95       	ror	r24
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    17a6:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    17a8:	28 81       	ld	r18, Y
    17aa:	2b 7f       	andi	r18, 0xFB	; 251
    17ac:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    17ae:	2f 81       	ldd	r18, Y+7	; 0x07
    17b0:	9f 93       	push	r25
    17b2:	8f 93       	push	r24
    17b4:	1f 92       	push	r1
    17b6:	2f 93       	push	r18
    17b8:	86 e6       	ldi	r24, 0x66	; 102
    17ba:	95 e0       	ldi	r25, 0x05	; 5
    17bc:	9f 93       	push	r25
    17be:	8f 93       	push	r24
    17c0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
		}
	}
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <tcrt_read_channel>
	sensor->lastReading = lectura;
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    17ea:	4a 85       	ldd	r20, Y+10	; 0x0a
    17ec:	5b 85       	ldd	r21, Y+11	; 0x0b
    17ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    17f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17f2:	8a 01       	movw	r16, r20
    17f4:	9b 01       	movw	r18, r22
    17f6:	08 0f       	add	r16, r24
    17f8:	19 1f       	adc	r17, r25
    17fa:	21 1d       	adc	r18, r1
    17fc:	31 1d       	adc	r19, r1
    17fe:	c9 01       	movw	r24, r18
    1800:	b8 01       	movw	r22, r16
    1802:	0a 87       	std	Y+10, r16	; 0x0a
    1804:	1b 87       	std	Y+11, r17	; 0x0b
    1806:	2c 87       	std	Y+12, r18	; 0x0c
    1808:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    180a:	29 85       	ldd	r18, Y+9	; 0x09
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1810:	2a 30       	cpi	r18, 0x0A	; 10
    1812:	68 f0       	brcs	.+26     	; 0x182e <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    1814:	2a e0       	ldi	r18, 0x0A	; 10
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__udivmodsi4>
    1820:	3a 83       	std	Y+2, r19	; 0x02
    1822:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1824:	1a 86       	std	Y+10, r1	; 0x0a
    1826:	1b 86       	std	Y+11, r1	; 0x0b
    1828:	1c 86       	std	Y+12, r1	; 0x0c
    182a:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    182c:	19 86       	std	Y+9, r1	; 0x09
	}
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1846:	ab 81       	ldd	r26, Y+3	; 0x03
    1848:	bc 81       	ldd	r27, Y+4	; 0x04
    184a:	8e 85       	ldd	r24, Y+14	; 0x0e
    184c:	0f 2e       	mov	r0, r31
    184e:	f4 e6       	ldi	r31, 0x64	; 100
    1850:	cf 2e       	mov	r12, r31
    1852:	d1 2c       	mov	r13, r1
    1854:	e1 2c       	mov	r14, r1
    1856:	f1 2c       	mov	r15, r1
    1858:	f0 2d       	mov	r31, r0
    185a:	a7 01       	movw	r20, r14
    185c:	96 01       	movw	r18, r12
    185e:	28 1b       	sub	r18, r24
    1860:	31 09       	sbc	r19, r1
    1862:	41 09       	sbc	r20, r1
    1864:	51 09       	sbc	r21, r1
    1866:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__muluhisi3>
    186a:	a7 01       	movw	r20, r14
    186c:	96 01       	movw	r18, r12
    186e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	6c 01       	movw	r12, r24
    1878:	e1 2c       	mov	r14, r1
    187a:	f1 2c       	mov	r15, r1
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	c2 16       	cp	r12, r18
    1880:	d3 06       	cpc	r13, r19
    1882:	e4 06       	cpc	r14, r20
    1884:	f5 06       	cpc	r15, r21
    1886:	08 f0       	brcs	.+2      	; 0x188a <tcrt_is_box_detected+0x52>
    1888:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    188a:	c2 16       	cp	r12, r18
    188c:	d3 06       	cpc	r13, r19
    188e:	e4 06       	cpc	r14, r20
    1890:	f5 06       	cpc	r15, r21
    1892:	50 f4       	brcc	.+20     	; 0x18a8 <tcrt_is_box_detected+0x70>
    1894:	98 81       	ld	r25, Y
    1896:	e9 2f       	mov	r30, r25
    1898:	e2 95       	swap	r30
    189a:	ef 70       	andi	r30, 0x0F	; 15
    189c:	29 f4       	brne	.+10     	; 0x18a8 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    189e:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    18a0:	9f 70       	andi	r25, 0x0F	; 15
    18a2:	90 61       	ori	r25, 0x10	; 16
    18a4:	98 83       	st	Y, r25
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    18a8:	c2 16       	cp	r12, r18
    18aa:	d3 06       	cpc	r13, r19
    18ac:	e4 06       	cpc	r14, r20
    18ae:	f5 06       	cpc	r15, r21
    18b0:	50 f0       	brcs	.+20     	; 0x18c6 <tcrt_is_box_detected+0x8e>
    18b2:	98 81       	ld	r25, Y
    18b4:	29 2f       	mov	r18, r25
    18b6:	22 95       	swap	r18
    18b8:	2f 70       	andi	r18, 0x0F	; 15
    18ba:	21 30       	cpi	r18, 0x01	; 1
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    18be:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    18c0:	9d 70       	andi	r25, 0x0D	; 13
    18c2:	90 62       	ori	r25, 0x20	; 32
    18c4:	98 83       	st	Y, r25
	}

	return box_now;
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	08 95       	ret

000018d4 <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    18d4:	8b b1       	in	r24, 0x0b	; 11
    18d6:	88 60       	ori	r24, 0x08	; 8
    18d8:	8b b9       	out	0x0b, r24	; 11
    18da:	08 95       	ret

000018dc <ultrasonic_hal_trigger_setLow>:
    18dc:	8b b1       	in	r24, 0x0b	; 11
    18de:	87 7f       	andi	r24, 0xF7	; 247
    18e0:	8b b9       	out	0x0b, r24	; 11
    18e2:	08 95       	ret

000018e4 <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    18e4:	e1 e8       	ldi	r30, 0x81	; 129
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 64       	ori	r24, 0x40	; 64
    18ec:	80 83       	st	Z, r24
    18ee:	08 95       	ret

000018f0 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    18f0:	e1 e8       	ldi	r30, 0x81	; 129
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	80 83       	st	Z, r24
    18fa:	08 95       	ret

000018fc <USART_Init>:
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
}
    18fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1900:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1904:	88 e9       	ldi	r24, 0x98	; 152
    1906:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1910:	08 95       	ret

00001912 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1912:	cf 93       	push	r28
    1914:	c8 2f       	mov	r28, r24
	// Si se desea manejar la nueva línea con retorno de carro:
	if (c == '\n')
    1916:	8a 30       	cpi	r24, 0x0A	; 10
    1918:	19 f4       	brne	.+6      	; 0x1920 <USART_putchar+0xe>
	USART_putchar('\r', stream);
    191a:	8d e0       	ldi	r24, 0x0D	; 13
    191c:	0e 94 89 0c 	call	0x1912	; 0x1912 <USART_putchar>
	
	// Esperar a que el buffer de transmisión (hardware) esté vacío
	while (!(UCSR0A & (1 << UDRE0)))
    1920:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1924:	85 ff       	sbrs	r24, 5
    1926:	fc cf       	rjmp	.-8      	; 0x1920 <USART_putchar+0xe>
	;  // Espera activa
	
	// Enviar el carácter
	UDR0 = c;
    1928:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <USART_getchar>:


int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
    1934:	e4 e7       	ldi	r30, 0x74	; 116
    1936:	f7 e0       	ldi	r31, 0x07	; 7
    1938:	21 81       	ldd	r18, Z+1	; 0x01
    193a:	80 81       	ld	r24, Z
    193c:	28 17       	cp	r18, r24
    193e:	a9 f0       	breq	.+42     	; 0x196a <USART_getchar+0x36>
	return -1;
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	f9 01       	movw	r30, r18
    1944:	ec 58       	subi	r30, 0x8C	; 140
    1946:	f8 4f       	sbci	r31, 0xF8	; 248
    1948:	82 81       	ldd	r24, Z+2	; 0x02
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	2f 71       	andi	r18, 0x1F	; 31
    1950:	30 78       	andi	r19, 0x80	; 128
    1952:	33 23       	and	r19, r19
    1954:	34 f4       	brge	.+12     	; 0x1962 <USART_getchar+0x2e>
    1956:	21 50       	subi	r18, 0x01	; 1
    1958:	31 09       	sbc	r19, r1
    195a:	20 6e       	ori	r18, 0xE0	; 224
    195c:	3f 6f       	ori	r19, 0xFF	; 255
    195e:	2f 5f       	subi	r18, 0xFF	; 255
    1960:	3f 4f       	sbci	r19, 0xFF	; 255
    1962:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <protocolService+0x1>
	return data;
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	08 95       	ret

int USART_getchar(FILE *stream)
{
	// Si no hay datos disponibles, se retorna -1 (puedes interpretar esto como EOF)
	if (protocolService.indexR == protocolService.indexW)
	return -1;
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f ef       	ldi	r25, 0xFF	; 255
	
	uint8_t data = protocolService.buffer[protocolService.indexR];
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	return data;
}
    196e:	08 95       	ret

00001970 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1970:	fc 01       	movw	r30, r24
    1972:	66 87       	std	Z+14, r22	; 0x0e
    1974:	08 95       	ret

00001976 <ultrasonic_calculate_distance>:
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	ec 01       	movw	r28, r24
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	ae 81       	ldd	r26, Y+6	; 0x06
    1986:	bf 81       	ldd	r27, Y+7	; 0x07
    1988:	48 81       	ld	r20, Y
    198a:	59 81       	ldd	r21, Y+1	; 0x01
    198c:	6a 81       	ldd	r22, Y+2	; 0x02
    198e:	7b 81       	ldd	r23, Y+3	; 0x03
    1990:	8c 01       	movw	r16, r24
    1992:	9d 01       	movw	r18, r26
    1994:	04 1b       	sub	r16, r20
    1996:	15 0b       	sbc	r17, r21
    1998:	26 0b       	sbc	r18, r22
    199a:	37 0b       	sbc	r19, r23
    199c:	b9 01       	movw	r22, r18
    199e:	a8 01       	movw	r20, r16
    19a0:	d9 01       	movw	r26, r18
    19a2:	c8 01       	movw	r24, r16
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	aa 1f       	adc	r26, r26
    19b2:	bb 1f       	adc	r27, r27
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	aa 1f       	adc	r26, r26
    19ba:	bb 1f       	adc	r27, r27
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	8c 01       	movw	r16, r24
    19c6:	9d 01       	movw	r18, r26
    19c8:	04 0f       	add	r16, r20
    19ca:	15 1f       	adc	r17, r21
    19cc:	26 1f       	adc	r18, r22
    19ce:	37 1f       	adc	r19, r23
    19d0:	c9 01       	movw	r24, r18
    19d2:	b8 01       	movw	r22, r16
    19d4:	66 0f       	add	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	20 e9       	ldi	r18, 0x90	; 144
    19de:	31 e0       	ldi	r19, 0x01	; 1
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__udivmodsi4>
    19e8:	28 87       	std	Y+8, r18	; 0x08
    19ea:	39 87       	std	Y+9, r19	; 0x09
    19ec:	4a 87       	std	Y+10, r20	; 0x0a
    19ee:	5b 87       	std	Y+11, r21	; 0x0b
    19f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f2:	80 68       	ori	r24, 0x80	; 128
    19f4:	8c 87       	std	Y+12, r24	; 0x0c
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    1a00:	dc 01       	movw	r26, r24
    1a02:	1f 96       	adiw	r26, 0x0f	; 15
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	50 97       	sbiw	r26, 0x10	; 16
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <ultrasonic_print+0x12>
    1a0e:	cb 01       	movw	r24, r22
		us->print_method(message);
    1a10:	09 95       	icall
    1a12:	08 95       	ret

00001a14 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1a1a:	18 82       	st	Y, r1
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	1a 82       	std	Y+2, r1	; 0x02
    1a20:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    1a22:	1c 82       	std	Y+4, r1	; 0x04
    1a24:	1d 82       	std	Y+5, r1	; 0x05
    1a26:	1e 82       	std	Y+6, r1	; 0x06
    1a28:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1a2a:	18 86       	std	Y+8, r1	; 0x08
    1a2c:	19 86       	std	Y+9, r1	; 0x09
    1a2e:	1a 86       	std	Y+10, r1	; 0x0a
    1a30:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    1a32:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1a34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a36:	80 62       	ori	r24, 0x20	; 32
    1a38:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1a3a:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1a3c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a42:	98 89       	ldd	r25, Y+16	; 0x10
    1a44:	89 2b       	or	r24, r25
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1a48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a4a:	88 23       	and	r24, r24
    1a4c:	29 f0       	breq	.+10     	; 0x1a58 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1a4e:	62 e9       	ldi	r22, 0x92	; 146
    1a50:	75 e0       	ldi	r23, 0x05	; 5
    1a52:	ce 01       	movw	r24, r28
    1a54:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
		}
	}
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
    1a68:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1a6a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <ultrasonic_init_flags>
	us->debugMode = true;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    1a72:	01 15       	cp	r16, r1
    1a74:	11 05       	cpc	r17, r1
    1a76:	19 f4       	brne	.+6      	; 0x1a7e <ultrasonic_init+0x20>
		us->print_method = NULL;
    1a78:	18 8a       	std	Y+16, r1	; 0x10
    1a7a:	1f 86       	std	Y+15, r1	; 0x0f
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    1a7e:	18 8b       	std	Y+16, r17	; 0x10
    1a80:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    1a82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a84:	88 23       	and	r24, r24
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1a88:	61 eb       	ldi	r22, 0xB1	; 177
    1a8a:	75 e0       	ldi	r23, 0x05	; 5
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
		}
	}
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	25 85       	ldd	r18, Z+13	; 0x0d
    1aa6:	26 30       	cpi	r18, 0x06	; 6
    1aa8:	71 f4       	brne	.+28     	; 0x1ac6 <ultrasonic_timeout_clear+0x2a>
    1aaa:	16 2f       	mov	r17, r22
    1aac:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    1aae:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <ultrasonic_init_flags>
		us->debugMode = state;
    1ab2:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    1ab4:	1e 85       	ldd	r17, Y+14	; 0x0e
    1ab6:	11 23       	and	r17, r17
    1ab8:	41 f0       	breq	.+16     	; 0x1aca <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    1aba:	60 ed       	ldi	r22, 0xD0	; 208
    1abc:	73 e0       	ldi	r23, 0x03	; 3
    1abe:	ce 01       	movw	r24, r28
    1ac0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    1aca:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    1acc:	81 2f       	mov	r24, r17
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	08 95       	ret

00001ad6 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    1ad6:	cf 93       	push	r28
    1ad8:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    1ada:	85 85       	ldd	r24, Z+13	; 0x0d
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <ultrasonic_start+0x10>
    1ae0:	85 85       	ldd	r24, Z+13	; 0x0d
    1ae2:	85 30       	cpi	r24, 0x05	; 5
    1ae4:	c1 f4       	brne	.+48     	; 0x1b16 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    1ae6:	84 85       	ldd	r24, Z+12	; 0x0c
    1ae8:	85 ff       	sbrs	r24, 5
    1aea:	0b c0       	rjmp	.+22     	; 0x1b02 <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    1af0:	c6 85       	ldd	r28, Z+14	; 0x0e
    1af2:	cc 23       	and	r28, r28
    1af4:	d1 f0       	breq	.+52     	; 0x1b2a <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    1af6:	6d ec       	ldi	r22, 0xCD	; 205
    1af8:	75 e0       	ldi	r23, 0x05	; 5
    1afa:	cf 01       	movw	r24, r30
    1afc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
    1b00:	15 c0       	rjmp	.+42     	; 0x1b2c <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    1b02:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b04:	cc 23       	and	r28, r28
    1b06:	91 f0       	breq	.+36     	; 0x1b2c <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1b08:	6c ef       	ldi	r22, 0xFC	; 252
    1b0a:	75 e0       	ldi	r23, 0x05	; 5
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
    1b14:	0b c0       	rjmp	.+22     	; 0x1b2c <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    1b16:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b18:	cc 23       	and	r28, r28
    1b1a:	41 f0       	breq	.+16     	; 0x1b2c <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    1b1c:	63 e3       	ldi	r22, 0x33	; 51
    1b1e:	76 e0       	ldi	r23, 0x06	; 6
    1b20:	cf 01       	movw	r24, r30
    1b22:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
			}
	}
	return false;
    1b26:	c0 e0       	ldi	r28, 0x00	; 0
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    1b2a:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    1b2c:	8c 2f       	mov	r24, r28
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
	switch (us->state)
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	71 f1       	breq	.+92     	; 0x1b9a <ultrasonic_update+0x68>
    1b3e:	28 f4       	brcc	.+10     	; 0x1b4a <ultrasonic_update+0x18>
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	49 f0       	breq	.+18     	; 0x1b56 <ultrasonic_update+0x24>
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	a1 f0       	breq	.+40     	; 0x1b70 <ultrasonic_update+0x3e>
    1b48:	55 c0       	rjmp	.+170    	; 0x1bf4 <ultrasonic_update+0xc2>
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	e1 f1       	breq	.+120    	; 0x1bc6 <ultrasonic_update+0x94>
    1b4e:	86 30       	cpi	r24, 0x06	; 6
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <ultrasonic_update+0x22>
    1b52:	4d c0       	rjmp	.+154    	; 0x1bee <ultrasonic_update+0xbc>
    1b54:	4f c0       	rjmp	.+158    	; 0x1bf4 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b58:	81 ff       	sbrs	r24, 1
    1b5a:	4c c0       	rjmp	.+152    	; 0x1bf4 <ultrasonic_update+0xc2>
				if(us->debugMode){
    1b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <ultrasonic_update+0x32>
    1b62:	48 c0       	rjmp	.+144    	; 0x1bf4 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1b64:	60 e6       	ldi	r22, 0x60	; 96
    1b66:	76 e0       	ldi	r23, 0x06	; 6
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
    1b6e:	42 c0       	rjmp	.+132    	; 0x1bf4 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    1b70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b72:	84 fd       	sbrc	r24, 4
    1b74:	0c c0       	rjmp	.+24     	; 0x1b8e <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    1b7a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    1b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b80:	88 23       	and	r24, r24
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    1b84:	6f e7       	ldi	r22, 0x7F	; 127
    1b86:	76 e0       	ldi	r23, 0x06	; 6
    1b88:	ce 01       	movw	r24, r28
    1b8a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    1b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b90:	83 ff       	sbrs	r24, 3
    1b92:	30 c0       	rjmp	.+96     	; 0x1bf4 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1b94:	86 e0       	ldi	r24, 0x06	; 6
    1b96:	8d 87       	std	Y+13, r24	; 0x0d
    1b98:	2d c0       	rjmp	.+90     	; 0x1bf4 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    1b9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b9c:	86 ff       	sbrs	r24, 6
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    1ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ba6:	88 23       	and	r24, r24
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    1baa:	6c e9       	ldi	r22, 0x9C	; 156
    1bac:	76 e0       	ldi	r23, 0x06	; 6
    1bae:	ce 01       	movw	r24, r28
    1bb0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    1bb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb6:	84 60       	ori	r24, 0x04	; 4
    1bb8:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    1bba:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bbc:	83 ff       	sbrs	r24, 3
    1bbe:	1a c0       	rjmp	.+52     	; 0x1bf4 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1bc0:	86 e0       	ldi	r24, 0x06	; 6
    1bc2:	8d 87       	std	Y+13, r24	; 0x0d
    1bc4:	17 c0       	rjmp	.+46     	; 0x1bf4 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    1bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc8:	82 ff       	sbrs	r24, 2
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	0e 94 bb 0c 	call	0x1976	; 0x1976 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    1bd2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bd4:	8b 7f       	andi	r24, 0xFB	; 251
    1bd6:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    1bd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bda:	88 23       	and	r24, r24
    1bdc:	29 f0       	breq	.+10     	; 0x1be8 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    1bde:	63 eb       	ldi	r22, 0xB3	; 179
    1be0:	76 e0       	ldi	r23, 0x06	; 6
    1be2:	ce 01       	movw	r24, r28
    1be4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    1be8:	85 e0       	ldi	r24, 0x05	; 5
    1bea:	8d 87       	std	Y+13, r24	; 0x0d
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    1bee:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bf0:	88 60       	ori	r24, 0x08	; 8
    1bf2:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <__udivmodsi4>:
    1bfa:	a1 e2       	ldi	r26, 0x21	; 33
    1bfc:	1a 2e       	mov	r1, r26
    1bfe:	aa 1b       	sub	r26, r26
    1c00:	bb 1b       	sub	r27, r27
    1c02:	fd 01       	movw	r30, r26
    1c04:	0d c0       	rjmp	.+26     	; 0x1c20 <__udivmodsi4_ep>

00001c06 <__udivmodsi4_loop>:
    1c06:	aa 1f       	adc	r26, r26
    1c08:	bb 1f       	adc	r27, r27
    1c0a:	ee 1f       	adc	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	a2 17       	cp	r26, r18
    1c10:	b3 07       	cpc	r27, r19
    1c12:	e4 07       	cpc	r30, r20
    1c14:	f5 07       	cpc	r31, r21
    1c16:	20 f0       	brcs	.+8      	; 0x1c20 <__udivmodsi4_ep>
    1c18:	a2 1b       	sub	r26, r18
    1c1a:	b3 0b       	sbc	r27, r19
    1c1c:	e4 0b       	sbc	r30, r20
    1c1e:	f5 0b       	sbc	r31, r21

00001c20 <__udivmodsi4_ep>:
    1c20:	66 1f       	adc	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	1a 94       	dec	r1
    1c2a:	69 f7       	brne	.-38     	; 0x1c06 <__udivmodsi4_loop>
    1c2c:	60 95       	com	r22
    1c2e:	70 95       	com	r23
    1c30:	80 95       	com	r24
    1c32:	90 95       	com	r25
    1c34:	9b 01       	movw	r18, r22
    1c36:	ac 01       	movw	r20, r24
    1c38:	bd 01       	movw	r22, r26
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	08 95       	ret

00001c3e <__umulhisi3>:
    1c3e:	a2 9f       	mul	r26, r18
    1c40:	b0 01       	movw	r22, r0
    1c42:	b3 9f       	mul	r27, r19
    1c44:	c0 01       	movw	r24, r0
    1c46:	a3 9f       	mul	r26, r19
    1c48:	70 0d       	add	r23, r0
    1c4a:	81 1d       	adc	r24, r1
    1c4c:	11 24       	eor	r1, r1
    1c4e:	91 1d       	adc	r25, r1
    1c50:	b2 9f       	mul	r27, r18
    1c52:	70 0d       	add	r23, r0
    1c54:	81 1d       	adc	r24, r1
    1c56:	11 24       	eor	r1, r1
    1c58:	91 1d       	adc	r25, r1
    1c5a:	08 95       	ret

00001c5c <__muluhisi3>:
    1c5c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
    1c60:	a5 9f       	mul	r26, r21
    1c62:	90 0d       	add	r25, r0
    1c64:	b4 9f       	mul	r27, r20
    1c66:	90 0d       	add	r25, r0
    1c68:	a4 9f       	mul	r26, r20
    1c6a:	80 0d       	add	r24, r0
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	11 24       	eor	r1, r1
    1c70:	08 95       	ret

00001c72 <printf>:
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ef e3       	ldi	r30, 0x3F	; 63
    1c78:	fe e0       	ldi	r31, 0x0E	; 14
    1c7a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x20>
    1c7e:	ae 01       	movw	r20, r28
    1c80:	4b 5f       	subi	r20, 0xFB	; 251
    1c82:	5f 4f       	sbci	r21, 0xFF	; 255
    1c84:	fa 01       	movw	r30, r20
    1c86:	61 91       	ld	r22, Z+
    1c88:	71 91       	ld	r23, Z+
    1c8a:	af 01       	movw	r20, r30
    1c8c:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <__iob+0x2>
    1c90:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <__iob+0x3>
    1c94:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <vfprintf>
    1c98:	e2 e0       	ldi	r30, 0x02	; 2
    1c9a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x20>

00001c9e <puts>:
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	e0 91 a6 07 	lds	r30, 0x07A6	; 0x8007a6 <__iob+0x2>
    1caa:	f0 91 a7 07 	lds	r31, 0x07A7	; 0x8007a7 <__iob+0x3>
    1cae:	23 81       	ldd	r18, Z+3	; 0x03
    1cb0:	21 ff       	sbrs	r18, 1
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <puts+0x4c>
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	d0 e0       	ldi	r29, 0x00	; 0
    1cb8:	c0 e0       	ldi	r28, 0x00	; 0
    1cba:	f8 01       	movw	r30, r16
    1cbc:	81 91       	ld	r24, Z+
    1cbe:	8f 01       	movw	r16, r30
    1cc0:	60 91 a6 07 	lds	r22, 0x07A6	; 0x8007a6 <__iob+0x2>
    1cc4:	70 91 a7 07 	lds	r23, 0x07A7	; 0x8007a7 <__iob+0x3>
    1cc8:	db 01       	movw	r26, r22
    1cca:	18 96       	adiw	r26, 0x08	; 8
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	19 97       	sbiw	r26, 0x09	; 9
    1cd2:	88 23       	and	r24, r24
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <puts+0x44>
    1cd6:	09 95       	icall
    1cd8:	89 2b       	or	r24, r25
    1cda:	79 f3       	breq	.-34     	; 0x1cba <puts+0x1c>
    1cdc:	df ef       	ldi	r29, 0xFF	; 255
    1cde:	cf ef       	ldi	r28, 0xFF	; 255
    1ce0:	ec cf       	rjmp	.-40     	; 0x1cba <puts+0x1c>
    1ce2:	8a e0       	ldi	r24, 0x0A	; 10
    1ce4:	09 95       	icall
    1ce6:	89 2b       	or	r24, r25
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <puts+0x52>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <puts+0x56>
    1cf0:	8d 2f       	mov	r24, r29
    1cf2:	9c 2f       	mov	r25, r28
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <vfprintf>:
    1cfe:	ab e0       	ldi	r26, 0x0B	; 11
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e8       	ldi	r30, 0x85	; 133
    1d04:	fe e0       	ldi	r31, 0x0E	; 14
    1d06:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__prologue_saves__>
    1d0a:	6c 01       	movw	r12, r24
    1d0c:	7b 01       	movw	r14, r22
    1d0e:	8a 01       	movw	r16, r20
    1d10:	fc 01       	movw	r30, r24
    1d12:	17 82       	std	Z+7, r1	; 0x07
    1d14:	16 82       	std	Z+6, r1	; 0x06
    1d16:	83 81       	ldd	r24, Z+3	; 0x03
    1d18:	81 ff       	sbrs	r24, 1
    1d1a:	cc c1       	rjmp	.+920    	; 0x20b4 <vfprintf+0x3b6>
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	3c 01       	movw	r6, r24
    1d22:	f6 01       	movw	r30, r12
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	f7 01       	movw	r30, r14
    1d28:	93 fd       	sbrc	r25, 3
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	93 ff       	sbrs	r25, 3
    1d2e:	81 91       	ld	r24, Z+
    1d30:	7f 01       	movw	r14, r30
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vfprintf+0x3a>
    1d36:	ba c1       	rjmp	.+884    	; 0x20ac <vfprintf+0x3ae>
    1d38:	85 32       	cpi	r24, 0x25	; 37
    1d3a:	39 f4       	brne	.+14     	; 0x1d4a <vfprintf+0x4c>
    1d3c:	93 fd       	sbrc	r25, 3
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	93 ff       	sbrs	r25, 3
    1d42:	81 91       	ld	r24, Z+
    1d44:	7f 01       	movw	r14, r30
    1d46:	85 32       	cpi	r24, 0x25	; 37
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <vfprintf+0x56>
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1d52:	e7 cf       	rjmp	.-50     	; 0x1d22 <vfprintf+0x24>
    1d54:	91 2c       	mov	r9, r1
    1d56:	21 2c       	mov	r2, r1
    1d58:	31 2c       	mov	r3, r1
    1d5a:	ff e1       	ldi	r31, 0x1F	; 31
    1d5c:	f3 15       	cp	r31, r3
    1d5e:	d8 f0       	brcs	.+54     	; 0x1d96 <vfprintf+0x98>
    1d60:	8b 32       	cpi	r24, 0x2B	; 43
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <vfprintf+0x84>
    1d64:	38 f4       	brcc	.+14     	; 0x1d74 <vfprintf+0x76>
    1d66:	80 32       	cpi	r24, 0x20	; 32
    1d68:	79 f0       	breq	.+30     	; 0x1d88 <vfprintf+0x8a>
    1d6a:	83 32       	cpi	r24, 0x23	; 35
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <vfprintf+0x98>
    1d6e:	23 2d       	mov	r18, r3
    1d70:	20 61       	ori	r18, 0x10	; 16
    1d72:	1d c0       	rjmp	.+58     	; 0x1dae <vfprintf+0xb0>
    1d74:	8d 32       	cpi	r24, 0x2D	; 45
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <vfprintf+0x92>
    1d78:	80 33       	cpi	r24, 0x30	; 48
    1d7a:	69 f4       	brne	.+26     	; 0x1d96 <vfprintf+0x98>
    1d7c:	23 2d       	mov	r18, r3
    1d7e:	21 60       	ori	r18, 0x01	; 1
    1d80:	16 c0       	rjmp	.+44     	; 0x1dae <vfprintf+0xb0>
    1d82:	83 2d       	mov	r24, r3
    1d84:	82 60       	ori	r24, 0x02	; 2
    1d86:	38 2e       	mov	r3, r24
    1d88:	e3 2d       	mov	r30, r3
    1d8a:	e4 60       	ori	r30, 0x04	; 4
    1d8c:	3e 2e       	mov	r3, r30
    1d8e:	2a c0       	rjmp	.+84     	; 0x1de4 <vfprintf+0xe6>
    1d90:	f3 2d       	mov	r31, r3
    1d92:	f8 60       	ori	r31, 0x08	; 8
    1d94:	1d c0       	rjmp	.+58     	; 0x1dd0 <vfprintf+0xd2>
    1d96:	37 fc       	sbrc	r3, 7
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <vfprintf+0xf6>
    1d9a:	20 ed       	ldi	r18, 0xD0	; 208
    1d9c:	28 0f       	add	r18, r24
    1d9e:	2a 30       	cpi	r18, 0x0A	; 10
    1da0:	40 f0       	brcs	.+16     	; 0x1db2 <vfprintf+0xb4>
    1da2:	8e 32       	cpi	r24, 0x2E	; 46
    1da4:	b9 f4       	brne	.+46     	; 0x1dd4 <vfprintf+0xd6>
    1da6:	36 fc       	sbrc	r3, 6
    1da8:	81 c1       	rjmp	.+770    	; 0x20ac <vfprintf+0x3ae>
    1daa:	23 2d       	mov	r18, r3
    1dac:	20 64       	ori	r18, 0x40	; 64
    1dae:	32 2e       	mov	r3, r18
    1db0:	19 c0       	rjmp	.+50     	; 0x1de4 <vfprintf+0xe6>
    1db2:	36 fe       	sbrs	r3, 6
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0xc4>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	98 9e       	mul	r9, r24
    1dba:	20 0d       	add	r18, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	92 2e       	mov	r9, r18
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <vfprintf+0xe6>
    1dc2:	ea e0       	ldi	r30, 0x0A	; 10
    1dc4:	2e 9e       	mul	r2, r30
    1dc6:	20 0d       	add	r18, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	22 2e       	mov	r2, r18
    1dcc:	f3 2d       	mov	r31, r3
    1dce:	f0 62       	ori	r31, 0x20	; 32
    1dd0:	3f 2e       	mov	r3, r31
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0xe6>
    1dd4:	8c 36       	cpi	r24, 0x6C	; 108
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <vfprintf+0xe2>
    1dd8:	83 2d       	mov	r24, r3
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	38 2e       	mov	r3, r24
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0xe6>
    1de0:	88 36       	cpi	r24, 0x68	; 104
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <vfprintf+0xf6>
    1de4:	f7 01       	movw	r30, r14
    1de6:	93 fd       	sbrc	r25, 3
    1de8:	85 91       	lpm	r24, Z+
    1dea:	93 ff       	sbrs	r25, 3
    1dec:	81 91       	ld	r24, Z+
    1dee:	7f 01       	movw	r14, r30
    1df0:	81 11       	cpse	r24, r1
    1df2:	b3 cf       	rjmp	.-154    	; 0x1d5a <vfprintf+0x5c>
    1df4:	98 2f       	mov	r25, r24
    1df6:	9f 7d       	andi	r25, 0xDF	; 223
    1df8:	95 54       	subi	r25, 0x45	; 69
    1dfa:	93 30       	cpi	r25, 0x03	; 3
    1dfc:	28 f4       	brcc	.+10     	; 0x1e08 <vfprintf+0x10a>
    1dfe:	0c 5f       	subi	r16, 0xFC	; 252
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	9f e3       	ldi	r25, 0x3F	; 63
    1e04:	99 83       	std	Y+1, r25	; 0x01
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <vfprintf+0x124>
    1e08:	83 36       	cpi	r24, 0x63	; 99
    1e0a:	31 f0       	breq	.+12     	; 0x1e18 <vfprintf+0x11a>
    1e0c:	83 37       	cpi	r24, 0x73	; 115
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <vfprintf+0x12e>
    1e10:	83 35       	cpi	r24, 0x53	; 83
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <vfprintf+0x118>
    1e14:	59 c0       	rjmp	.+178    	; 0x1ec8 <vfprintf+0x1ca>
    1e16:	21 c0       	rjmp	.+66     	; 0x1e5a <vfprintf+0x15c>
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 81       	ld	r24, Z
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	88 24       	eor	r8, r8
    1e24:	83 94       	inc	r8
    1e26:	91 2c       	mov	r9, r1
    1e28:	53 01       	movw	r10, r6
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <vfprintf+0x154>
    1e2c:	28 01       	movw	r4, r16
    1e2e:	f2 e0       	ldi	r31, 0x02	; 2
    1e30:	4f 0e       	add	r4, r31
    1e32:	51 1c       	adc	r5, r1
    1e34:	f8 01       	movw	r30, r16
    1e36:	a0 80       	ld	r10, Z
    1e38:	b1 80       	ldd	r11, Z+1	; 0x01
    1e3a:	36 fe       	sbrs	r3, 6
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <vfprintf+0x146>
    1e3e:	69 2d       	mov	r22, r9
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <vfprintf+0x14a>
    1e44:	6f ef       	ldi	r22, 0xFF	; 255
    1e46:	7f ef       	ldi	r23, 0xFF	; 255
    1e48:	c5 01       	movw	r24, r10
    1e4a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <strnlen>
    1e4e:	4c 01       	movw	r8, r24
    1e50:	82 01       	movw	r16, r4
    1e52:	f3 2d       	mov	r31, r3
    1e54:	ff 77       	andi	r31, 0x7F	; 127
    1e56:	3f 2e       	mov	r3, r31
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <vfprintf+0x188>
    1e5a:	28 01       	movw	r4, r16
    1e5c:	22 e0       	ldi	r18, 0x02	; 2
    1e5e:	42 0e       	add	r4, r18
    1e60:	51 1c       	adc	r5, r1
    1e62:	f8 01       	movw	r30, r16
    1e64:	a0 80       	ld	r10, Z
    1e66:	b1 80       	ldd	r11, Z+1	; 0x01
    1e68:	36 fe       	sbrs	r3, 6
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <vfprintf+0x174>
    1e6c:	69 2d       	mov	r22, r9
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x178>
    1e72:	6f ef       	ldi	r22, 0xFF	; 255
    1e74:	7f ef       	ldi	r23, 0xFF	; 255
    1e76:	c5 01       	movw	r24, r10
    1e78:	0e 94 60 10 	call	0x20c0	; 0x20c0 <strnlen_P>
    1e7c:	4c 01       	movw	r8, r24
    1e7e:	f3 2d       	mov	r31, r3
    1e80:	f0 68       	ori	r31, 0x80	; 128
    1e82:	3f 2e       	mov	r3, r31
    1e84:	82 01       	movw	r16, r4
    1e86:	33 fc       	sbrc	r3, 3
    1e88:	1b c0       	rjmp	.+54     	; 0x1ec0 <vfprintf+0x1c2>
    1e8a:	82 2d       	mov	r24, r2
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	88 16       	cp	r8, r24
    1e90:	99 06       	cpc	r9, r25
    1e92:	b0 f4       	brcc	.+44     	; 0x1ec0 <vfprintf+0x1c2>
    1e94:	b6 01       	movw	r22, r12
    1e96:	80 e2       	ldi	r24, 0x20	; 32
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1e9e:	2a 94       	dec	r2
    1ea0:	f4 cf       	rjmp	.-24     	; 0x1e8a <vfprintf+0x18c>
    1ea2:	f5 01       	movw	r30, r10
    1ea4:	37 fc       	sbrc	r3, 7
    1ea6:	85 91       	lpm	r24, Z+
    1ea8:	37 fe       	sbrs	r3, 7
    1eaa:	81 91       	ld	r24, Z+
    1eac:	5f 01       	movw	r10, r30
    1eae:	b6 01       	movw	r22, r12
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1eb6:	21 10       	cpse	r2, r1
    1eb8:	2a 94       	dec	r2
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	82 1a       	sub	r8, r18
    1ebe:	91 08       	sbc	r9, r1
    1ec0:	81 14       	cp	r8, r1
    1ec2:	91 04       	cpc	r9, r1
    1ec4:	71 f7       	brne	.-36     	; 0x1ea2 <vfprintf+0x1a4>
    1ec6:	e8 c0       	rjmp	.+464    	; 0x2098 <vfprintf+0x39a>
    1ec8:	84 36       	cpi	r24, 0x64	; 100
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <vfprintf+0x1d2>
    1ecc:	89 36       	cpi	r24, 0x69	; 105
    1ece:	41 f5       	brne	.+80     	; 0x1f20 <vfprintf+0x222>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	37 fe       	sbrs	r3, 7
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <vfprintf+0x1e6>
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	0c 5f       	subi	r16, 0xFC	; 252
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <vfprintf+0x1f6>
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	07 2e       	mov	r0, r23
    1eea:	00 0c       	add	r0, r0
    1eec:	88 0b       	sbc	r24, r24
    1eee:	99 0b       	sbc	r25, r25
    1ef0:	0e 5f       	subi	r16, 0xFE	; 254
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	f3 2d       	mov	r31, r3
    1ef6:	ff 76       	andi	r31, 0x6F	; 111
    1ef8:	3f 2e       	mov	r3, r31
    1efa:	97 ff       	sbrs	r25, 7
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <vfprintf+0x212>
    1efe:	90 95       	com	r25
    1f00:	80 95       	com	r24
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	f0 68       	ori	r31, 0x80	; 128
    1f0e:	3f 2e       	mov	r3, r31
    1f10:	2a e0       	ldi	r18, 0x0A	; 10
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	a3 01       	movw	r20, r6
    1f16:	0e 94 b2 10 	call	0x2164	; 0x2164 <__ultoa_invert>
    1f1a:	88 2e       	mov	r8, r24
    1f1c:	86 18       	sub	r8, r6
    1f1e:	45 c0       	rjmp	.+138    	; 0x1faa <vfprintf+0x2ac>
    1f20:	85 37       	cpi	r24, 0x75	; 117
    1f22:	31 f4       	brne	.+12     	; 0x1f30 <vfprintf+0x232>
    1f24:	23 2d       	mov	r18, r3
    1f26:	2f 7e       	andi	r18, 0xEF	; 239
    1f28:	b2 2e       	mov	r11, r18
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	25 c0       	rjmp	.+74     	; 0x1f7a <vfprintf+0x27c>
    1f30:	93 2d       	mov	r25, r3
    1f32:	99 7f       	andi	r25, 0xF9	; 249
    1f34:	b9 2e       	mov	r11, r25
    1f36:	8f 36       	cpi	r24, 0x6F	; 111
    1f38:	c1 f0       	breq	.+48     	; 0x1f6a <vfprintf+0x26c>
    1f3a:	18 f4       	brcc	.+6      	; 0x1f42 <vfprintf+0x244>
    1f3c:	88 35       	cpi	r24, 0x58	; 88
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <vfprintf+0x260>
    1f40:	b5 c0       	rjmp	.+362    	; 0x20ac <vfprintf+0x3ae>
    1f42:	80 37       	cpi	r24, 0x70	; 112
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <vfprintf+0x24e>
    1f46:	88 37       	cpi	r24, 0x78	; 120
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <vfprintf+0x254>
    1f4a:	b0 c0       	rjmp	.+352    	; 0x20ac <vfprintf+0x3ae>
    1f4c:	e9 2f       	mov	r30, r25
    1f4e:	e0 61       	ori	r30, 0x10	; 16
    1f50:	be 2e       	mov	r11, r30
    1f52:	b4 fe       	sbrs	r11, 4
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <vfprintf+0x272>
    1f56:	fb 2d       	mov	r31, r11
    1f58:	f4 60       	ori	r31, 0x04	; 4
    1f5a:	bf 2e       	mov	r11, r31
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <vfprintf+0x272>
    1f5e:	34 fe       	sbrs	r3, 4
    1f60:	0a c0       	rjmp	.+20     	; 0x1f76 <vfprintf+0x278>
    1f62:	29 2f       	mov	r18, r25
    1f64:	26 60       	ori	r18, 0x06	; 6
    1f66:	b2 2e       	mov	r11, r18
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <vfprintf+0x278>
    1f6a:	28 e0       	ldi	r18, 0x08	; 8
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <vfprintf+0x27c>
    1f70:	20 e1       	ldi	r18, 0x10	; 16
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <vfprintf+0x27c>
    1f76:	20 e1       	ldi	r18, 0x10	; 16
    1f78:	32 e0       	ldi	r19, 0x02	; 2
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	b7 fe       	sbrs	r11, 7
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <vfprintf+0x290>
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0c 5f       	subi	r16, 0xFC	; 252
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <vfprintf+0x29c>
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 5f       	subi	r16, 0xFE	; 254
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	a3 01       	movw	r20, r6
    1f9c:	0e 94 b2 10 	call	0x2164	; 0x2164 <__ultoa_invert>
    1fa0:	88 2e       	mov	r8, r24
    1fa2:	86 18       	sub	r8, r6
    1fa4:	fb 2d       	mov	r31, r11
    1fa6:	ff 77       	andi	r31, 0x7F	; 127
    1fa8:	3f 2e       	mov	r3, r31
    1faa:	36 fe       	sbrs	r3, 6
    1fac:	0d c0       	rjmp	.+26     	; 0x1fc8 <vfprintf+0x2ca>
    1fae:	23 2d       	mov	r18, r3
    1fb0:	2e 7f       	andi	r18, 0xFE	; 254
    1fb2:	a2 2e       	mov	r10, r18
    1fb4:	89 14       	cp	r8, r9
    1fb6:	58 f4       	brcc	.+22     	; 0x1fce <vfprintf+0x2d0>
    1fb8:	34 fe       	sbrs	r3, 4
    1fba:	0b c0       	rjmp	.+22     	; 0x1fd2 <vfprintf+0x2d4>
    1fbc:	32 fc       	sbrc	r3, 2
    1fbe:	09 c0       	rjmp	.+18     	; 0x1fd2 <vfprintf+0x2d4>
    1fc0:	83 2d       	mov	r24, r3
    1fc2:	8e 7e       	andi	r24, 0xEE	; 238
    1fc4:	a8 2e       	mov	r10, r24
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <vfprintf+0x2d4>
    1fc8:	b8 2c       	mov	r11, r8
    1fca:	a3 2c       	mov	r10, r3
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x2d6>
    1fce:	b8 2c       	mov	r11, r8
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <vfprintf+0x2d6>
    1fd2:	b9 2c       	mov	r11, r9
    1fd4:	a4 fe       	sbrs	r10, 4
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <vfprintf+0x2f8>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e8 0d       	add	r30, r8
    1fdc:	f1 1d       	adc	r31, r1
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 33       	cpi	r24, 0x30	; 48
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <vfprintf+0x2ee>
    1fe4:	9a 2d       	mov	r25, r10
    1fe6:	99 7e       	andi	r25, 0xE9	; 233
    1fe8:	a9 2e       	mov	r10, r25
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <vfprintf+0x300>
    1fec:	a2 fe       	sbrs	r10, 2
    1fee:	06 c0       	rjmp	.+12     	; 0x1ffc <vfprintf+0x2fe>
    1ff0:	b3 94       	inc	r11
    1ff2:	b3 94       	inc	r11
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <vfprintf+0x300>
    1ff6:	8a 2d       	mov	r24, r10
    1ff8:	86 78       	andi	r24, 0x86	; 134
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <vfprintf+0x300>
    1ffc:	b3 94       	inc	r11
    1ffe:	a3 fc       	sbrc	r10, 3
    2000:	11 c0       	rjmp	.+34     	; 0x2024 <vfprintf+0x326>
    2002:	a0 fe       	sbrs	r10, 0
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <vfprintf+0x314>
    2006:	b2 14       	cp	r11, r2
    2008:	88 f4       	brcc	.+34     	; 0x202c <vfprintf+0x32e>
    200a:	28 0c       	add	r2, r8
    200c:	92 2c       	mov	r9, r2
    200e:	9b 18       	sub	r9, r11
    2010:	0e c0       	rjmp	.+28     	; 0x202e <vfprintf+0x330>
    2012:	b2 14       	cp	r11, r2
    2014:	60 f4       	brcc	.+24     	; 0x202e <vfprintf+0x330>
    2016:	b6 01       	movw	r22, r12
    2018:	80 e2       	ldi	r24, 0x20	; 32
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2020:	b3 94       	inc	r11
    2022:	f7 cf       	rjmp	.-18     	; 0x2012 <vfprintf+0x314>
    2024:	b2 14       	cp	r11, r2
    2026:	18 f4       	brcc	.+6      	; 0x202e <vfprintf+0x330>
    2028:	2b 18       	sub	r2, r11
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <vfprintf+0x332>
    202c:	98 2c       	mov	r9, r8
    202e:	21 2c       	mov	r2, r1
    2030:	a4 fe       	sbrs	r10, 4
    2032:	10 c0       	rjmp	.+32     	; 0x2054 <vfprintf+0x356>
    2034:	b6 01       	movw	r22, r12
    2036:	80 e3       	ldi	r24, 0x30	; 48
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    203e:	a2 fe       	sbrs	r10, 2
    2040:	17 c0       	rjmp	.+46     	; 0x2070 <vfprintf+0x372>
    2042:	a1 fc       	sbrc	r10, 1
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x34e>
    2046:	88 e7       	ldi	r24, 0x78	; 120
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0x352>
    204c:	88 e5       	ldi	r24, 0x58	; 88
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	b6 01       	movw	r22, r12
    2052:	0c c0       	rjmp	.+24     	; 0x206c <vfprintf+0x36e>
    2054:	8a 2d       	mov	r24, r10
    2056:	86 78       	andi	r24, 0x86	; 134
    2058:	59 f0       	breq	.+22     	; 0x2070 <vfprintf+0x372>
    205a:	a1 fe       	sbrs	r10, 1
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <vfprintf+0x364>
    205e:	8b e2       	ldi	r24, 0x2B	; 43
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x366>
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	a7 fc       	sbrc	r10, 7
    2066:	8d e2       	ldi	r24, 0x2D	; 45
    2068:	b6 01       	movw	r22, r12
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2070:	89 14       	cp	r8, r9
    2072:	38 f4       	brcc	.+14     	; 0x2082 <vfprintf+0x384>
    2074:	b6 01       	movw	r22, r12
    2076:	80 e3       	ldi	r24, 0x30	; 48
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    207e:	9a 94       	dec	r9
    2080:	f7 cf       	rjmp	.-18     	; 0x2070 <vfprintf+0x372>
    2082:	8a 94       	dec	r8
    2084:	f3 01       	movw	r30, r6
    2086:	e8 0d       	add	r30, r8
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	b6 01       	movw	r22, r12
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2094:	81 10       	cpse	r8, r1
    2096:	f5 cf       	rjmp	.-22     	; 0x2082 <vfprintf+0x384>
    2098:	22 20       	and	r2, r2
    209a:	09 f4       	brne	.+2      	; 0x209e <vfprintf+0x3a0>
    209c:	42 ce       	rjmp	.-892    	; 0x1d22 <vfprintf+0x24>
    209e:	b6 01       	movw	r22, r12
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    20a8:	2a 94       	dec	r2
    20aa:	f6 cf       	rjmp	.-20     	; 0x2098 <vfprintf+0x39a>
    20ac:	f6 01       	movw	r30, r12
    20ae:	86 81       	ldd	r24, Z+6	; 0x06
    20b0:	97 81       	ldd	r25, Z+7	; 0x07
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfprintf+0x3ba>
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	9f ef       	ldi	r25, 0xFF	; 255
    20b8:	2b 96       	adiw	r28, 0x0b	; 11
    20ba:	e2 e1       	ldi	r30, 0x12	; 18
    20bc:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__epilogue_restores__>

000020c0 <strnlen_P>:
    20c0:	fc 01       	movw	r30, r24
    20c2:	05 90       	lpm	r0, Z+
    20c4:	61 50       	subi	r22, 0x01	; 1
    20c6:	70 40       	sbci	r23, 0x00	; 0
    20c8:	01 10       	cpse	r0, r1
    20ca:	d8 f7       	brcc	.-10     	; 0x20c2 <strnlen_P+0x2>
    20cc:	80 95       	com	r24
    20ce:	90 95       	com	r25
    20d0:	8e 0f       	add	r24, r30
    20d2:	9f 1f       	adc	r25, r31
    20d4:	08 95       	ret

000020d6 <strnlen>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	61 50       	subi	r22, 0x01	; 1
    20da:	70 40       	sbci	r23, 0x00	; 0
    20dc:	01 90       	ld	r0, Z+
    20de:	01 10       	cpse	r0, r1
    20e0:	d8 f7       	brcc	.-10     	; 0x20d8 <strnlen+0x2>
    20e2:	80 95       	com	r24
    20e4:	90 95       	com	r25
    20e6:	8e 0f       	add	r24, r30
    20e8:	9f 1f       	adc	r25, r31
    20ea:	08 95       	ret

000020ec <fputc>:
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	fb 01       	movw	r30, r22
    20f6:	23 81       	ldd	r18, Z+3	; 0x03
    20f8:	21 fd       	sbrc	r18, 1
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <fputc+0x16>
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f ef       	ldi	r25, 0xFF	; 255
    2100:	2c c0       	rjmp	.+88     	; 0x215a <fputc+0x6e>
    2102:	22 ff       	sbrs	r18, 2
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <fputc+0x46>
    2106:	46 81       	ldd	r20, Z+6	; 0x06
    2108:	57 81       	ldd	r21, Z+7	; 0x07
    210a:	24 81       	ldd	r18, Z+4	; 0x04
    210c:	35 81       	ldd	r19, Z+5	; 0x05
    210e:	42 17       	cp	r20, r18
    2110:	53 07       	cpc	r21, r19
    2112:	44 f4       	brge	.+16     	; 0x2124 <fputc+0x38>
    2114:	a0 81       	ld	r26, Z
    2116:	b1 81       	ldd	r27, Z+1	; 0x01
    2118:	9d 01       	movw	r18, r26
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
    2122:	8c 93       	st	X, r24
    2124:	26 81       	ldd	r18, Z+6	; 0x06
    2126:	37 81       	ldd	r19, Z+7	; 0x07
    2128:	2f 5f       	subi	r18, 0xFF	; 255
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	37 83       	std	Z+7, r19	; 0x07
    212e:	26 83       	std	Z+6, r18	; 0x06
    2130:	14 c0       	rjmp	.+40     	; 0x215a <fputc+0x6e>
    2132:	8b 01       	movw	r16, r22
    2134:	ec 01       	movw	r28, r24
    2136:	fb 01       	movw	r30, r22
    2138:	00 84       	ldd	r0, Z+8	; 0x08
    213a:	f1 85       	ldd	r31, Z+9	; 0x09
    213c:	e0 2d       	mov	r30, r0
    213e:	09 95       	icall
    2140:	89 2b       	or	r24, r25
    2142:	e1 f6       	brne	.-72     	; 0x20fc <fputc+0x10>
    2144:	d8 01       	movw	r26, r16
    2146:	16 96       	adiw	r26, 0x06	; 6
    2148:	8d 91       	ld	r24, X+
    214a:	9c 91       	ld	r25, X
    214c:	17 97       	sbiw	r26, 0x07	; 7
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	17 96       	adiw	r26, 0x07	; 7
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	16 97       	sbiw	r26, 0x06	; 6
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <__ultoa_invert>:
    2164:	fa 01       	movw	r30, r20
    2166:	aa 27       	eor	r26, r26
    2168:	28 30       	cpi	r18, 0x08	; 8
    216a:	51 f1       	breq	.+84     	; 0x21c0 <__ultoa_invert+0x5c>
    216c:	20 31       	cpi	r18, 0x10	; 16
    216e:	81 f1       	breq	.+96     	; 0x21d0 <__ultoa_invert+0x6c>
    2170:	e8 94       	clt
    2172:	6f 93       	push	r22
    2174:	6e 7f       	andi	r22, 0xFE	; 254
    2176:	6e 5f       	subi	r22, 0xFE	; 254
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	8f 4f       	sbci	r24, 0xFF	; 255
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	af 4f       	sbci	r26, 0xFF	; 255
    2180:	b1 e0       	ldi	r27, 0x01	; 1
    2182:	3e d0       	rcall	.+124    	; 0x2200 <__ultoa_invert+0x9c>
    2184:	b4 e0       	ldi	r27, 0x04	; 4
    2186:	3c d0       	rcall	.+120    	; 0x2200 <__ultoa_invert+0x9c>
    2188:	67 0f       	add	r22, r23
    218a:	78 1f       	adc	r23, r24
    218c:	89 1f       	adc	r24, r25
    218e:	9a 1f       	adc	r25, r26
    2190:	a1 1d       	adc	r26, r1
    2192:	68 0f       	add	r22, r24
    2194:	79 1f       	adc	r23, r25
    2196:	8a 1f       	adc	r24, r26
    2198:	91 1d       	adc	r25, r1
    219a:	a1 1d       	adc	r26, r1
    219c:	6a 0f       	add	r22, r26
    219e:	71 1d       	adc	r23, r1
    21a0:	81 1d       	adc	r24, r1
    21a2:	91 1d       	adc	r25, r1
    21a4:	a1 1d       	adc	r26, r1
    21a6:	20 d0       	rcall	.+64     	; 0x21e8 <__ultoa_invert+0x84>
    21a8:	09 f4       	brne	.+2      	; 0x21ac <__ultoa_invert+0x48>
    21aa:	68 94       	set
    21ac:	3f 91       	pop	r19
    21ae:	2a e0       	ldi	r18, 0x0A	; 10
    21b0:	26 9f       	mul	r18, r22
    21b2:	11 24       	eor	r1, r1
    21b4:	30 19       	sub	r19, r0
    21b6:	30 5d       	subi	r19, 0xD0	; 208
    21b8:	31 93       	st	Z+, r19
    21ba:	de f6       	brtc	.-74     	; 0x2172 <__ultoa_invert+0xe>
    21bc:	cf 01       	movw	r24, r30
    21be:	08 95       	ret
    21c0:	46 2f       	mov	r20, r22
    21c2:	47 70       	andi	r20, 0x07	; 7
    21c4:	40 5d       	subi	r20, 0xD0	; 208
    21c6:	41 93       	st	Z+, r20
    21c8:	b3 e0       	ldi	r27, 0x03	; 3
    21ca:	0f d0       	rcall	.+30     	; 0x21ea <__ultoa_invert+0x86>
    21cc:	c9 f7       	brne	.-14     	; 0x21c0 <__ultoa_invert+0x5c>
    21ce:	f6 cf       	rjmp	.-20     	; 0x21bc <__ultoa_invert+0x58>
    21d0:	46 2f       	mov	r20, r22
    21d2:	4f 70       	andi	r20, 0x0F	; 15
    21d4:	40 5d       	subi	r20, 0xD0	; 208
    21d6:	4a 33       	cpi	r20, 0x3A	; 58
    21d8:	18 f0       	brcs	.+6      	; 0x21e0 <__ultoa_invert+0x7c>
    21da:	49 5d       	subi	r20, 0xD9	; 217
    21dc:	31 fd       	sbrc	r19, 1
    21de:	40 52       	subi	r20, 0x20	; 32
    21e0:	41 93       	st	Z+, r20
    21e2:	02 d0       	rcall	.+4      	; 0x21e8 <__ultoa_invert+0x84>
    21e4:	a9 f7       	brne	.-22     	; 0x21d0 <__ultoa_invert+0x6c>
    21e6:	ea cf       	rjmp	.-44     	; 0x21bc <__ultoa_invert+0x58>
    21e8:	b4 e0       	ldi	r27, 0x04	; 4
    21ea:	a6 95       	lsr	r26
    21ec:	97 95       	ror	r25
    21ee:	87 95       	ror	r24
    21f0:	77 95       	ror	r23
    21f2:	67 95       	ror	r22
    21f4:	ba 95       	dec	r27
    21f6:	c9 f7       	brne	.-14     	; 0x21ea <__ultoa_invert+0x86>
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	61 05       	cpc	r22, r1
    21fc:	71 05       	cpc	r23, r1
    21fe:	08 95       	ret
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	0a 2e       	mov	r0, r26
    2206:	06 94       	lsr	r0
    2208:	57 95       	ror	r21
    220a:	47 95       	ror	r20
    220c:	37 95       	ror	r19
    220e:	27 95       	ror	r18
    2210:	ba 95       	dec	r27
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__ultoa_invert+0xa2>
    2214:	62 0f       	add	r22, r18
    2216:	73 1f       	adc	r23, r19
    2218:	84 1f       	adc	r24, r20
    221a:	95 1f       	adc	r25, r21
    221c:	a0 1d       	adc	r26, r0
    221e:	08 95       	ret

00002220 <__prologue_saves__>:
    2220:	2f 92       	push	r2
    2222:	3f 92       	push	r3
    2224:	4f 92       	push	r4
    2226:	5f 92       	push	r5
    2228:	6f 92       	push	r6
    222a:	7f 92       	push	r7
    222c:	8f 92       	push	r8
    222e:	9f 92       	push	r9
    2230:	af 92       	push	r10
    2232:	bf 92       	push	r11
    2234:	cf 92       	push	r12
    2236:	df 92       	push	r13
    2238:	ef 92       	push	r14
    223a:	ff 92       	push	r15
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	ca 1b       	sub	r28, r26
    224a:	db 0b       	sbc	r29, r27
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	09 94       	ijmp

00002258 <__epilogue_restores__>:
    2258:	2a 88       	ldd	r2, Y+18	; 0x12
    225a:	39 88       	ldd	r3, Y+17	; 0x11
    225c:	48 88       	ldd	r4, Y+16	; 0x10
    225e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2260:	6e 84       	ldd	r6, Y+14	; 0x0e
    2262:	7d 84       	ldd	r7, Y+13	; 0x0d
    2264:	8c 84       	ldd	r8, Y+12	; 0x0c
    2266:	9b 84       	ldd	r9, Y+11	; 0x0b
    2268:	aa 84       	ldd	r10, Y+10	; 0x0a
    226a:	b9 84       	ldd	r11, Y+9	; 0x09
    226c:	c8 84       	ldd	r12, Y+8	; 0x08
    226e:	df 80       	ldd	r13, Y+7	; 0x07
    2270:	ee 80       	ldd	r14, Y+6	; 0x06
    2272:	fd 80       	ldd	r15, Y+5	; 0x05
    2274:	0c 81       	ldd	r16, Y+4	; 0x04
    2276:	1b 81       	ldd	r17, Y+3	; 0x03
    2278:	aa 81       	ldd	r26, Y+2	; 0x02
    227a:	b9 81       	ldd	r27, Y+1	; 0x01
    227c:	ce 0f       	add	r28, r30
    227e:	d1 1d       	adc	r29, r1
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	ed 01       	movw	r28, r26
    228c:	08 95       	ret

0000228e <_exit>:
    228e:	f8 94       	cli

00002290 <__stop_program>:
    2290:	ff cf       	rjmp	.-2      	; 0x2290 <__stop_program>
