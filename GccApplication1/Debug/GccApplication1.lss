
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ce  00800100  00001494  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  008004ce  008004ce  000018f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bdb  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001028  00000000  00000000  0000475f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d2  00000000  00000000  00005787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00006c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000baa  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eee  00000000  00000000  00007d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3c       	cpi	r26, 0xCE	; 206
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	ae ec       	ldi	r26, 0xCE	; 206
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 32       	cpi	r26, 0x27	; 39
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
      9e:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <ultraSensor>
     100:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <ultraSensor+0x1>
     104:	a0 93 0f 05 	sts	0x050F, r26	; 0x80050f <ultraSensor+0x2>
     108:	b0 93 10 05 	sts	0x0510, r27	; 0x800510 <ultraSensor+0x3>
     10c:	e9 e1       	ldi	r30, 0x19	; 25
     10e:	f5 e0       	ldi	r31, 0x05	; 5
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <ultraSensor+0x4>
     13c:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <ultraSensor+0x5>
     140:	a0 93 13 05 	sts	0x0513, r26	; 0x800513 <ultraSensor+0x6>
     144:	b0 93 14 05 	sts	0x0514, r27	; 0x800514 <ultraSensor+0x7>
     148:	e9 e1       	ldi	r30, 0x19	; 25
     14a:	f5 e0       	ldi	r31, 0x05	; 5
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	e8 e8       	ldi	r30, 0x88	; 136
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	93 46       	sbci	r25, 0x63	; 99
     1b4:	91 83       	std	Z+1, r25	; 0x01
     1b6:	80 83       	st	Z, r24
     1b8:	85 b1       	in	r24, 0x05	; 5
     1ba:	82 60       	ori	r24, 0x02	; 2
     1bc:	85 b9       	out	0x05, r24	; 5
     1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
     1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
     1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
     1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
     1d6:	82 0f       	add	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     1e2:	ff 91       	pop	r31
     1e4:	ef 91       	pop	r30
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_12>:
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8d 7f       	andi	r24, 0xFD	; 253
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <timer1_init>:
     21a:	a4 e8       	ldi	r26, 0x84	; 132
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	1c 92       	st	X, r1
     222:	1e 92       	st	-X, r1
     224:	86 b3       	in	r24, 0x16	; 22
     226:	80 62       	ori	r24, 0x20	; 32
     228:	86 bb       	out	0x16, r24	; 22
     22a:	ef e6       	ldi	r30, 0x6F	; 111
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	87 62       	ori	r24, 0x27	; 39
     232:	80 83       	st	Z, r24
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 64       	ori	r24, 0x40	; 64
     23c:	80 83       	st	Z, r24
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	80 5c       	subi	r24, 0xC0	; 192
     24a:	93 46       	sbci	r25, 0x63	; 99
     24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     254:	08 95       	ret

00000256 <timer2_init>:
     256:	e1 eb       	ldi	r30, 0xB1	; 177
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	87 60       	ori	r24, 0x07	; 7
     25e:	80 83       	st	Z, r24
     260:	8b e9       	ldi	r24, 0x9B	; 155
     262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     266:	e0 e7       	ldi	r30, 0x70	; 112
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 83       	st	Z, r24
     270:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     274:	08 95       	ret

00000276 <gpio_pins_init>:
     276:	84 b1       	in	r24, 0x04	; 4
     278:	80 62       	ori	r24, 0x20	; 32
     27a:	84 b9       	out	0x04, r24	; 4
     27c:	85 b1       	in	r24, 0x05	; 5
     27e:	80 62       	ori	r24, 0x20	; 32
     280:	85 b9       	out	0x05, r24	; 5
     282:	8a b1       	in	r24, 0x0a	; 10
     284:	88 60       	ori	r24, 0x08	; 8
     286:	8a b9       	out	0x0a, r24	; 10
     288:	84 b1       	in	r24, 0x04	; 4
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	84 b9       	out	0x04, r24	; 4
     28e:	8a b1       	in	r24, 0x0a	; 10
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	8a b9       	out	0x0a, r24	; 10
     294:	84 b1       	in	r24, 0x04	; 4
     296:	82 60       	ori	r24, 0x02	; 2
     298:	84 b9       	out	0x04, r24	; 4
     29a:	84 b1       	in	r24, 0x04	; 4
     29c:	84 60       	ori	r24, 0x04	; 4
     29e:	84 b9       	out	0x04, r24	; 4
     2a0:	84 b1       	in	r24, 0x04	; 4
     2a2:	88 60       	ori	r24, 0x08	; 8
     2a4:	84 b9       	out	0x04, r24	; 4
     2a6:	0e 94 2a 05 	call	0xa54	; 0xa54 <tcrt_init>
     2aa:	8b b1       	in	r24, 0x0b	; 11
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8b b9       	out	0x0b, r24	; 11
     2b0:	8b b1       	in	r24, 0x0b	; 11
     2b2:	8f 7e       	andi	r24, 0xEF	; 239
     2b4:	8b b9       	out	0x0b, r24	; 11
     2b6:	08 95       	ret

000002b8 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	2f 93       	push	r18
     2c4:	3f 93       	push	r19
     2c6:	4f 93       	push	r20
     2c8:	5f 93       	push	r21
     2ca:	6f 93       	push	r22
     2cc:	7f 93       	push	r23
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	af 93       	push	r26
     2d4:	bf 93       	push	r27
     2d6:	ef 93       	push	r30
     2d8:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     2da:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     2de:	81 ff       	sbrs	r24, 1
     2e0:	ad c0       	rjmp	.+346    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     2e2:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <ultraSensor+0xd>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	51 f5       	brne	.+84     	; 0x33e <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     2ea:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     2ee:	85 fd       	sbrc	r24, 5
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     2f2:	0e 94 7f 05 	call	0xafe	; 0xafe <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     2f6:	e9 e1       	ldi	r30, 0x19	; 25
     2f8:	f5 e0       	ldi	r31, 0x05	; 5
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     300:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     304:	80 62       	ori	r24, 0x20	; 32
     306:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
     30a:	19 c0       	rjmp	.+50     	; 0x33e <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     30c:	0e 94 83 05 	call	0xb06	; 0xb06 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     310:	e9 e1       	ldi	r30, 0x19	; 25
     312:	f5 e0       	ldi	r31, 0x05	; 5
     314:	80 81       	ld	r24, Z
     316:	82 60       	ori	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     31a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     31e:	8d 7d       	andi	r24, 0xDD	; 221
     320:	88 60       	ori	r24, 0x08	; 8
     322:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     326:	80 81       	ld	r24, Z
     328:	8f 7d       	andi	r24, 0xDF	; 223
     32a:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     332:	80 81       	ld	r24, Z
     334:	80 61       	ori	r24, 0x10	; 16
     336:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     338:	80 81       	ld	r24, Z
     33a:	8d 7f       	andi	r24, 0xFD	; 253
     33c:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     33e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <ultraSensor+0xd>
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	d1 f4       	brne	.+52     	; 0x37a <__vector_7+0xc2>
     346:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <ultraSensor+0xc>
     34a:	84 ff       	sbrs	r24, 4
     34c:	16 c0       	rjmp	.+44     	; 0x37a <__vector_7+0xc2>
     34e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     352:	89 70       	andi	r24, 0x09	; 9
     354:	88 30       	cpi	r24, 0x08	; 8
     356:	89 f4       	brne	.+34     	; 0x37a <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     358:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__data_end>
     35c:	81 11       	cpse	r24, r1
     35e:	06 c0       	rjmp	.+12     	; 0x36c <__vector_7+0xb4>
				veintems_counter++;
     360:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__data_end>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <__data_end>
     36a:	07 c0       	rjmp	.+14     	; 0x37a <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     36c:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     370:	81 60       	ori	r24, 0x01	; 1
     372:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
				veintems_counter = 0;
     376:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <__data_end>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     37a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <ultraSensor+0xc>
     37e:	85 fd       	sbrc	r24, 5
     380:	22 c0       	rjmp	.+68     	; 0x3c6 <__vector_7+0x10e>
     382:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     386:	84 fd       	sbrc	r24, 4
     388:	1e c0       	rjmp	.+60     	; 0x3c6 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     38a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <wait_time>
     38e:	87 30       	cpi	r24, 0x07	; 7
     390:	30 f4       	brcc	.+12     	; 0x39e <__vector_7+0xe6>
				wait_time++;
     392:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <wait_time>
     396:	8f 5f       	subi	r24, 0xFF	; 255
     398:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <wait_time>
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     39e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     3a2:	80 61       	ori	r24, 0x10	; 16
     3a4:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
				wait_time = 0;
     3a8:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     3ac:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <ultraSensor+0xc>
     3b0:	83 ff       	sbrs	r24, 3
     3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     3b4:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <bandera2>
     3b8:	66 fb       	bst	r22, 6
     3ba:	66 27       	eor	r22, r22
     3bc:	60 f9       	bld	r22, 0
     3be:	8d e0       	ldi	r24, 0x0D	; 13
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     3c6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <diezMsCounter>
     3ca:	8a 30       	cpi	r24, 0x0A	; 10
     3cc:	30 f4       	brcc	.+12     	; 0x3da <__vector_7+0x122>
			diezMsCounter++;
     3ce:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <diezMsCounter>
     3d2:	8f 5f       	subi	r24, 0xFF	; 255
     3d4:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <diezMsCounter>
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     3da:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			diezMsCounter = 0;
     3e4:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     3e8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     3ec:	86 ff       	sbrs	r24, 6
     3ee:	0e c0       	rjmp	.+28     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			if(btn_pressed_time == 255){
     3f0:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <btn_pressed_time>
     3f4:	8f 3f       	cpi	r24, 0xFF	; 255
     3f6:	29 f4       	brne	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				BTN_OVF = 1;
     3f8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			}
			btn_pressed_time++;
     402:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <btn_pressed_time>
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <btn_pressed_time>
		}
		if(SERVOA_RESET){
     40c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     410:	85 ff       	sbrs	r24, 5
     412:	14 c0       	rjmp	.+40     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			if(servo_counter < SERVO_RESET_TIME){
     414:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <servo_counter>
     418:	8e 31       	cpi	r24, 0x1E	; 30
     41a:	30 f4       	brcc	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				servo_counter++;
     41c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <servo_counter>
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <servo_counter>
     426:	0a c0       	rjmp	.+20     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				} else {
				servo_counter = 0;
     428:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <servo_counter>
				SERVOA_RESET = 0;
     42c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     430:	8f 7d       	andi	r24, 0xDF	; 223
     432:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
				servoA_set_angle(90);
     436:	8a e5       	ldi	r24, 0x5A	; 90
     438:	0e 94 0c 05 	call	0xa18	; 0xa18 <servoA_set_angle>
			}
		}
	}
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <main>:
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     45e:	82 e8       	ldi	r24, 0x82	; 130
     460:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     46a:	88 e0       	ldi	r24, 0x08	; 8
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 93 05 	call	0xb26	; 0xb26 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     472:	e1 e2       	ldi	r30, 0x21	; 33
     474:	f5 e0       	ldi	r31, 0x05	; 5
     476:	8e e0       	ldi	r24, 0x0E	; 14
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	93 83       	std	Z+3, r25	; 0x03
     47c:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	80 83       	st	Z, r24
	diezMsCounter = 0;
     486:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     48a:	0e 94 3b 01 	call	0x276	; 0x276 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     48e:	0e 94 0d 01 	call	0x21a	; 0x21a <timer1_init>
	timer2_init();
     492:	0e 94 2b 01 	call	0x256	; 0x256 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     496:	0e 94 37 05 	call	0xa6e	; 0xa6e <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     49a:	63 e5       	ldi	r22, 0x53	; 83
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	8d e0       	ldi	r24, 0x0D	; 13
     4a0:	95 e0       	ldi	r25, 0x05	; 5
     4a2:	0e 94 3b 06 	call	0xc76	; 0xc76 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     4a6:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <bandera2>
     4aa:	66 fb       	bst	r22, 6
     4ac:	66 27       	eor	r22, r22
     4ae:	60 f9       	bld	r22, 0
     4b0:	8d e0       	ldi	r24, 0x0D	; 13
     4b2:	95 e0       	ldi	r25, 0x05	; 5
     4b4:	0e 94 be 05 	call	0xb7c	; 0xb7c <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     4b8:	4c ed       	ldi	r20, 0xDC	; 220
     4ba:	54 e0       	ldi	r21, 0x04	; 4
     4bc:	6d e0       	ldi	r22, 0x0D	; 13
     4be:	75 e0       	ldi	r23, 0x05	; 5
     4c0:	85 e0       	ldi	r24, 0x05	; 5
     4c2:	95 e0       	ldi	r25, 0x05	; 5
     4c4:	0e 94 de 02 	call	0x5bc	; 0x5bc <initDetector>
	initOutputs();
     4c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <initOutputs>
	initSorter(&SorterSystem);
     4cc:	87 ee       	ldi	r24, 0xE7	; 231
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 15 03 	call	0x62a	; 0x62a <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     4d4:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     4d8:	82 60       	ori	r24, 0x02	; 2
     4da:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     4de:	81 eb       	ldi	r24, 0xB1	; 177
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
	sei();
     4e6:	78 94       	sei
	while (1)
	{ 
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     4e8:	67 ee       	ldi	r22, 0xE7	; 231
     4ea:	74 e0       	ldi	r23, 0x04	; 4
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	95 e0       	ldi	r25, 0x05	; 5
     4f0:	0e 94 c5 03 	call	0x78a	; 0x78a <ultraSensorTask>
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     4f4:	4c 9b       	sbis	0x09, 4	; 9
     4f6:	0a c0       	rjmp	.+20     	; 0x50c <main+0xae>
     4f8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     4fc:	86 fd       	sbrc	r24, 6
     4fe:	06 c0       	rjmp	.+12     	; 0x50c <main+0xae>
			btn_pressed_time = 0;
     500:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <btn_pressed_time>
			BTN_PRESSED = 1;
     504:	80 64       	ori	r24, 0x40	; 64
     506:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
     50a:	28 c0       	rjmp	.+80     	; 0x55c <main+0xfe>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     50c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     510:	86 ff       	sbrs	r24, 6
     512:	24 c0       	rjmp	.+72     	; 0x55c <main+0xfe>
     514:	4c 99       	sbic	0x09, 4	; 9
     516:	22 c0       	rjmp	.+68     	; 0x55c <main+0xfe>
			BTN_PRESSED = 0;
     518:	8f 7b       	andi	r24, 0xBF	; 191
     51a:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     51e:	82 ff       	sbrs	r24, 2
     520:	04 c0       	rjmp	.+8      	; 0x52a <main+0xcc>
				printf("Btn overflowed\n");
     522:	86 e2       	ldi	r24, 0x26	; 38
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     52a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <btn_pressed_time>
     52e:	8a 30       	cpi	r24, 0x0A	; 10
     530:	30 f4       	brcc	.+12     	; 0x53e <main+0xe0>
     532:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     536:	98 2f       	mov	r25, r24
     538:	94 70       	andi	r25, 0x04	; 4
     53a:	82 ff       	sbrs	r24, 2
     53c:	06 c0       	rjmp	.+12     	; 0x54a <main+0xec>
				BTN_RELEASED = 1;
     53e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     542:	81 60       	ori	r24, 0x01	; 1
     544:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
     548:	09 c0       	rjmp	.+18     	; 0x55c <main+0xfe>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     54a:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <btn_pressed_time>
				if(BTN_OVF){
     54e:	99 23       	and	r25, r25
     550:	29 f0       	breq	.+10     	; 0x55c <main+0xfe>
					BTN_OVF = 0;
     552:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     556:	8b 7f       	andi	r24, 0xFB	; 251
     558:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     55c:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     560:	84 ff       	sbrs	r24, 4
     562:	08 c0       	rjmp	.+16     	; 0x574 <main+0x116>
			WAIT_TIME_TRIGGER_PASSED = 0;
     564:	8f 7e       	andi	r24, 0xEF	; 239
     566:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     56a:	e9 e1       	ldi	r30, 0x19	; 25
     56c:	f5 e0       	ldi	r31, 0x05	; 5
     56e:	80 81       	ld	r24, Z
     570:	80 62       	ori	r24, 0x20	; 32
     572:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     574:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     578:	83 ff       	sbrs	r24, 3
     57a:	08 c0       	rjmp	.+16     	; 0x58c <main+0x12e>
			ECHO_INTERVAL_FLAG = 0;
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			EMIT_TRIGGER = 1;
     582:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     586:	82 60       	ori	r24, 0x02	; 2
     588:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
		}
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     58c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     590:	80 ff       	sbrs	r24, 0
     592:	04 c0       	rjmp	.+8      	; 0x59c <main+0x13e>
			BTN_RELEASED = 0; //TEST SERVO A
			//EMIT_TRIGGER = 1;
			SERVOA_MOVE = 1;
     594:	8e 7f       	andi	r24, 0xFE	; 254
     596:	80 61       	ori	r24, 0x10	; 16
     598:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
		}
		if(SERVOA_MOVE){ //Accionamiento del SERVO A
     59c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     5a0:	84 ff       	sbrs	r24, 4
     5a2:	a2 cf       	rjmp	.-188    	; 0x4e8 <main+0x8a>
			SERVOA_MOVE = 0;
     5a4:	8f 7e       	andi	r24, 0xEF	; 239
     5a6:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			servoA_set_angle(0);
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0e 94 0c 05 	call	0xa18	; 0xa18 <servoA_set_angle>
			SERVOA_RESET = 1;
     5b0:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     5b4:	80 62       	ori	r24, 0x20	; 32
     5b6:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
     5ba:	96 cf       	rjmp	.-212    	; 0x4e8 <main+0x8a>

000005bc <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <initDetector+0x6>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	fc 01       	movw	r30, r24
     5c8:	5a 83       	std	Y+2, r21	; 0x02
     5ca:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     5cc:	8d e0       	ldi	r24, 0x0D	; 13
     5ce:	95 e0       	ldi	r25, 0x05	; 5
     5d0:	91 83       	std	Z+1, r25	; 0x01
     5d2:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     5d4:	ce 01       	movw	r24, r28
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	93 83       	std	Z+3, r25	; 0x03
     5da:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     5dc:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     5de:	85 e3       	ldi	r24, 0x35	; 53
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <initOutputs>:

void initOutputs(){
	salidaA.actuator_pin = SERVOA_PIN;
     5f0:	e9 ed       	ldi	r30, 0xD9	; 217
     5f2:	f4 e0       	ldi	r31, 0x04	; 4
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	81 83       	std	Z+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     5f8:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <IR_A+0x4>
     5fc:	80 83       	st	Z, r24
	salidaA.flags.byte = 0;
     5fe:	12 82       	std	Z+2, r1	; 0x02
	salidaB.actuator_pin = SERVOB_PIN;
     600:	ee e1       	ldi	r30, 0x1E	; 30
     602:	f5 e0       	ldi	r31, 0x05	; 5
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	81 83       	std	Z+1, r24	; 0x01
	salidaB.sensor_pin = IR_B.pin;
     608:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <IR_B+0x4>
     60c:	80 83       	st	Z, r24
	salidaB.flags.byte = 0;
     60e:	12 82       	std	Z+2, r1	; 0x02
	salidaC.actuator_pin = SERVOC_PIN;
     610:	ea e0       	ldi	r30, 0x0A	; 10
     612:	f5 e0       	ldi	r31, 0x05	; 5
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     618:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <IR_C+0x4>
     61c:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
     61e:	12 82       	std	Z+2, r1	; 0x02
	printf("Init outputs\n");
     620:	86 e5       	ldi	r24, 0x56	; 86
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     628:	08 95       	ret

0000062a <initSorter>:
}

void initSorter(sorter_system_t* SystemSorter){
     62a:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     62c:	80 e2       	ldi	r24, 0x20	; 32
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     634:	89 ed       	ldi	r24, 0xD9	; 217
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	93 83       	std	Z+3, r25	; 0x03
     63a:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     63c:	8e e1       	ldi	r24, 0x1E	; 30
     63e:	95 e0       	ldi	r25, 0x05	; 5
     640:	95 83       	std	Z+5, r25	; 0x05
     642:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	95 e0       	ldi	r25, 0x05	; 5
     648:	97 83       	std	Z+7, r25	; 0x07
     64a:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     64c:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     650:	88 23       	and	r24, r24
     652:	44 f4       	brge	.+16     	; 0x664 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     654:	83 e6       	ldi	r24, 0x63	; 99
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     65c:	85 e9       	ldi	r24, 0x95	; 149
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     664:	08 95       	ret

00000666 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     666:	8e 3b       	cpi	r24, 0xBE	; 190
     668:	98 f0       	brcs	.+38     	; 0x690 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     66a:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <bandera2>
     66e:	99 23       	and	r25, r25
     670:	0c f0       	brlt	.+2      	; 0x674 <classify_box+0xe>
     672:	83 c0       	rjmp	.+262    	; 0x77a <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     674:	1f 92       	push	r1
     676:	8f 93       	push	r24
     678:	8a eb       	ldi	r24, 0xBA	; 186
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
		}
		return NO_BOX;
     68c:	84 e0       	ldi	r24, 0x04	; 4
     68e:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     690:	9e eb       	ldi	r25, 0xBE	; 190
     692:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     694:	97 33       	cpi	r25, 0x37	; 55
     696:	98 f4       	brcc	.+38     	; 0x6be <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     698:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     69c:	80 78       	andi	r24, 0x80	; 128
     69e:	09 f4       	brne	.+2      	; 0x6a2 <classify_box+0x3c>
     6a0:	73 c0       	rjmp	.+230    	; 0x788 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     6a2:	1f 92       	push	r1
     6a4:	9f 93       	push	r25
     6a6:	8a ee       	ldi	r24, 0xEA	; 234
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     6be:	db 01       	movw	r26, r22
     6c0:	ed 91       	ld	r30, X+
     6c2:	fc 91       	ld	r31, X
     6c4:	80 81       	ld	r24, Z
     6c6:	98 17       	cp	r25, r24
     6c8:	b0 f0       	brcs	.+44     	; 0x6f6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     6cc:	89 17       	cp	r24, r25
     6ce:	98 f0       	brcs	.+38     	; 0x6f6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     6d0:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     6d4:	88 23       	and	r24, r24
     6d6:	0c f0       	brlt	.+2      	; 0x6da <classify_box+0x74>
     6d8:	52 c0       	rjmp	.+164    	; 0x77e <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     6da:	1f 92       	push	r1
     6dc:	9f 93       	push	r25
     6de:	83 e1       	ldi	r24, 0x13	; 19
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	98 17       	cp	r25, r24
     6fa:	a8 f0       	brcs	.+42     	; 0x726 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     6fc:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     6fe:	89 17       	cp	r24, r25
     700:	90 f0       	brcs	.+36     	; 0x726 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     702:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     706:	88 23       	and	r24, r24
     708:	e4 f5       	brge	.+120    	; 0x782 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     70a:	1f 92       	push	r1
     70c:	9f 93       	push	r25
     70e:	88 e2       	ldi	r24, 0x28	; 40
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     726:	84 81       	ldd	r24, Z+4	; 0x04
     728:	98 17       	cp	r25, r24
     72a:	a8 f0       	brcs	.+42     	; 0x756 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     72c:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     72e:	89 17       	cp	r24, r25
     730:	90 f0       	brcs	.+36     	; 0x756 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     732:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     736:	88 23       	and	r24, r24
     738:	34 f5       	brge	.+76     	; 0x786 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     73a:	1f 92       	push	r1
     73c:	9f 93       	push	r25
     73e:	8d e3       	ldi	r24, 0x3D	; 61
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     756:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     75a:	80 78       	andi	r24, 0x80	; 128
     75c:	a9 f0       	breq	.+42     	; 0x788 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     75e:	1f 92       	push	r1
     760:	9f 93       	push	r25
     762:	82 e5       	ldi	r24, 0x52	; 82
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     786:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     788:	08 95       	ret

0000078a <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
     796:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     798:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     79c:	88 23       	and	r24, r24
     79e:	a4 f5       	brge	.+104    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7a0:	e8 81       	ld	r30, Y
     7a2:	f9 81       	ldd	r31, Y+1	; 0x01
     7a4:	84 85       	ldd	r24, Z+12	; 0x0c
     7a6:	85 ff       	sbrs	r24, 5
     7a8:	2f c0       	rjmp	.+94     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7aa:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     7ae:	81 ff       	sbrs	r24, 1
     7b0:	2b c0       	rjmp	.+86     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     7b2:	cf 01       	movw	r24, r30
     7b4:	0e 94 77 06 	call	0xcee	; 0xcee <ultrasonic_start>
     7b8:	88 23       	and	r24, r24
     7ba:	c1 f0       	breq	.+48     	; 0x7ec <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     7bc:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     7c0:	86 ff       	sbrs	r24, 6
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     7c4:	80 e8       	ldi	r24, 0x80	; 128
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     7cc:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     7d0:	8f 77       	andi	r24, 0x7F	; 127
     7d2:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     7d6:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     7e0:	e8 81       	ld	r30, Y
     7e2:	f9 81       	ldd	r31, Y+1	; 0x01
     7e4:	84 85       	ldd	r24, Z+12	; 0x0c
     7e6:	8f 7d       	andi	r24, 0xDF	; 223
     7e8:	84 87       	std	Z+12, r24	; 0x0c
     7ea:	0e c0       	rjmp	.+28     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		}
		else
		{
			if (DEBUG_FLAGS)
     7ec:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     7f0:	86 ff       	sbrs	r24, 6
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     7f4:	8b e7       	ldi	r24, 0x7B	; 123
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
			}
			EMIT_FAILED = 1;
     7fc:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
			EMIT_TRIGGER = 0;
     800:	84 60       	ori	r24, 0x04	; 4
     802:	8d 7f       	andi	r24, 0xFD	; 253
     804:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     808:	88 81       	ld	r24, Y
     80a:	99 81       	ldd	r25, Y+1	; 0x01
     80c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	85 85       	ldd	r24, Z+13	; 0x0d
     816:	85 30       	cpi	r24, 0x05	; 5
     818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	c7 c0       	rjmp	.+398    	; 0x9aa <__stack+0xab>
     81c:	84 85       	ldd	r24, Z+12	; 0x0c
     81e:	88 23       	and	r24, r24
     820:	0c f0       	brlt	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	c3 c0       	rjmp	.+390    	; 0x9aa <__stack+0xab>
	{
		printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
     824:	cf 01       	movw	r24, r30
     826:	0e 94 06 06 	call	0xc0c	; 0xc0c <ultrasonic_get_distance>
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	7f 93       	push	r23
     830:	6f 93       	push	r22
     832:	8b e8       	ldi	r24, 0x8B	; 139
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
		ultraDetector->sensor->NEW_RESULT = 0;
     83e:	e8 81       	ld	r30, Y
     840:	f9 81       	ldd	r31, Y+1	; 0x01
     842:	84 85       	ldd	r24, Z+12	; 0x0c
     844:	8f 77       	andi	r24, 0x7F	; 127
     846:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     848:	e8 81       	ld	r30, Y
     84a:	f9 81       	ldd	r31, Y+1	; 0x01
     84c:	80 85       	ldd	r24, Z+8	; 0x08
     84e:	91 85       	ldd	r25, Z+9	; 0x09
     850:	a2 85       	ldd	r26, Z+10	; 0x0a
     852:	b3 85       	ldd	r27, Z+11	; 0x0b
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	8f 3b       	cpi	r24, 0xBF	; 191
     862:	91 05       	cpc	r25, r1
     864:	a1 05       	cpc	r26, r1
     866:	b1 05       	cpc	r27, r1
     868:	b0 f0       	brcs	.+44     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	81 60       	ori	r24, 0x01	; 1
     86e:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     870:	98 2f       	mov	r25, r24
     872:	92 95       	swap	r25
     874:	9f 70       	andi	r25, 0x0F	; 15
     876:	92 30       	cpi	r25, 0x02	; 2
     878:	51 f4       	brne	.+20     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     87e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     882:	88 23       	and	r24, r24
     884:	24 f4       	brge	.+8      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					printf("Sensor liberado de nuevo\n");
     886:	80 ea       	ldi	r24, 0xA0	; 160
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     88e:	8c 81       	ldd	r24, Y+4	; 0x04
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	8c 83       	std	Y+4, r24	; 0x04
     894:	7e c0       	rjmp	.+252    	; 0x992 <__stack+0x93>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	98 2f       	mov	r25, r24
     89a:	92 95       	swap	r25
     89c:	9f 70       	andi	r25, 0x0F	; 15
     89e:	09 f0       	breq	.+2      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     8a0:	78 c0       	rjmp	.+240    	; 0x992 <__stack+0x93>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	80 61       	ori	r24, 0x10	; 16
     8a6:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     8a8:	80 85       	ldd	r24, Z+8	; 0x08
     8aa:	91 85       	ldd	r25, Z+9	; 0x09
     8ac:	a2 85       	ldd	r26, Z+10	; 0x0a
     8ae:	b3 85       	ldd	r27, Z+11	; 0x0b
     8b0:	b8 01       	movw	r22, r16
     8b2:	0e 94 33 03 	call	0x666	; 0x666 <classify_box>
     8b6:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	f8 16       	cp	r15, r24
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
     8be:	65 c0       	rjmp	.+202    	; 0x98a <__stack+0x8b>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     8c0:	e8 81       	ld	r30, Y
     8c2:	f9 81       	ldd	r31, Y+1	; 0x01
     8c4:	80 85       	ldd	r24, Z+8	; 0x08
     8c6:	91 85       	ldd	r25, Z+9	; 0x09
     8c8:	a2 85       	ldd	r26, Z+10	; 0x0a
     8ca:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     8cc:	e1 e0       	ldi	r30, 0x01	; 1
     8ce:	fe 16       	cp	r15, r30
     8d0:	49 f0       	breq	.+18     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     8d2:	fe 16       	cp	r15, r30
     8d4:	b0 f0       	brcs	.+44     	; 0x902 <__stack+0x3>
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	ff 16       	cp	r15, r31
     8da:	49 f0       	breq	.+18     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	f8 16       	cp	r15, r24
     8e0:	59 f0       	breq	.+22     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8e2:	14 c0       	rjmp	.+40     	; 0x90c <__stack+0xd>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     8e4:	89 eb       	ldi	r24, 0xB9	; 185
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     8ec:	13 c0       	rjmp	.+38     	; 0x914 <__stack+0x15>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     8ee:	84 ec       	ldi	r24, 0xC4	; 196
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     8f6:	0e c0       	rjmp	.+28     	; 0x914 <__stack+0x15>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     8f8:	8f ec       	ldi	r24, 0xCF	; 207
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0x15>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     902:	8a ed       	ldi	r24, 0xDA	; 218
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
						default: printf("Tipo no reconocido\n"); break;
     90c:	88 ee       	ldi	r24, 0xE8	; 232
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     914:	f1 10       	cpse	r15, r1
     916:	0d c0       	rjmp	.+26     	; 0x932 <__stack+0x33>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     918:	f8 01       	movw	r30, r16
     91a:	80 89       	ldd	r24, Z+16	; 0x10
     91c:	91 89       	ldd	r25, Z+17	; 0x11
     91e:	a2 89       	ldd	r26, Z+18	; 0x12
     920:	b3 89       	ldd	r27, Z+19	; 0x13
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	a1 1d       	adc	r26, r1
     926:	b1 1d       	adc	r27, r1
     928:	80 8b       	std	Z+16, r24	; 0x10
     92a:	91 8b       	std	Z+17, r25	; 0x11
     92c:	a2 8b       	std	Z+18, r26	; 0x12
     92e:	b3 8b       	std	Z+19, r27	; 0x13
     930:	0c c0       	rjmp	.+24     	; 0x94a <__stack+0x4b>
					}
					else
					{
						sorter->stats.total_selected++;
     932:	f8 01       	movw	r30, r16
     934:	84 85       	ldd	r24, Z+12	; 0x0c
     936:	95 85       	ldd	r25, Z+13	; 0x0d
     938:	a6 85       	ldd	r26, Z+14	; 0x0e
     93a:	b7 85       	ldd	r27, Z+15	; 0x0f
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	a1 1d       	adc	r26, r1
     940:	b1 1d       	adc	r27, r1
     942:	84 87       	std	Z+12, r24	; 0x0c
     944:	95 87       	std	Z+13, r25	; 0x0d
     946:	a6 87       	std	Z+14, r26	; 0x0e
     948:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     94a:	f8 01       	movw	r30, r16
     94c:	80 85       	ldd	r24, Z+8	; 0x08
     94e:	91 85       	ldd	r25, Z+9	; 0x09
     950:	a2 85       	ldd	r26, Z+10	; 0x0a
     952:	b3 85       	ldd	r27, Z+11	; 0x0b
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	a1 1d       	adc	r26, r1
     958:	b1 1d       	adc	r27, r1
     95a:	80 87       	std	Z+8, r24	; 0x08
     95c:	91 87       	std	Z+9, r25	; 0x09
     95e:	a2 87       	std	Z+10, r26	; 0x0a
     960:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     962:	ef 2d       	mov	r30, r15
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	35 96       	adiw	r30, 0x05	; 5
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	e0 0f       	add	r30, r16
     972:	f1 1f       	adc	r31, r17
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	a1 1d       	adc	r26, r1
     980:	b1 1d       	adc	r27, r1
     982:	80 83       	st	Z, r24
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	a2 83       	std	Z+2, r26	; 0x02
     988:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     98a:	8c 81       	ldd	r24, Y+4	; 0x04
     98c:	8f 70       	andi	r24, 0x0F	; 15
     98e:	80 62       	ori	r24, 0x20	; 32
     990:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     992:	88 81       	ld	r24, Y
     994:	99 81       	ldd	r25, Y+1	; 0x01
     996:	0e 94 16 06 	call	0xc2c	; 0xc2c <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     99a:	e8 81       	ld	r30, Y
     99c:	f9 81       	ldd	r31, Y+1	; 0x01
     99e:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     9a0:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     9aa:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     9ae:	80 ff       	sbrs	r24, 0
     9b0:	2d c0       	rjmp	.+90     	; 0xa0c <__stack+0x10d>
	{
		if (DEBUG_FLAGS)
     9b2:	86 ff       	sbrs	r24, 6
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__stack+0xbf>
		{
			printf("HCSR04 perdio ECHO\n");
     9b6:	8b ef       	ldi	r24, 0xFB	; 251
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
		}
		VEINTEMS_PASSED = 0;
     9be:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
		WAITING_ECHO = 0;
     9c2:	8e 7f       	andi	r24, 0xFE	; 254
     9c4:	87 7f       	andi	r24, 0xF7	; 247
     9c6:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     9ca:	e8 81       	ld	r30, Y
     9cc:	f9 81       	ldd	r31, Y+1	; 0x01
     9ce:	84 85       	ldd	r24, Z+12	; 0x0c
     9d0:	88 60       	ori	r24, 0x08	; 8
     9d2:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     9d4:	e8 81       	ld	r30, Y
     9d6:	f9 81       	ldd	r31, Y+1	; 0x01
     9d8:	86 e0       	ldi	r24, 0x06	; 6
     9da:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     9dc:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <bandera2>
     9e0:	66 fb       	bst	r22, 6
     9e2:	66 27       	eor	r22, r22
     9e4:	60 f9       	bld	r22, 0
     9e6:	88 81       	ld	r24, Y
     9e8:	99 81       	ldd	r25, Y+1	; 0x01
     9ea:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <ultrasonic_timeout_clear>
     9ee:	88 23       	and	r24, r24
     9f0:	41 f0       	breq	.+16     	; 0xa02 <__stack+0x103>
     9f2:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <bandera2>
     9f6:	86 ff       	sbrs	r24, 6
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__stack+0x103>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 50 07 	call	0xea0	; 0xea0 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     a02:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <bandera>
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <bandera>
	}
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	08 95       	ret

00000a18 <servoA_set_angle>:
#include "./../../main.h"
#include "servo_utils.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
     a18:	85 3b       	cpi	r24, 0xB5	; 181
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <servoA_set_angle+0x6>
		angle = 180;
     a1c:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
     a1e:	28 2f       	mov	r18, r24
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a0 ed       	ldi	r26, 0xD0	; 208
     a24:	b7 e0       	ldi	r27, 0x07	; 7
     a26:	0e 94 2b 07 	call	0xe56	; 0xe56 <__umulhisi3>
     a2a:	24 eb       	ldi	r18, 0xB4	; 180
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
     a36:	da 01       	movw	r26, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	80 53       	subi	r24, 0x30	; 48
     a3c:	98 4f       	sbci	r25, 0xF8	; 248
     a3e:	af 4f       	sbci	r26, 0xFF	; 255
     a40:	bf 4f       	sbci	r27, 0xFF	; 255
     a42:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
     a46:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
     a4a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
     a4e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
     a52:	08 95       	ret

00000a54 <tcrt_init>:

	ADCSRA |= (1 << ADSC);              // Iniciar conversión
	while (ADCSRA & (1 << ADSC));       // Esperar a que termine

	return ADC;                         // Retorna valor de 10 bits (01023)
}
     a54:	87 b1       	in	r24, 0x07	; 7
     a56:	80 7f       	andi	r24, 0xF0	; 240
     a58:	87 b9       	out	0x07, r24	; 7
     a5a:	88 b1       	in	r24, 0x08	; 8
     a5c:	80 7f       	andi	r24, 0xF0	; 240
     a5e:	88 b9       	out	0x08, r24	; 8
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     a66:	86 e8       	ldi	r24, 0x86	; 134
     a68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a6c:	08 95       	ret

00000a6e <TCRT_init_Handlers>:
// 	uint16_t ADCConvertedValue; //Resolucion 10 bits 0 - 1023
// 	uint8_t channel; //Canal TCRT_X_CHANNEL
// 	uint8_t pin;
// }TCRT_t;

void TCRT_init_Handlers(){
     a6e:	cf 93       	push	r28
	IR_A.flags.byte = 0;
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f5 e0       	ldi	r31, 0x05	; 5
	IR_A.channel = TCRT_A_CHANNEL;
     a74:	13 82       	std	Z+3, r1	; 0x03
	IR_A.pin = TCRT_A;
     a76:	14 82       	std	Z+4, r1	; 0x04
	IR_A.ADCConvertedValue = 0;
     a78:	12 82       	std	Z+2, r1	; 0x02
     a7a:	11 82       	std	Z+1, r1	; 0x01
	NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
	SET_FLAG(IR_A.flags, TCRT_ENABLED);
     a7c:	c1 e0       	ldi	r28, 0x01	; 1
     a7e:	c0 83       	st	Z, r28
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
		printf("TCRT A ENABLED");
     a80:	80 e3       	ldi	r24, 0x30	; 48
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
	}
	IR_B.flags.byte = 0;
     a8c:	e4 ed       	ldi	r30, 0xD4	; 212
     a8e:	f4 e0       	ldi	r31, 0x04	; 4
	IR_B.channel = TCRT_B_CHANNEL;
     a90:	c3 83       	std	Z+3, r28	; 0x03
	IR_B.pin = TCRT_B;
     a92:	c4 83       	std	Z+4, r28	; 0x04
	IR_B.ADCConvertedValue = 0;
     a94:	12 82       	std	Z+2, r1	; 0x02
     a96:	11 82       	std	Z+1, r1	; 0x01
	NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
	SET_FLAG(IR_B.flags, TCRT_ENABLED);
     a98:	c0 83       	st	Z, r28
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
		printf("TCRT B ENABLED");
     a9a:	8f e3       	ldi	r24, 0x3F	; 63
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
	}
	IR_C.flags.byte = 0;
     aa6:	e2 ee       	ldi	r30, 0xE2	; 226
     aa8:	f4 e0       	ldi	r31, 0x04	; 4
	IR_C.channel = TCRT_C_CHANNEL;
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	83 83       	std	Z+3, r24	; 0x03
	IR_C.pin = TCRT_C;
     aae:	84 83       	std	Z+4, r24	; 0x04
	IR_C.ADCConvertedValue = 0;
     ab0:	12 82       	std	Z+2, r1	; 0x02
     ab2:	11 82       	std	Z+1, r1	; 0x01
	NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
	SET_FLAG(IR_C.flags, TCRT_ENABLED);
     ab4:	c0 83       	st	Z, r28
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
		printf("TCRT C ENABLED");
     ab6:	8e e4       	ldi	r24, 0x4E	; 78
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	9f 93       	push	r25
     abc:	8f 93       	push	r24
     abe:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
	}
	IR_U.flags.byte = 0;
     ac2:	ec ed       	ldi	r30, 0xDC	; 220
     ac4:	f4 e0       	ldi	r31, 0x04	; 4
	IR_U.channel = TCRT_U_CHANNEL;
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	83 83       	std	Z+3, r24	; 0x03
	IR_U.pin = TCRT_U;
     aca:	84 83       	std	Z+4, r24	; 0x04
	IR_U.ADCConvertedValue = 0;
     acc:	12 82       	std	Z+2, r1	; 0x02
     ace:	11 82       	std	Z+1, r1	; 0x01
	NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);
	SET_FLAG(IR_U.flags, TCRT_ENABLED);
     ad0:	c0 83       	st	Z, r28
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
		printf("TCRT U ENABLED");
     ad2:	8d e5       	ldi	r24, 0x5D	; 93
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
	}
	printf("Init TCRT Handlers");
     ade:	8c e6       	ldi	r24, 0x6C	; 108
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	0e 94 3a 07 	call	0xe74	; 0xe74 <printf>
}
     aea:	8d b7       	in	r24, 0x3d	; 61
     aec:	9e b7       	in	r25, 0x3e	; 62
     aee:	0a 96       	adiw	r24, 0x0a	; 10
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	9e bf       	out	0x3e, r25	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	8d bf       	out	0x3d, r24	; 61
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
     afe:	8b b1       	in	r24, 0x0b	; 11
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	8b b9       	out	0x0b, r24	; 11
     b04:	08 95       	ret

00000b06 <ultrasonic_hal_trigger_setLow>:
     b06:	8b b1       	in	r24, 0x0b	; 11
     b08:	87 7f       	andi	r24, 0xF7	; 247
     b0a:	8b b9       	out	0x0b, r24	; 11
     b0c:	08 95       	ret

00000b0e <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
     b0e:	e1 e8       	ldi	r30, 0x81	; 129
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	80 64       	ori	r24, 0x40	; 64
     b16:	80 83       	st	Z, r24
     b18:	08 95       	ret

00000b1a <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
     b1a:	e1 e8       	ldi	r30, 0x81	; 129
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	8f 7b       	andi	r24, 0xBF	; 191
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret

00000b26 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
     b26:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
     b2a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
     b2e:	88 e1       	ldi	r24, 0x18	; 24
     b30:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     b34:	86 e0       	ldi	r24, 0x06	; 6
     b36:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b3a:	08 95       	ret

00000b3c <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
     b3c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b40:	95 ff       	sbrs	r25, 5
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
     b44:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b48:	08 95       	ret

00000b4a <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
     b4a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b4e:	88 23       	and	r24, r24
     b50:	e4 f7       	brge	.-8      	; 0xb4a <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
     b52:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     b56:	08 95       	ret

00000b58 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
     b58:	cf 93       	push	r28
     b5a:	c8 2f       	mov	r28, r24
	if (c == '\n')
     b5c:	8a 30       	cpi	r24, 0x0A	; 10
     b5e:	19 f4       	brne	.+6      	; 0xb66 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
     b60:	8d e0       	ldi	r24, 0x0D	; 13
     b62:	0e 94 9e 05 	call	0xb3c	; 0xb3c <USART_Transmit>
	USART_Transmit(c);
     b66:	8c 2f       	mov	r24, r28
     b68:	0e 94 9e 05 	call	0xb3c	; 0xb3c <USART_Transmit>
	return 0;
}
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
     b74:	0e 94 a5 05 	call	0xb4a	; 0xb4a <USART_Receive>
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
     b7c:	fc 01       	movw	r30, r24
     b7e:	66 87       	std	Z+14, r22	; 0x0e
     b80:	08 95       	ret

00000b82 <ultrasonic_calculate_distance>:
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	9d 81       	ldd	r25, Y+5	; 0x05
     b90:	ae 81       	ldd	r26, Y+6	; 0x06
     b92:	bf 81       	ldd	r27, Y+7	; 0x07
     b94:	48 81       	ld	r20, Y
     b96:	59 81       	ldd	r21, Y+1	; 0x01
     b98:	6a 81       	ldd	r22, Y+2	; 0x02
     b9a:	7b 81       	ldd	r23, Y+3	; 0x03
     b9c:	8c 01       	movw	r16, r24
     b9e:	9d 01       	movw	r18, r26
     ba0:	04 1b       	sub	r16, r20
     ba2:	15 0b       	sbc	r17, r21
     ba4:	26 0b       	sbc	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	b9 01       	movw	r22, r18
     baa:	a8 01       	movw	r20, r16
     bac:	d9 01       	movw	r26, r18
     bae:	c8 01       	movw	r24, r16
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	aa 1f       	adc	r26, r26
     bb6:	bb 1f       	adc	r27, r27
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	aa 1f       	adc	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	aa 1f       	adc	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	aa 1f       	adc	r26, r26
     bce:	bb 1f       	adc	r27, r27
     bd0:	8c 01       	movw	r16, r24
     bd2:	9d 01       	movw	r18, r26
     bd4:	04 0f       	add	r16, r20
     bd6:	15 1f       	adc	r17, r21
     bd8:	26 1f       	adc	r18, r22
     bda:	37 1f       	adc	r19, r23
     bdc:	c9 01       	movw	r24, r18
     bde:	b8 01       	movw	r22, r16
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	20 e9       	ldi	r18, 0x90	; 144
     bea:	31 e0       	ldi	r19, 0x01	; 1
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
     bf4:	28 87       	std	Y+8, r18	; 0x08
     bf6:	39 87       	std	Y+9, r19	; 0x09
     bf8:	4a 87       	std	Y+10, r20	; 0x0a
     bfa:	5b 87       	std	Y+11, r21	; 0x0b
     bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	8c 87       	std	Y+12, r24	; 0x0c
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <ultrasonic_get_distance>:
     c0c:	fc 01       	movw	r30, r24
     c0e:	60 85       	ldd	r22, Z+8	; 0x08
     c10:	71 85       	ldd	r23, Z+9	; 0x09
     c12:	82 85       	ldd	r24, Z+10	; 0x0a
     c14:	93 85       	ldd	r25, Z+11	; 0x0b
     c16:	08 95       	ret

00000c18 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
     c18:	dc 01       	movw	r26, r24
     c1a:	1f 96       	adiw	r26, 0x0f	; 15
     c1c:	ed 91       	ld	r30, X+
     c1e:	fc 91       	ld	r31, X
     c20:	50 97       	sbiw	r26, 0x10	; 16
     c22:	30 97       	sbiw	r30, 0x00	; 0
     c24:	11 f0       	breq	.+4      	; 0xc2a <ultrasonic_print+0x12>
     c26:	cb 01       	movw	r24, r22
		us->print_method(message);
     c28:	09 95       	icall
     c2a:	08 95       	ret

00000c2c <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
     c32:	18 82       	st	Y, r1
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	1a 82       	std	Y+2, r1	; 0x02
     c38:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
     c3a:	1c 82       	std	Y+4, r1	; 0x04
     c3c:	1d 82       	std	Y+5, r1	; 0x05
     c3e:	1e 82       	std	Y+6, r1	; 0x06
     c40:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
     c42:	18 86       	std	Y+8, r1	; 0x08
     c44:	19 86       	std	Y+9, r1	; 0x09
     c46:	1a 86       	std	Y+10, r1	; 0x0a
     c48:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
     c4a:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
     c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4e:	80 62       	ori	r24, 0x20	; 32
     c50:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
     c52:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
     c54:	0e 94 87 05 	call	0xb0e	; 0xb0e <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
     c58:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5a:	98 89       	ldd	r25, Y+16	; 0x10
     c5c:	89 2b       	or	r24, r25
     c5e:	41 f0       	breq	.+16     	; 0xc70 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
     c60:	8e 85       	ldd	r24, Y+14	; 0x0e
     c62:	88 23       	and	r24, r24
     c64:	29 f0       	breq	.+10     	; 0xc70 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
     c66:	6f e7       	ldi	r22, 0x7F	; 127
     c68:	73 e0       	ldi	r23, 0x03	; 3
     c6a:	ce 01       	movw	r24, r28
     c6c:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
		}
	}
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ec 01       	movw	r28, r24
     c80:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
     c82:	0e 94 16 06 	call	0xc2c	; 0xc2c <ultrasonic_init_flags>
	us->debugMode = true;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
     c8a:	01 15       	cp	r16, r1
     c8c:	11 05       	cpc	r17, r1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <ultrasonic_init+0x20>
		us->print_method = NULL;
     c90:	18 8a       	std	Y+16, r1	; 0x10
     c92:	1f 86       	std	Y+15, r1	; 0x0f
     c94:	0a c0       	rjmp	.+20     	; 0xcaa <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
     c96:	18 8b       	std	Y+16, r17	; 0x10
     c98:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
     c9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c9c:	88 23       	and	r24, r24
     c9e:	29 f0       	breq	.+10     	; 0xcaa <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
     ca0:	6e e9       	ldi	r22, 0x9E	; 158
     ca2:	73 e0       	ldi	r23, 0x03	; 3
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
		}
	}
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
     cba:	fc 01       	movw	r30, r24
     cbc:	25 85       	ldd	r18, Z+13	; 0x0d
     cbe:	26 30       	cpi	r18, 0x06	; 6
     cc0:	71 f4       	brne	.+28     	; 0xcde <ultrasonic_timeout_clear+0x2a>
     cc2:	16 2f       	mov	r17, r22
     cc4:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
     cc6:	0e 94 16 06 	call	0xc2c	; 0xc2c <ultrasonic_init_flags>
		us->debugMode = state;
     cca:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
     ccc:	1e 85       	ldd	r17, Y+14	; 0x0e
     cce:	11 23       	and	r17, r17
     cd0:	41 f0       	breq	.+16     	; 0xce2 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
     cd2:	6e e0       	ldi	r22, 0x0E	; 14
     cd4:	73 e0       	ldi	r23, 0x03	; 3
     cd6:	ce 01       	movw	r24, r28
     cd8:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
     cde:	10 e0       	ldi	r17, 0x00	; 0
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
     ce2:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
     ce4:	81 2f       	mov	r24, r17
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
     cee:	cf 93       	push	r28
     cf0:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
     cf2:	85 85       	ldd	r24, Z+13	; 0x0d
     cf4:	88 23       	and	r24, r24
     cf6:	19 f0       	breq	.+6      	; 0xcfe <ultrasonic_start+0x10>
     cf8:	85 85       	ldd	r24, Z+13	; 0x0d
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	c1 f4       	brne	.+48     	; 0xd2e <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
     cfe:	84 85       	ldd	r24, Z+12	; 0x0c
     d00:	85 ff       	sbrs	r24, 5
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
     d08:	c6 85       	ldd	r28, Z+14	; 0x0e
     d0a:	cc 23       	and	r28, r28
     d0c:	d1 f0       	breq	.+52     	; 0xd42 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
     d0e:	6a eb       	ldi	r22, 0xBA	; 186
     d10:	73 e0       	ldi	r23, 0x03	; 3
     d12:	cf 01       	movw	r24, r30
     d14:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
     d18:	15 c0       	rjmp	.+42     	; 0xd44 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
     d1a:	c6 85       	ldd	r28, Z+14	; 0x0e
     d1c:	cc 23       	and	r28, r28
     d1e:	91 f0       	breq	.+36     	; 0xd44 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
     d20:	69 ee       	ldi	r22, 0xE9	; 233
     d22:	73 e0       	ldi	r23, 0x03	; 3
     d24:	cf 01       	movw	r24, r30
     d26:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
     d2e:	c6 85       	ldd	r28, Z+14	; 0x0e
     d30:	cc 23       	and	r28, r28
     d32:	41 f0       	breq	.+16     	; 0xd44 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
     d34:	60 e2       	ldi	r22, 0x20	; 32
     d36:	74 e0       	ldi	r23, 0x04	; 4
     d38:	cf 01       	movw	r24, r30
     d3a:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
			}
	}
	return false;
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
     d42:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
     d44:	8c 2f       	mov	r24, r28
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
	switch (us->state)
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	71 f1       	breq	.+92     	; 0xdb2 <ultrasonic_update+0x68>
     d56:	28 f4       	brcc	.+10     	; 0xd62 <ultrasonic_update+0x18>
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	49 f0       	breq	.+18     	; 0xd6e <ultrasonic_update+0x24>
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	a1 f0       	breq	.+40     	; 0xd88 <ultrasonic_update+0x3e>
     d60:	55 c0       	rjmp	.+170    	; 0xe0c <ultrasonic_update+0xc2>
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	e1 f1       	breq	.+120    	; 0xdde <ultrasonic_update+0x94>
     d66:	86 30       	cpi	r24, 0x06	; 6
     d68:	09 f4       	brne	.+2      	; 0xd6c <ultrasonic_update+0x22>
     d6a:	4d c0       	rjmp	.+154    	; 0xe06 <ultrasonic_update+0xbc>
     d6c:	4f c0       	rjmp	.+158    	; 0xe0c <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
     d6e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d70:	81 ff       	sbrs	r24, 1
     d72:	4c c0       	rjmp	.+152    	; 0xe0c <ultrasonic_update+0xc2>
				if(us->debugMode){
     d74:	8e 85       	ldd	r24, Y+14	; 0x0e
     d76:	88 23       	and	r24, r24
     d78:	09 f4       	brne	.+2      	; 0xd7c <ultrasonic_update+0x32>
     d7a:	48 c0       	rjmp	.+144    	; 0xe0c <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
     d7c:	6d e4       	ldi	r22, 0x4D	; 77
     d7e:	74 e0       	ldi	r23, 0x04	; 4
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
     d86:	42 c0       	rjmp	.+132    	; 0xe0c <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
     d88:	8c 85       	ldd	r24, Y+12	; 0x0c
     d8a:	84 fd       	sbrc	r24, 4
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
     d92:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
     d96:	8e 85       	ldd	r24, Y+14	; 0x0e
     d98:	88 23       	and	r24, r24
     d9a:	29 f0       	breq	.+10     	; 0xda6 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
     d9c:	6c e6       	ldi	r22, 0x6C	; 108
     d9e:	74 e0       	ldi	r23, 0x04	; 4
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
     da6:	8c 85       	ldd	r24, Y+12	; 0x0c
     da8:	83 ff       	sbrs	r24, 3
     daa:	30 c0       	rjmp	.+96     	; 0xe0c <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	8d 87       	std	Y+13, r24	; 0x0d
     db0:	2d c0       	rjmp	.+90     	; 0xe0c <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
     db2:	8c 85       	ldd	r24, Y+12	; 0x0c
     db4:	86 ff       	sbrs	r24, 6
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
     dbc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dbe:	88 23       	and	r24, r24
     dc0:	29 f0       	breq	.+10     	; 0xdcc <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
     dc2:	69 e8       	ldi	r22, 0x89	; 137
     dc4:	74 e0       	ldi	r23, 0x04	; 4
     dc6:	ce 01       	movw	r24, r28
     dc8:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	84 60       	ori	r24, 0x04	; 4
     dd0:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
     dd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd4:	83 ff       	sbrs	r24, 3
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	8d 87       	std	Y+13, r24	; 0x0d
     ddc:	17 c0       	rjmp	.+46     	; 0xe0c <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
     dde:	8c 85       	ldd	r24, Y+12	; 0x0c
     de0:	82 ff       	sbrs	r24, 2
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 c1 05 	call	0xb82	; 0xb82 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
     dea:	8c 85       	ldd	r24, Y+12	; 0x0c
     dec:	8b 7f       	andi	r24, 0xFB	; 251
     dee:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
     df0:	8e 85       	ldd	r24, Y+14	; 0x0e
     df2:	88 23       	and	r24, r24
     df4:	29 f0       	breq	.+10     	; 0xe00 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
     df6:	60 ea       	ldi	r22, 0xA0	; 160
     df8:	74 e0       	ldi	r23, 0x04	; 4
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 94 0c 06 	call	0xc18	; 0xc18 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
     e00:	85 e0       	ldi	r24, 0x05	; 5
     e02:	8d 87       	std	Y+13, r24	; 0x0d
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
     e06:	8c 85       	ldd	r24, Y+12	; 0x0c
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <__udivmodsi4>:
     e12:	a1 e2       	ldi	r26, 0x21	; 33
     e14:	1a 2e       	mov	r1, r26
     e16:	aa 1b       	sub	r26, r26
     e18:	bb 1b       	sub	r27, r27
     e1a:	fd 01       	movw	r30, r26
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <__udivmodsi4_ep>

00000e1e <__udivmodsi4_loop>:
     e1e:	aa 1f       	adc	r26, r26
     e20:	bb 1f       	adc	r27, r27
     e22:	ee 1f       	adc	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	a2 17       	cp	r26, r18
     e28:	b3 07       	cpc	r27, r19
     e2a:	e4 07       	cpc	r30, r20
     e2c:	f5 07       	cpc	r31, r21
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <__udivmodsi4_ep>
     e30:	a2 1b       	sub	r26, r18
     e32:	b3 0b       	sbc	r27, r19
     e34:	e4 0b       	sbc	r30, r20
     e36:	f5 0b       	sbc	r31, r21

00000e38 <__udivmodsi4_ep>:
     e38:	66 1f       	adc	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	1a 94       	dec	r1
     e42:	69 f7       	brne	.-38     	; 0xe1e <__udivmodsi4_loop>
     e44:	60 95       	com	r22
     e46:	70 95       	com	r23
     e48:	80 95       	com	r24
     e4a:	90 95       	com	r25
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	bd 01       	movw	r22, r26
     e52:	cf 01       	movw	r24, r30
     e54:	08 95       	ret

00000e56 <__umulhisi3>:
     e56:	a2 9f       	mul	r26, r18
     e58:	b0 01       	movw	r22, r0
     e5a:	b3 9f       	mul	r27, r19
     e5c:	c0 01       	movw	r24, r0
     e5e:	a3 9f       	mul	r26, r19
     e60:	70 0d       	add	r23, r0
     e62:	81 1d       	adc	r24, r1
     e64:	11 24       	eor	r1, r1
     e66:	91 1d       	adc	r25, r1
     e68:	b2 9f       	mul	r27, r18
     e6a:	70 0d       	add	r23, r0
     e6c:	81 1d       	adc	r24, r1
     e6e:	11 24       	eor	r1, r1
     e70:	91 1d       	adc	r25, r1
     e72:	08 95       	ret

00000e74 <printf>:
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f7 e0       	ldi	r31, 0x07	; 7
     e7c:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__prologue_saves__+0x20>
     e80:	ae 01       	movw	r20, r28
     e82:	4b 5f       	subi	r20, 0xFB	; 251
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	fa 01       	movw	r30, r20
     e88:	61 91       	ld	r22, Z+
     e8a:	71 91       	ld	r23, Z+
     e8c:	af 01       	movw	r20, r30
     e8e:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <__iob+0x2>
     e92:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <__iob+0x3>
     e96:	0e 94 80 07 	call	0xf00	; 0xf00 <vfprintf>
     e9a:	e2 e0       	ldi	r30, 0x02	; 2
     e9c:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__epilogue_restores__+0x20>

00000ea0 <puts>:
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <__iob+0x2>
     eac:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <__iob+0x3>
     eb0:	23 81       	ldd	r18, Z+3	; 0x03
     eb2:	21 ff       	sbrs	r18, 1
     eb4:	1b c0       	rjmp	.+54     	; 0xeec <puts+0x4c>
     eb6:	8c 01       	movw	r16, r24
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
     eba:	c0 e0       	ldi	r28, 0x00	; 0
     ebc:	f8 01       	movw	r30, r16
     ebe:	81 91       	ld	r24, Z+
     ec0:	8f 01       	movw	r16, r30
     ec2:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <__iob+0x2>
     ec6:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <__iob+0x3>
     eca:	db 01       	movw	r26, r22
     ecc:	18 96       	adiw	r26, 0x08	; 8
     ece:	ed 91       	ld	r30, X+
     ed0:	fc 91       	ld	r31, X
     ed2:	19 97       	sbiw	r26, 0x09	; 9
     ed4:	88 23       	and	r24, r24
     ed6:	31 f0       	breq	.+12     	; 0xee4 <puts+0x44>
     ed8:	09 95       	icall
     eda:	89 2b       	or	r24, r25
     edc:	79 f3       	breq	.-34     	; 0xebc <puts+0x1c>
     ede:	df ef       	ldi	r29, 0xFF	; 255
     ee0:	cf ef       	ldi	r28, 0xFF	; 255
     ee2:	ec cf       	rjmp	.-40     	; 0xebc <puts+0x1c>
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	09 95       	icall
     ee8:	89 2b       	or	r24, r25
     eea:	19 f0       	breq	.+6      	; 0xef2 <puts+0x52>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <puts+0x56>
     ef2:	8d 2f       	mov	r24, r29
     ef4:	9c 2f       	mov	r25, r28
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <vfprintf>:
     f00:	ab e0       	ldi	r26, 0x0B	; 11
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e8       	ldi	r30, 0x86	; 134
     f06:	f7 e0       	ldi	r31, 0x07	; 7
     f08:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__prologue_saves__>
     f0c:	6c 01       	movw	r12, r24
     f0e:	7b 01       	movw	r14, r22
     f10:	8a 01       	movw	r16, r20
     f12:	fc 01       	movw	r30, r24
     f14:	17 82       	std	Z+7, r1	; 0x07
     f16:	16 82       	std	Z+6, r1	; 0x06
     f18:	83 81       	ldd	r24, Z+3	; 0x03
     f1a:	81 ff       	sbrs	r24, 1
     f1c:	cc c1       	rjmp	.+920    	; 0x12b6 <vfprintf+0x3b6>
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	3c 01       	movw	r6, r24
     f24:	f6 01       	movw	r30, r12
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	f7 01       	movw	r30, r14
     f2a:	93 fd       	sbrc	r25, 3
     f2c:	85 91       	lpm	r24, Z+
     f2e:	93 ff       	sbrs	r25, 3
     f30:	81 91       	ld	r24, Z+
     f32:	7f 01       	movw	r14, r30
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <vfprintf+0x3a>
     f38:	ba c1       	rjmp	.+884    	; 0x12ae <vfprintf+0x3ae>
     f3a:	85 32       	cpi	r24, 0x25	; 37
     f3c:	39 f4       	brne	.+14     	; 0xf4c <vfprintf+0x4c>
     f3e:	93 fd       	sbrc	r25, 3
     f40:	85 91       	lpm	r24, Z+
     f42:	93 ff       	sbrs	r25, 3
     f44:	81 91       	ld	r24, Z+
     f46:	7f 01       	movw	r14, r30
     f48:	85 32       	cpi	r24, 0x25	; 37
     f4a:	29 f4       	brne	.+10     	; 0xf56 <vfprintf+0x56>
     f4c:	b6 01       	movw	r22, r12
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
     f54:	e7 cf       	rjmp	.-50     	; 0xf24 <vfprintf+0x24>
     f56:	91 2c       	mov	r9, r1
     f58:	21 2c       	mov	r2, r1
     f5a:	31 2c       	mov	r3, r1
     f5c:	ff e1       	ldi	r31, 0x1F	; 31
     f5e:	f3 15       	cp	r31, r3
     f60:	d8 f0       	brcs	.+54     	; 0xf98 <vfprintf+0x98>
     f62:	8b 32       	cpi	r24, 0x2B	; 43
     f64:	79 f0       	breq	.+30     	; 0xf84 <vfprintf+0x84>
     f66:	38 f4       	brcc	.+14     	; 0xf76 <vfprintf+0x76>
     f68:	80 32       	cpi	r24, 0x20	; 32
     f6a:	79 f0       	breq	.+30     	; 0xf8a <vfprintf+0x8a>
     f6c:	83 32       	cpi	r24, 0x23	; 35
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <vfprintf+0x98>
     f70:	23 2d       	mov	r18, r3
     f72:	20 61       	ori	r18, 0x10	; 16
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <vfprintf+0xb0>
     f76:	8d 32       	cpi	r24, 0x2D	; 45
     f78:	61 f0       	breq	.+24     	; 0xf92 <vfprintf+0x92>
     f7a:	80 33       	cpi	r24, 0x30	; 48
     f7c:	69 f4       	brne	.+26     	; 0xf98 <vfprintf+0x98>
     f7e:	23 2d       	mov	r18, r3
     f80:	21 60       	ori	r18, 0x01	; 1
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <vfprintf+0xb0>
     f84:	83 2d       	mov	r24, r3
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	38 2e       	mov	r3, r24
     f8a:	e3 2d       	mov	r30, r3
     f8c:	e4 60       	ori	r30, 0x04	; 4
     f8e:	3e 2e       	mov	r3, r30
     f90:	2a c0       	rjmp	.+84     	; 0xfe6 <vfprintf+0xe6>
     f92:	f3 2d       	mov	r31, r3
     f94:	f8 60       	ori	r31, 0x08	; 8
     f96:	1d c0       	rjmp	.+58     	; 0xfd2 <vfprintf+0xd2>
     f98:	37 fc       	sbrc	r3, 7
     f9a:	2d c0       	rjmp	.+90     	; 0xff6 <vfprintf+0xf6>
     f9c:	20 ed       	ldi	r18, 0xD0	; 208
     f9e:	28 0f       	add	r18, r24
     fa0:	2a 30       	cpi	r18, 0x0A	; 10
     fa2:	40 f0       	brcs	.+16     	; 0xfb4 <vfprintf+0xb4>
     fa4:	8e 32       	cpi	r24, 0x2E	; 46
     fa6:	b9 f4       	brne	.+46     	; 0xfd6 <vfprintf+0xd6>
     fa8:	36 fc       	sbrc	r3, 6
     faa:	81 c1       	rjmp	.+770    	; 0x12ae <vfprintf+0x3ae>
     fac:	23 2d       	mov	r18, r3
     fae:	20 64       	ori	r18, 0x40	; 64
     fb0:	32 2e       	mov	r3, r18
     fb2:	19 c0       	rjmp	.+50     	; 0xfe6 <vfprintf+0xe6>
     fb4:	36 fe       	sbrs	r3, 6
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <vfprintf+0xc4>
     fb8:	8a e0       	ldi	r24, 0x0A	; 10
     fba:	98 9e       	mul	r9, r24
     fbc:	20 0d       	add	r18, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	92 2e       	mov	r9, r18
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <vfprintf+0xe6>
     fc4:	ea e0       	ldi	r30, 0x0A	; 10
     fc6:	2e 9e       	mul	r2, r30
     fc8:	20 0d       	add	r18, r0
     fca:	11 24       	eor	r1, r1
     fcc:	22 2e       	mov	r2, r18
     fce:	f3 2d       	mov	r31, r3
     fd0:	f0 62       	ori	r31, 0x20	; 32
     fd2:	3f 2e       	mov	r3, r31
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <vfprintf+0xe6>
     fd6:	8c 36       	cpi	r24, 0x6C	; 108
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <vfprintf+0xe2>
     fda:	83 2d       	mov	r24, r3
     fdc:	80 68       	ori	r24, 0x80	; 128
     fde:	38 2e       	mov	r3, r24
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0xe6>
     fe2:	88 36       	cpi	r24, 0x68	; 104
     fe4:	41 f4       	brne	.+16     	; 0xff6 <vfprintf+0xf6>
     fe6:	f7 01       	movw	r30, r14
     fe8:	93 fd       	sbrc	r25, 3
     fea:	85 91       	lpm	r24, Z+
     fec:	93 ff       	sbrs	r25, 3
     fee:	81 91       	ld	r24, Z+
     ff0:	7f 01       	movw	r14, r30
     ff2:	81 11       	cpse	r24, r1
     ff4:	b3 cf       	rjmp	.-154    	; 0xf5c <vfprintf+0x5c>
     ff6:	98 2f       	mov	r25, r24
     ff8:	9f 7d       	andi	r25, 0xDF	; 223
     ffa:	95 54       	subi	r25, 0x45	; 69
     ffc:	93 30       	cpi	r25, 0x03	; 3
     ffe:	28 f4       	brcc	.+10     	; 0x100a <vfprintf+0x10a>
    1000:	0c 5f       	subi	r16, 0xFC	; 252
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	9f e3       	ldi	r25, 0x3F	; 63
    1006:	99 83       	std	Y+1, r25	; 0x01
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <vfprintf+0x124>
    100a:	83 36       	cpi	r24, 0x63	; 99
    100c:	31 f0       	breq	.+12     	; 0x101a <vfprintf+0x11a>
    100e:	83 37       	cpi	r24, 0x73	; 115
    1010:	71 f0       	breq	.+28     	; 0x102e <vfprintf+0x12e>
    1012:	83 35       	cpi	r24, 0x53	; 83
    1014:	09 f0       	breq	.+2      	; 0x1018 <vfprintf+0x118>
    1016:	59 c0       	rjmp	.+178    	; 0x10ca <vfprintf+0x1ca>
    1018:	21 c0       	rjmp	.+66     	; 0x105c <vfprintf+0x15c>
    101a:	f8 01       	movw	r30, r16
    101c:	80 81       	ld	r24, Z
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	0e 5f       	subi	r16, 0xFE	; 254
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	88 24       	eor	r8, r8
    1026:	83 94       	inc	r8
    1028:	91 2c       	mov	r9, r1
    102a:	53 01       	movw	r10, r6
    102c:	13 c0       	rjmp	.+38     	; 0x1054 <vfprintf+0x154>
    102e:	28 01       	movw	r4, r16
    1030:	f2 e0       	ldi	r31, 0x02	; 2
    1032:	4f 0e       	add	r4, r31
    1034:	51 1c       	adc	r5, r1
    1036:	f8 01       	movw	r30, r16
    1038:	a0 80       	ld	r10, Z
    103a:	b1 80       	ldd	r11, Z+1	; 0x01
    103c:	36 fe       	sbrs	r3, 6
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <vfprintf+0x146>
    1040:	69 2d       	mov	r22, r9
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <vfprintf+0x14a>
    1046:	6f ef       	ldi	r22, 0xFF	; 255
    1048:	7f ef       	ldi	r23, 0xFF	; 255
    104a:	c5 01       	movw	r24, r10
    104c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <strnlen>
    1050:	4c 01       	movw	r8, r24
    1052:	82 01       	movw	r16, r4
    1054:	f3 2d       	mov	r31, r3
    1056:	ff 77       	andi	r31, 0x7F	; 127
    1058:	3f 2e       	mov	r3, r31
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <vfprintf+0x188>
    105c:	28 01       	movw	r4, r16
    105e:	22 e0       	ldi	r18, 0x02	; 2
    1060:	42 0e       	add	r4, r18
    1062:	51 1c       	adc	r5, r1
    1064:	f8 01       	movw	r30, r16
    1066:	a0 80       	ld	r10, Z
    1068:	b1 80       	ldd	r11, Z+1	; 0x01
    106a:	36 fe       	sbrs	r3, 6
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <vfprintf+0x174>
    106e:	69 2d       	mov	r22, r9
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x178>
    1074:	6f ef       	ldi	r22, 0xFF	; 255
    1076:	7f ef       	ldi	r23, 0xFF	; 255
    1078:	c5 01       	movw	r24, r10
    107a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <strnlen_P>
    107e:	4c 01       	movw	r8, r24
    1080:	f3 2d       	mov	r31, r3
    1082:	f0 68       	ori	r31, 0x80	; 128
    1084:	3f 2e       	mov	r3, r31
    1086:	82 01       	movw	r16, r4
    1088:	33 fc       	sbrc	r3, 3
    108a:	1b c0       	rjmp	.+54     	; 0x10c2 <vfprintf+0x1c2>
    108c:	82 2d       	mov	r24, r2
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	88 16       	cp	r8, r24
    1092:	99 06       	cpc	r9, r25
    1094:	b0 f4       	brcc	.+44     	; 0x10c2 <vfprintf+0x1c2>
    1096:	b6 01       	movw	r22, r12
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    10a0:	2a 94       	dec	r2
    10a2:	f4 cf       	rjmp	.-24     	; 0x108c <vfprintf+0x18c>
    10a4:	f5 01       	movw	r30, r10
    10a6:	37 fc       	sbrc	r3, 7
    10a8:	85 91       	lpm	r24, Z+
    10aa:	37 fe       	sbrs	r3, 7
    10ac:	81 91       	ld	r24, Z+
    10ae:	5f 01       	movw	r10, r30
    10b0:	b6 01       	movw	r22, r12
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    10b8:	21 10       	cpse	r2, r1
    10ba:	2a 94       	dec	r2
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	82 1a       	sub	r8, r18
    10c0:	91 08       	sbc	r9, r1
    10c2:	81 14       	cp	r8, r1
    10c4:	91 04       	cpc	r9, r1
    10c6:	71 f7       	brne	.-36     	; 0x10a4 <vfprintf+0x1a4>
    10c8:	e8 c0       	rjmp	.+464    	; 0x129a <vfprintf+0x39a>
    10ca:	84 36       	cpi	r24, 0x64	; 100
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <vfprintf+0x1d2>
    10ce:	89 36       	cpi	r24, 0x69	; 105
    10d0:	41 f5       	brne	.+80     	; 0x1122 <vfprintf+0x222>
    10d2:	f8 01       	movw	r30, r16
    10d4:	37 fe       	sbrs	r3, 7
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <vfprintf+0x1e6>
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	0c 5f       	subi	r16, 0xFC	; 252
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <vfprintf+0x1f6>
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	07 2e       	mov	r0, r23
    10ec:	00 0c       	add	r0, r0
    10ee:	88 0b       	sbc	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	0e 5f       	subi	r16, 0xFE	; 254
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	f3 2d       	mov	r31, r3
    10f8:	ff 76       	andi	r31, 0x6F	; 111
    10fa:	3f 2e       	mov	r3, r31
    10fc:	97 ff       	sbrs	r25, 7
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <vfprintf+0x212>
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	f0 68       	ori	r31, 0x80	; 128
    1110:	3f 2e       	mov	r3, r31
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	a3 01       	movw	r20, r6
    1118:	0e 94 b3 09 	call	0x1366	; 0x1366 <__ultoa_invert>
    111c:	88 2e       	mov	r8, r24
    111e:	86 18       	sub	r8, r6
    1120:	45 c0       	rjmp	.+138    	; 0x11ac <vfprintf+0x2ac>
    1122:	85 37       	cpi	r24, 0x75	; 117
    1124:	31 f4       	brne	.+12     	; 0x1132 <vfprintf+0x232>
    1126:	23 2d       	mov	r18, r3
    1128:	2f 7e       	andi	r18, 0xEF	; 239
    112a:	b2 2e       	mov	r11, r18
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	25 c0       	rjmp	.+74     	; 0x117c <vfprintf+0x27c>
    1132:	93 2d       	mov	r25, r3
    1134:	99 7f       	andi	r25, 0xF9	; 249
    1136:	b9 2e       	mov	r11, r25
    1138:	8f 36       	cpi	r24, 0x6F	; 111
    113a:	c1 f0       	breq	.+48     	; 0x116c <vfprintf+0x26c>
    113c:	18 f4       	brcc	.+6      	; 0x1144 <vfprintf+0x244>
    113e:	88 35       	cpi	r24, 0x58	; 88
    1140:	79 f0       	breq	.+30     	; 0x1160 <vfprintf+0x260>
    1142:	b5 c0       	rjmp	.+362    	; 0x12ae <vfprintf+0x3ae>
    1144:	80 37       	cpi	r24, 0x70	; 112
    1146:	19 f0       	breq	.+6      	; 0x114e <vfprintf+0x24e>
    1148:	88 37       	cpi	r24, 0x78	; 120
    114a:	21 f0       	breq	.+8      	; 0x1154 <vfprintf+0x254>
    114c:	b0 c0       	rjmp	.+352    	; 0x12ae <vfprintf+0x3ae>
    114e:	e9 2f       	mov	r30, r25
    1150:	e0 61       	ori	r30, 0x10	; 16
    1152:	be 2e       	mov	r11, r30
    1154:	b4 fe       	sbrs	r11, 4
    1156:	0d c0       	rjmp	.+26     	; 0x1172 <vfprintf+0x272>
    1158:	fb 2d       	mov	r31, r11
    115a:	f4 60       	ori	r31, 0x04	; 4
    115c:	bf 2e       	mov	r11, r31
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x272>
    1160:	34 fe       	sbrs	r3, 4
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <vfprintf+0x278>
    1164:	29 2f       	mov	r18, r25
    1166:	26 60       	ori	r18, 0x06	; 6
    1168:	b2 2e       	mov	r11, r18
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <vfprintf+0x278>
    116c:	28 e0       	ldi	r18, 0x08	; 8
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	05 c0       	rjmp	.+10     	; 0x117c <vfprintf+0x27c>
    1172:	20 e1       	ldi	r18, 0x10	; 16
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x27c>
    1178:	20 e1       	ldi	r18, 0x10	; 16
    117a:	32 e0       	ldi	r19, 0x02	; 2
    117c:	f8 01       	movw	r30, r16
    117e:	b7 fe       	sbrs	r11, 7
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <vfprintf+0x290>
    1182:	60 81       	ld	r22, Z
    1184:	71 81       	ldd	r23, Z+1	; 0x01
    1186:	82 81       	ldd	r24, Z+2	; 0x02
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	0c 5f       	subi	r16, 0xFC	; 252
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	06 c0       	rjmp	.+12     	; 0x119c <vfprintf+0x29c>
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	a3 01       	movw	r20, r6
    119e:	0e 94 b3 09 	call	0x1366	; 0x1366 <__ultoa_invert>
    11a2:	88 2e       	mov	r8, r24
    11a4:	86 18       	sub	r8, r6
    11a6:	fb 2d       	mov	r31, r11
    11a8:	ff 77       	andi	r31, 0x7F	; 127
    11aa:	3f 2e       	mov	r3, r31
    11ac:	36 fe       	sbrs	r3, 6
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <vfprintf+0x2ca>
    11b0:	23 2d       	mov	r18, r3
    11b2:	2e 7f       	andi	r18, 0xFE	; 254
    11b4:	a2 2e       	mov	r10, r18
    11b6:	89 14       	cp	r8, r9
    11b8:	58 f4       	brcc	.+22     	; 0x11d0 <vfprintf+0x2d0>
    11ba:	34 fe       	sbrs	r3, 4
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <vfprintf+0x2d4>
    11be:	32 fc       	sbrc	r3, 2
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <vfprintf+0x2d4>
    11c2:	83 2d       	mov	r24, r3
    11c4:	8e 7e       	andi	r24, 0xEE	; 238
    11c6:	a8 2e       	mov	r10, r24
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vfprintf+0x2d4>
    11ca:	b8 2c       	mov	r11, r8
    11cc:	a3 2c       	mov	r10, r3
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <vfprintf+0x2d6>
    11d0:	b8 2c       	mov	r11, r8
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x2d6>
    11d4:	b9 2c       	mov	r11, r9
    11d6:	a4 fe       	sbrs	r10, 4
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <vfprintf+0x2f8>
    11da:	fe 01       	movw	r30, r28
    11dc:	e8 0d       	add	r30, r8
    11de:	f1 1d       	adc	r31, r1
    11e0:	80 81       	ld	r24, Z
    11e2:	80 33       	cpi	r24, 0x30	; 48
    11e4:	21 f4       	brne	.+8      	; 0x11ee <vfprintf+0x2ee>
    11e6:	9a 2d       	mov	r25, r10
    11e8:	99 7e       	andi	r25, 0xE9	; 233
    11ea:	a9 2e       	mov	r10, r25
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <vfprintf+0x300>
    11ee:	a2 fe       	sbrs	r10, 2
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <vfprintf+0x2fe>
    11f2:	b3 94       	inc	r11
    11f4:	b3 94       	inc	r11
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <vfprintf+0x300>
    11f8:	8a 2d       	mov	r24, r10
    11fa:	86 78       	andi	r24, 0x86	; 134
    11fc:	09 f0       	breq	.+2      	; 0x1200 <vfprintf+0x300>
    11fe:	b3 94       	inc	r11
    1200:	a3 fc       	sbrc	r10, 3
    1202:	11 c0       	rjmp	.+34     	; 0x1226 <vfprintf+0x326>
    1204:	a0 fe       	sbrs	r10, 0
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <vfprintf+0x314>
    1208:	b2 14       	cp	r11, r2
    120a:	88 f4       	brcc	.+34     	; 0x122e <vfprintf+0x32e>
    120c:	28 0c       	add	r2, r8
    120e:	92 2c       	mov	r9, r2
    1210:	9b 18       	sub	r9, r11
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <vfprintf+0x330>
    1214:	b2 14       	cp	r11, r2
    1216:	60 f4       	brcc	.+24     	; 0x1230 <vfprintf+0x330>
    1218:	b6 01       	movw	r22, r12
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    1222:	b3 94       	inc	r11
    1224:	f7 cf       	rjmp	.-18     	; 0x1214 <vfprintf+0x314>
    1226:	b2 14       	cp	r11, r2
    1228:	18 f4       	brcc	.+6      	; 0x1230 <vfprintf+0x330>
    122a:	2b 18       	sub	r2, r11
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x332>
    122e:	98 2c       	mov	r9, r8
    1230:	21 2c       	mov	r2, r1
    1232:	a4 fe       	sbrs	r10, 4
    1234:	10 c0       	rjmp	.+32     	; 0x1256 <vfprintf+0x356>
    1236:	b6 01       	movw	r22, r12
    1238:	80 e3       	ldi	r24, 0x30	; 48
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    1240:	a2 fe       	sbrs	r10, 2
    1242:	17 c0       	rjmp	.+46     	; 0x1272 <vfprintf+0x372>
    1244:	a1 fc       	sbrc	r10, 1
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x34e>
    1248:	88 e7       	ldi	r24, 0x78	; 120
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x352>
    124e:	88 e5       	ldi	r24, 0x58	; 88
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	b6 01       	movw	r22, r12
    1254:	0c c0       	rjmp	.+24     	; 0x126e <vfprintf+0x36e>
    1256:	8a 2d       	mov	r24, r10
    1258:	86 78       	andi	r24, 0x86	; 134
    125a:	59 f0       	breq	.+22     	; 0x1272 <vfprintf+0x372>
    125c:	a1 fe       	sbrs	r10, 1
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0x364>
    1260:	8b e2       	ldi	r24, 0x2B	; 43
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <vfprintf+0x366>
    1264:	80 e2       	ldi	r24, 0x20	; 32
    1266:	a7 fc       	sbrc	r10, 7
    1268:	8d e2       	ldi	r24, 0x2D	; 45
    126a:	b6 01       	movw	r22, r12
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    1272:	89 14       	cp	r8, r9
    1274:	38 f4       	brcc	.+14     	; 0x1284 <vfprintf+0x384>
    1276:	b6 01       	movw	r22, r12
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    1280:	9a 94       	dec	r9
    1282:	f7 cf       	rjmp	.-18     	; 0x1272 <vfprintf+0x372>
    1284:	8a 94       	dec	r8
    1286:	f3 01       	movw	r30, r6
    1288:	e8 0d       	add	r30, r8
    128a:	f1 1d       	adc	r31, r1
    128c:	80 81       	ld	r24, Z
    128e:	b6 01       	movw	r22, r12
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    1296:	81 10       	cpse	r8, r1
    1298:	f5 cf       	rjmp	.-22     	; 0x1284 <vfprintf+0x384>
    129a:	22 20       	and	r2, r2
    129c:	09 f4       	brne	.+2      	; 0x12a0 <vfprintf+0x3a0>
    129e:	42 ce       	rjmp	.-892    	; 0xf24 <vfprintf+0x24>
    12a0:	b6 01       	movw	r22, r12
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 77 09 	call	0x12ee	; 0x12ee <fputc>
    12aa:	2a 94       	dec	r2
    12ac:	f6 cf       	rjmp	.-20     	; 0x129a <vfprintf+0x39a>
    12ae:	f6 01       	movw	r30, r12
    12b0:	86 81       	ldd	r24, Z+6	; 0x06
    12b2:	97 81       	ldd	r25, Z+7	; 0x07
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0x3ba>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	2b 96       	adiw	r28, 0x0b	; 11
    12bc:	e2 e1       	ldi	r30, 0x12	; 18
    12be:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__epilogue_restores__>

000012c2 <strnlen_P>:
    12c2:	fc 01       	movw	r30, r24
    12c4:	05 90       	lpm	r0, Z+
    12c6:	61 50       	subi	r22, 0x01	; 1
    12c8:	70 40       	sbci	r23, 0x00	; 0
    12ca:	01 10       	cpse	r0, r1
    12cc:	d8 f7       	brcc	.-10     	; 0x12c4 <strnlen_P+0x2>
    12ce:	80 95       	com	r24
    12d0:	90 95       	com	r25
    12d2:	8e 0f       	add	r24, r30
    12d4:	9f 1f       	adc	r25, r31
    12d6:	08 95       	ret

000012d8 <strnlen>:
    12d8:	fc 01       	movw	r30, r24
    12da:	61 50       	subi	r22, 0x01	; 1
    12dc:	70 40       	sbci	r23, 0x00	; 0
    12de:	01 90       	ld	r0, Z+
    12e0:	01 10       	cpse	r0, r1
    12e2:	d8 f7       	brcc	.-10     	; 0x12da <strnlen+0x2>
    12e4:	80 95       	com	r24
    12e6:	90 95       	com	r25
    12e8:	8e 0f       	add	r24, r30
    12ea:	9f 1f       	adc	r25, r31
    12ec:	08 95       	ret

000012ee <fputc>:
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	fb 01       	movw	r30, r22
    12f8:	23 81       	ldd	r18, Z+3	; 0x03
    12fa:	21 fd       	sbrc	r18, 1
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <fputc+0x16>
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	2c c0       	rjmp	.+88     	; 0x135c <fputc+0x6e>
    1304:	22 ff       	sbrs	r18, 2
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <fputc+0x46>
    1308:	46 81       	ldd	r20, Z+6	; 0x06
    130a:	57 81       	ldd	r21, Z+7	; 0x07
    130c:	24 81       	ldd	r18, Z+4	; 0x04
    130e:	35 81       	ldd	r19, Z+5	; 0x05
    1310:	42 17       	cp	r20, r18
    1312:	53 07       	cpc	r21, r19
    1314:	44 f4       	brge	.+16     	; 0x1326 <fputc+0x38>
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	9d 01       	movw	r18, r26
    131c:	2f 5f       	subi	r18, 0xFF	; 255
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	31 83       	std	Z+1, r19	; 0x01
    1322:	20 83       	st	Z, r18
    1324:	8c 93       	st	X, r24
    1326:	26 81       	ldd	r18, Z+6	; 0x06
    1328:	37 81       	ldd	r19, Z+7	; 0x07
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	37 83       	std	Z+7, r19	; 0x07
    1330:	26 83       	std	Z+6, r18	; 0x06
    1332:	14 c0       	rjmp	.+40     	; 0x135c <fputc+0x6e>
    1334:	8b 01       	movw	r16, r22
    1336:	ec 01       	movw	r28, r24
    1338:	fb 01       	movw	r30, r22
    133a:	00 84       	ldd	r0, Z+8	; 0x08
    133c:	f1 85       	ldd	r31, Z+9	; 0x09
    133e:	e0 2d       	mov	r30, r0
    1340:	09 95       	icall
    1342:	89 2b       	or	r24, r25
    1344:	e1 f6       	brne	.-72     	; 0x12fe <fputc+0x10>
    1346:	d8 01       	movw	r26, r16
    1348:	16 96       	adiw	r26, 0x06	; 6
    134a:	8d 91       	ld	r24, X+
    134c:	9c 91       	ld	r25, X
    134e:	17 97       	sbiw	r26, 0x07	; 7
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	17 96       	adiw	r26, 0x07	; 7
    1354:	9c 93       	st	X, r25
    1356:	8e 93       	st	-X, r24
    1358:	16 97       	sbiw	r26, 0x06	; 6
    135a:	ce 01       	movw	r24, r28
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <__ultoa_invert>:
    1366:	fa 01       	movw	r30, r20
    1368:	aa 27       	eor	r26, r26
    136a:	28 30       	cpi	r18, 0x08	; 8
    136c:	51 f1       	breq	.+84     	; 0x13c2 <__ultoa_invert+0x5c>
    136e:	20 31       	cpi	r18, 0x10	; 16
    1370:	81 f1       	breq	.+96     	; 0x13d2 <__ultoa_invert+0x6c>
    1372:	e8 94       	clt
    1374:	6f 93       	push	r22
    1376:	6e 7f       	andi	r22, 0xFE	; 254
    1378:	6e 5f       	subi	r22, 0xFE	; 254
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	af 4f       	sbci	r26, 0xFF	; 255
    1382:	b1 e0       	ldi	r27, 0x01	; 1
    1384:	3e d0       	rcall	.+124    	; 0x1402 <__ultoa_invert+0x9c>
    1386:	b4 e0       	ldi	r27, 0x04	; 4
    1388:	3c d0       	rcall	.+120    	; 0x1402 <__ultoa_invert+0x9c>
    138a:	67 0f       	add	r22, r23
    138c:	78 1f       	adc	r23, r24
    138e:	89 1f       	adc	r24, r25
    1390:	9a 1f       	adc	r25, r26
    1392:	a1 1d       	adc	r26, r1
    1394:	68 0f       	add	r22, r24
    1396:	79 1f       	adc	r23, r25
    1398:	8a 1f       	adc	r24, r26
    139a:	91 1d       	adc	r25, r1
    139c:	a1 1d       	adc	r26, r1
    139e:	6a 0f       	add	r22, r26
    13a0:	71 1d       	adc	r23, r1
    13a2:	81 1d       	adc	r24, r1
    13a4:	91 1d       	adc	r25, r1
    13a6:	a1 1d       	adc	r26, r1
    13a8:	20 d0       	rcall	.+64     	; 0x13ea <__ultoa_invert+0x84>
    13aa:	09 f4       	brne	.+2      	; 0x13ae <__ultoa_invert+0x48>
    13ac:	68 94       	set
    13ae:	3f 91       	pop	r19
    13b0:	2a e0       	ldi	r18, 0x0A	; 10
    13b2:	26 9f       	mul	r18, r22
    13b4:	11 24       	eor	r1, r1
    13b6:	30 19       	sub	r19, r0
    13b8:	30 5d       	subi	r19, 0xD0	; 208
    13ba:	31 93       	st	Z+, r19
    13bc:	de f6       	brtc	.-74     	; 0x1374 <__ultoa_invert+0xe>
    13be:	cf 01       	movw	r24, r30
    13c0:	08 95       	ret
    13c2:	46 2f       	mov	r20, r22
    13c4:	47 70       	andi	r20, 0x07	; 7
    13c6:	40 5d       	subi	r20, 0xD0	; 208
    13c8:	41 93       	st	Z+, r20
    13ca:	b3 e0       	ldi	r27, 0x03	; 3
    13cc:	0f d0       	rcall	.+30     	; 0x13ec <__ultoa_invert+0x86>
    13ce:	c9 f7       	brne	.-14     	; 0x13c2 <__ultoa_invert+0x5c>
    13d0:	f6 cf       	rjmp	.-20     	; 0x13be <__ultoa_invert+0x58>
    13d2:	46 2f       	mov	r20, r22
    13d4:	4f 70       	andi	r20, 0x0F	; 15
    13d6:	40 5d       	subi	r20, 0xD0	; 208
    13d8:	4a 33       	cpi	r20, 0x3A	; 58
    13da:	18 f0       	brcs	.+6      	; 0x13e2 <__ultoa_invert+0x7c>
    13dc:	49 5d       	subi	r20, 0xD9	; 217
    13de:	31 fd       	sbrc	r19, 1
    13e0:	40 52       	subi	r20, 0x20	; 32
    13e2:	41 93       	st	Z+, r20
    13e4:	02 d0       	rcall	.+4      	; 0x13ea <__ultoa_invert+0x84>
    13e6:	a9 f7       	brne	.-22     	; 0x13d2 <__ultoa_invert+0x6c>
    13e8:	ea cf       	rjmp	.-44     	; 0x13be <__ultoa_invert+0x58>
    13ea:	b4 e0       	ldi	r27, 0x04	; 4
    13ec:	a6 95       	lsr	r26
    13ee:	97 95       	ror	r25
    13f0:	87 95       	ror	r24
    13f2:	77 95       	ror	r23
    13f4:	67 95       	ror	r22
    13f6:	ba 95       	dec	r27
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <__ultoa_invert+0x86>
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	61 05       	cpc	r22, r1
    13fe:	71 05       	cpc	r23, r1
    1400:	08 95       	ret
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	0a 2e       	mov	r0, r26
    1408:	06 94       	lsr	r0
    140a:	57 95       	ror	r21
    140c:	47 95       	ror	r20
    140e:	37 95       	ror	r19
    1410:	27 95       	ror	r18
    1412:	ba 95       	dec	r27
    1414:	c9 f7       	brne	.-14     	; 0x1408 <__ultoa_invert+0xa2>
    1416:	62 0f       	add	r22, r18
    1418:	73 1f       	adc	r23, r19
    141a:	84 1f       	adc	r24, r20
    141c:	95 1f       	adc	r25, r21
    141e:	a0 1d       	adc	r26, r0
    1420:	08 95       	ret

00001422 <__prologue_saves__>:
    1422:	2f 92       	push	r2
    1424:	3f 92       	push	r3
    1426:	4f 92       	push	r4
    1428:	5f 92       	push	r5
    142a:	6f 92       	push	r6
    142c:	7f 92       	push	r7
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	ca 1b       	sub	r28, r26
    144c:	db 0b       	sbc	r29, r27
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	09 94       	ijmp

0000145a <__epilogue_restores__>:
    145a:	2a 88       	ldd	r2, Y+18	; 0x12
    145c:	39 88       	ldd	r3, Y+17	; 0x11
    145e:	48 88       	ldd	r4, Y+16	; 0x10
    1460:	5f 84       	ldd	r5, Y+15	; 0x0f
    1462:	6e 84       	ldd	r6, Y+14	; 0x0e
    1464:	7d 84       	ldd	r7, Y+13	; 0x0d
    1466:	8c 84       	ldd	r8, Y+12	; 0x0c
    1468:	9b 84       	ldd	r9, Y+11	; 0x0b
    146a:	aa 84       	ldd	r10, Y+10	; 0x0a
    146c:	b9 84       	ldd	r11, Y+9	; 0x09
    146e:	c8 84       	ldd	r12, Y+8	; 0x08
    1470:	df 80       	ldd	r13, Y+7	; 0x07
    1472:	ee 80       	ldd	r14, Y+6	; 0x06
    1474:	fd 80       	ldd	r15, Y+5	; 0x05
    1476:	0c 81       	ldd	r16, Y+4	; 0x04
    1478:	1b 81       	ldd	r17, Y+3	; 0x03
    147a:	aa 81       	ldd	r26, Y+2	; 0x02
    147c:	b9 81       	ldd	r27, Y+1	; 0x01
    147e:	ce 0f       	add	r28, r30
    1480:	d1 1d       	adc	r29, r1
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	ed 01       	movw	r28, r26
    148e:	08 95       	ret

00001490 <_exit>:
    1490:	f8 94       	cli

00001492 <__stop_program>:
    1492:	ff cf       	rjmp	.-2      	; 0x1492 <__stop_program>
