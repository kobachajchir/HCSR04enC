
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002de  00800100  00001254  000012e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  008003de  008003de  000015c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002663  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e90  00000000  00000000  00003e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011bd  00000000  00000000  00004d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00005ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae1  00000000  00000000  000062d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b37  00000000  00000000  00006db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000078f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e5       	ldi	r30, 0x54	; 84
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3d       	cpi	r26, 0xDE	; 222
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ae ed       	ldi	r26, 0xDE	; 222
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 02 	call	0x44e	; 0x44e <main>
      9e:	0c 94 28 09 	jmp	0x1250	; 0x1250 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <ultraSensor>
     100:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <ultraSensor+0x1>
     104:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <ultraSensor+0x2>
     108:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <ultraSensor+0x3>
     10c:	e0 e1       	ldi	r30, 0x10	; 16
     10e:	f4 e0       	ldi	r31, 0x04	; 4
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <ultraSensor+0x4>
     13c:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <ultraSensor+0x5>
     140:	a0 93 0a 04 	sts	0x040A, r26	; 0x80040a <ultraSensor+0x6>
     144:	b0 93 0b 04 	sts	0x040B, r27	; 0x80040b <ultraSensor+0x7>
     148:	e0 e1       	ldi	r30, 0x10	; 16
     14a:	f4 e0       	ldi	r31, 0x04	; 4
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	e8 e8       	ldi	r30, 0x88	; 136
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	93 46       	sbci	r25, 0x63	; 99
     1b4:	91 83       	std	Z+1, r25	; 0x01
     1b6:	80 83       	st	Z, r24
     1b8:	85 b1       	in	r24, 0x05	; 5
     1ba:	82 60       	ori	r24, 0x02	; 2
     1bc:	85 b9       	out	0x05, r24	; 5
     1be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     1c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse_width_A>
     1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse_width_A+0x1>
     1ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pulse_width_A+0x2>
     1d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pulse_width_A+0x3>
     1d6:	82 0f       	add	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     1de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     1e2:	ff 91       	pop	r31
     1e4:	ef 91       	pop	r30
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_12>:
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8d 7f       	andi	r24, 0xFD	; 253
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <timer1_init>:
     21a:	a4 e8       	ldi	r26, 0x84	; 132
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	1c 92       	st	X, r1
     222:	1e 92       	st	-X, r1
     224:	86 b3       	in	r24, 0x16	; 22
     226:	80 62       	ori	r24, 0x20	; 32
     228:	86 bb       	out	0x16, r24	; 22
     22a:	ef e6       	ldi	r30, 0x6F	; 111
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	87 62       	ori	r24, 0x27	; 39
     232:	80 83       	st	Z, r24
     234:	e1 e8       	ldi	r30, 0x81	; 129
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 64       	ori	r24, 0x40	; 64
     23c:	80 83       	st	Z, r24
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	80 5c       	subi	r24, 0xC0	; 192
     24a:	93 46       	sbci	r25, 0x63	; 99
     24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     254:	08 95       	ret

00000256 <timer2_init>:
     256:	e1 eb       	ldi	r30, 0xB1	; 177
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	87 60       	ori	r24, 0x07	; 7
     25e:	80 83       	st	Z, r24
     260:	8b e9       	ldi	r24, 0x9B	; 155
     262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     266:	e0 e7       	ldi	r30, 0x70	; 112
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 83       	st	Z, r24
     270:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     274:	08 95       	ret

00000276 <gpio_pins_init>:
     276:	84 b1       	in	r24, 0x04	; 4
     278:	80 62       	ori	r24, 0x20	; 32
     27a:	84 b9       	out	0x04, r24	; 4
     27c:	85 b1       	in	r24, 0x05	; 5
     27e:	80 62       	ori	r24, 0x20	; 32
     280:	85 b9       	out	0x05, r24	; 5
     282:	8a b1       	in	r24, 0x0a	; 10
     284:	88 60       	ori	r24, 0x08	; 8
     286:	8a b9       	out	0x0a, r24	; 10
     288:	84 b1       	in	r24, 0x04	; 4
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	84 b9       	out	0x04, r24	; 4
     28e:	8a b1       	in	r24, 0x0a	; 10
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	8a b9       	out	0x0a, r24	; 10
     294:	8b b1       	in	r24, 0x0b	; 11
     296:	8f 7e       	andi	r24, 0xEF	; 239
     298:	8b b9       	out	0x0b, r24	; 11
     29a:	84 b1       	in	r24, 0x04	; 4
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	84 b9       	out	0x04, r24	; 4
     2a0:	8b b1       	in	r24, 0x0b	; 11
     2a2:	87 7f       	andi	r24, 0xF7	; 247
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	08 95       	ret

000002a8 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     2ca:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     2ce:	81 ff       	sbrs	r24, 1
     2d0:	ad c0       	rjmp	.+346    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     2d2:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <ultraSensor+0xd>
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	51 f5       	brne	.+84     	; 0x32e <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     2da:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     2de:	85 fd       	sbrc	r24, 5
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     2e2:	0e 94 5f 04 	call	0x8be	; 0x8be <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     2e6:	e0 e1       	ldi	r30, 0x10	; 16
     2e8:	f4 e0       	ldi	r31, 0x04	; 4
     2ea:	80 81       	ld	r24, Z
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     2f0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
     2fa:	19 c0       	rjmp	.+50     	; 0x32e <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     2fc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     300:	e0 e1       	ldi	r30, 0x10	; 16
     302:	f4 e0       	ldi	r31, 0x04	; 4
     304:	80 81       	ld	r24, Z
     306:	82 60       	ori	r24, 0x02	; 2
     308:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     30a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     30e:	8d 7d       	andi	r24, 0xDD	; 221
     310:	88 60       	ori	r24, 0x08	; 8
     312:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     316:	80 81       	ld	r24, Z
     318:	8f 7d       	andi	r24, 0xDF	; 223
     31a:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     322:	80 81       	ld	r24, Z
     324:	80 61       	ori	r24, 0x10	; 16
     326:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     328:	80 81       	ld	r24, Z
     32a:	8d 7f       	andi	r24, 0xFD	; 253
     32c:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     32e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <ultraSensor+0xd>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	d1 f4       	brne	.+52     	; 0x36a <__vector_7+0xc2>
     336:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <ultraSensor+0xc>
     33a:	84 ff       	sbrs	r24, 4
     33c:	16 c0       	rjmp	.+44     	; 0x36a <__vector_7+0xc2>
     33e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     342:	89 70       	andi	r24, 0x09	; 9
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	89 f4       	brne	.+34     	; 0x36a <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     348:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <__data_end>
     34c:	81 11       	cpse	r24, r1
     34e:	06 c0       	rjmp	.+12     	; 0x35c <__vector_7+0xb4>
				veintems_counter++;
     350:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <__data_end>
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <__data_end>
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     35c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
				veintems_counter = 0;
     366:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <__data_end>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     36a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <ultraSensor+0xc>
     36e:	85 fd       	sbrc	r24, 5
     370:	22 c0       	rjmp	.+68     	; 0x3b6 <__vector_7+0x10e>
     372:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     376:	84 fd       	sbrc	r24, 4
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     37a:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <wait_time>
     37e:	87 30       	cpi	r24, 0x07	; 7
     380:	30 f4       	brcc	.+12     	; 0x38e <__vector_7+0xe6>
				wait_time++;
     382:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <wait_time>
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <wait_time>
     38c:	07 c0       	rjmp	.+14     	; 0x39c <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     38e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     392:	80 61       	ori	r24, 0x10	; 16
     394:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
				wait_time = 0;
     398:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     39c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <ultraSensor+0xc>
     3a0:	83 ff       	sbrs	r24, 3
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     3a4:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <bandera2>
     3a8:	66 fb       	bst	r22, 6
     3aa:	66 27       	eor	r22, r22
     3ac:	60 f9       	bld	r22, 0
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	94 e0       	ldi	r25, 0x04	; 4
     3b2:	0e 94 3a 05 	call	0xa74	; 0xa74 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     3b6:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <diezMsCounter>
     3ba:	8a 30       	cpi	r24, 0x0A	; 10
     3bc:	30 f4       	brcc	.+12     	; 0x3ca <__vector_7+0x122>
			diezMsCounter++;
     3be:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <diezMsCounter>
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <diezMsCounter>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     3ca:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			diezMsCounter = 0;
     3d4:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     3d8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     3dc:	86 ff       	sbrs	r24, 6
     3de:	0e c0       	rjmp	.+28     	; 0x3fc <__vector_7+0x154>
			if(btn_pressed_time == 255){
     3e0:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <btn_pressed_time>
     3e4:	8f 3f       	cpi	r24, 0xFF	; 255
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <__vector_7+0x14a>
				BTN_OVF = 1;
     3e8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			}
			btn_pressed_time++;
     3f2:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <btn_pressed_time>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <btn_pressed_time>
		}
		if(SERVOA_RESET){
     3fc:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     400:	85 ff       	sbrs	r24, 5
     402:	14 c0       	rjmp	.+40     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			if(servo_counter < SERVO_RESET_TIME){
     404:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <servo_counter>
     408:	8e 31       	cpi	r24, 0x1E	; 30
     40a:	30 f4       	brcc	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				servo_counter++;
     40c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <servo_counter>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <servo_counter>
     416:	0a c0       	rjmp	.+20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				} else {
				servo_counter = 0;
     418:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <servo_counter>
				SERVOA_RESET = 0;
     41c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     420:	8f 7d       	andi	r24, 0xDF	; 223
     422:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
				servoA_set_angle(90);
     426:	8a e5       	ldi	r24, 0x5A	; 90
     428:	0e 94 41 04 	call	0x882	; 0x882 <servoA_set_angle>
			}
		}
	}
}
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <main>:
	// Inicializa las banderas en 0
	bandera.byte = 0;
	bandera2.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     44e:	82 e8       	ldi	r24, 0x82	; 130
     450:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     454:	80 e8       	ldi	r24, 0x80	; 128
     456:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     45a:	88 e0       	ldi	r24, 0x08	; 8
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     462:	e5 e1       	ldi	r30, 0x15	; 21
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	8e e0       	ldi	r24, 0x0E	; 14
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24
	diezMsCounter = 0;
     476:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     47a:	0e 94 3b 01 	call	0x276	; 0x276 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     47e:	0e 94 0d 01 	call	0x21a	; 0x21a <timer1_init>
	timer2_init();
     482:	0e 94 2b 01 	call	0x256	; 0x256 <timer2_init>
	//Inicia HCSR04
	ultrasonic_init(&ultraSensor, printfWrapper);
     486:	63 e5       	ldi	r22, 0x53	; 83
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	94 e0       	ldi	r25, 0x04	; 4
     48e:	0e 94 1b 05 	call	0xa36	; 0xa36 <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     492:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <bandera2>
     496:	66 fb       	bst	r22, 6
     498:	66 27       	eor	r22, r22
     49a:	60 f9       	bld	r22, 0
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	94 e0       	ldi	r25, 0x04	; 4
     4a0:	0e 94 9e 04 	call	0x93c	; 0x93c <ultrasonic_set_debug_mode>
	hcsr04Detector.sensor = &ultraSensor;
     4a4:	e1 e0       	ldi	r30, 0x01	; 1
     4a6:	f4 e0       	ldi	r31, 0x04	; 4
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	94 e0       	ldi	r25, 0x04	; 4
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
	NIBBLEH_SET_STATE(hcsr04Detector, SENSOR_IDLE);
     4b0:	82 81       	ldd	r24, Z+2	; 0x02
     4b2:	8f 70       	andi	r24, 0x0F	; 15
     4b4:	82 83       	std	Z+2, r24	; 0x02
	initSorter(&SorterSystem);
     4b6:	85 ee       	ldi	r24, 0xE5	; 229
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     4be:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     4c2:	82 60       	ori	r24, 0x02	; 2
     4c4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     4c8:	80 ec       	ldi	r24, 0xC0	; 192
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
	sei();
     4d0:	78 94       	sei
	while (1)
	{ 
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     4d2:	65 ee       	ldi	r22, 0xE5	; 229
     4d4:	73 e0       	ldi	r23, 0x03	; 3
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	0e 94 41 03 	call	0x682	; 0x682 <ultraSensorTask>
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     4de:	4c 9b       	sbis	0x09, 4	; 9
     4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <main+0xa8>
     4e2:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     4e6:	86 fd       	sbrc	r24, 6
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <main+0xa8>
			btn_pressed_time = 0;
     4ea:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <btn_pressed_time>
			BTN_PRESSED = 1;
     4ee:	80 64       	ori	r24, 0x40	; 64
     4f0:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
     4f4:	28 c0       	rjmp	.+80     	; 0x546 <main+0xf8>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     4f6:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     4fa:	86 ff       	sbrs	r24, 6
     4fc:	24 c0       	rjmp	.+72     	; 0x546 <main+0xf8>
     4fe:	4c 99       	sbic	0x09, 4	; 9
     500:	22 c0       	rjmp	.+68     	; 0x546 <main+0xf8>
			BTN_PRESSED = 0;
     502:	8f 7b       	andi	r24, 0xBF	; 191
     504:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     508:	82 ff       	sbrs	r24, 2
     50a:	04 c0       	rjmp	.+8      	; 0x514 <main+0xc6>
				printf("Btn overflowed\n");
     50c:	86 e2       	ldi	r24, 0x26	; 38
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     514:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <btn_pressed_time>
     518:	8a 30       	cpi	r24, 0x0A	; 10
     51a:	30 f4       	brcc	.+12     	; 0x528 <main+0xda>
     51c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     520:	98 2f       	mov	r25, r24
     522:	94 70       	andi	r25, 0x04	; 4
     524:	82 ff       	sbrs	r24, 2
     526:	06 c0       	rjmp	.+12     	; 0x534 <main+0xe6>
				BTN_RELEASED = 1;
     528:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
     532:	09 c0       	rjmp	.+18     	; 0x546 <main+0xf8>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     534:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <btn_pressed_time>
				if(BTN_OVF){
     538:	99 23       	and	r25, r25
     53a:	29 f0       	breq	.+10     	; 0x546 <main+0xf8>
					BTN_OVF = 0;
     53c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     540:	8b 7f       	andi	r24, 0xFB	; 251
     542:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     546:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     54a:	84 ff       	sbrs	r24, 4
     54c:	08 c0       	rjmp	.+16     	; 0x55e <main+0x110>
			WAIT_TIME_TRIGGER_PASSED = 0;
     54e:	8f 7e       	andi	r24, 0xEF	; 239
     550:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     554:	e0 e1       	ldi	r30, 0x10	; 16
     556:	f4 e0       	ldi	r31, 0x04	; 4
     558:	80 81       	ld	r24, Z
     55a:	80 62       	ori	r24, 0x20	; 32
     55c:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     55e:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     562:	83 ff       	sbrs	r24, 3
     564:	08 c0       	rjmp	.+16     	; 0x576 <main+0x128>
			ECHO_INTERVAL_FLAG = 0;
     566:	87 7f       	andi	r24, 0xF7	; 247
     568:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			EMIT_TRIGGER = 1;
     56c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     570:	82 60       	ori	r24, 0x02	; 2
     572:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
		}
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     576:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     57a:	80 ff       	sbrs	r24, 0
     57c:	04 c0       	rjmp	.+8      	; 0x586 <main+0x138>
			BTN_RELEASED = 0; //TEST SERVO A
			//EMIT_TRIGGER = 1;
			SERVOA_MOVE = 1;
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	80 61       	ori	r24, 0x10	; 16
     582:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
		}
		if(SERVOA_MOVE){ //Accionamiento del SERVO A
     586:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     58a:	84 ff       	sbrs	r24, 4
     58c:	a2 cf       	rjmp	.-188    	; 0x4d2 <main+0x84>
			SERVOA_MOVE = 0;
     58e:	8f 7e       	andi	r24, 0xEF	; 239
     590:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			servoA_set_angle(0);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 41 04 	call	0x882	; 0x882 <servoA_set_angle>
			SERVOA_RESET = 1;
     59a:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     59e:	80 62       	ori	r24, 0x20	; 32
     5a0:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
     5a4:	96 cf       	rjmp	.-212    	; 0x4d2 <main+0x84>

000005a6 <initSorter>:
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};

	SystemSorter->box_ranges = &local_box_ranges;
     5a6:	20 e2       	ldi	r18, 0x20	; 32
     5a8:	31 e0       	ldi	r19, 0x01	; 1
     5aa:	fc 01       	movw	r30, r24
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18

	if(DEBUG_FLAGS_SORTER){
     5b0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     5b4:	88 23       	and	r24, r24
     5b6:	24 f4       	brge	.+8      	; 0x5c0 <initSorter+0x1a>
		printf("Matriz de dimensiones iniciada\n");
     5b8:	85 e3       	ldi	r24, 0x35	; 53
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
     5c0:	08 95       	ret

000005c2 <classify_box>:
}


box_type_t classify_box(uint8_t height_mm, sorter_system_t* SystemSorter)
{
	if (height_mm > DETECTION_IDLE_DISTANCE_MM) {
     5c2:	87 39       	cpi	r24, 0x97	; 151
     5c4:	58 f0       	brcs	.+22     	; 0x5dc <classify_box+0x1a>
		if (DEBUG_FLAGS_SORTER) {
     5c6:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     5ca:	88 23       	and	r24, r24
     5cc:	0c f0       	brlt	.+2      	; 0x5d0 <classify_box+0xe>
     5ce:	51 c0       	rjmp	.+162    	; 0x672 <classify_box+0xb0>
			printf("No hay caja presente\n");
     5d0:	84 e5       	ldi	r24, 0x54	; 84
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return NO_BOX;
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	08 95       	ret
	}

	if (height_mm < DETECTION_THRESHOLD_MIN_MM) {
     5dc:	87 33       	cpi	r24, 0x37	; 55
     5de:	58 f4       	brcc	.+22     	; 0x5f6 <classify_box+0x34>
		if (DEBUG_FLAGS_SORTER) {
     5e0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     5e4:	80 78       	andi	r24, 0x80	; 128
     5e6:	09 f4       	brne	.+2      	; 0x5ea <classify_box+0x28>
     5e8:	4b c0       	rjmp	.+150    	; 0x680 <classify_box+0xbe>
			printf("Caja fuera de rango (muy baja), descartada\n");
     5ea:	89 e6       	ldi	r24, 0x69	; 105
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return BOX_DISCARDED;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret
	}

	if (height_mm >= SorterSystem.box_ranges->box_size_a.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_a.max_height_mm) {
     5f6:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <SorterSystem>
     5fa:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <SorterSystem+0x1>
     5fe:	90 81       	ld	r25, Z
     600:	89 17       	cp	r24, r25
     602:	68 f0       	brcs	.+26     	; 0x61e <classify_box+0x5c>
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	98 17       	cp	r25, r24
     608:	50 f0       	brcs	.+20     	; 0x61e <classify_box+0x5c>
		if (DEBUG_FLAGS_SORTER) {
     60a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     60e:	88 23       	and	r24, r24
     610:	94 f5       	brge	.+100    	; 0x676 <classify_box+0xb4>
			printf("Caja tipo A\n");
     612:	84 e9       	ldi	r24, 0x94	; 148
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return BOX_SIZE_A;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	08 95       	ret
	}
	else if (height_mm >= SorterSystem.box_ranges->box_size_b.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_b.max_height_mm) {
     61e:	92 81       	ldd	r25, Z+2	; 0x02
     620:	89 17       	cp	r24, r25
     622:	68 f0       	brcs	.+26     	; 0x63e <classify_box+0x7c>
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	98 17       	cp	r25, r24
     628:	50 f0       	brcs	.+20     	; 0x63e <classify_box+0x7c>
		if (DEBUG_FLAGS_SORTER) {
     62a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     62e:	88 23       	and	r24, r24
     630:	24 f5       	brge	.+72     	; 0x67a <classify_box+0xb8>
			printf("Caja tipo B\n");
     632:	80 ea       	ldi	r24, 0xA0	; 160
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return BOX_SIZE_B;
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	08 95       	ret
	}
	else if (height_mm >= SorterSystem.box_ranges->box_size_c.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_c.max_height_mm) {
     63e:	94 81       	ldd	r25, Z+4	; 0x04
     640:	89 17       	cp	r24, r25
     642:	68 f0       	brcs	.+26     	; 0x65e <classify_box+0x9c>
     644:	95 81       	ldd	r25, Z+5	; 0x05
     646:	98 17       	cp	r25, r24
     648:	50 f0       	brcs	.+20     	; 0x65e <classify_box+0x9c>
		if (DEBUG_FLAGS_SORTER) {
     64a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     64e:	88 23       	and	r24, r24
     650:	b4 f4       	brge	.+44     	; 0x67e <classify_box+0xbc>
			printf("Caja tipo C\n");
     652:	8c ea       	ldi	r24, 0xAC	; 172
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return BOX_SIZE_C;
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	08 95       	ret
	}
	else {
		if (DEBUG_FLAGS_SORTER) {
     65e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     662:	80 78       	andi	r24, 0x80	; 128
     664:	69 f0       	breq	.+26     	; 0x680 <classify_box+0xbe>
			printf("Caja fuera de rango (descartada)\n");
     666:	88 eb       	ldi	r24, 0xB8	; 184
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		return BOX_DISCARDED;
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 95       	ret
{
	if (height_mm > DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente\n");
		}
		return NO_BOX;
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	08 95       	ret

	if (height_mm >= SorterSystem.box_ranges->box_size_a.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A\n");
		}
		return BOX_SIZE_A;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	08 95       	ret
	}
	else if (height_mm >= SorterSystem.box_ranges->box_size_b.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B\n");
		}
		return BOX_SIZE_B;
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	08 95       	ret
	}
	else if (height_mm >= SorterSystem.box_ranges->box_size_c.min_height_mm && height_mm <= SorterSystem.box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C\n");
		}
		return BOX_SIZE_C;
     67e:	83 e0       	ldi	r24, 0x03	; 3
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja fuera de rango (descartada)\n");
		}
		return BOX_DISCARDED;
	}
}
     680:	08 95       	ret

00000682 <ultraSensorTask>:


void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
     68c:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     68e:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     692:	88 23       	and	r24, r24
     694:	a4 f5       	brge	.+104    	; 0x6fe <ultraSensorTask+0x7c>
     696:	e8 81       	ld	r30, Y
     698:	f9 81       	ldd	r31, Y+1	; 0x01
     69a:	84 85       	ldd	r24, Z+12	; 0x0c
     69c:	85 ff       	sbrs	r24, 5
     69e:	2f c0       	rjmp	.+94     	; 0x6fe <ultraSensorTask+0x7c>
     6a0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     6a4:	81 ff       	sbrs	r24, 1
     6a6:	2b c0       	rjmp	.+86     	; 0x6fe <ultraSensorTask+0x7c>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     6a8:	cf 01       	movw	r24, r30
     6aa:	0e 94 57 05 	call	0xaae	; 0xaae <ultrasonic_start>
     6ae:	88 23       	and	r24, r24
     6b0:	c1 f0       	breq	.+48     	; 0x6e2 <ultraSensorTask+0x60>
		{
			if (DEBUG_FLAGS)
     6b2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     6b6:	86 ff       	sbrs	r24, 6
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <ultraSensorTask+0x40>
			{
				printf("InitHCSR04\n");
     6ba:	8e ed       	ldi	r24, 0xDE	; 222
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     6c2:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     6c6:	8f 77       	andi	r24, 0x7F	; 127
     6c8:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     6cc:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     6d0:	8d 7f       	andi	r24, 0xFD	; 253
     6d2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     6d6:	e8 81       	ld	r30, Y
     6d8:	f9 81       	ldd	r31, Y+1	; 0x01
     6da:	84 85       	ldd	r24, Z+12	; 0x0c
     6dc:	8f 7d       	andi	r24, 0xDF	; 223
     6de:	84 87       	std	Z+12, r24	; 0x0c
     6e0:	0e c0       	rjmp	.+28     	; 0x6fe <ultraSensorTask+0x7c>
		}
		else
		{
			if (DEBUG_FLAGS)
     6e2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     6e6:	86 ff       	sbrs	r24, 6
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <ultraSensorTask+0x70>
			{
				printf("ErrorInitHCSR04\n");
     6ea:	89 ed       	ldi	r24, 0xD9	; 217
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
			}
			EMIT_FAILED = 1;
     6f2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
			EMIT_TRIGGER = 0;
     6f6:	84 60       	ori	r24, 0x04	; 4
     6f8:	8d 7f       	andi	r24, 0xFD	; 253
     6fa:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     6fe:	88 81       	ld	r24, Y
     700:	99 81       	ldd	r25, Y+1	; 0x01
     702:	0e 94 85 05 	call	0xb0a	; 0xb0a <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     706:	e8 81       	ld	r30, Y
     708:	f9 81       	ldd	r31, Y+1	; 0x01
     70a:	85 85       	ldd	r24, Z+13	; 0x0d
     70c:	85 30       	cpi	r24, 0x05	; 5
     70e:	09 f0       	breq	.+2      	; 0x712 <ultraSensorTask+0x90>
     710:	82 c0       	rjmp	.+260    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     712:	84 85       	ldd	r24, Z+12	; 0x0c
     714:	88 23       	and	r24, r24
     716:	0c f0       	brlt	.+2      	; 0x71a <ultraSensorTask+0x98>
     718:	7e c0       	rjmp	.+252    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
     71a:	cf 01       	movw	r24, r30
     71c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <ultrasonic_get_distance>
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	7f 93       	push	r23
     726:	6f 93       	push	r22
     728:	89 ee       	ldi	r24, 0xE9	; 233
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 1a 06 	call	0xc34	; 0xc34 <printf>
		ultraDetector->sensor->NEW_RESULT = 0;
     734:	e8 81       	ld	r30, Y
     736:	f9 81       	ldd	r31, Y+1	; 0x01
     738:	84 85       	ldd	r24, Z+12	; 0x0c
     73a:	8f 77       	andi	r24, 0x7F	; 127
     73c:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa ? no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     73e:	e8 81       	ld	r30, Y
     740:	f9 81       	ldd	r31, Y+1	; 0x01
     742:	80 85       	ldd	r24, Z+8	; 0x08
     744:	91 85       	ldd	r25, Z+9	; 0x09
     746:	a2 85       	ldd	r26, Z+10	; 0x0a
     748:	b3 85       	ldd	r27, Z+11	; 0x0b
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	87 39       	cpi	r24, 0x97	; 151
     758:	91 05       	cpc	r25, r1
     75a:	a1 05       	cpc	r26, r1
     75c:	b1 05       	cpc	r27, r1
     75e:	b0 f0       	brcs	.+44     	; 0x78c <ultraSensorTask+0x10a>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	81 60       	ori	r24, 0x01	; 1
     764:	8a 83       	std	Y+2, r24	; 0x02

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE((*ultraDetector)) == SENSOR_WAITING_CLEAR)
     766:	98 2f       	mov	r25, r24
     768:	92 95       	swap	r25
     76a:	9f 70       	andi	r25, 0x0F	; 15
     76c:	92 30       	cpi	r25, 0x02	; 2
     76e:	51 f4       	brne	.+20     	; 0x784 <ultraSensorTask+0x102>
			{
				NIBBLEH_SET_STATE((*ultraDetector), SENSOR_IDLE);
     770:	8f 70       	andi	r24, 0x0F	; 15
     772:	8a 83       	std	Y+2, r24	; 0x02
				if (DEBUG_FLAGS_SORTER) {
     774:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     778:	88 23       	and	r24, r24
     77a:	24 f4       	brge	.+8      	; 0x784 <ultraSensorTask+0x102>
					printf("Sensor liberado de nuevo\n");
     77c:	8e ef       	ldi	r24, 0xFE	; 254
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
				}
			}

			NIBBLEH_SET_STATE((*ultraDetector), SENSOR_IDLE);
     784:	8a 81       	ldd	r24, Y+2	; 0x02
     786:	8f 70       	andi	r24, 0x0F	; 15
     788:	8a 83       	std	Y+2, r24	; 0x02
     78a:	39 c0       	rjmp	.+114    	; 0x7fe <ultraSensorTask+0x17c>
		}
		else
		{
			// Hay algo en la zona
			NIBBLEH_SET_STATE((*ultraDetector), SENSOR_DETECTING);
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	8f 70       	andi	r24, 0x0F	; 15
     790:	80 61       	ori	r24, 0x10	; 16
     792:	8a 83       	std	Y+2, r24	; 0x02
			tipo = classify_box(ultraDetector->sensor->distance_mm, &sorter->box_ranges->box_size_a);
     794:	d8 01       	movw	r26, r16
     796:	6d 91       	ld	r22, X+
     798:	7c 91       	ld	r23, X
     79a:	80 85       	ldd	r24, Z+8	; 0x08
     79c:	91 85       	ldd	r25, Z+9	; 0x09
     79e:	a2 85       	ldd	r26, Z+10	; 0x0a
     7a0:	b3 85       	ldd	r27, Z+11	; 0x0b
     7a2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <classify_box>

			if (tipo != NO_BOX)
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	31 f1       	breq	.+76     	; 0x7f6 <ultraSensorTask+0x174>
			{
				box_t nueva_caja;
				nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     7aa:	e8 81       	ld	r30, Y
     7ac:	f9 81       	ldd	r31, Y+1	; 0x01
     7ae:	40 85       	ldd	r20, Z+8	; 0x08
     7b0:	51 85       	ldd	r21, Z+9	; 0x09
     7b2:	62 85       	ldd	r22, Z+10	; 0x0a
     7b4:	73 85       	ldd	r23, Z+11	; 0x0b
				nueva_caja.flags.byte = 0;
				nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
				nueva_caja.state = BOX_MEASURED;

				// Debug de tipo
				switch (tipo)
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <ultraSensorTask+0x144>
     7ba:	a0 f0       	brcs	.+40     	; 0x7e4 <ultraSensorTask+0x162>
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	41 f0       	breq	.+16     	; 0x7d0 <ultraSensorTask+0x14e>
     7c0:	83 30       	cpi	r24, 0x03	; 3
     7c2:	59 f0       	breq	.+22     	; 0x7da <ultraSensorTask+0x158>
     7c4:	14 c0       	rjmp	.+40     	; 0x7ee <ultraSensorTask+0x16c>
				{
					case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     7c6:	87 e1       	ldi	r24, 0x17	; 23
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
     7ce:	13 c0       	rjmp	.+38     	; 0x7f6 <ultraSensorTask+0x174>
					case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     7d0:	82 e2       	ldi	r24, 0x22	; 34
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
     7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <ultraSensorTask+0x174>
					case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     7da:	8d e2       	ldi	r24, 0x2D	; 45
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
     7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <ultraSensorTask+0x174>
					case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     7e4:	88 e3       	ldi	r24, 0x38	; 56
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <ultraSensorTask+0x174>
					default: printf("Tipo no reconocido\n"); break;
     7ee:	86 e4       	ldi	r24, 0x46	; 70
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
// 				sorter->stats.count_by_type[tipo]++;
// 
// 				// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
			}

			NIBBLEH_SET_STATE((*ultraDetector), SENSOR_WAITING_CLEAR);
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	8f 70       	andi	r24, 0x0F	; 15
     7fa:	80 62       	ori	r24, 0x20	; 32
     7fc:	8a 83       	std	Y+2, r24	; 0x02
		}

		ultrasonic_init_flags(ultraDetector->sensor);
     7fe:	88 81       	ld	r24, Y
     800:	99 81       	ldd	r25, Y+1	; 0x01
     802:	0e 94 f6 04 	call	0x9ec	; 0x9ec <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;
     806:	e8 81       	ld	r30, Y
     808:	f9 81       	ldd	r31, Y+1	; 0x01
     80a:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1;
     80c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     810:	80 68       	ori	r24, 0x80	; 128
     812:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
	}

	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     816:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     81a:	80 ff       	sbrs	r24, 0
     81c:	2d c0       	rjmp	.+90     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
	{
		if (DEBUG_FLAGS)
     81e:	86 ff       	sbrs	r24, 6
     820:	04 c0       	rjmp	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			printf("HCSR04 perdio ECHO\n");
     822:	89 e5       	ldi	r24, 0x59	; 89
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}
		VEINTEMS_PASSED = 0;
     82a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
		WAITING_ECHO = 0;
     82e:	8e 7f       	andi	r24, 0xFE	; 254
     830:	87 7f       	andi	r24, 0xF7	; 247
     832:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     836:	e8 81       	ld	r30, Y
     838:	f9 81       	ldd	r31, Y+1	; 0x01
     83a:	84 85       	ldd	r24, Z+12	; 0x0c
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     840:	e8 81       	ld	r30, Y
     842:	f9 81       	ldd	r31, Y+1	; 0x01
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     848:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <bandera2>
     84c:	66 fb       	bst	r22, 6
     84e:	66 27       	eor	r22, r22
     850:	60 f9       	bld	r22, 0
     852:	88 81       	ld	r24, Y
     854:	99 81       	ldd	r25, Y+1	; 0x01
     856:	0e 94 3a 05 	call	0xa74	; 0xa74 <ultrasonic_timeout_clear>
     85a:	88 23       	and	r24, r24
     85c:	41 f0       	breq	.+16     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     85e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <bandera2>
     862:	86 ff       	sbrs	r24, 6
     864:	04 c0       	rjmp	.+8      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     866:	8c e6       	ldi	r24, 0x6C	; 108
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 30 06 	call	0xc60	; 0xc60 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     86e:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <bandera>
     872:	80 68       	ori	r24, 0x80	; 128
     874:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bandera>
	}
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <servoA_set_angle>:
#include "./../../main.h"
#include "servo_utils.h"

void servoA_set_angle(uint8_t angle)
{
	if (angle > 180) {
     882:	85 3b       	cpi	r24, 0xB5	; 181
     884:	08 f0       	brcs	.+2      	; 0x888 <servoA_set_angle+0x6>
		angle = 180;
     886:	84 eb       	ldi	r24, 0xB4	; 180
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
	( ( (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle ) / 180U );
     888:	28 2f       	mov	r18, r24
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	a0 ed       	ldi	r26, 0xD0	; 208
     88e:	b7 e0       	ldi	r27, 0x07	; 7
     890:	0e 94 0b 06 	call	0xc16	; 0xc16 <__umulhisi3>
     894:	24 eb       	ldi	r18, 0xB4	; 180
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__udivmodsi4>
{
	if (angle > 180) {
		angle = 180;
	}
	// Convertir grados a ancho de pulso (entre MIN y MAX) usando 32 bits sin signo
	pulse_width_A = SERVO_MIN_PULSE +
     8a0:	da 01       	movw	r26, r20
     8a2:	c9 01       	movw	r24, r18
     8a4:	80 53       	subi	r24, 0x30	; 48
     8a6:	98 4f       	sbci	r25, 0xF8	; 248
     8a8:	af 4f       	sbci	r26, 0xFF	; 255
     8aa:	bf 4f       	sbci	r27, 0xFF	; 255
     8ac:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse_width_A>
     8b0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse_width_A+0x1>
     8b4:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <pulse_width_A+0x2>
     8b8:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <pulse_width_A+0x3>
     8bc:	08 95       	ret

000008be <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
     8be:	8b b1       	in	r24, 0x0b	; 11
     8c0:	88 60       	ori	r24, 0x08	; 8
     8c2:	8b b9       	out	0x0b, r24	; 11
     8c4:	08 95       	ret

000008c6 <ultrasonic_hal_trigger_setLow>:
     8c6:	8b b1       	in	r24, 0x0b	; 11
     8c8:	87 7f       	andi	r24, 0xF7	; 247
     8ca:	8b b9       	out	0x0b, r24	; 11
     8cc:	08 95       	ret

000008ce <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
     8ce:	e1 e8       	ldi	r30, 0x81	; 129
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	80 83       	st	Z, r24
     8d8:	08 95       	ret

000008da <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
     8da:	e1 e8       	ldi	r30, 0x81	; 129
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	8f 7b       	andi	r24, 0xBF	; 191
     8e2:	80 83       	st	Z, r24
     8e4:	08 95       	ret

000008e6 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
     8e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
     8ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
     8ee:	88 e1       	ldi	r24, 0x18	; 24
     8f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     8fa:	08 95       	ret

000008fc <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
     8fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     900:	95 ff       	sbrs	r25, 5
     902:	fc cf       	rjmp	.-8      	; 0x8fc <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
     904:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     908:	08 95       	ret

0000090a <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
     90a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     90e:	88 23       	and	r24, r24
     910:	e4 f7       	brge	.-8      	; 0x90a <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
     912:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     916:	08 95       	ret

00000918 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
     918:	cf 93       	push	r28
     91a:	c8 2f       	mov	r28, r24
	if (c == '\n')
     91c:	8a 30       	cpi	r24, 0x0A	; 10
     91e:	19 f4       	brne	.+6      	; 0x926 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
     920:	8d e0       	ldi	r24, 0x0D	; 13
     922:	0e 94 7e 04 	call	0x8fc	; 0x8fc <USART_Transmit>
	USART_Transmit(c);
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 7e 04 	call	0x8fc	; 0x8fc <USART_Transmit>
	return 0;
}
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
     934:	0e 94 85 04 	call	0x90a	; 0x90a <USART_Receive>
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	08 95       	ret

0000093c <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
     93c:	fc 01       	movw	r30, r24
     93e:	66 87       	std	Z+14, r22	; 0x0e
     940:	08 95       	ret

00000942 <ultrasonic_calculate_distance>:
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	8c 81       	ldd	r24, Y+4	; 0x04
     94e:	9d 81       	ldd	r25, Y+5	; 0x05
     950:	ae 81       	ldd	r26, Y+6	; 0x06
     952:	bf 81       	ldd	r27, Y+7	; 0x07
     954:	48 81       	ld	r20, Y
     956:	59 81       	ldd	r21, Y+1	; 0x01
     958:	6a 81       	ldd	r22, Y+2	; 0x02
     95a:	7b 81       	ldd	r23, Y+3	; 0x03
     95c:	8c 01       	movw	r16, r24
     95e:	9d 01       	movw	r18, r26
     960:	04 1b       	sub	r16, r20
     962:	15 0b       	sbc	r17, r21
     964:	26 0b       	sbc	r18, r22
     966:	37 0b       	sbc	r19, r23
     968:	b9 01       	movw	r22, r18
     96a:	a8 01       	movw	r20, r16
     96c:	d9 01       	movw	r26, r18
     96e:	c8 01       	movw	r24, r16
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	aa 1f       	adc	r26, r26
     976:	bb 1f       	adc	r27, r27
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	aa 1f       	adc	r26, r26
     97e:	bb 1f       	adc	r27, r27
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	aa 1f       	adc	r26, r26
     986:	bb 1f       	adc	r27, r27
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	8c 01       	movw	r16, r24
     992:	9d 01       	movw	r18, r26
     994:	04 0f       	add	r16, r20
     996:	15 1f       	adc	r17, r21
     998:	26 1f       	adc	r18, r22
     99a:	37 1f       	adc	r19, r23
     99c:	c9 01       	movw	r24, r18
     99e:	b8 01       	movw	r22, r16
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	88 1f       	adc	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	20 e9       	ldi	r18, 0x90	; 144
     9aa:	31 e0       	ldi	r19, 0x01	; 1
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__udivmodsi4>
     9b4:	28 87       	std	Y+8, r18	; 0x08
     9b6:	39 87       	std	Y+9, r19	; 0x09
     9b8:	4a 87       	std	Y+10, r20	; 0x0a
     9ba:	5b 87       	std	Y+11, r21	; 0x0b
     9bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     9be:	80 68       	ori	r24, 0x80	; 128
     9c0:	8c 87       	std	Y+12, r24	; 0x0c
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	08 95       	ret

000009cc <ultrasonic_get_distance>:
     9cc:	fc 01       	movw	r30, r24
     9ce:	60 85       	ldd	r22, Z+8	; 0x08
     9d0:	71 85       	ldd	r23, Z+9	; 0x09
     9d2:	82 85       	ldd	r24, Z+10	; 0x0a
     9d4:	93 85       	ldd	r25, Z+11	; 0x0b
     9d6:	08 95       	ret

000009d8 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
     9d8:	dc 01       	movw	r26, r24
     9da:	1f 96       	adiw	r26, 0x0f	; 15
     9dc:	ed 91       	ld	r30, X+
     9de:	fc 91       	ld	r31, X
     9e0:	50 97       	sbiw	r26, 0x10	; 16
     9e2:	30 97       	sbiw	r30, 0x00	; 0
     9e4:	11 f0       	breq	.+4      	; 0x9ea <ultrasonic_print+0x12>
     9e6:	cb 01       	movw	r24, r22
		us->print_method(message);
     9e8:	09 95       	icall
     9ea:	08 95       	ret

000009ec <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
     9f2:	18 82       	st	Y, r1
     9f4:	19 82       	std	Y+1, r1	; 0x01
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
     9fa:	1c 82       	std	Y+4, r1	; 0x04
     9fc:	1d 82       	std	Y+5, r1	; 0x05
     9fe:	1e 82       	std	Y+6, r1	; 0x06
     a00:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
     a02:	18 86       	std	Y+8, r1	; 0x08
     a04:	19 86       	std	Y+9, r1	; 0x09
     a06:	1a 86       	std	Y+10, r1	; 0x0a
     a08:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
     a0a:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
     a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a0e:	80 62       	ori	r24, 0x20	; 32
     a10:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
     a12:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
     a14:	0e 94 67 04 	call	0x8ce	; 0x8ce <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
     a18:	8f 85       	ldd	r24, Y+15	; 0x0f
     a1a:	98 89       	ldd	r25, Y+16	; 0x10
     a1c:	89 2b       	or	r24, r25
     a1e:	41 f0       	breq	.+16     	; 0xa30 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
     a20:	8e 85       	ldd	r24, Y+14	; 0x0e
     a22:	88 23       	and	r24, r24
     a24:	29 f0       	breq	.+10     	; 0xa30 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
     a26:	6e e8       	ldi	r22, 0x8E	; 142
     a28:	72 e0       	ldi	r23, 0x02	; 2
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
		}
	}
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
     a42:	0e 94 f6 04 	call	0x9ec	; 0x9ec <ultrasonic_init_flags>
	us->debugMode = true;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
     a4a:	01 15       	cp	r16, r1
     a4c:	11 05       	cpc	r17, r1
     a4e:	19 f4       	brne	.+6      	; 0xa56 <ultrasonic_init+0x20>
		us->print_method = NULL;
     a50:	18 8a       	std	Y+16, r1	; 0x10
     a52:	1f 86       	std	Y+15, r1	; 0x0f
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
     a56:	18 8b       	std	Y+16, r17	; 0x10
     a58:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
     a5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a5c:	88 23       	and	r24, r24
     a5e:	29 f0       	breq	.+10     	; 0xa6a <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
     a60:	6d ea       	ldi	r22, 0xAD	; 173
     a62:	72 e0       	ldi	r23, 0x02	; 2
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
		}
	}
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret

00000a74 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
     a7a:	fc 01       	movw	r30, r24
     a7c:	25 85       	ldd	r18, Z+13	; 0x0d
     a7e:	26 30       	cpi	r18, 0x06	; 6
     a80:	71 f4       	brne	.+28     	; 0xa9e <ultrasonic_timeout_clear+0x2a>
     a82:	16 2f       	mov	r17, r22
     a84:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
     a86:	0e 94 f6 04 	call	0x9ec	; 0x9ec <ultrasonic_init_flags>
		us->debugMode = state;
     a8a:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
     a8c:	1e 85       	ldd	r17, Y+14	; 0x0e
     a8e:	11 23       	and	r17, r17
     a90:	41 f0       	breq	.+16     	; 0xaa2 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
     a92:	6c e6       	ldi	r22, 0x6C	; 108
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
     aa2:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
     aa4:	81 2f       	mov	r24, r17
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	08 95       	ret

00000aae <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
     aae:	cf 93       	push	r28
     ab0:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
     ab2:	85 85       	ldd	r24, Z+13	; 0x0d
     ab4:	88 23       	and	r24, r24
     ab6:	19 f0       	breq	.+6      	; 0xabe <ultrasonic_start+0x10>
     ab8:	85 85       	ldd	r24, Z+13	; 0x0d
     aba:	85 30       	cpi	r24, 0x05	; 5
     abc:	c1 f4       	brne	.+48     	; 0xaee <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
     abe:	84 85       	ldd	r24, Z+12	; 0x0c
     ac0:	85 ff       	sbrs	r24, 5
     ac2:	0b c0       	rjmp	.+22     	; 0xada <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
     ac8:	c6 85       	ldd	r28, Z+14	; 0x0e
     aca:	cc 23       	and	r28, r28
     acc:	d1 f0       	breq	.+52     	; 0xb02 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
     ace:	69 ec       	ldi	r22, 0xC9	; 201
     ad0:	72 e0       	ldi	r23, 0x02	; 2
     ad2:	cf 01       	movw	r24, r30
     ad4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
     ad8:	15 c0       	rjmp	.+42     	; 0xb04 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
     ada:	c6 85       	ldd	r28, Z+14	; 0x0e
     adc:	cc 23       	and	r28, r28
     ade:	91 f0       	breq	.+36     	; 0xb04 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
     ae0:	68 ef       	ldi	r22, 0xF8	; 248
     ae2:	72 e0       	ldi	r23, 0x02	; 2
     ae4:	cf 01       	movw	r24, r30
     ae6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
     aea:	c0 e0       	ldi	r28, 0x00	; 0
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
     aee:	c6 85       	ldd	r28, Z+14	; 0x0e
     af0:	cc 23       	and	r28, r28
     af2:	41 f0       	breq	.+16     	; 0xb04 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
     af4:	6f e2       	ldi	r22, 0x2F	; 47
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	cf 01       	movw	r24, r30
     afa:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
			}
	}
	return false;
     afe:	c0 e0       	ldi	r28, 0x00	; 0
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
     b02:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
     b04:	8c 2f       	mov	r24, r28
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	ec 01       	movw	r28, r24
	switch (us->state)
     b10:	8d 85       	ldd	r24, Y+13	; 0x0d
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	71 f1       	breq	.+92     	; 0xb72 <ultrasonic_update+0x68>
     b16:	28 f4       	brcc	.+10     	; 0xb22 <ultrasonic_update+0x18>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	49 f0       	breq	.+18     	; 0xb2e <ultrasonic_update+0x24>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	a1 f0       	breq	.+40     	; 0xb48 <ultrasonic_update+0x3e>
     b20:	55 c0       	rjmp	.+170    	; 0xbcc <ultrasonic_update+0xc2>
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	e1 f1       	breq	.+120    	; 0xb9e <ultrasonic_update+0x94>
     b26:	86 30       	cpi	r24, 0x06	; 6
     b28:	09 f4       	brne	.+2      	; 0xb2c <ultrasonic_update+0x22>
     b2a:	4d c0       	rjmp	.+154    	; 0xbc6 <ultrasonic_update+0xbc>
     b2c:	4f c0       	rjmp	.+158    	; 0xbcc <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
     b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b30:	81 ff       	sbrs	r24, 1
     b32:	4c c0       	rjmp	.+152    	; 0xbcc <ultrasonic_update+0xc2>
				if(us->debugMode){
     b34:	8e 85       	ldd	r24, Y+14	; 0x0e
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <ultrasonic_update+0x32>
     b3a:	48 c0       	rjmp	.+144    	; 0xbcc <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
     b3c:	6c e5       	ldi	r22, 0x5C	; 92
     b3e:	73 e0       	ldi	r23, 0x03	; 3
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
     b46:	42 c0       	rjmp	.+132    	; 0xbcc <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
     b48:	8c 85       	ldd	r24, Y+12	; 0x0c
     b4a:	84 fd       	sbrc	r24, 4
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
     b52:	0e 94 6d 04 	call	0x8da	; 0x8da <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
     b56:	8e 85       	ldd	r24, Y+14	; 0x0e
     b58:	88 23       	and	r24, r24
     b5a:	29 f0       	breq	.+10     	; 0xb66 <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
     b5c:	6b e7       	ldi	r22, 0x7B	; 123
     b5e:	73 e0       	ldi	r23, 0x03	; 3
     b60:	ce 01       	movw	r24, r28
     b62:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
     b66:	8c 85       	ldd	r24, Y+12	; 0x0c
     b68:	83 ff       	sbrs	r24, 3
     b6a:	30 c0       	rjmp	.+96     	; 0xbcc <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	8d 87       	std	Y+13, r24	; 0x0d
     b70:	2d c0       	rjmp	.+90     	; 0xbcc <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
     b72:	8c 85       	ldd	r24, Y+12	; 0x0c
     b74:	86 ff       	sbrs	r24, 6
     b76:	0d c0       	rjmp	.+26     	; 0xb92 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
     b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
     b7e:	88 23       	and	r24, r24
     b80:	29 f0       	breq	.+10     	; 0xb8c <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
     b82:	68 e9       	ldi	r22, 0x98	; 152
     b84:	73 e0       	ldi	r23, 0x03	; 3
     b86:	ce 01       	movw	r24, r28
     b88:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
     b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8e:	84 60       	ori	r24, 0x04	; 4
     b90:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
     b92:	8c 85       	ldd	r24, Y+12	; 0x0c
     b94:	83 ff       	sbrs	r24, 3
     b96:	1a c0       	rjmp	.+52     	; 0xbcc <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	8d 87       	std	Y+13, r24	; 0x0d
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
     b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba0:	82 ff       	sbrs	r24, 2
     ba2:	14 c0       	rjmp	.+40     	; 0xbcc <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 a1 04 	call	0x942	; 0x942 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
     baa:	8c 85       	ldd	r24, Y+12	; 0x0c
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
     bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
     bb2:	88 23       	and	r24, r24
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
     bb6:	6f ea       	ldi	r22, 0xAF	; 175
     bb8:	73 e0       	ldi	r23, 0x03	; 3
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
     bc0:	85 e0       	ldi	r24, 0x05	; 5
     bc2:	8d 87       	std	Y+13, r24	; 0x0d
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
     bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <__udivmodsi4>:
     bd2:	a1 e2       	ldi	r26, 0x21	; 33
     bd4:	1a 2e       	mov	r1, r26
     bd6:	aa 1b       	sub	r26, r26
     bd8:	bb 1b       	sub	r27, r27
     bda:	fd 01       	movw	r30, r26
     bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <__udivmodsi4_ep>

00000bde <__udivmodsi4_loop>:
     bde:	aa 1f       	adc	r26, r26
     be0:	bb 1f       	adc	r27, r27
     be2:	ee 1f       	adc	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	a2 17       	cp	r26, r18
     be8:	b3 07       	cpc	r27, r19
     bea:	e4 07       	cpc	r30, r20
     bec:	f5 07       	cpc	r31, r21
     bee:	20 f0       	brcs	.+8      	; 0xbf8 <__udivmodsi4_ep>
     bf0:	a2 1b       	sub	r26, r18
     bf2:	b3 0b       	sbc	r27, r19
     bf4:	e4 0b       	sbc	r30, r20
     bf6:	f5 0b       	sbc	r31, r21

00000bf8 <__udivmodsi4_ep>:
     bf8:	66 1f       	adc	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	1a 94       	dec	r1
     c02:	69 f7       	brne	.-38     	; 0xbde <__udivmodsi4_loop>
     c04:	60 95       	com	r22
     c06:	70 95       	com	r23
     c08:	80 95       	com	r24
     c0a:	90 95       	com	r25
     c0c:	9b 01       	movw	r18, r22
     c0e:	ac 01       	movw	r20, r24
     c10:	bd 01       	movw	r22, r26
     c12:	cf 01       	movw	r24, r30
     c14:	08 95       	ret

00000c16 <__umulhisi3>:
     c16:	a2 9f       	mul	r26, r18
     c18:	b0 01       	movw	r22, r0
     c1a:	b3 9f       	mul	r27, r19
     c1c:	c0 01       	movw	r24, r0
     c1e:	a3 9f       	mul	r26, r19
     c20:	70 0d       	add	r23, r0
     c22:	81 1d       	adc	r24, r1
     c24:	11 24       	eor	r1, r1
     c26:	91 1d       	adc	r25, r1
     c28:	b2 9f       	mul	r27, r18
     c2a:	70 0d       	add	r23, r0
     c2c:	81 1d       	adc	r24, r1
     c2e:	11 24       	eor	r1, r1
     c30:	91 1d       	adc	r25, r1
     c32:	08 95       	ret

00000c34 <printf>:
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e0 e2       	ldi	r30, 0x20	; 32
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__prologue_saves__+0x20>
     c40:	ae 01       	movw	r20, r28
     c42:	4b 5f       	subi	r20, 0xFB	; 251
     c44:	5f 4f       	sbci	r21, 0xFF	; 255
     c46:	fa 01       	movw	r30, r20
     c48:	61 91       	ld	r22, Z+
     c4a:	71 91       	ld	r23, Z+
     c4c:	af 01       	movw	r20, r30
     c4e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <__iob+0x2>
     c52:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <__iob+0x3>
     c56:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vfprintf>
     c5a:	e2 e0       	ldi	r30, 0x02	; 2
     c5c:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__epilogue_restores__+0x20>

00000c60 <puts>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <__iob+0x2>
     c6c:	f0 91 18 04 	lds	r31, 0x0418	; 0x800418 <__iob+0x3>
     c70:	23 81       	ldd	r18, Z+3	; 0x03
     c72:	21 ff       	sbrs	r18, 1
     c74:	1b c0       	rjmp	.+54     	; 0xcac <puts+0x4c>
     c76:	8c 01       	movw	r16, r24
     c78:	d0 e0       	ldi	r29, 0x00	; 0
     c7a:	c0 e0       	ldi	r28, 0x00	; 0
     c7c:	f8 01       	movw	r30, r16
     c7e:	81 91       	ld	r24, Z+
     c80:	8f 01       	movw	r16, r30
     c82:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <__iob+0x2>
     c86:	70 91 18 04 	lds	r23, 0x0418	; 0x800418 <__iob+0x3>
     c8a:	db 01       	movw	r26, r22
     c8c:	18 96       	adiw	r26, 0x08	; 8
     c8e:	ed 91       	ld	r30, X+
     c90:	fc 91       	ld	r31, X
     c92:	19 97       	sbiw	r26, 0x09	; 9
     c94:	88 23       	and	r24, r24
     c96:	31 f0       	breq	.+12     	; 0xca4 <puts+0x44>
     c98:	09 95       	icall
     c9a:	89 2b       	or	r24, r25
     c9c:	79 f3       	breq	.-34     	; 0xc7c <puts+0x1c>
     c9e:	df ef       	ldi	r29, 0xFF	; 255
     ca0:	cf ef       	ldi	r28, 0xFF	; 255
     ca2:	ec cf       	rjmp	.-40     	; 0xc7c <puts+0x1c>
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	09 95       	icall
     ca8:	89 2b       	or	r24, r25
     caa:	19 f0       	breq	.+6      	; 0xcb2 <puts+0x52>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <puts+0x56>
     cb2:	8d 2f       	mov	r24, r29
     cb4:	9c 2f       	mov	r25, r28
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <vfprintf>:
     cc0:	ab e0       	ldi	r26, 0x0B	; 11
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e6       	ldi	r30, 0x66	; 102
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__prologue_saves__>
     ccc:	6c 01       	movw	r12, r24
     cce:	7b 01       	movw	r14, r22
     cd0:	8a 01       	movw	r16, r20
     cd2:	fc 01       	movw	r30, r24
     cd4:	17 82       	std	Z+7, r1	; 0x07
     cd6:	16 82       	std	Z+6, r1	; 0x06
     cd8:	83 81       	ldd	r24, Z+3	; 0x03
     cda:	81 ff       	sbrs	r24, 1
     cdc:	cc c1       	rjmp	.+920    	; 0x1076 <vfprintf+0x3b6>
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	3c 01       	movw	r6, r24
     ce4:	f6 01       	movw	r30, r12
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	f7 01       	movw	r30, r14
     cea:	93 fd       	sbrc	r25, 3
     cec:	85 91       	lpm	r24, Z+
     cee:	93 ff       	sbrs	r25, 3
     cf0:	81 91       	ld	r24, Z+
     cf2:	7f 01       	movw	r14, r30
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <vfprintf+0x3a>
     cf8:	ba c1       	rjmp	.+884    	; 0x106e <vfprintf+0x3ae>
     cfa:	85 32       	cpi	r24, 0x25	; 37
     cfc:	39 f4       	brne	.+14     	; 0xd0c <vfprintf+0x4c>
     cfe:	93 fd       	sbrc	r25, 3
     d00:	85 91       	lpm	r24, Z+
     d02:	93 ff       	sbrs	r25, 3
     d04:	81 91       	ld	r24, Z+
     d06:	7f 01       	movw	r14, r30
     d08:	85 32       	cpi	r24, 0x25	; 37
     d0a:	29 f4       	brne	.+10     	; 0xd16 <vfprintf+0x56>
     d0c:	b6 01       	movw	r22, r12
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
     d14:	e7 cf       	rjmp	.-50     	; 0xce4 <vfprintf+0x24>
     d16:	91 2c       	mov	r9, r1
     d18:	21 2c       	mov	r2, r1
     d1a:	31 2c       	mov	r3, r1
     d1c:	ff e1       	ldi	r31, 0x1F	; 31
     d1e:	f3 15       	cp	r31, r3
     d20:	d8 f0       	brcs	.+54     	; 0xd58 <vfprintf+0x98>
     d22:	8b 32       	cpi	r24, 0x2B	; 43
     d24:	79 f0       	breq	.+30     	; 0xd44 <vfprintf+0x84>
     d26:	38 f4       	brcc	.+14     	; 0xd36 <vfprintf+0x76>
     d28:	80 32       	cpi	r24, 0x20	; 32
     d2a:	79 f0       	breq	.+30     	; 0xd4a <vfprintf+0x8a>
     d2c:	83 32       	cpi	r24, 0x23	; 35
     d2e:	a1 f4       	brne	.+40     	; 0xd58 <vfprintf+0x98>
     d30:	23 2d       	mov	r18, r3
     d32:	20 61       	ori	r18, 0x10	; 16
     d34:	1d c0       	rjmp	.+58     	; 0xd70 <vfprintf+0xb0>
     d36:	8d 32       	cpi	r24, 0x2D	; 45
     d38:	61 f0       	breq	.+24     	; 0xd52 <vfprintf+0x92>
     d3a:	80 33       	cpi	r24, 0x30	; 48
     d3c:	69 f4       	brne	.+26     	; 0xd58 <vfprintf+0x98>
     d3e:	23 2d       	mov	r18, r3
     d40:	21 60       	ori	r18, 0x01	; 1
     d42:	16 c0       	rjmp	.+44     	; 0xd70 <vfprintf+0xb0>
     d44:	83 2d       	mov	r24, r3
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	38 2e       	mov	r3, r24
     d4a:	e3 2d       	mov	r30, r3
     d4c:	e4 60       	ori	r30, 0x04	; 4
     d4e:	3e 2e       	mov	r3, r30
     d50:	2a c0       	rjmp	.+84     	; 0xda6 <vfprintf+0xe6>
     d52:	f3 2d       	mov	r31, r3
     d54:	f8 60       	ori	r31, 0x08	; 8
     d56:	1d c0       	rjmp	.+58     	; 0xd92 <vfprintf+0xd2>
     d58:	37 fc       	sbrc	r3, 7
     d5a:	2d c0       	rjmp	.+90     	; 0xdb6 <vfprintf+0xf6>
     d5c:	20 ed       	ldi	r18, 0xD0	; 208
     d5e:	28 0f       	add	r18, r24
     d60:	2a 30       	cpi	r18, 0x0A	; 10
     d62:	40 f0       	brcs	.+16     	; 0xd74 <vfprintf+0xb4>
     d64:	8e 32       	cpi	r24, 0x2E	; 46
     d66:	b9 f4       	brne	.+46     	; 0xd96 <vfprintf+0xd6>
     d68:	36 fc       	sbrc	r3, 6
     d6a:	81 c1       	rjmp	.+770    	; 0x106e <vfprintf+0x3ae>
     d6c:	23 2d       	mov	r18, r3
     d6e:	20 64       	ori	r18, 0x40	; 64
     d70:	32 2e       	mov	r3, r18
     d72:	19 c0       	rjmp	.+50     	; 0xda6 <vfprintf+0xe6>
     d74:	36 fe       	sbrs	r3, 6
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0xc4>
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	98 9e       	mul	r9, r24
     d7c:	20 0d       	add	r18, r0
     d7e:	11 24       	eor	r1, r1
     d80:	92 2e       	mov	r9, r18
     d82:	11 c0       	rjmp	.+34     	; 0xda6 <vfprintf+0xe6>
     d84:	ea e0       	ldi	r30, 0x0A	; 10
     d86:	2e 9e       	mul	r2, r30
     d88:	20 0d       	add	r18, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	22 2e       	mov	r2, r18
     d8e:	f3 2d       	mov	r31, r3
     d90:	f0 62       	ori	r31, 0x20	; 32
     d92:	3f 2e       	mov	r3, r31
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <vfprintf+0xe6>
     d96:	8c 36       	cpi	r24, 0x6C	; 108
     d98:	21 f4       	brne	.+8      	; 0xda2 <vfprintf+0xe2>
     d9a:	83 2d       	mov	r24, r3
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	38 2e       	mov	r3, r24
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0xe6>
     da2:	88 36       	cpi	r24, 0x68	; 104
     da4:	41 f4       	brne	.+16     	; 0xdb6 <vfprintf+0xf6>
     da6:	f7 01       	movw	r30, r14
     da8:	93 fd       	sbrc	r25, 3
     daa:	85 91       	lpm	r24, Z+
     dac:	93 ff       	sbrs	r25, 3
     dae:	81 91       	ld	r24, Z+
     db0:	7f 01       	movw	r14, r30
     db2:	81 11       	cpse	r24, r1
     db4:	b3 cf       	rjmp	.-154    	; 0xd1c <vfprintf+0x5c>
     db6:	98 2f       	mov	r25, r24
     db8:	9f 7d       	andi	r25, 0xDF	; 223
     dba:	95 54       	subi	r25, 0x45	; 69
     dbc:	93 30       	cpi	r25, 0x03	; 3
     dbe:	28 f4       	brcc	.+10     	; 0xdca <vfprintf+0x10a>
     dc0:	0c 5f       	subi	r16, 0xFC	; 252
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	9f e3       	ldi	r25, 0x3F	; 63
     dc6:	99 83       	std	Y+1, r25	; 0x01
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <vfprintf+0x124>
     dca:	83 36       	cpi	r24, 0x63	; 99
     dcc:	31 f0       	breq	.+12     	; 0xdda <vfprintf+0x11a>
     dce:	83 37       	cpi	r24, 0x73	; 115
     dd0:	71 f0       	breq	.+28     	; 0xdee <vfprintf+0x12e>
     dd2:	83 35       	cpi	r24, 0x53	; 83
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <vfprintf+0x118>
     dd6:	59 c0       	rjmp	.+178    	; 0xe8a <vfprintf+0x1ca>
     dd8:	21 c0       	rjmp	.+66     	; 0xe1c <vfprintf+0x15c>
     dda:	f8 01       	movw	r30, r16
     ddc:	80 81       	ld	r24, Z
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	0e 5f       	subi	r16, 0xFE	; 254
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	88 24       	eor	r8, r8
     de6:	83 94       	inc	r8
     de8:	91 2c       	mov	r9, r1
     dea:	53 01       	movw	r10, r6
     dec:	13 c0       	rjmp	.+38     	; 0xe14 <vfprintf+0x154>
     dee:	28 01       	movw	r4, r16
     df0:	f2 e0       	ldi	r31, 0x02	; 2
     df2:	4f 0e       	add	r4, r31
     df4:	51 1c       	adc	r5, r1
     df6:	f8 01       	movw	r30, r16
     df8:	a0 80       	ld	r10, Z
     dfa:	b1 80       	ldd	r11, Z+1	; 0x01
     dfc:	36 fe       	sbrs	r3, 6
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <vfprintf+0x146>
     e00:	69 2d       	mov	r22, r9
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0x14a>
     e06:	6f ef       	ldi	r22, 0xFF	; 255
     e08:	7f ef       	ldi	r23, 0xFF	; 255
     e0a:	c5 01       	movw	r24, r10
     e0c:	0e 94 4c 08 	call	0x1098	; 0x1098 <strnlen>
     e10:	4c 01       	movw	r8, r24
     e12:	82 01       	movw	r16, r4
     e14:	f3 2d       	mov	r31, r3
     e16:	ff 77       	andi	r31, 0x7F	; 127
     e18:	3f 2e       	mov	r3, r31
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <vfprintf+0x188>
     e1c:	28 01       	movw	r4, r16
     e1e:	22 e0       	ldi	r18, 0x02	; 2
     e20:	42 0e       	add	r4, r18
     e22:	51 1c       	adc	r5, r1
     e24:	f8 01       	movw	r30, r16
     e26:	a0 80       	ld	r10, Z
     e28:	b1 80       	ldd	r11, Z+1	; 0x01
     e2a:	36 fe       	sbrs	r3, 6
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x174>
     e2e:	69 2d       	mov	r22, r9
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x178>
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	7f ef       	ldi	r23, 0xFF	; 255
     e38:	c5 01       	movw	r24, r10
     e3a:	0e 94 41 08 	call	0x1082	; 0x1082 <strnlen_P>
     e3e:	4c 01       	movw	r8, r24
     e40:	f3 2d       	mov	r31, r3
     e42:	f0 68       	ori	r31, 0x80	; 128
     e44:	3f 2e       	mov	r3, r31
     e46:	82 01       	movw	r16, r4
     e48:	33 fc       	sbrc	r3, 3
     e4a:	1b c0       	rjmp	.+54     	; 0xe82 <vfprintf+0x1c2>
     e4c:	82 2d       	mov	r24, r2
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	88 16       	cp	r8, r24
     e52:	99 06       	cpc	r9, r25
     e54:	b0 f4       	brcc	.+44     	; 0xe82 <vfprintf+0x1c2>
     e56:	b6 01       	movw	r22, r12
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
     e60:	2a 94       	dec	r2
     e62:	f4 cf       	rjmp	.-24     	; 0xe4c <vfprintf+0x18c>
     e64:	f5 01       	movw	r30, r10
     e66:	37 fc       	sbrc	r3, 7
     e68:	85 91       	lpm	r24, Z+
     e6a:	37 fe       	sbrs	r3, 7
     e6c:	81 91       	ld	r24, Z+
     e6e:	5f 01       	movw	r10, r30
     e70:	b6 01       	movw	r22, r12
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
     e78:	21 10       	cpse	r2, r1
     e7a:	2a 94       	dec	r2
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	82 1a       	sub	r8, r18
     e80:	91 08       	sbc	r9, r1
     e82:	81 14       	cp	r8, r1
     e84:	91 04       	cpc	r9, r1
     e86:	71 f7       	brne	.-36     	; 0xe64 <vfprintf+0x1a4>
     e88:	e8 c0       	rjmp	.+464    	; 0x105a <vfprintf+0x39a>
     e8a:	84 36       	cpi	r24, 0x64	; 100
     e8c:	11 f0       	breq	.+4      	; 0xe92 <vfprintf+0x1d2>
     e8e:	89 36       	cpi	r24, 0x69	; 105
     e90:	41 f5       	brne	.+80     	; 0xee2 <vfprintf+0x222>
     e92:	f8 01       	movw	r30, r16
     e94:	37 fe       	sbrs	r3, 7
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <vfprintf+0x1e6>
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	0c 5f       	subi	r16, 0xFC	; 252
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <vfprintf+0x1f6>
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	07 2e       	mov	r0, r23
     eac:	00 0c       	add	r0, r0
     eae:	88 0b       	sbc	r24, r24
     eb0:	99 0b       	sbc	r25, r25
     eb2:	0e 5f       	subi	r16, 0xFE	; 254
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	f3 2d       	mov	r31, r3
     eb8:	ff 76       	andi	r31, 0x6F	; 111
     eba:	3f 2e       	mov	r3, r31
     ebc:	97 ff       	sbrs	r25, 7
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <vfprintf+0x212>
     ec0:	90 95       	com	r25
     ec2:	80 95       	com	r24
     ec4:	70 95       	com	r23
     ec6:	61 95       	neg	r22
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	f0 68       	ori	r31, 0x80	; 128
     ed0:	3f 2e       	mov	r3, r31
     ed2:	2a e0       	ldi	r18, 0x0A	; 10
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a3 01       	movw	r20, r6
     ed8:	0e 94 93 08 	call	0x1126	; 0x1126 <__ultoa_invert>
     edc:	88 2e       	mov	r8, r24
     ede:	86 18       	sub	r8, r6
     ee0:	45 c0       	rjmp	.+138    	; 0xf6c <vfprintf+0x2ac>
     ee2:	85 37       	cpi	r24, 0x75	; 117
     ee4:	31 f4       	brne	.+12     	; 0xef2 <vfprintf+0x232>
     ee6:	23 2d       	mov	r18, r3
     ee8:	2f 7e       	andi	r18, 0xEF	; 239
     eea:	b2 2e       	mov	r11, r18
     eec:	2a e0       	ldi	r18, 0x0A	; 10
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	25 c0       	rjmp	.+74     	; 0xf3c <vfprintf+0x27c>
     ef2:	93 2d       	mov	r25, r3
     ef4:	99 7f       	andi	r25, 0xF9	; 249
     ef6:	b9 2e       	mov	r11, r25
     ef8:	8f 36       	cpi	r24, 0x6F	; 111
     efa:	c1 f0       	breq	.+48     	; 0xf2c <vfprintf+0x26c>
     efc:	18 f4       	brcc	.+6      	; 0xf04 <vfprintf+0x244>
     efe:	88 35       	cpi	r24, 0x58	; 88
     f00:	79 f0       	breq	.+30     	; 0xf20 <vfprintf+0x260>
     f02:	b5 c0       	rjmp	.+362    	; 0x106e <vfprintf+0x3ae>
     f04:	80 37       	cpi	r24, 0x70	; 112
     f06:	19 f0       	breq	.+6      	; 0xf0e <vfprintf+0x24e>
     f08:	88 37       	cpi	r24, 0x78	; 120
     f0a:	21 f0       	breq	.+8      	; 0xf14 <vfprintf+0x254>
     f0c:	b0 c0       	rjmp	.+352    	; 0x106e <vfprintf+0x3ae>
     f0e:	e9 2f       	mov	r30, r25
     f10:	e0 61       	ori	r30, 0x10	; 16
     f12:	be 2e       	mov	r11, r30
     f14:	b4 fe       	sbrs	r11, 4
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <vfprintf+0x272>
     f18:	fb 2d       	mov	r31, r11
     f1a:	f4 60       	ori	r31, 0x04	; 4
     f1c:	bf 2e       	mov	r11, r31
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <vfprintf+0x272>
     f20:	34 fe       	sbrs	r3, 4
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <vfprintf+0x278>
     f24:	29 2f       	mov	r18, r25
     f26:	26 60       	ori	r18, 0x06	; 6
     f28:	b2 2e       	mov	r11, r18
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <vfprintf+0x278>
     f2c:	28 e0       	ldi	r18, 0x08	; 8
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <vfprintf+0x27c>
     f32:	20 e1       	ldi	r18, 0x10	; 16
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <vfprintf+0x27c>
     f38:	20 e1       	ldi	r18, 0x10	; 16
     f3a:	32 e0       	ldi	r19, 0x02	; 2
     f3c:	f8 01       	movw	r30, r16
     f3e:	b7 fe       	sbrs	r11, 7
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <vfprintf+0x290>
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	0c 5f       	subi	r16, 0xFC	; 252
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x29c>
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 5f       	subi	r16, 0xFE	; 254
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	a3 01       	movw	r20, r6
     f5e:	0e 94 93 08 	call	0x1126	; 0x1126 <__ultoa_invert>
     f62:	88 2e       	mov	r8, r24
     f64:	86 18       	sub	r8, r6
     f66:	fb 2d       	mov	r31, r11
     f68:	ff 77       	andi	r31, 0x7F	; 127
     f6a:	3f 2e       	mov	r3, r31
     f6c:	36 fe       	sbrs	r3, 6
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <vfprintf+0x2ca>
     f70:	23 2d       	mov	r18, r3
     f72:	2e 7f       	andi	r18, 0xFE	; 254
     f74:	a2 2e       	mov	r10, r18
     f76:	89 14       	cp	r8, r9
     f78:	58 f4       	brcc	.+22     	; 0xf90 <vfprintf+0x2d0>
     f7a:	34 fe       	sbrs	r3, 4
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <vfprintf+0x2d4>
     f7e:	32 fc       	sbrc	r3, 2
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <vfprintf+0x2d4>
     f82:	83 2d       	mov	r24, r3
     f84:	8e 7e       	andi	r24, 0xEE	; 238
     f86:	a8 2e       	mov	r10, r24
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <vfprintf+0x2d4>
     f8a:	b8 2c       	mov	r11, r8
     f8c:	a3 2c       	mov	r10, r3
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x2d6>
     f90:	b8 2c       	mov	r11, r8
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <vfprintf+0x2d6>
     f94:	b9 2c       	mov	r11, r9
     f96:	a4 fe       	sbrs	r10, 4
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <vfprintf+0x2f8>
     f9a:	fe 01       	movw	r30, r28
     f9c:	e8 0d       	add	r30, r8
     f9e:	f1 1d       	adc	r31, r1
     fa0:	80 81       	ld	r24, Z
     fa2:	80 33       	cpi	r24, 0x30	; 48
     fa4:	21 f4       	brne	.+8      	; 0xfae <vfprintf+0x2ee>
     fa6:	9a 2d       	mov	r25, r10
     fa8:	99 7e       	andi	r25, 0xE9	; 233
     faa:	a9 2e       	mov	r10, r25
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <vfprintf+0x300>
     fae:	a2 fe       	sbrs	r10, 2
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <vfprintf+0x2fe>
     fb2:	b3 94       	inc	r11
     fb4:	b3 94       	inc	r11
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <vfprintf+0x300>
     fb8:	8a 2d       	mov	r24, r10
     fba:	86 78       	andi	r24, 0x86	; 134
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0x300>
     fbe:	b3 94       	inc	r11
     fc0:	a3 fc       	sbrc	r10, 3
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <vfprintf+0x326>
     fc4:	a0 fe       	sbrs	r10, 0
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x314>
     fc8:	b2 14       	cp	r11, r2
     fca:	88 f4       	brcc	.+34     	; 0xfee <vfprintf+0x32e>
     fcc:	28 0c       	add	r2, r8
     fce:	92 2c       	mov	r9, r2
     fd0:	9b 18       	sub	r9, r11
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <vfprintf+0x330>
     fd4:	b2 14       	cp	r11, r2
     fd6:	60 f4       	brcc	.+24     	; 0xff0 <vfprintf+0x330>
     fd8:	b6 01       	movw	r22, r12
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
     fe2:	b3 94       	inc	r11
     fe4:	f7 cf       	rjmp	.-18     	; 0xfd4 <vfprintf+0x314>
     fe6:	b2 14       	cp	r11, r2
     fe8:	18 f4       	brcc	.+6      	; 0xff0 <vfprintf+0x330>
     fea:	2b 18       	sub	r2, r11
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0x332>
     fee:	98 2c       	mov	r9, r8
     ff0:	21 2c       	mov	r2, r1
     ff2:	a4 fe       	sbrs	r10, 4
     ff4:	10 c0       	rjmp	.+32     	; 0x1016 <vfprintf+0x356>
     ff6:	b6 01       	movw	r22, r12
     ff8:	80 e3       	ldi	r24, 0x30	; 48
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
    1000:	a2 fe       	sbrs	r10, 2
    1002:	17 c0       	rjmp	.+46     	; 0x1032 <vfprintf+0x372>
    1004:	a1 fc       	sbrc	r10, 1
    1006:	03 c0       	rjmp	.+6      	; 0x100e <vfprintf+0x34e>
    1008:	88 e7       	ldi	r24, 0x78	; 120
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <vfprintf+0x352>
    100e:	88 e5       	ldi	r24, 0x58	; 88
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	b6 01       	movw	r22, r12
    1014:	0c c0       	rjmp	.+24     	; 0x102e <vfprintf+0x36e>
    1016:	8a 2d       	mov	r24, r10
    1018:	86 78       	andi	r24, 0x86	; 134
    101a:	59 f0       	breq	.+22     	; 0x1032 <vfprintf+0x372>
    101c:	a1 fe       	sbrs	r10, 1
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0x364>
    1020:	8b e2       	ldi	r24, 0x2B	; 43
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <vfprintf+0x366>
    1024:	80 e2       	ldi	r24, 0x20	; 32
    1026:	a7 fc       	sbrc	r10, 7
    1028:	8d e2       	ldi	r24, 0x2D	; 45
    102a:	b6 01       	movw	r22, r12
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
    1032:	89 14       	cp	r8, r9
    1034:	38 f4       	brcc	.+14     	; 0x1044 <vfprintf+0x384>
    1036:	b6 01       	movw	r22, r12
    1038:	80 e3       	ldi	r24, 0x30	; 48
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
    1040:	9a 94       	dec	r9
    1042:	f7 cf       	rjmp	.-18     	; 0x1032 <vfprintf+0x372>
    1044:	8a 94       	dec	r8
    1046:	f3 01       	movw	r30, r6
    1048:	e8 0d       	add	r30, r8
    104a:	f1 1d       	adc	r31, r1
    104c:	80 81       	ld	r24, Z
    104e:	b6 01       	movw	r22, r12
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
    1056:	81 10       	cpse	r8, r1
    1058:	f5 cf       	rjmp	.-22     	; 0x1044 <vfprintf+0x384>
    105a:	22 20       	and	r2, r2
    105c:	09 f4       	brne	.+2      	; 0x1060 <vfprintf+0x3a0>
    105e:	42 ce       	rjmp	.-892    	; 0xce4 <vfprintf+0x24>
    1060:	b6 01       	movw	r22, r12
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 57 08 	call	0x10ae	; 0x10ae <fputc>
    106a:	2a 94       	dec	r2
    106c:	f6 cf       	rjmp	.-20     	; 0x105a <vfprintf+0x39a>
    106e:	f6 01       	movw	r30, r12
    1070:	86 81       	ldd	r24, Z+6	; 0x06
    1072:	97 81       	ldd	r25, Z+7	; 0x07
    1074:	02 c0       	rjmp	.+4      	; 0x107a <vfprintf+0x3ba>
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	2b 96       	adiw	r28, 0x0b	; 11
    107c:	e2 e1       	ldi	r30, 0x12	; 18
    107e:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__epilogue_restores__>

00001082 <strnlen_P>:
    1082:	fc 01       	movw	r30, r24
    1084:	05 90       	lpm	r0, Z+
    1086:	61 50       	subi	r22, 0x01	; 1
    1088:	70 40       	sbci	r23, 0x00	; 0
    108a:	01 10       	cpse	r0, r1
    108c:	d8 f7       	brcc	.-10     	; 0x1084 <strnlen_P+0x2>
    108e:	80 95       	com	r24
    1090:	90 95       	com	r25
    1092:	8e 0f       	add	r24, r30
    1094:	9f 1f       	adc	r25, r31
    1096:	08 95       	ret

00001098 <strnlen>:
    1098:	fc 01       	movw	r30, r24
    109a:	61 50       	subi	r22, 0x01	; 1
    109c:	70 40       	sbci	r23, 0x00	; 0
    109e:	01 90       	ld	r0, Z+
    10a0:	01 10       	cpse	r0, r1
    10a2:	d8 f7       	brcc	.-10     	; 0x109a <strnlen+0x2>
    10a4:	80 95       	com	r24
    10a6:	90 95       	com	r25
    10a8:	8e 0f       	add	r24, r30
    10aa:	9f 1f       	adc	r25, r31
    10ac:	08 95       	ret

000010ae <fputc>:
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	fb 01       	movw	r30, r22
    10b8:	23 81       	ldd	r18, Z+3	; 0x03
    10ba:	21 fd       	sbrc	r18, 1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <fputc+0x16>
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	2c c0       	rjmp	.+88     	; 0x111c <fputc+0x6e>
    10c4:	22 ff       	sbrs	r18, 2
    10c6:	16 c0       	rjmp	.+44     	; 0x10f4 <fputc+0x46>
    10c8:	46 81       	ldd	r20, Z+6	; 0x06
    10ca:	57 81       	ldd	r21, Z+7	; 0x07
    10cc:	24 81       	ldd	r18, Z+4	; 0x04
    10ce:	35 81       	ldd	r19, Z+5	; 0x05
    10d0:	42 17       	cp	r20, r18
    10d2:	53 07       	cpc	r21, r19
    10d4:	44 f4       	brge	.+16     	; 0x10e6 <fputc+0x38>
    10d6:	a0 81       	ld	r26, Z
    10d8:	b1 81       	ldd	r27, Z+1	; 0x01
    10da:	9d 01       	movw	r18, r26
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    10e4:	8c 93       	st	X, r24
    10e6:	26 81       	ldd	r18, Z+6	; 0x06
    10e8:	37 81       	ldd	r19, Z+7	; 0x07
    10ea:	2f 5f       	subi	r18, 0xFF	; 255
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	37 83       	std	Z+7, r19	; 0x07
    10f0:	26 83       	std	Z+6, r18	; 0x06
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <fputc+0x6e>
    10f4:	8b 01       	movw	r16, r22
    10f6:	ec 01       	movw	r28, r24
    10f8:	fb 01       	movw	r30, r22
    10fa:	00 84       	ldd	r0, Z+8	; 0x08
    10fc:	f1 85       	ldd	r31, Z+9	; 0x09
    10fe:	e0 2d       	mov	r30, r0
    1100:	09 95       	icall
    1102:	89 2b       	or	r24, r25
    1104:	e1 f6       	brne	.-72     	; 0x10be <fputc+0x10>
    1106:	d8 01       	movw	r26, r16
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	8d 91       	ld	r24, X+
    110c:	9c 91       	ld	r25, X
    110e:	17 97       	sbiw	r26, 0x07	; 7
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	17 96       	adiw	r26, 0x07	; 7
    1114:	9c 93       	st	X, r25
    1116:	8e 93       	st	-X, r24
    1118:	16 97       	sbiw	r26, 0x06	; 6
    111a:	ce 01       	movw	r24, r28
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	08 95       	ret

00001126 <__ultoa_invert>:
    1126:	fa 01       	movw	r30, r20
    1128:	aa 27       	eor	r26, r26
    112a:	28 30       	cpi	r18, 0x08	; 8
    112c:	51 f1       	breq	.+84     	; 0x1182 <__ultoa_invert+0x5c>
    112e:	20 31       	cpi	r18, 0x10	; 16
    1130:	81 f1       	breq	.+96     	; 0x1192 <__ultoa_invert+0x6c>
    1132:	e8 94       	clt
    1134:	6f 93       	push	r22
    1136:	6e 7f       	andi	r22, 0xFE	; 254
    1138:	6e 5f       	subi	r22, 0xFE	; 254
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	af 4f       	sbci	r26, 0xFF	; 255
    1142:	b1 e0       	ldi	r27, 0x01	; 1
    1144:	3e d0       	rcall	.+124    	; 0x11c2 <__ultoa_invert+0x9c>
    1146:	b4 e0       	ldi	r27, 0x04	; 4
    1148:	3c d0       	rcall	.+120    	; 0x11c2 <__ultoa_invert+0x9c>
    114a:	67 0f       	add	r22, r23
    114c:	78 1f       	adc	r23, r24
    114e:	89 1f       	adc	r24, r25
    1150:	9a 1f       	adc	r25, r26
    1152:	a1 1d       	adc	r26, r1
    1154:	68 0f       	add	r22, r24
    1156:	79 1f       	adc	r23, r25
    1158:	8a 1f       	adc	r24, r26
    115a:	91 1d       	adc	r25, r1
    115c:	a1 1d       	adc	r26, r1
    115e:	6a 0f       	add	r22, r26
    1160:	71 1d       	adc	r23, r1
    1162:	81 1d       	adc	r24, r1
    1164:	91 1d       	adc	r25, r1
    1166:	a1 1d       	adc	r26, r1
    1168:	20 d0       	rcall	.+64     	; 0x11aa <__ultoa_invert+0x84>
    116a:	09 f4       	brne	.+2      	; 0x116e <__ultoa_invert+0x48>
    116c:	68 94       	set
    116e:	3f 91       	pop	r19
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	26 9f       	mul	r18, r22
    1174:	11 24       	eor	r1, r1
    1176:	30 19       	sub	r19, r0
    1178:	30 5d       	subi	r19, 0xD0	; 208
    117a:	31 93       	st	Z+, r19
    117c:	de f6       	brtc	.-74     	; 0x1134 <__ultoa_invert+0xe>
    117e:	cf 01       	movw	r24, r30
    1180:	08 95       	ret
    1182:	46 2f       	mov	r20, r22
    1184:	47 70       	andi	r20, 0x07	; 7
    1186:	40 5d       	subi	r20, 0xD0	; 208
    1188:	41 93       	st	Z+, r20
    118a:	b3 e0       	ldi	r27, 0x03	; 3
    118c:	0f d0       	rcall	.+30     	; 0x11ac <__ultoa_invert+0x86>
    118e:	c9 f7       	brne	.-14     	; 0x1182 <__ultoa_invert+0x5c>
    1190:	f6 cf       	rjmp	.-20     	; 0x117e <__ultoa_invert+0x58>
    1192:	46 2f       	mov	r20, r22
    1194:	4f 70       	andi	r20, 0x0F	; 15
    1196:	40 5d       	subi	r20, 0xD0	; 208
    1198:	4a 33       	cpi	r20, 0x3A	; 58
    119a:	18 f0       	brcs	.+6      	; 0x11a2 <__ultoa_invert+0x7c>
    119c:	49 5d       	subi	r20, 0xD9	; 217
    119e:	31 fd       	sbrc	r19, 1
    11a0:	40 52       	subi	r20, 0x20	; 32
    11a2:	41 93       	st	Z+, r20
    11a4:	02 d0       	rcall	.+4      	; 0x11aa <__ultoa_invert+0x84>
    11a6:	a9 f7       	brne	.-22     	; 0x1192 <__ultoa_invert+0x6c>
    11a8:	ea cf       	rjmp	.-44     	; 0x117e <__ultoa_invert+0x58>
    11aa:	b4 e0       	ldi	r27, 0x04	; 4
    11ac:	a6 95       	lsr	r26
    11ae:	97 95       	ror	r25
    11b0:	87 95       	ror	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	ba 95       	dec	r27
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__ultoa_invert+0x86>
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	61 05       	cpc	r22, r1
    11be:	71 05       	cpc	r23, r1
    11c0:	08 95       	ret
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	0a 2e       	mov	r0, r26
    11c8:	06 94       	lsr	r0
    11ca:	57 95       	ror	r21
    11cc:	47 95       	ror	r20
    11ce:	37 95       	ror	r19
    11d0:	27 95       	ror	r18
    11d2:	ba 95       	dec	r27
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__ultoa_invert+0xa2>
    11d6:	62 0f       	add	r22, r18
    11d8:	73 1f       	adc	r23, r19
    11da:	84 1f       	adc	r24, r20
    11dc:	95 1f       	adc	r25, r21
    11de:	a0 1d       	adc	r26, r0
    11e0:	08 95       	ret

000011e2 <__prologue_saves__>:
    11e2:	2f 92       	push	r2
    11e4:	3f 92       	push	r3
    11e6:	4f 92       	push	r4
    11e8:	5f 92       	push	r5
    11ea:	6f 92       	push	r6
    11ec:	7f 92       	push	r7
    11ee:	8f 92       	push	r8
    11f0:	9f 92       	push	r9
    11f2:	af 92       	push	r10
    11f4:	bf 92       	push	r11
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	ca 1b       	sub	r28, r26
    120c:	db 0b       	sbc	r29, r27
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	09 94       	ijmp

0000121a <__epilogue_restores__>:
    121a:	2a 88       	ldd	r2, Y+18	; 0x12
    121c:	39 88       	ldd	r3, Y+17	; 0x11
    121e:	48 88       	ldd	r4, Y+16	; 0x10
    1220:	5f 84       	ldd	r5, Y+15	; 0x0f
    1222:	6e 84       	ldd	r6, Y+14	; 0x0e
    1224:	7d 84       	ldd	r7, Y+13	; 0x0d
    1226:	8c 84       	ldd	r8, Y+12	; 0x0c
    1228:	9b 84       	ldd	r9, Y+11	; 0x0b
    122a:	aa 84       	ldd	r10, Y+10	; 0x0a
    122c:	b9 84       	ldd	r11, Y+9	; 0x09
    122e:	c8 84       	ldd	r12, Y+8	; 0x08
    1230:	df 80       	ldd	r13, Y+7	; 0x07
    1232:	ee 80       	ldd	r14, Y+6	; 0x06
    1234:	fd 80       	ldd	r15, Y+5	; 0x05
    1236:	0c 81       	ldd	r16, Y+4	; 0x04
    1238:	1b 81       	ldd	r17, Y+3	; 0x03
    123a:	aa 81       	ldd	r26, Y+2	; 0x02
    123c:	b9 81       	ldd	r27, Y+1	; 0x01
    123e:	ce 0f       	add	r28, r30
    1240:	d1 1d       	adc	r29, r1
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	ed 01       	movw	r28, r26
    124e:	08 95       	ret

00001250 <_exit>:
    1250:	f8 94       	cli

00001252 <__stop_program>:
    1252:	ff cf       	rjmp	.-2      	; 0x1252 <__stop_program>
