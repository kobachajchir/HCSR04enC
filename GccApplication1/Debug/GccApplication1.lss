
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000964  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000964  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800122  00800122  00000a1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ac  00000000  00000000  000027b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  9e:	0c 94 b0 04 	jmp	0x960	; 0x960 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
}


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
  b2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ovf_count>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ovf_count>
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_7>:


// ISR para Timer 2 (se ejecuta cada 10 ms)
ISR(TIMER2_COMPA_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	// Solo setear las flags, no más procesamiento
	if(TRIGGER_STATE && !TRIGGER_FINISH){ //TRIGGER en alto y no finalizo
		TRIGGER_FINISH = 1; //Finalizar
	}else if(!TRIGGER_STATE){ //TRIGGER en alto y finalizo
  da:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <bandera>
  de:	98 2f       	mov	r25, r24
  e0:	91 70       	andi	r25, 0x01	; 1
  e2:	80 ff       	sbrs	r24, 0
  e4:	15 c0       	rjmp	.+42     	; 0x110 <__vector_7+0x48>
		//nada
	}else if(!TRIGGER_STATE){ //TRIGGER en bajo
  e6:	91 11       	cpse	r25, r1
  e8:	13 c0       	rjmp	.+38     	; 0x110 <__vector_7+0x48>
		if(!TRIGGER_ALLOWED && wait_time < 10){
  ea:	91 11       	cpse	r25, r1
  ec:	0a c0       	rjmp	.+20     	; 0x102 <__vector_7+0x3a>
  ee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <wait_time>
  f2:	8a 30       	cpi	r24, 0x0A	; 10
  f4:	30 f4       	brcc	.+12     	; 0x102 <__vector_7+0x3a>
			wait_time++;
  f6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <wait_time>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <wait_time>
 100:	07 c0       	rjmp	.+14     	; 0x110 <__vector_7+0x48>
		}else{
			TRIGGER_ALLOWED = 1;
 102:	ed e2       	ldi	r30, 0x2D	; 45
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	80 81       	ld	r24, Z
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
			wait_time = 0;
 10c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <wait_time>
		}
	}
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
 122:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 136:	08 95       	ret

00000138 <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
 138:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <USART_Transmit>
	// Envía el dato
	UDR0 = data;
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 144:	08 95       	ret

00000146 <USART_putchar>:
}

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	if (c == '\n')
 14a:	8a 30       	cpi	r24, 0x0A	; 10
 14c:	19 f4       	brne	.+6      	; 0x154 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Transmit>
	USART_Transmit(c);
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Transmit>
	return 0;
}
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <timer1_init>:

/* Timer1 and External Interrupt Functions ---------------------------------*/
void timer1_init()
{
	// Configura el Timer 1 en modo normal con prescaler de 8
	TCCR1B |= (1 << CS11) | (1 << CS10);  // Prescaler de 8
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	80 83       	st	Z, r24
	TCNT1 = 0;  // Inicializa el contador en 0
 16c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 170:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1 << TOIE1);  // Habilita la interrupción por desbordamiento del Timer 1
 174:	ef e6       	ldi	r30, 0x6F	; 111
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << WGM12) | (1 << CS22) | (1 << CS20);  // Modo CTC, prescaler de 1024
 180:	e1 eb       	ldi	r30, 0xB1	; 177
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8d 60       	ori	r24, 0x0D	; 13
 188:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
 18a:	8b e9       	ldi	r24, 0x9B	; 155
 18c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
 190:	e0 e7       	ldi	r30, 0x70	; 112
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
 19a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 19e:	08 95       	ret

000001a0 <external_interrupt_init>:
}

// Configuración de interrupción externa (INT0) para el pin ECHO (flancos ascendentes y descendentes)
void external_interrupt_init()
{
	DDRD &= ~(1 << PD3);  // Configura el pin ECHO (PORTD3) como entrada
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PD2);   // Configura el pin TRIGGER (PORTD2) como salida
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	8a b9       	out	0x0a, r24	; 10

	// Configuración de interrupción externa
	EIMSK |= (1 << INT0);   // Habilita la interrupción externa INT0 (pin 2)
 1ac:	8d b3       	in	r24, 0x1d	; 29
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
 1b2:	e9 e6       	ldi	r30, 0x69	; 105
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	sei();                  // Habilita las interrupciones globales
 1bc:	78 94       	sei
 1be:	08 95       	ret

000001c0 <calculate_distance>:
}

void calculate_distance()
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
	// El tiempo de vuelo es la diferencia entre el tiempo final y el tiempo inicial
	uint32_t pulse_duration = echo_finish_time - echo_init_time;
 1c4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <echo_finish_time>
 1c8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <echo_finish_time+0x1>
 1cc:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <echo_init_time>
 1d0:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <echo_init_time+0x1>
 1d4:	82 1b       	sub	r24, r18
 1d6:	93 0b       	sbc	r25, r19
 1d8:	ac 01       	movw	r20, r24
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0

	// Calcula la distancia en milímetros (sin usar flotantes)
	distance_mm = (pulse_duration * 34) / 200;  // Multiplicamos por 34 y dividimos entre 200
 1de:	db 01       	movw	r26, r22
 1e0:	ca 01       	movw	r24, r20
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	8c 01       	movw	r16, r24
 204:	9d 01       	movw	r18, r26
 206:	04 0f       	add	r16, r20
 208:	15 1f       	adc	r17, r21
 20a:	26 1f       	adc	r18, r22
 20c:	37 1f       	adc	r19, r23
 20e:	c9 01       	movw	r24, r18
 210:	b8 01       	movw	r22, r16
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	88 1f       	adc	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	28 ec       	ldi	r18, 0xC8	; 200
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	0e 94 b0 01 	call	0x360	; 0x360 <__udivmodsi4>
 226:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <distance_mm>
 22a:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <distance_mm+0x1>
 22e:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <distance_mm+0x2>
 232:	50 93 28 01 	sts	0x0128, r21	; 0x800128 <distance_mm+0x3>

	// Mostrar los resultados
	printf("Distancia: %lu mm\n", distance_mm);
 236:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <distance_mm>
 23a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <distance_mm+0x1>
 23e:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <distance_mm+0x2>
 242:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <distance_mm+0x3>
 246:	bf 93       	push	r27
 248:	af 93       	push	r26
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	9f 93       	push	r25
 254:	8f 93       	push	r24
 256:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <printf>
}
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	// Se ejecuta cuando se detecta un flanco en el pin ECHO (ICP1)
	if (ECHO_RISING) {  // Si esperamos flanco ascendente (rising edge)
 28e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <bandera>
 292:	80 ff       	sbrs	r24, 0
 294:	18 c0       	rjmp	.+48     	; 0x2c6 <__vector_10+0x5a>
		// Guardamos el tiempo inicial cuando el eco llega (flanco ascendente)
		echo_init_time = ICR1 + (ovf_count * 65536);  // Captura el valor del temporizador
 296:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ovf_count>
 29a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 29e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <echo_init_time+0x1>
 2a6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <echo_init_time>
		echo_state = 1;  // Cambiamos el estado para esperar el flanco descendente
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		ECHO_RISING = 0;  // Cambiamos el flag para capturar el flanco descendente
 2b0:	ed e2       	ldi	r30, 0x2D	; 45
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	80 81       	ld	r24, Z
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	80 83       	st	Z, r24
		// Configuramos el modo para capturar el flanco descendente
		TCCR1B &= ~_BV(ICES1);  // Capturar en el flanco descendente
 2ba:	e1 e8       	ldi	r30, 0x81	; 129
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	80 83       	st	Z, r24
 2c4:	13 c0       	rjmp	.+38     	; 0x2ec <__vector_10+0x80>
		} else {  // Flanco descendente (falling edge)
		// Guardamos el tiempo final cuando el eco regresa (flanco descendente)
		echo_finish_time = ICR1 + (ovf_count * 65536);  // Captura el valor del temporizador
 2c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ovf_count>
 2ca:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2ce:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2d2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <echo_finish_time+0x1>
 2d6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <echo_finish_time>
		calculate_distance();  // Calculamos y mostramos la distancia
 2da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <calculate_distance>
		echo_state = 0;  // Reseteamos el estado para esperar el próximo flanco ascendente
 2de:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
		// Configuramos el modo para capturar el flanco ascendente nuevamente
		TCCR1B |= _BV(ICES1);  // Capturar en el flanco ascendente
 2e2:	e1 e8       	ldi	r30, 0x81	; 129
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
	}
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <main>:


int main()
{
	// Inicializar el puerto serial con una tasa de baudios de 115200
	USART_Init(8);  // Para 115200 baudios con un reloj de 16 MHz
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 91 00 	call	0x122	; 0x122 <USART_Init>
	TRIGGER_ALLOWED = 1;
 316:	cd e2       	ldi	r28, 0x2D	; 45
 318:	d1 e0       	ldi	r29, 0x01	; 1
 31a:	88 81       	ld	r24, Y
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	88 83       	st	Y, r24
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__iob+0x3>
 328:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__iob+0x2>

	// Inicializa los temporizadores y las interrupciones
	timer1_init();  // Inicializa el Timer 1
 32c:	0e 94 b1 00 	call	0x162	; 0x162 <timer1_init>
	timer2_init();  // Inicializa el Timer 2
 330:	0e 94 c0 00 	call	0x180	; 0x180 <timer2_init>
	external_interrupt_init();  // Inicializa la interrupción externa INT0 (flancos)
 334:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <external_interrupt_init>
	if(TRIGGER_ALLOWED){
 338:	88 81       	ld	r24, Y
 33a:	80 ff       	sbrs	r24, 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <main+0x34>
		DO_TRIGGER = 1;
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	88 83       	st	Y, r24
			// Configuramos Timer 1 para capturar el flanco ascendente después de emitir el trigger
			TCCR1B |= (1 << ICES1);  // Capturar en el flanco ascendente (ECHO_RISING)
			ECHO_RISING = 1;  // Indicamos que estamos esperando el flanco ascendente
			// Emitir el pulso TRIGGER (10 microsegundos)
			PORTD |= (1 << PD2);  // Pin TRIGGER a HIGH
		}else if(TRIGGER_STATE && TRIGGER_FINISH){
 342:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <bandera>
 346:	80 ff       	sbrs	r24, 0
 348:	fc cf       	rjmp	.-8      	; 0x342 <main+0x34>
			TRIGGER_STATE = 0;
 34a:	ed e2       	ldi	r30, 0x2D	; 45
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	8e 7f       	andi	r24, 0xFE	; 254
 350:	80 83       	st	Z, r24
			PORTD &= ~(1 << PD2); // Pin TRIGGER a LOW
 352:	8b b1       	in	r24, 0x0b	; 11
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	8b b9       	out	0x0b, r24	; 11
			TRIGGER_ALLOWED = 0;
 358:	80 81       	ld	r24, Z
 35a:	8e 7f       	andi	r24, 0xFE	; 254
 35c:	80 83       	st	Z, r24
 35e:	f1 cf       	rjmp	.-30     	; 0x342 <main+0x34>

00000360 <__udivmodsi4>:
 360:	a1 e2       	ldi	r26, 0x21	; 33
 362:	1a 2e       	mov	r1, r26
 364:	aa 1b       	sub	r26, r26
 366:	bb 1b       	sub	r27, r27
 368:	fd 01       	movw	r30, r26
 36a:	0d c0       	rjmp	.+26     	; 0x386 <__udivmodsi4_ep>

0000036c <__udivmodsi4_loop>:
 36c:	aa 1f       	adc	r26, r26
 36e:	bb 1f       	adc	r27, r27
 370:	ee 1f       	adc	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	a2 17       	cp	r26, r18
 376:	b3 07       	cpc	r27, r19
 378:	e4 07       	cpc	r30, r20
 37a:	f5 07       	cpc	r31, r21
 37c:	20 f0       	brcs	.+8      	; 0x386 <__udivmodsi4_ep>
 37e:	a2 1b       	sub	r26, r18
 380:	b3 0b       	sbc	r27, r19
 382:	e4 0b       	sbc	r30, r20
 384:	f5 0b       	sbc	r31, r21

00000386 <__udivmodsi4_ep>:
 386:	66 1f       	adc	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	1a 94       	dec	r1
 390:	69 f7       	brne	.-38     	; 0x36c <__udivmodsi4_loop>
 392:	60 95       	com	r22
 394:	70 95       	com	r23
 396:	80 95       	com	r24
 398:	90 95       	com	r25
 39a:	9b 01       	movw	r18, r22
 39c:	ac 01       	movw	r20, r24
 39e:	bd 01       	movw	r22, r26
 3a0:	cf 01       	movw	r24, r30
 3a2:	08 95       	ret

000003a4 <printf>:
 3a4:	a0 e0       	ldi	r26, 0x00	; 0
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e8 ed       	ldi	r30, 0xD8	; 216
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	0c 94 89 04 	jmp	0x912	; 0x912 <__stack+0x13>
 3b0:	ae 01       	movw	r20, r28
 3b2:	4b 5f       	subi	r20, 0xFB	; 251
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
 3b6:	fa 01       	movw	r30, r20
 3b8:	61 91       	ld	r22, Z+
 3ba:	71 91       	ld	r23, Z+
 3bc:	af 01       	movw	r20, r30
 3be:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__iob+0x2>
 3c2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__iob+0x3>
 3c6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <vfprintf>
 3ca:	e2 e0       	ldi	r30, 0x02	; 2
 3cc:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__epilogue_restores__+0x20>

000003d0 <vfprintf>:
 3d0:	ab e0       	ldi	r26, 0x0B	; 11
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	ee ee       	ldi	r30, 0xEE	; 238
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__prologue_saves__>
 3dc:	6c 01       	movw	r12, r24
 3de:	7b 01       	movw	r14, r22
 3e0:	8a 01       	movw	r16, r20
 3e2:	fc 01       	movw	r30, r24
 3e4:	17 82       	std	Z+7, r1	; 0x07
 3e6:	16 82       	std	Z+6, r1	; 0x06
 3e8:	83 81       	ldd	r24, Z+3	; 0x03
 3ea:	81 ff       	sbrs	r24, 1
 3ec:	cc c1       	rjmp	.+920    	; 0x786 <__EEPROM_REGION_LENGTH__+0x386>
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	3c 01       	movw	r6, r24
 3f4:	f6 01       	movw	r30, r12
 3f6:	93 81       	ldd	r25, Z+3	; 0x03
 3f8:	f7 01       	movw	r30, r14
 3fa:	93 fd       	sbrc	r25, 3
 3fc:	85 91       	lpm	r24, Z+
 3fe:	93 ff       	sbrs	r25, 3
 400:	81 91       	ld	r24, Z+
 402:	7f 01       	movw	r14, r30
 404:	88 23       	and	r24, r24
 406:	09 f4       	brne	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	ba c1       	rjmp	.+884    	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
 40a:	85 32       	cpi	r24, 0x25	; 37
 40c:	39 f4       	brne	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	93 fd       	sbrc	r25, 3
 410:	85 91       	lpm	r24, Z+
 412:	93 ff       	sbrs	r25, 3
 414:	81 91       	ld	r24, Z+
 416:	7f 01       	movw	r14, r30
 418:	85 32       	cpi	r24, 0x25	; 37
 41a:	29 f4       	brne	.+10     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41c:	b6 01       	movw	r22, r12
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 424:	e7 cf       	rjmp	.-50     	; 0x3f4 <vfprintf+0x24>
 426:	91 2c       	mov	r9, r1
 428:	21 2c       	mov	r2, r1
 42a:	31 2c       	mov	r3, r1
 42c:	ff e1       	ldi	r31, 0x1F	; 31
 42e:	f3 15       	cp	r31, r3
 430:	d8 f0       	brcs	.+54     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 432:	8b 32       	cpi	r24, 0x2B	; 43
 434:	79 f0       	breq	.+30     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 436:	38 f4       	brcc	.+14     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 438:	80 32       	cpi	r24, 0x20	; 32
 43a:	79 f0       	breq	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 43c:	83 32       	cpi	r24, 0x23	; 35
 43e:	a1 f4       	brne	.+40     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 440:	23 2d       	mov	r18, r3
 442:	20 61       	ori	r18, 0x10	; 16
 444:	1d c0       	rjmp	.+58     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 446:	8d 32       	cpi	r24, 0x2D	; 45
 448:	61 f0       	breq	.+24     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 44a:	80 33       	cpi	r24, 0x30	; 48
 44c:	69 f4       	brne	.+26     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 44e:	23 2d       	mov	r18, r3
 450:	21 60       	ori	r18, 0x01	; 1
 452:	16 c0       	rjmp	.+44     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 454:	83 2d       	mov	r24, r3
 456:	82 60       	ori	r24, 0x02	; 2
 458:	38 2e       	mov	r3, r24
 45a:	e3 2d       	mov	r30, r3
 45c:	e4 60       	ori	r30, 0x04	; 4
 45e:	3e 2e       	mov	r3, r30
 460:	2a c0       	rjmp	.+84     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 462:	f3 2d       	mov	r31, r3
 464:	f8 60       	ori	r31, 0x08	; 8
 466:	1d c0       	rjmp	.+58     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 468:	37 fc       	sbrc	r3, 7
 46a:	2d c0       	rjmp	.+90     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 46c:	20 ed       	ldi	r18, 0xD0	; 208
 46e:	28 0f       	add	r18, r24
 470:	2a 30       	cpi	r18, 0x0A	; 10
 472:	40 f0       	brcs	.+16     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 474:	8e 32       	cpi	r24, 0x2E	; 46
 476:	b9 f4       	brne	.+46     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 478:	36 fc       	sbrc	r3, 6
 47a:	81 c1       	rjmp	.+770    	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
 47c:	23 2d       	mov	r18, r3
 47e:	20 64       	ori	r18, 0x40	; 64
 480:	32 2e       	mov	r3, r18
 482:	19 c0       	rjmp	.+50     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 484:	36 fe       	sbrs	r3, 6
 486:	06 c0       	rjmp	.+12     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 488:	8a e0       	ldi	r24, 0x0A	; 10
 48a:	98 9e       	mul	r9, r24
 48c:	20 0d       	add	r18, r0
 48e:	11 24       	eor	r1, r1
 490:	92 2e       	mov	r9, r18
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 494:	ea e0       	ldi	r30, 0x0A	; 10
 496:	2e 9e       	mul	r2, r30
 498:	20 0d       	add	r18, r0
 49a:	11 24       	eor	r1, r1
 49c:	22 2e       	mov	r2, r18
 49e:	f3 2d       	mov	r31, r3
 4a0:	f0 62       	ori	r31, 0x20	; 32
 4a2:	3f 2e       	mov	r3, r31
 4a4:	08 c0       	rjmp	.+16     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4a6:	8c 36       	cpi	r24, 0x6C	; 108
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4aa:	83 2d       	mov	r24, r3
 4ac:	80 68       	ori	r24, 0x80	; 128
 4ae:	38 2e       	mov	r3, r24
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	88 36       	cpi	r24, 0x68	; 104
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4b6:	f7 01       	movw	r30, r14
 4b8:	93 fd       	sbrc	r25, 3
 4ba:	85 91       	lpm	r24, Z+
 4bc:	93 ff       	sbrs	r25, 3
 4be:	81 91       	ld	r24, Z+
 4c0:	7f 01       	movw	r14, r30
 4c2:	81 11       	cpse	r24, r1
 4c4:	b3 cf       	rjmp	.-154    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 4c6:	98 2f       	mov	r25, r24
 4c8:	9f 7d       	andi	r25, 0xDF	; 223
 4ca:	95 54       	subi	r25, 0x45	; 69
 4cc:	93 30       	cpi	r25, 0x03	; 3
 4ce:	28 f4       	brcc	.+10     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d0:	0c 5f       	subi	r16, 0xFC	; 252
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	9f e3       	ldi	r25, 0x3F	; 63
 4d6:	99 83       	std	Y+1, r25	; 0x01
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	31 f0       	breq	.+12     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4de:	83 37       	cpi	r24, 0x73	; 115
 4e0:	71 f0       	breq	.+28     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4e2:	83 35       	cpi	r24, 0x53	; 83
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e6:	59 c0       	rjmp	.+178    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 4e8:	21 c0       	rjmp	.+66     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 4ea:	f8 01       	movw	r30, r16
 4ec:	80 81       	ld	r24, Z
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	0e 5f       	subi	r16, 0xFE	; 254
 4f2:	1f 4f       	sbci	r17, 0xFF	; 255
 4f4:	88 24       	eor	r8, r8
 4f6:	83 94       	inc	r8
 4f8:	91 2c       	mov	r9, r1
 4fa:	53 01       	movw	r10, r6
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 4fe:	28 01       	movw	r4, r16
 500:	f2 e0       	ldi	r31, 0x02	; 2
 502:	4f 0e       	add	r4, r31
 504:	51 1c       	adc	r5, r1
 506:	f8 01       	movw	r30, r16
 508:	a0 80       	ld	r10, Z
 50a:	b1 80       	ldd	r11, Z+1	; 0x01
 50c:	36 fe       	sbrs	r3, 6
 50e:	03 c0       	rjmp	.+6      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 510:	69 2d       	mov	r22, r9
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 516:	6f ef       	ldi	r22, 0xFF	; 255
 518:	7f ef       	ldi	r23, 0xFF	; 255
 51a:	c5 01       	movw	r24, r10
 51c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <strnlen>
 520:	4c 01       	movw	r8, r24
 522:	82 01       	movw	r16, r4
 524:	f3 2d       	mov	r31, r3
 526:	ff 77       	andi	r31, 0x7F	; 127
 528:	3f 2e       	mov	r3, r31
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 52c:	28 01       	movw	r4, r16
 52e:	22 e0       	ldi	r18, 0x02	; 2
 530:	42 0e       	add	r4, r18
 532:	51 1c       	adc	r5, r1
 534:	f8 01       	movw	r30, r16
 536:	a0 80       	ld	r10, Z
 538:	b1 80       	ldd	r11, Z+1	; 0x01
 53a:	36 fe       	sbrs	r3, 6
 53c:	03 c0       	rjmp	.+6      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 53e:	69 2d       	mov	r22, r9
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	6f ef       	ldi	r22, 0xFF	; 255
 546:	7f ef       	ldi	r23, 0xFF	; 255
 548:	c5 01       	movw	r24, r10
 54a:	0e 94 c9 03 	call	0x792	; 0x792 <strnlen_P>
 54e:	4c 01       	movw	r8, r24
 550:	f3 2d       	mov	r31, r3
 552:	f0 68       	ori	r31, 0x80	; 128
 554:	3f 2e       	mov	r3, r31
 556:	82 01       	movw	r16, r4
 558:	33 fc       	sbrc	r3, 3
 55a:	1b c0       	rjmp	.+54     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 55c:	82 2d       	mov	r24, r2
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	88 16       	cp	r8, r24
 562:	99 06       	cpc	r9, r25
 564:	b0 f4       	brcc	.+44     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 566:	b6 01       	movw	r22, r12
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 570:	2a 94       	dec	r2
 572:	f4 cf       	rjmp	.-24     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 574:	f5 01       	movw	r30, r10
 576:	37 fc       	sbrc	r3, 7
 578:	85 91       	lpm	r24, Z+
 57a:	37 fe       	sbrs	r3, 7
 57c:	81 91       	ld	r24, Z+
 57e:	5f 01       	movw	r10, r30
 580:	b6 01       	movw	r22, r12
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 588:	21 10       	cpse	r2, r1
 58a:	2a 94       	dec	r2
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	82 1a       	sub	r8, r18
 590:	91 08       	sbc	r9, r1
 592:	81 14       	cp	r8, r1
 594:	91 04       	cpc	r9, r1
 596:	71 f7       	brne	.-36     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 598:	e8 c0       	rjmp	.+464    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
 59a:	84 36       	cpi	r24, 0x64	; 100
 59c:	11 f0       	breq	.+4      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 59e:	89 36       	cpi	r24, 0x69	; 105
 5a0:	41 f5       	brne	.+80     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5a2:	f8 01       	movw	r30, r16
 5a4:	37 fe       	sbrs	r3, 7
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 5a8:	60 81       	ld	r22, Z
 5aa:	71 81       	ldd	r23, Z+1	; 0x01
 5ac:	82 81       	ldd	r24, Z+2	; 0x02
 5ae:	93 81       	ldd	r25, Z+3	; 0x03
 5b0:	0c 5f       	subi	r16, 0xFC	; 252
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5b6:	60 81       	ld	r22, Z
 5b8:	71 81       	ldd	r23, Z+1	; 0x01
 5ba:	07 2e       	mov	r0, r23
 5bc:	00 0c       	add	r0, r0
 5be:	88 0b       	sbc	r24, r24
 5c0:	99 0b       	sbc	r25, r25
 5c2:	0e 5f       	subi	r16, 0xFE	; 254
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	f3 2d       	mov	r31, r3
 5c8:	ff 76       	andi	r31, 0x6F	; 111
 5ca:	3f 2e       	mov	r3, r31
 5cc:	97 ff       	sbrs	r25, 7
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	f0 68       	ori	r31, 0x80	; 128
 5e0:	3f 2e       	mov	r3, r31
 5e2:	2a e0       	ldi	r18, 0x0A	; 10
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	a3 01       	movw	r20, r6
 5e8:	0e 94 1b 04 	call	0x836	; 0x836 <__ultoa_invert>
 5ec:	88 2e       	mov	r8, r24
 5ee:	86 18       	sub	r8, r6
 5f0:	45 c0       	rjmp	.+138    	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
 5f2:	85 37       	cpi	r24, 0x75	; 117
 5f4:	31 f4       	brne	.+12     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5f6:	23 2d       	mov	r18, r3
 5f8:	2f 7e       	andi	r18, 0xEF	; 239
 5fa:	b2 2e       	mov	r11, r18
 5fc:	2a e0       	ldi	r18, 0x0A	; 10
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	25 c0       	rjmp	.+74     	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 602:	93 2d       	mov	r25, r3
 604:	99 7f       	andi	r25, 0xF9	; 249
 606:	b9 2e       	mov	r11, r25
 608:	8f 36       	cpi	r24, 0x6F	; 111
 60a:	c1 f0       	breq	.+48     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
 60c:	18 f4       	brcc	.+6      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 60e:	88 35       	cpi	r24, 0x58	; 88
 610:	79 f0       	breq	.+30     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
 612:	b5 c0       	rjmp	.+362    	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
 614:	80 37       	cpi	r24, 0x70	; 112
 616:	19 f0       	breq	.+6      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 618:	88 37       	cpi	r24, 0x78	; 120
 61a:	21 f0       	breq	.+8      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 61c:	b0 c0       	rjmp	.+352    	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
 61e:	e9 2f       	mov	r30, r25
 620:	e0 61       	ori	r30, 0x10	; 16
 622:	be 2e       	mov	r11, r30
 624:	b4 fe       	sbrs	r11, 4
 626:	0d c0       	rjmp	.+26     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
 628:	fb 2d       	mov	r31, r11
 62a:	f4 60       	ori	r31, 0x04	; 4
 62c:	bf 2e       	mov	r11, r31
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
 630:	34 fe       	sbrs	r3, 4
 632:	0a c0       	rjmp	.+20     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 634:	29 2f       	mov	r18, r25
 636:	26 60       	ori	r18, 0x06	; 6
 638:	b2 2e       	mov	r11, r18
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 63c:	28 e0       	ldi	r18, 0x08	; 8
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	05 c0       	rjmp	.+10     	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 642:	20 e1       	ldi	r18, 0x10	; 16
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 648:	20 e1       	ldi	r18, 0x10	; 16
 64a:	32 e0       	ldi	r19, 0x02	; 2
 64c:	f8 01       	movw	r30, r16
 64e:	b7 fe       	sbrs	r11, 7
 650:	07 c0       	rjmp	.+14     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
 652:	60 81       	ld	r22, Z
 654:	71 81       	ldd	r23, Z+1	; 0x01
 656:	82 81       	ldd	r24, Z+2	; 0x02
 658:	93 81       	ldd	r25, Z+3	; 0x03
 65a:	0c 5f       	subi	r16, 0xFC	; 252
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	06 c0       	rjmp	.+12     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 660:	60 81       	ld	r22, Z
 662:	71 81       	ldd	r23, Z+1	; 0x01
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 5f       	subi	r16, 0xFE	; 254
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	a3 01       	movw	r20, r6
 66e:	0e 94 1b 04 	call	0x836	; 0x836 <__ultoa_invert>
 672:	88 2e       	mov	r8, r24
 674:	86 18       	sub	r8, r6
 676:	fb 2d       	mov	r31, r11
 678:	ff 77       	andi	r31, 0x7F	; 127
 67a:	3f 2e       	mov	r3, r31
 67c:	36 fe       	sbrs	r3, 6
 67e:	0d c0       	rjmp	.+26     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 680:	23 2d       	mov	r18, r3
 682:	2e 7f       	andi	r18, 0xFE	; 254
 684:	a2 2e       	mov	r10, r18
 686:	89 14       	cp	r8, r9
 688:	58 f4       	brcc	.+22     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 68a:	34 fe       	sbrs	r3, 4
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 68e:	32 fc       	sbrc	r3, 2
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 692:	83 2d       	mov	r24, r3
 694:	8e 7e       	andi	r24, 0xEE	; 238
 696:	a8 2e       	mov	r10, r24
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 69a:	b8 2c       	mov	r11, r8
 69c:	a3 2c       	mov	r10, r3
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
 6a0:	b8 2c       	mov	r11, r8
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
 6a4:	b9 2c       	mov	r11, r9
 6a6:	a4 fe       	sbrs	r10, 4
 6a8:	0f c0       	rjmp	.+30     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6aa:	fe 01       	movw	r30, r28
 6ac:	e8 0d       	add	r30, r8
 6ae:	f1 1d       	adc	r31, r1
 6b0:	80 81       	ld	r24, Z
 6b2:	80 33       	cpi	r24, 0x30	; 48
 6b4:	21 f4       	brne	.+8      	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
 6b6:	9a 2d       	mov	r25, r10
 6b8:	99 7e       	andi	r25, 0xE9	; 233
 6ba:	a9 2e       	mov	r10, r25
 6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6be:	a2 fe       	sbrs	r10, 2
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6c2:	b3 94       	inc	r11
 6c4:	b3 94       	inc	r11
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6c8:	8a 2d       	mov	r24, r10
 6ca:	86 78       	andi	r24, 0x86	; 134
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6ce:	b3 94       	inc	r11
 6d0:	a3 fc       	sbrc	r10, 3
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__EEPROM_REGION_LENGTH__+0x2f6>
 6d4:	a0 fe       	sbrs	r10, 0
 6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 6d8:	b2 14       	cp	r11, r2
 6da:	88 f4       	brcc	.+34     	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
 6dc:	28 0c       	add	r2, r8
 6de:	92 2c       	mov	r9, r2
 6e0:	9b 18       	sub	r9, r11
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 6e4:	b2 14       	cp	r11, r2
 6e6:	60 f4       	brcc	.+24     	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 6e8:	b6 01       	movw	r22, r12
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 6f2:	b3 94       	inc	r11
 6f4:	f7 cf       	rjmp	.-18     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 6f6:	b2 14       	cp	r11, r2
 6f8:	18 f4       	brcc	.+6      	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 6fa:	2b 18       	sub	r2, r11
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
 6fe:	98 2c       	mov	r9, r8
 700:	21 2c       	mov	r2, r1
 702:	a4 fe       	sbrs	r10, 4
 704:	10 c0       	rjmp	.+32     	; 0x726 <__EEPROM_REGION_LENGTH__+0x326>
 706:	b6 01       	movw	r22, r12
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 710:	a2 fe       	sbrs	r10, 2
 712:	17 c0       	rjmp	.+46     	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 714:	a1 fc       	sbrc	r10, 1
 716:	03 c0       	rjmp	.+6      	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 718:	88 e7       	ldi	r24, 0x78	; 120
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 71e:	88 e5       	ldi	r24, 0x58	; 88
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	b6 01       	movw	r22, r12
 724:	0c c0       	rjmp	.+24     	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
 726:	8a 2d       	mov	r24, r10
 728:	86 78       	andi	r24, 0x86	; 134
 72a:	59 f0       	breq	.+22     	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 72c:	a1 fe       	sbrs	r10, 1
 72e:	02 c0       	rjmp	.+4      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 730:	8b e2       	ldi	r24, 0x2B	; 43
 732:	01 c0       	rjmp	.+2      	; 0x736 <__EEPROM_REGION_LENGTH__+0x336>
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	a7 fc       	sbrc	r10, 7
 738:	8d e2       	ldi	r24, 0x2D	; 45
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 742:	89 14       	cp	r8, r9
 744:	38 f4       	brcc	.+14     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 746:	b6 01       	movw	r22, r12
 748:	80 e3       	ldi	r24, 0x30	; 48
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 750:	9a 94       	dec	r9
 752:	f7 cf       	rjmp	.-18     	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 754:	8a 94       	dec	r8
 756:	f3 01       	movw	r30, r6
 758:	e8 0d       	add	r30, r8
 75a:	f1 1d       	adc	r31, r1
 75c:	80 81       	ld	r24, Z
 75e:	b6 01       	movw	r22, r12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 766:	81 10       	cpse	r8, r1
 768:	f5 cf       	rjmp	.-22     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 76a:	22 20       	and	r2, r2
 76c:	09 f4       	brne	.+2      	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
 76e:	42 ce       	rjmp	.-892    	; 0x3f4 <vfprintf+0x24>
 770:	b6 01       	movw	r22, r12
 772:	80 e2       	ldi	r24, 0x20	; 32
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 df 03 	call	0x7be	; 0x7be <fputc>
 77a:	2a 94       	dec	r2
 77c:	f6 cf       	rjmp	.-20     	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
 77e:	f6 01       	movw	r30, r12
 780:	86 81       	ldd	r24, Z+6	; 0x06
 782:	97 81       	ldd	r25, Z+7	; 0x07
 784:	02 c0       	rjmp	.+4      	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	9f ef       	ldi	r25, 0xFF	; 255
 78a:	2b 96       	adiw	r28, 0x0b	; 11
 78c:	e2 e1       	ldi	r30, 0x12	; 18
 78e:	0c 94 95 04 	jmp	0x92a	; 0x92a <__epilogue_restores__>

00000792 <strnlen_P>:
 792:	fc 01       	movw	r30, r24
 794:	05 90       	lpm	r0, Z+
 796:	61 50       	subi	r22, 0x01	; 1
 798:	70 40       	sbci	r23, 0x00	; 0
 79a:	01 10       	cpse	r0, r1
 79c:	d8 f7       	brcc	.-10     	; 0x794 <strnlen_P+0x2>
 79e:	80 95       	com	r24
 7a0:	90 95       	com	r25
 7a2:	8e 0f       	add	r24, r30
 7a4:	9f 1f       	adc	r25, r31
 7a6:	08 95       	ret

000007a8 <strnlen>:
 7a8:	fc 01       	movw	r30, r24
 7aa:	61 50       	subi	r22, 0x01	; 1
 7ac:	70 40       	sbci	r23, 0x00	; 0
 7ae:	01 90       	ld	r0, Z+
 7b0:	01 10       	cpse	r0, r1
 7b2:	d8 f7       	brcc	.-10     	; 0x7aa <strnlen+0x2>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	8e 0f       	add	r24, r30
 7ba:	9f 1f       	adc	r25, r31
 7bc:	08 95       	ret

000007be <fputc>:
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	fb 01       	movw	r30, r22
 7c8:	23 81       	ldd	r18, Z+3	; 0x03
 7ca:	21 fd       	sbrc	r18, 1
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <fputc+0x16>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	2c c0       	rjmp	.+88     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7d4:	22 ff       	sbrs	r18, 2
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d8:	46 81       	ldd	r20, Z+6	; 0x06
 7da:	57 81       	ldd	r21, Z+7	; 0x07
 7dc:	24 81       	ldd	r18, Z+4	; 0x04
 7de:	35 81       	ldd	r19, Z+5	; 0x05
 7e0:	42 17       	cp	r20, r18
 7e2:	53 07       	cpc	r21, r19
 7e4:	44 f4       	brge	.+16     	; 0x7f6 <fputc+0x38>
 7e6:	a0 81       	ld	r26, Z
 7e8:	b1 81       	ldd	r27, Z+1	; 0x01
 7ea:	9d 01       	movw	r18, r26
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	31 83       	std	Z+1, r19	; 0x01
 7f2:	20 83       	st	Z, r18
 7f4:	8c 93       	st	X, r24
 7f6:	26 81       	ldd	r18, Z+6	; 0x06
 7f8:	37 81       	ldd	r19, Z+7	; 0x07
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	37 83       	std	Z+7, r19	; 0x07
 800:	26 83       	std	Z+6, r18	; 0x06
 802:	14 c0       	rjmp	.+40     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 804:	8b 01       	movw	r16, r22
 806:	ec 01       	movw	r28, r24
 808:	fb 01       	movw	r30, r22
 80a:	00 84       	ldd	r0, Z+8	; 0x08
 80c:	f1 85       	ldd	r31, Z+9	; 0x09
 80e:	e0 2d       	mov	r30, r0
 810:	09 95       	icall
 812:	89 2b       	or	r24, r25
 814:	e1 f6       	brne	.-72     	; 0x7ce <fputc+0x10>
 816:	d8 01       	movw	r26, r16
 818:	16 96       	adiw	r26, 0x06	; 6
 81a:	8d 91       	ld	r24, X+
 81c:	9c 91       	ld	r25, X
 81e:	17 97       	sbiw	r26, 0x07	; 7
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	17 96       	adiw	r26, 0x07	; 7
 824:	9c 93       	st	X, r25
 826:	8e 93       	st	-X, r24
 828:	16 97       	sbiw	r26, 0x06	; 6
 82a:	ce 01       	movw	r24, r28
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	08 95       	ret

00000836 <__ultoa_invert>:
 836:	fa 01       	movw	r30, r20
 838:	aa 27       	eor	r26, r26
 83a:	28 30       	cpi	r18, 0x08	; 8
 83c:	51 f1       	breq	.+84     	; 0x892 <__ultoa_invert+0x5c>
 83e:	20 31       	cpi	r18, 0x10	; 16
 840:	81 f1       	breq	.+96     	; 0x8a2 <__ultoa_invert+0x6c>
 842:	e8 94       	clt
 844:	6f 93       	push	r22
 846:	6e 7f       	andi	r22, 0xFE	; 254
 848:	6e 5f       	subi	r22, 0xFE	; 254
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	8f 4f       	sbci	r24, 0xFF	; 255
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	af 4f       	sbci	r26, 0xFF	; 255
 852:	b1 e0       	ldi	r27, 0x01	; 1
 854:	3e d0       	rcall	.+124    	; 0x8d2 <__ultoa_invert+0x9c>
 856:	b4 e0       	ldi	r27, 0x04	; 4
 858:	3c d0       	rcall	.+120    	; 0x8d2 <__ultoa_invert+0x9c>
 85a:	67 0f       	add	r22, r23
 85c:	78 1f       	adc	r23, r24
 85e:	89 1f       	adc	r24, r25
 860:	9a 1f       	adc	r25, r26
 862:	a1 1d       	adc	r26, r1
 864:	68 0f       	add	r22, r24
 866:	79 1f       	adc	r23, r25
 868:	8a 1f       	adc	r24, r26
 86a:	91 1d       	adc	r25, r1
 86c:	a1 1d       	adc	r26, r1
 86e:	6a 0f       	add	r22, r26
 870:	71 1d       	adc	r23, r1
 872:	81 1d       	adc	r24, r1
 874:	91 1d       	adc	r25, r1
 876:	a1 1d       	adc	r26, r1
 878:	20 d0       	rcall	.+64     	; 0x8ba <__ultoa_invert+0x84>
 87a:	09 f4       	brne	.+2      	; 0x87e <__ultoa_invert+0x48>
 87c:	68 94       	set
 87e:	3f 91       	pop	r19
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	26 9f       	mul	r18, r22
 884:	11 24       	eor	r1, r1
 886:	30 19       	sub	r19, r0
 888:	30 5d       	subi	r19, 0xD0	; 208
 88a:	31 93       	st	Z+, r19
 88c:	de f6       	brtc	.-74     	; 0x844 <__ultoa_invert+0xe>
 88e:	cf 01       	movw	r24, r30
 890:	08 95       	ret
 892:	46 2f       	mov	r20, r22
 894:	47 70       	andi	r20, 0x07	; 7
 896:	40 5d       	subi	r20, 0xD0	; 208
 898:	41 93       	st	Z+, r20
 89a:	b3 e0       	ldi	r27, 0x03	; 3
 89c:	0f d0       	rcall	.+30     	; 0x8bc <__ultoa_invert+0x86>
 89e:	c9 f7       	brne	.-14     	; 0x892 <__ultoa_invert+0x5c>
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <__ultoa_invert+0x58>
 8a2:	46 2f       	mov	r20, r22
 8a4:	4f 70       	andi	r20, 0x0F	; 15
 8a6:	40 5d       	subi	r20, 0xD0	; 208
 8a8:	4a 33       	cpi	r20, 0x3A	; 58
 8aa:	18 f0       	brcs	.+6      	; 0x8b2 <__ultoa_invert+0x7c>
 8ac:	49 5d       	subi	r20, 0xD9	; 217
 8ae:	31 fd       	sbrc	r19, 1
 8b0:	40 52       	subi	r20, 0x20	; 32
 8b2:	41 93       	st	Z+, r20
 8b4:	02 d0       	rcall	.+4      	; 0x8ba <__ultoa_invert+0x84>
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__ultoa_invert+0x6c>
 8b8:	ea cf       	rjmp	.-44     	; 0x88e <__ultoa_invert+0x58>
 8ba:	b4 e0       	ldi	r27, 0x04	; 4
 8bc:	a6 95       	lsr	r26
 8be:	97 95       	ror	r25
 8c0:	87 95       	ror	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	ba 95       	dec	r27
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__ultoa_invert+0x86>
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	61 05       	cpc	r22, r1
 8ce:	71 05       	cpc	r23, r1
 8d0:	08 95       	ret
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	0a 2e       	mov	r0, r26
 8d8:	06 94       	lsr	r0
 8da:	57 95       	ror	r21
 8dc:	47 95       	ror	r20
 8de:	37 95       	ror	r19
 8e0:	27 95       	ror	r18
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__ultoa_invert+0xa2>
 8e6:	62 0f       	add	r22, r18
 8e8:	73 1f       	adc	r23, r19
 8ea:	84 1f       	adc	r24, r20
 8ec:	95 1f       	adc	r25, r21
 8ee:	a0 1d       	adc	r26, r0
 8f0:	08 95       	ret

000008f2 <__prologue_saves__>:
 8f2:	2f 92       	push	r2
 8f4:	3f 92       	push	r3
 8f6:	4f 92       	push	r4
 8f8:	5f 92       	push	r5
 8fa:	6f 92       	push	r6
 8fc:	7f 92       	push	r7
 8fe:	8f 92       	push	r8
 900:	9f 92       	push	r9
 902:	af 92       	push	r10
 904:	bf 92       	push	r11
 906:	cf 92       	push	r12
 908:	df 92       	push	r13
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	ca 1b       	sub	r28, r26
 91c:	db 0b       	sbc	r29, r27
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	f8 94       	cli
 922:	de bf       	out	0x3e, r29	; 62
 924:	0f be       	out	0x3f, r0	; 63
 926:	cd bf       	out	0x3d, r28	; 61
 928:	09 94       	ijmp

0000092a <__epilogue_restores__>:
 92a:	2a 88       	ldd	r2, Y+18	; 0x12
 92c:	39 88       	ldd	r3, Y+17	; 0x11
 92e:	48 88       	ldd	r4, Y+16	; 0x10
 930:	5f 84       	ldd	r5, Y+15	; 0x0f
 932:	6e 84       	ldd	r6, Y+14	; 0x0e
 934:	7d 84       	ldd	r7, Y+13	; 0x0d
 936:	8c 84       	ldd	r8, Y+12	; 0x0c
 938:	9b 84       	ldd	r9, Y+11	; 0x0b
 93a:	aa 84       	ldd	r10, Y+10	; 0x0a
 93c:	b9 84       	ldd	r11, Y+9	; 0x09
 93e:	c8 84       	ldd	r12, Y+8	; 0x08
 940:	df 80       	ldd	r13, Y+7	; 0x07
 942:	ee 80       	ldd	r14, Y+6	; 0x06
 944:	fd 80       	ldd	r15, Y+5	; 0x05
 946:	0c 81       	ldd	r16, Y+4	; 0x04
 948:	1b 81       	ldd	r17, Y+3	; 0x03
 94a:	aa 81       	ldd	r26, Y+2	; 0x02
 94c:	b9 81       	ldd	r27, Y+1	; 0x01
 94e:	ce 0f       	add	r28, r30
 950:	d1 1d       	adc	r29, r1
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	ed 01       	movw	r28, r26
 95e:	08 95       	ret

00000960 <_exit>:
 960:	f8 94       	cli

00000962 <__stop_program>:
 962:	ff cf       	rjmp	.-2      	; 0x962 <__stop_program>
