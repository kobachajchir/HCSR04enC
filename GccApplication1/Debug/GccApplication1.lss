
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000440  00800100  000019c8  00001a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800540  00800540  00001e9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032f5  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001257  00000000  00000000  00005455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001909  00000000  00000000  000066ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00007fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce4  00000000  00000000  00008604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001395  00000000  00000000  000092e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000a67d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_10>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 34       	cpi	r26, 0x40	; 64
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a0 e4       	ldi	r26, 0x40	; 64
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3c       	cpi	r26, 0xC5	; 197
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 03 	call	0x64e	; 0x64e <main>
      9e:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printfWrapper>:
// Configuración de interrupción externa (INT0) para el pin ECHO
void external_interrupt_init()
{
	// Configuración de interrupción externa
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
      a6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
      aa:	08 95       	ret

000000ac <__vector_10>:
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <ultraSensor+0xd>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	19 f0       	breq	.+6      	; 0xd4 <__vector_10+0x28>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	19 f1       	breq	.+70     	; 0x118 <__vector_10+0x6c>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <__vector_10+0xa6>
      d4:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <ultraSensor+0xc>
      d8:	84 ff       	sbrs	r24, 4
      da:	3b c0       	rjmp	.+118    	; 0x152 <__vector_10+0xa6>
      dc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
      e0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      e4:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <ovf_count>
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	dc 01       	movw	r26, r24
      f0:	99 27       	eor	r25, r25
      f2:	88 27       	eor	r24, r24
      f4:	82 0f       	add	r24, r18
      f6:	93 1f       	adc	r25, r19
      f8:	a1 1d       	adc	r26, r1
      fa:	b1 1d       	adc	r27, r1
      fc:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <ultraSensor>
     100:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <ultraSensor+0x1>
     104:	a0 93 a8 05 	sts	0x05A8, r26	; 0x8005a8 <ultraSensor+0x2>
     108:	b0 93 a9 05 	sts	0x05A9, r27	; 0x8005a9 <ultraSensor+0x3>
     10c:	e2 eb       	ldi	r30, 0xB2	; 178
     10e:	f5 e0       	ldi	r31, 0x05	; 5
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
     116:	1d c0       	rjmp	.+58     	; 0x152 <__vector_10+0xa6>
     118:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     11c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     120:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <ovf_count>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	dc 01       	movw	r26, r24
     12c:	99 27       	eor	r25, r25
     12e:	88 27       	eor	r24, r24
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
     138:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <ultraSensor+0x4>
     13c:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <ultraSensor+0x5>
     140:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <ultraSensor+0x6>
     144:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <ultraSensor+0x7>
     148:	e2 eb       	ldi	r30, 0xB2	; 178
     14a:	f5 e0       	ldi	r31, 0x05	; 5
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
     152:	ff 91       	pop	r31
     154:	ef 91       	pop	r30
     156:	bf 91       	pop	r27
     158:	af 91       	pop	r26
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_13>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	8f 93       	push	r24
     178:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <ovf_count>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <ovf_count>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <__vector_11>:
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
     1b0:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e3 56       	subi	r30, 0x63	; 99
     1bc:	fa 4f       	sbci	r31, 0xFA	; 250
     1be:	01 90       	ld	r0, Z+
     1c0:	f0 81       	ld	r31, Z
     1c2:	e0 2d       	mov	r30, r0
     1c4:	81 81       	ldd	r24, Z+1	; 0x01
     1c6:	81 ff       	sbrs	r24, 1
     1c8:	20 c0       	rjmp	.+64     	; 0x20a <__vector_11+0x7c>
     1ca:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <current_servo>
     1ce:	6a e5       	ldi	r22, 0x5A	; 90
     1d0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <servo_set_angle>
     1d4:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	e3 56       	subi	r30, 0x63	; 99
     1e0:	fa 4f       	sbci	r31, 0xFA	; 250
     1e2:	01 90       	ld	r0, Z+
     1e4:	f0 81       	ld	r31, Z
     1e6:	e0 2d       	mov	r30, r0
     1e8:	81 81       	ldd	r24, Z+1	; 0x01
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	81 83       	std	Z+1, r24	; 0x01
     1ee:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	e3 56       	subi	r30, 0x63	; 99
     1fa:	fa 4f       	sbci	r31, 0xFA	; 250
     1fc:	01 90       	ld	r0, Z+
     1fe:	f0 81       	ld	r31, Z
     200:	e0 2d       	mov	r30, r0
     202:	81 81       	ldd	r24, Z+1	; 0x01
     204:	84 60       	ori	r24, 0x04	; 4
     206:	81 83       	std	Z+1, r24	; 0x01
     208:	05 c0       	rjmp	.+10     	; 0x214 <__vector_11+0x86>
     20a:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <current_servo>
     20e:	6a e5       	ldi	r22, 0x5A	; 90
     210:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <servo_set_angle>
     214:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	ee 0f       	add	r30, r30
     21c:	ff 1f       	adc	r31, r31
     21e:	e3 56       	subi	r30, 0x63	; 99
     220:	fa 4f       	sbci	r31, 0xFA	; 250
     222:	01 90       	ld	r0, Z+
     224:	f0 81       	ld	r31, Z
     226:	e0 2d       	mov	r30, r0
     228:	20 81       	ld	r18, Z
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_11+0xa6>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_11+0xa2>
     238:	95 b1       	in	r25, 0x05	; 5
     23a:	89 2b       	or	r24, r25
     23c:	85 b9       	out	0x05, r24	; 5
     23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     246:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	e3 56       	subi	r30, 0x63	; 99
     252:	fa 4f       	sbci	r31, 0xFA	; 250
     254:	01 90       	ld	r0, Z+
     256:	f0 81       	ld	r31, Z
     258:	e0 2d       	mov	r30, r0
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     266:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     26a:	e8 e8       	ldi	r30, 0x88	; 136
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	91 81       	ldd	r25, Z+1	; 0x01
     272:	80 5c       	subi	r24, 0xC0	; 192
     274:	93 46       	sbci	r25, 0x63	; 99
     276:	91 83       	std	Z+1, r25	; 0x01
     278:	80 83       	st	Z, r24
     27a:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <IR_A>
     27e:	82 ff       	sbrs	r24, 2
     280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_11+0xfe>
     282:	83 fd       	sbrc	r24, 3
     284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_11+0xfe>
     286:	88 60       	ori	r24, 0x08	; 8
     288:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <IR_A>
     28c:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <IR_B>
     290:	82 ff       	sbrs	r24, 2
     292:	05 c0       	rjmp	.+10     	; 0x29e <__vector_11+0x110>
     294:	83 fd       	sbrc	r24, 3
     296:	03 c0       	rjmp	.+6      	; 0x29e <__vector_11+0x110>
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <IR_B>
     29e:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <IR_C>
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <__vector_11+0x122>
     2a6:	83 fd       	sbrc	r24, 3
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__vector_11+0x122>
     2aa:	88 60       	ori	r24, 0x08	; 8
     2ac:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <IR_C>
     2b0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <IR_U>
     2b4:	82 ff       	sbrs	r24, 2
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <__vector_11+0x134>
     2b8:	83 fd       	sbrc	r24, 3
     2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <__vector_11+0x134>
     2bc:	88 60       	ori	r24, 0x08	; 8
     2be:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <IR_U>
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	bf 91       	pop	r27
     2c8:	af 91       	pop	r26
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	7f 91       	pop	r23
     2d0:	6f 91       	pop	r22
     2d2:	5f 91       	pop	r21
     2d4:	4f 91       	pop	r20
     2d6:	3f 91       	pop	r19
     2d8:	2f 91       	pop	r18
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_12>:
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	2f 93       	push	r18
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e3 56       	subi	r30, 0x63	; 99
     30e:	fa 4f       	sbci	r31, 0xFA	; 250
     310:	01 90       	ld	r0, Z+
     312:	f0 81       	ld	r31, Z
     314:	e0 2d       	mov	r30, r0
     316:	20 81       	ld	r18, Z
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__vector_12+0x3e>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	2a 95       	dec	r18
     324:	e2 f7       	brpl	.-8      	; 0x31e <__vector_12+0x3a>
     326:	80 95       	com	r24
     328:	90 95       	com	r25
     32a:	95 b1       	in	r25, 0x05	; 5
     32c:	89 23       	and	r24, r25
     32e:	85 b9       	out	0x05, r24	; 5
     330:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	e3 56       	subi	r30, 0x63	; 99
     33c:	fa 4f       	sbci	r31, 0xFA	; 250
     33e:	01 90       	ld	r0, Z+
     340:	f0 81       	ld	r31, Z
     342:	e0 2d       	mov	r30, r0
     344:	81 81       	ldd	r24, Z+1	; 0x01
     346:	81 ff       	sbrs	r24, 1
     348:	34 c0       	rjmp	.+104    	; 0x3b2 <__vector_12+0xce>
     34a:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e3 56       	subi	r30, 0x63	; 99
     356:	fa 4f       	sbci	r31, 0xFA	; 250
     358:	01 90       	ld	r0, Z+
     35a:	f0 81       	ld	r31, Z
     35c:	e0 2d       	mov	r30, r0
     35e:	81 81       	ldd	r24, Z+1	; 0x01
     360:	82 ff       	sbrs	r24, 2
     362:	27 c0       	rjmp	.+78     	; 0x3b2 <__vector_12+0xce>
     364:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e3 56       	subi	r30, 0x63	; 99
     370:	fa 4f       	sbci	r31, 0xFA	; 250
     372:	01 90       	ld	r0, Z+
     374:	f0 81       	ld	r31, Z
     376:	e0 2d       	mov	r30, r0
     378:	81 81       	ldd	r24, Z+1	; 0x01
     37a:	8d 7f       	andi	r24, 0xFD	; 253
     37c:	81 83       	std	Z+1, r24	; 0x01
     37e:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	e3 56       	subi	r30, 0x63	; 99
     38a:	fa 4f       	sbci	r31, 0xFA	; 250
     38c:	01 90       	ld	r0, Z+
     38e:	f0 81       	ld	r31, Z
     390:	e0 2d       	mov	r30, r0
     392:	81 81       	ldd	r24, Z+1	; 0x01
     394:	8b 7f       	andi	r24, 0xFB	; 251
     396:	81 83       	std	Z+1, r24	; 0x01
     398:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <current_servo>
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	e3 56       	subi	r30, 0x63	; 99
     3a4:	fa 4f       	sbci	r31, 0xFA	; 250
     3a6:	01 90       	ld	r0, Z+
     3a8:	f0 81       	ld	r31, Z
     3aa:	e0 2d       	mov	r30, r0
     3ac:	81 81       	ldd	r24, Z+1	; 0x01
     3ae:	8d 7f       	andi	r24, 0xFD	; 253
     3b0:	81 83       	std	Z+1, r24	; 0x01
     3b2:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <current_servo>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	63 e0       	ldi	r22, 0x03	; 3
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__divmodhi4>
     3c2:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <current_servo>
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	bf 91       	pop	r27
     3cc:	af 91       	pop	r26
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	7f 91       	pop	r23
     3d4:	6f 91       	pop	r22
     3d6:	5f 91       	pop	r21
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <timer1_init>:
     3e4:	a4 e8       	ldi	r26, 0x84	; 132
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	11 96       	adiw	r26, 0x01	; 1
     3ea:	1c 92       	st	X, r1
     3ec:	1e 92       	st	-X, r1
     3ee:	86 b3       	in	r24, 0x16	; 22
     3f0:	80 62       	ori	r24, 0x20	; 32
     3f2:	86 bb       	out	0x16, r24	; 22
     3f4:	ef e6       	ldi	r30, 0x6F	; 111
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	87 62       	ori	r24, 0x27	; 39
     3fc:	80 83       	st	Z, r24
     3fe:	e1 e8       	ldi	r30, 0x81	; 129
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	80 64       	ori	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
     408:	80 81       	ld	r24, Z
     40a:	82 60       	ori	r24, 0x02	; 2
     40c:	80 83       	st	Z, r24
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	80 5c       	subi	r24, 0xC0	; 192
     414:	93 46       	sbci	r25, 0x63	; 99
     416:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     41a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     41e:	08 95       	ret

00000420 <timer2_init>:
     420:	e1 eb       	ldi	r30, 0xB1	; 177
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	87 60       	ori	r24, 0x07	; 7
     428:	80 83       	st	Z, r24
     42a:	8b e9       	ldi	r24, 0x9B	; 155
     42c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     430:	e0 e7       	ldi	r30, 0x70	; 112
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 60       	ori	r24, 0x02	; 2
     438:	80 83       	st	Z, r24
     43a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     43e:	08 95       	ret

00000440 <gpio_pins_init>:
     440:	84 b1       	in	r24, 0x04	; 4
     442:	80 62       	ori	r24, 0x20	; 32
     444:	84 b9       	out	0x04, r24	; 4
     446:	85 b1       	in	r24, 0x05	; 5
     448:	80 62       	ori	r24, 0x20	; 32
     44a:	85 b9       	out	0x05, r24	; 5
     44c:	8a b1       	in	r24, 0x0a	; 10
     44e:	88 60       	ori	r24, 0x08	; 8
     450:	8a b9       	out	0x0a, r24	; 10
     452:	84 b1       	in	r24, 0x04	; 4
     454:	8e 7f       	andi	r24, 0xFE	; 254
     456:	84 b9       	out	0x04, r24	; 4
     458:	8a b1       	in	r24, 0x0a	; 10
     45a:	8f 7e       	andi	r24, 0xEF	; 239
     45c:	8a b9       	out	0x0a, r24	; 10
     45e:	84 b1       	in	r24, 0x04	; 4
     460:	82 60       	ori	r24, 0x02	; 2
     462:	84 b9       	out	0x04, r24	; 4
     464:	84 b1       	in	r24, 0x04	; 4
     466:	84 60       	ori	r24, 0x04	; 4
     468:	84 b9       	out	0x04, r24	; 4
     46a:	84 b1       	in	r24, 0x04	; 4
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	84 b9       	out	0x04, r24	; 4
     470:	0e 94 0e 07 	call	0xe1c	; 0xe1c <tcrt_init>
     474:	8b b1       	in	r24, 0x0b	; 11
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8b b9       	out	0x0b, r24	; 11
     47a:	8b b1       	in	r24, 0x0b	; 11
     47c:	8f 7e       	andi	r24, 0xEF	; 239
     47e:	8b b9       	out	0x0b, r24	; 11
     480:	08 95       	ret

00000482 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     4a4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     4a8:	81 ff       	sbrs	r24, 1
     4aa:	c0 c0       	rjmp	.+384    	; 0x62c <__vector_7+0x1aa>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     4ac:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <ultraSensor+0xd>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	51 f5       	brne	.+84     	; 0x508 <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     4b4:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     4b8:	85 fd       	sbrc	r24, 5
     4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     4bc:	0e 94 f7 07 	call	0xfee	; 0xfee <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     4c0:	e2 eb       	ldi	r30, 0xB2	; 178
     4c2:	f5 e0       	ldi	r31, 0x05	; 5
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     4ca:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     4ce:	80 62       	ori	r24, 0x20	; 32
     4d0:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
     4d4:	19 c0       	rjmp	.+50     	; 0x508 <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     4d6:	0e 94 fb 07 	call	0xff6	; 0xff6 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     4da:	e2 eb       	ldi	r30, 0xB2	; 178
     4dc:	f5 e0       	ldi	r31, 0x05	; 5
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     4e4:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     4e8:	8d 7d       	andi	r24, 0xDD	; 221
     4ea:	88 60       	ori	r24, 0x08	; 8
     4ec:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     4f0:	80 81       	ld	r24, Z
     4f2:	8f 7d       	andi	r24, 0xDF	; 223
     4f4:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     4fc:	80 81       	ld	r24, Z
     4fe:	80 61       	ori	r24, 0x10	; 16
     500:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     502:	80 81       	ld	r24, Z
     504:	8d 7f       	andi	r24, 0xFD	; 253
     506:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     508:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <ultraSensor+0xd>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	d1 f4       	brne	.+52     	; 0x544 <__vector_7+0xc2>
     510:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <ultraSensor+0xc>
     514:	84 ff       	sbrs	r24, 4
     516:	16 c0       	rjmp	.+44     	; 0x544 <__vector_7+0xc2>
     518:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     51c:	89 70       	andi	r24, 0x09	; 9
     51e:	88 30       	cpi	r24, 0x08	; 8
     520:	89 f4       	brne	.+34     	; 0x544 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     522:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <veintems_counter>
     526:	81 11       	cpse	r24, r1
     528:	06 c0       	rjmp	.+12     	; 0x536 <__vector_7+0xb4>
				veintems_counter++;
     52a:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <veintems_counter>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <veintems_counter>
     534:	07 c0       	rjmp	.+14     	; 0x544 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     536:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     53a:	81 60       	ori	r24, 0x01	; 1
     53c:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
				veintems_counter = 0;
     540:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     544:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <ultraSensor+0xc>
     548:	85 fd       	sbrc	r24, 5
     54a:	22 c0       	rjmp	.+68     	; 0x590 <__vector_7+0x10e>
     54c:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     550:	84 fd       	sbrc	r24, 4
     552:	1e c0       	rjmp	.+60     	; 0x590 <__vector_7+0x10e>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     554:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <wait_time>
     558:	87 30       	cpi	r24, 0x07	; 7
     55a:	30 f4       	brcc	.+12     	; 0x568 <__vector_7+0xe6>
				wait_time++;
     55c:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <wait_time>
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <wait_time>
     566:	07 c0       	rjmp	.+14     	; 0x576 <__vector_7+0xf4>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     568:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
				wait_time = 0;
     572:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     576:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <ultraSensor+0xc>
     57a:	83 ff       	sbrs	r24, 3
     57c:	09 c0       	rjmp	.+18     	; 0x590 <__vector_7+0x10e>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     57e:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <bandera2>
     582:	66 fb       	bst	r22, 6
     584:	66 27       	eor	r22, r22
     586:	60 f9       	bld	r22, 0
     588:	86 ea       	ldi	r24, 0xA6	; 166
     58a:	95 e0       	ldi	r25, 0x05	; 5
     58c:	0e 94 cc 08 	call	0x1198	; 0x1198 <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     590:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <diezMsCounter>
     594:	8a 30       	cpi	r24, 0x0A	; 10
     596:	30 f4       	brcc	.+12     	; 0x5a4 <__vector_7+0x122>
			diezMsCounter++;
     598:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <diezMsCounter>
     59c:	8f 5f       	subi	r24, 0xFF	; 255
     59e:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <diezMsCounter>
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__vector_7+0x130>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     5a4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     5a8:	88 60       	ori	r24, 0x08	; 8
     5aa:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
			diezMsCounter = 0;
     5ae:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     5b2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     5b6:	86 ff       	sbrs	r24, 6
     5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <__vector_7+0x154>
			if(btn_pressed_time == 255){
     5ba:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <btn_pressed_time>
     5be:	8f 3f       	cpi	r24, 0xFF	; 255
     5c0:	29 f4       	brne	.+10     	; 0x5cc <__vector_7+0x14a>
				BTN_OVF = 1;
     5c2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     5c6:	84 60       	ori	r24, 0x04	; 4
     5c8:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
			}
			btn_pressed_time++;
     5cc:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <btn_pressed_time>
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <btn_pressed_time>
		}
		// Codigo lectura TCRT
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     5d6:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <IR_A>
     5da:	80 ff       	sbrs	r24, 0
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__vector_7+0x166>
     5de:	83 fd       	sbrc	r24, 3
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__vector_7+0x166>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     5e8:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <IR_B>
     5ec:	80 ff       	sbrs	r24, 0
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <__vector_7+0x178>
     5f0:	83 fd       	sbrc	r24, 3
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <__vector_7+0x178>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     5f4:	88 60       	ori	r24, 0x08	; 8
     5f6:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <IR_B>
		}
		if(SERVOA_RESET){
     5fa:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     5fe:	85 ff       	sbrs	r24, 5
     600:	15 c0       	rjmp	.+42     	; 0x62c <__vector_7+0x1aa>
			if(servo_counter < SERVO_RESET_TIME){
     602:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <servo_counter>
     606:	8e 31       	cpi	r24, 0x1E	; 30
     608:	30 f4       	brcc	.+12     	; 0x616 <__vector_7+0x194>
				servo_counter++;
     60a:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <servo_counter>
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <servo_counter>
     614:	0b c0       	rjmp	.+22     	; 0x62c <__vector_7+0x1aa>
				} else {
				servo_counter = 0;
     616:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <servo_counter>
				SERVOA_RESET = 0;
     61a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     61e:	8f 7d       	andi	r24, 0xDF	; 223
     620:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
				servo_set_angle(0, SERVO_IDLE_ANGLE);
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <servo_set_angle>
			}
		}
	}
}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <main>:
	bandera.byte = 0;
	bandera2.byte = 0;
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
     64e:	82 e8       	ldi	r24, 0x82	; 130
     650:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     654:	80 e8       	ldi	r24, 0x80	; 128
     656:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
	IR_CALIBRATED = 0;
     65a:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 0b 08 	call	0x1016	; 0x1016 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     666:	ef eb       	ldi	r30, 0xBF	; 191
     668:	f5 e0       	ldi	r31, 0x05	; 5
     66a:	8e e0       	ldi	r24, 0x0E	; 14
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	93 83       	std	Z+3, r25	; 0x03
     670:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	91 83       	std	Z+1, r25	; 0x01
     678:	80 83       	st	Z, r24
	diezMsCounter = 0;
     67a:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     67e:	0e 94 20 02 	call	0x440	; 0x440 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     682:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <timer1_init>
	timer2_init();
     686:	0e 94 10 02 	call	0x420	; 0x420 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     68a:	0e 94 34 07 	call	0xe68	; 0xe68 <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     68e:	63 e5       	ldi	r22, 0x53	; 83
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	86 ea       	ldi	r24, 0xA6	; 166
     694:	95 e0       	ldi	r25, 0x05	; 5
     696:	0e 94 ad 08 	call	0x115a	; 0x115a <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     69a:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <bandera2>
     69e:	66 fb       	bst	r22, 6
     6a0:	66 27       	eor	r22, r22
     6a2:	60 f9       	bld	r22, 0
     6a4:	86 ea       	ldi	r24, 0xA6	; 166
     6a6:	95 e0       	ldi	r25, 0x05	; 5
     6a8:	0e 94 36 08 	call	0x106c	; 0x106c <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     6ac:	4a e5       	ldi	r20, 0x5A	; 90
     6ae:	55 e0       	ldi	r21, 0x05	; 5
     6b0:	66 ea       	ldi	r22, 0xA6	; 166
     6b2:	75 e0       	ldi	r23, 0x05	; 5
     6b4:	88 e9       	ldi	r24, 0x98	; 152
     6b6:	95 e0       	ldi	r25, 0x05	; 5
     6b8:	0e 94 13 04 	call	0x826	; 0x826 <initDetector>
	initOutputs();
     6bc:	0e 94 2d 04 	call	0x85a	; 0x85a <initOutputs>
	initSorter(&SorterSystem);
     6c0:	8f e6       	ldi	r24, 0x6F	; 111
     6c2:	95 e0       	ldi	r25, 0x05	; 5
     6c4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     6c8:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     6cc:	82 60       	ori	r24, 0x02	; 2
     6ce:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
	//Imprime iniciado
	printf("Iniciado\n");
     6d2:	83 e2       	ldi	r24, 0x23	; 35
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
	sei();
     6da:	78 94       	sei
	while (1)
	{ 
		if(!IR_CALIBRATED){
     6dc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     6e0:	80 fd       	sbrc	r24, 0
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <main+0x10c>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     6e4:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <__data_end>
     6e8:	81 11       	cpse	r24, r1
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <main+0xc0>
		printf("Calibrando sensores IR...\n");
     6ec:	82 e2       	ldi	r24, 0x22	; 34
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
		SET_FLAG(IR_A.flags, TCRT_CALIBRATING);
     6f4:	ee e8       	ldi	r30, 0x8E	; 142
     6f6:	f5 e0       	ldi	r31, 0x05	; 5
     6f8:	80 81       	ld	r24, Z
     6fa:	84 60       	ori	r24, 0x04	; 4
     6fc:	80 83       	st	Z, r24
		SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     6fe:	e8 e4       	ldi	r30, 0x48	; 72
     700:	f5 e0       	ldi	r31, 0x05	; 5
     702:	80 81       	ld	r24, Z
     704:	84 60       	ori	r24, 0x04	; 4
     706:	80 83       	st	Z, r24
		// SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
		// SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
		init_done = true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     70e:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <IR_A>
     712:	82 ff       	sbrs	r24, 2
     714:	04 c0       	rjmp	.+8      	; 0x71e <main+0xd0>
		calibrateIRSensor(&IR_A);
     716:	8e e8       	ldi	r24, 0x8E	; 142
     718:	95 e0       	ldi	r25, 0x05	; 5
     71a:	0e 94 84 07 	call	0xf08	; 0xf08 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     71e:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <IR_B>
     722:	82 ff       	sbrs	r24, 2
     724:	04 c0       	rjmp	.+8      	; 0x72e <main+0xe0>
		calibrateIRSensor(&IR_B);
     726:	88 e4       	ldi	r24, 0x48	; 72
     728:	95 e0       	ldi	r25, 0x05	; 5
     72a:	0e 94 84 07 	call	0xf08	; 0xf08 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     72e:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <IR_A>
     732:	82 fd       	sbrc	r24, 2
     734:	16 c0       	rjmp	.+44     	; 0x762 <main+0x114>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
     736:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <IR_B>
		calibrateIRSensor(&IR_B);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     73a:	82 fd       	sbrc	r24, 2
     73c:	12 c0       	rjmp	.+36     	; 0x762 <main+0x114>
	!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) { //Agregar los otros despues
		if(!IR_CALIBRATED){
     73e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     742:	80 fd       	sbrc	r24, 0
     744:	0e c0       	rjmp	.+28     	; 0x762 <main+0x114>
			printf("Todos los sensores IR calibrados.\n");	
     746:	8c e3       	ldi	r24, 0x3C	; 60
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
			IR_CALIBRATED = 1;
     74e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     752:	81 60       	ori	r24, 0x01	; 1
     754:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bandera3>
     758:	04 c0       	rjmp	.+8      	; 0x762 <main+0x114>
	while (1)
	{ 
		if(!IR_CALIBRATED){
			calibrateAllIRSensors();
		}else{
			irSensorsTask(&SorterSystem);
     75a:	8f e6       	ldi	r24, 0x6F	; 111
     75c:	95 e0       	ldi	r25, 0x05	; 5
     75e:	0e 94 44 06 	call	0xc88	; 0xc88 <irSensorsTask>
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     762:	6f e6       	ldi	r22, 0x6F	; 111
     764:	75 e0       	ldi	r23, 0x05	; 5
     766:	88 e9       	ldi	r24, 0x98	; 152
     768:	95 e0       	ldi	r25, 0x05	; 5
     76a:	0e 94 12 05 	call	0xa24	; 0xa24 <ultraSensorTask>
		servosTask();
     76e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <servosTask>
		if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     772:	4c 9b       	sbis	0x09, 4	; 9
     774:	0a c0       	rjmp	.+20     	; 0x78a <main+0x13c>
     776:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     77a:	86 fd       	sbrc	r24, 6
     77c:	06 c0       	rjmp	.+12     	; 0x78a <main+0x13c>
			btn_pressed_time = 0;
     77e:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <btn_pressed_time>
			BTN_PRESSED = 1;
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
     788:	28 c0       	rjmp	.+80     	; 0x7da <main+0x18c>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     78a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     78e:	86 ff       	sbrs	r24, 6
     790:	24 c0       	rjmp	.+72     	; 0x7da <main+0x18c>
     792:	4c 99       	sbic	0x09, 4	; 9
     794:	22 c0       	rjmp	.+68     	; 0x7da <main+0x18c>
			BTN_PRESSED = 0;
     796:	8f 7b       	andi	r24, 0xBF	; 191
     798:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
			if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     79c:	82 ff       	sbrs	r24, 2
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <main+0x15a>
				printf("Btn overflowed\n");
     7a0:	8e e5       	ldi	r24, 0x5E	; 94
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
			}
			if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido 
     7a8:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <btn_pressed_time>
     7ac:	8a 30       	cpi	r24, 0x0A	; 10
     7ae:	30 f4       	brcc	.+12     	; 0x7bc <main+0x16e>
     7b0:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     7b4:	98 2f       	mov	r25, r24
     7b6:	94 70       	andi	r25, 0x04	; 4
     7b8:	82 ff       	sbrs	r24, 2
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <main+0x17a>
				BTN_RELEASED = 1;
     7bc:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <main+0x18c>
			}else{ //Reiniciar
				btn_pressed_time = 0;
     7c8:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <btn_pressed_time>
				if(BTN_OVF){
     7cc:	99 23       	and	r25, r25
     7ce:	29 f0       	breq	.+10     	; 0x7da <main+0x18c>
					BTN_OVF = 0;
     7d0:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     7d4:	8b 7f       	andi	r24, 0xFB	; 251
     7d6:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
				}
			}
		}
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     7da:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     7de:	84 ff       	sbrs	r24, 4
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <main+0x1a4>
			WAIT_TIME_TRIGGER_PASSED = 0;
     7e2:	8f 7e       	andi	r24, 0xEF	; 239
     7e4:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     7e8:	e2 eb       	ldi	r30, 0xB2	; 178
     7ea:	f5 e0       	ldi	r31, 0x05	; 5
     7ec:	80 81       	ld	r24, Z
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     7f2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     7f6:	83 ff       	sbrs	r24, 3
     7f8:	0d c0       	rjmp	.+26     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			ECHO_INTERVAL_FLAG = 0;
     7fa:	87 7f       	andi	r24, 0xF7	; 247
     7fc:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
			EMIT_TRIGGER = 1;
     800:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     804:	82 60       	ori	r24, 0x02	; 2
     806:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
			IR_READ = 1;
     80a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     80e:	82 60       	ori	r24, 0x02	; 2
     810:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bandera3>
		}
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     814:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     818:	80 ff       	sbrs	r24, 0
     81a:	60 cf       	rjmp	.-320    	; 0x6dc <main+0x8e>
			BTN_RELEASED = 0; //TEST SERVO A
			//EMIT_TRIGGER = 1;
			SERVOA_MOVE = 1;
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
     824:	5b cf       	rjmp	.-330    	; 0x6dc <main+0x8e>

00000826 <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <initDetector+0x6>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	fc 01       	movw	r30, r24
     832:	5a 83       	std	Y+2, r21	; 0x02
     834:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     836:	86 ea       	ldi	r24, 0xA6	; 166
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	93 83       	std	Z+3, r25	; 0x03
     844:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     846:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     848:	8d e6       	ldi	r24, 0x6D	; 109
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <initOutputs>:

void initOutputs(){
	initServo(&servoA, 0, SERVOA_PIN);
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	82 e5       	ldi	r24, 0x52	; 82
     864:	95 e0       	ldi	r25, 0x05	; 5
     866:	0e 94 bf 06 	call	0xd7e	; 0xd7e <initServo>
	initServo(&servoB, 1, SERVOB_PIN);
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	87 eb       	ldi	r24, 0xB7	; 183
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 bf 06 	call	0xd7e	; 0xd7e <initServo>
	initServo(&servoC, 2, SERVOC_PIN);
     87a:	43 e0       	ldi	r20, 0x03	; 3
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	62 e0       	ldi	r22, 0x02	; 2
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	89 e8       	ldi	r24, 0x89	; 137
     884:	95 e0       	ldi	r25, 0x05	; 5
     886:	0e 94 bf 06 	call	0xd7e	; 0xd7e <initServo>
	salidaA.actuator_pin = SERVOA_PIN;
     88a:	e7 e5       	ldi	r30, 0x57	; 87
     88c:	f5 e0       	ldi	r31, 0x05	; 5
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	81 83       	std	Z+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     892:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <IR_A+0x8>
     896:	80 83       	st	Z, r24
	salidaA.flags.byte = 0;
     898:	12 82       	std	Z+2, r1	; 0x02
	salidaB.actuator_pin = SERVOB_PIN;
     89a:	ec eb       	ldi	r30, 0xBC	; 188
     89c:	f5 e0       	ldi	r31, 0x05	; 5
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	81 83       	std	Z+1, r24	; 0x01
	salidaB.sensor_pin = IR_B.pin;
     8a2:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <IR_B+0x8>
     8a6:	80 83       	st	Z, r24
	salidaB.flags.byte = 0;
     8a8:	12 82       	std	Z+2, r1	; 0x02
	salidaC.actuator_pin = SERVOC_PIN;
     8aa:	e3 ea       	ldi	r30, 0xA3	; 163
     8ac:	f5 e0       	ldi	r31, 0x05	; 5
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     8b2:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <IR_C+0x8>
     8b6:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
     8b8:	12 82       	std	Z+2, r1	; 0x02
	printf("Init outputs\n");
     8ba:	8e e8       	ldi	r24, 0x8E	; 142
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     8c2:	08 95       	ret

000008c4 <initSorter>:
}

void initSorter(sorter_system_t* SystemSorter){
     8c4:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     8c6:	8c e1       	ldi	r24, 0x1C	; 28
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     8ce:	87 e5       	ldi	r24, 0x57	; 87
     8d0:	95 e0       	ldi	r25, 0x05	; 5
     8d2:	93 83       	std	Z+3, r25	; 0x03
     8d4:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     8d6:	8c eb       	ldi	r24, 0xBC	; 188
     8d8:	95 e0       	ldi	r25, 0x05	; 5
     8da:	95 83       	std	Z+5, r25	; 0x05
     8dc:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     8de:	83 ea       	ldi	r24, 0xA3	; 163
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	97 83       	std	Z+7, r25	; 0x07
     8e4:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     8e6:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     8ea:	88 23       	and	r24, r24
     8ec:	44 f4       	brge	.+16     	; 0x8fe <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     8ee:	8b e9       	ldi	r24, 0x9B	; 155
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     8f6:	8d ec       	ldi	r24, 0xCD	; 205
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     8fe:	08 95       	ret

00000900 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     900:	8e 3b       	cpi	r24, 0xBE	; 190
     902:	98 f0       	brcs	.+38     	; 0x92a <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     904:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <bandera2>
     908:	99 23       	and	r25, r25
     90a:	0c f0       	brlt	.+2      	; 0x90e <classify_box+0xe>
     90c:	83 c0       	rjmp	.+262    	; 0xa14 <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     90e:	1f 92       	push	r1
     910:	8f 93       	push	r24
     912:	82 ef       	ldi	r24, 0xF2	; 242
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
		}
		return NO_BOX;
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     92a:	9e eb       	ldi	r25, 0xBE	; 190
     92c:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     92e:	97 33       	cpi	r25, 0x37	; 55
     930:	98 f4       	brcc	.+38     	; 0x958 <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     932:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     936:	80 78       	andi	r24, 0x80	; 128
     938:	09 f4       	brne	.+2      	; 0x93c <classify_box+0x3c>
     93a:	73 c0       	rjmp	.+230    	; 0xa22 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     93c:	1f 92       	push	r1
     93e:	9f 93       	push	r25
     940:	82 e2       	ldi	r24, 0x22	; 34
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     958:	db 01       	movw	r26, r22
     95a:	ed 91       	ld	r30, X+
     95c:	fc 91       	ld	r31, X
     95e:	80 81       	ld	r24, Z
     960:	98 17       	cp	r25, r24
     962:	b0 f0       	brcs	.+44     	; 0x990 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     964:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     966:	89 17       	cp	r24, r25
     968:	98 f0       	brcs	.+38     	; 0x990 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     96a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     96e:	88 23       	and	r24, r24
     970:	0c f0       	brlt	.+2      	; 0x974 <classify_box+0x74>
     972:	52 c0       	rjmp	.+164    	; 0xa18 <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     974:	1f 92       	push	r1
     976:	9f 93       	push	r25
     978:	8b e4       	ldi	r24, 0x4B	; 75
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     990:	82 81       	ldd	r24, Z+2	; 0x02
     992:	98 17       	cp	r25, r24
     994:	a8 f0       	brcs	.+42     	; 0x9c0 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     996:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     998:	89 17       	cp	r24, r25
     99a:	90 f0       	brcs	.+36     	; 0x9c0 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     99c:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     9a0:	88 23       	and	r24, r24
     9a2:	e4 f5       	brge	.+120    	; 0xa1c <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     9a4:	1f 92       	push	r1
     9a6:	9f 93       	push	r25
     9a8:	80 e6       	ldi	r24, 0x60	; 96
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     9c0:	84 81       	ldd	r24, Z+4	; 0x04
     9c2:	98 17       	cp	r25, r24
     9c4:	a8 f0       	brcs	.+42     	; 0x9f0 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     9c6:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     9c8:	89 17       	cp	r24, r25
     9ca:	90 f0       	brcs	.+36     	; 0x9f0 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     9cc:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     9d0:	88 23       	and	r24, r24
     9d2:	34 f5       	brge	.+76     	; 0xa20 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     9d4:	1f 92       	push	r1
     9d6:	9f 93       	push	r25
     9d8:	85 e7       	ldi	r24, 0x75	; 117
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     9f0:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     9f4:	80 78       	andi	r24, 0x80	; 128
     9f6:	a9 f0       	breq	.+42     	; 0xa22 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     9f8:	1f 92       	push	r1
     9fa:	9f 93       	push	r25
     9fc:	8a e8       	ldi	r24, 0x8A	; 138
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     a20:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     a22:	08 95       	ret

00000a24 <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ec 01       	movw	r28, r24
     a30:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER) //usamos -> para acceder a los atributos, porque lo que recibimos es un puntero
     a32:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     a36:	88 23       	and	r24, r24
     a38:	a4 f5       	brge	.+104    	; 0xaa2 <ultraSensorTask+0x7e>
     a3a:	e8 81       	ld	r30, Y
     a3c:	f9 81       	ldd	r31, Y+1	; 0x01
     a3e:	84 85       	ldd	r24, Z+12	; 0x0c
     a40:	85 ff       	sbrs	r24, 5
     a42:	2f c0       	rjmp	.+94     	; 0xaa2 <ultraSensorTask+0x7e>
     a44:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     a48:	81 ff       	sbrs	r24, 1
     a4a:	2b c0       	rjmp	.+86     	; 0xaa2 <ultraSensorTask+0x7e>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     a4c:	cf 01       	movw	r24, r30
     a4e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <ultrasonic_start>
     a52:	88 23       	and	r24, r24
     a54:	c1 f0       	breq	.+48     	; 0xa86 <ultraSensorTask+0x62>
		{
			if (DEBUG_FLAGS)
     a56:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     a5a:	86 ff       	sbrs	r24, 6
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <ultraSensorTask+0x42>
			{
				printf("InitHCSR04\n");
     a5e:	88 eb       	ldi	r24, 0xB8	; 184
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     a66:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     a70:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     a74:	8d 7f       	andi	r24, 0xFD	; 253
     a76:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     a7a:	e8 81       	ld	r30, Y
     a7c:	f9 81       	ldd	r31, Y+1	; 0x01
     a7e:	84 85       	ldd	r24, Z+12	; 0x0c
     a80:	8f 7d       	andi	r24, 0xDF	; 223
     a82:	84 87       	std	Z+12, r24	; 0x0c
     a84:	0e c0       	rjmp	.+28     	; 0xaa2 <ultraSensorTask+0x7e>
		}
		else
		{
			if (DEBUG_FLAGS)
     a86:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     a8a:	86 ff       	sbrs	r24, 6
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <ultraSensorTask+0x72>
			{
				printf("ErrorInitHCSR04\n");
     a8e:	83 eb       	ldi	r24, 0xB3	; 179
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
			}
			EMIT_FAILED = 1;
     a96:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
			EMIT_TRIGGER = 0;
     a9a:	84 60       	ori	r24, 0x04	; 4
     a9c:	8d 7f       	andi	r24, 0xFD	; 253
     a9e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
     aa2:	88 81       	ld	r24, Y
     aa4:	99 81       	ldd	r25, Y+1	; 0x01
     aa6:	0e 94 17 09 	call	0x122e	; 0x122e <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
     aaa:	e8 81       	ld	r30, Y
     aac:	f9 81       	ldd	r31, Y+1	; 0x01
     aae:	85 85       	ldd	r24, Z+13	; 0x0d
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	09 f0       	breq	.+2      	; 0xab6 <ultraSensorTask+0x92>
     ab4:	b2 c0       	rjmp	.+356    	; 0xc1a <ultraSensorTask+0x1f6>
     ab6:	84 85       	ldd	r24, Z+12	; 0x0c
     ab8:	88 23       	and	r24, r24
     aba:	0c f0       	brlt	.+2      	; 0xabe <ultraSensorTask+0x9a>
     abc:	ae c0       	rjmp	.+348    	; 0xc1a <ultraSensorTask+0x1f6>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
     abe:	84 85       	ldd	r24, Z+12	; 0x0c
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
     ac4:	e8 81       	ld	r30, Y
     ac6:	f9 81       	ldd	r31, Y+1	; 0x01
     ac8:	80 85       	ldd	r24, Z+8	; 0x08
     aca:	91 85       	ldd	r25, Z+9	; 0x09
     acc:	a2 85       	ldd	r26, Z+10	; 0x0a
     ace:	b3 85       	ldd	r27, Z+11	; 0x0b
     ad0:	8f 3b       	cpi	r24, 0xBF	; 191
     ad2:	91 05       	cpc	r25, r1
     ad4:	a1 05       	cpc	r26, r1
     ad6:	b1 05       	cpc	r27, r1
     ad8:	b0 f0       	brcs	.+44     	; 0xb06 <ultraSensorTask+0xe2>
		{
			tipo = NO_BOX;
			ultraDetector->flags.bitmap.bit0 = 1; // ZONE_ULTRA_CLEAR
     ada:	8c 81       	ldd	r24, Y+4	; 0x04
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
     ae0:	98 2f       	mov	r25, r24
     ae2:	92 95       	swap	r25
     ae4:	9f 70       	andi	r25, 0x0F	; 15
     ae6:	92 30       	cpi	r25, 0x02	; 2
     ae8:	51 f4       	brne	.+20     	; 0xafe <ultraSensorTask+0xda>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
     aea:	8f 70       	andi	r24, 0x0F	; 15
     aec:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
     aee:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     af2:	88 23       	and	r24, r24
     af4:	24 f4       	brge	.+8      	; 0xafe <ultraSensorTask+0xda>
					printf("Sensor liberado de nuevo\n");
     af6:	83 ec       	ldi	r24, 0xC3	; 195
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	8c 83       	std	Y+4, r24	; 0x04
     b04:	7e c0       	rjmp	.+252    	; 0xc02 <ultraSensorTask+0x1de>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	98 2f       	mov	r25, r24
     b0a:	92 95       	swap	r25
     b0c:	9f 70       	andi	r25, 0x0F	; 15
     b0e:	09 f0       	breq	.+2      	; 0xb12 <ultraSensorTask+0xee>
     b10:	78 c0       	rjmp	.+240    	; 0xc02 <ultraSensorTask+0x1de>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	80 61       	ori	r24, 0x10	; 16
     b16:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
     b18:	80 85       	ldd	r24, Z+8	; 0x08
     b1a:	91 85       	ldd	r25, Z+9	; 0x09
     b1c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b1e:	b3 85       	ldd	r27, Z+11	; 0x0b
     b20:	b8 01       	movw	r22, r16
     b22:	0e 94 80 04 	call	0x900	; 0x900 <classify_box>
     b26:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	f8 16       	cp	r15, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <ultraSensorTask+0x10c>
     b2e:	65 c0       	rjmp	.+202    	; 0xbfa <ultraSensorTask+0x1d6>
				{
					box_t nueva_caja;
					nueva_caja.height_mm = ultraDetector->sensor->distance_mm;
     b30:	e8 81       	ld	r30, Y
     b32:	f9 81       	ldd	r31, Y+1	; 0x01
     b34:	80 85       	ldd	r24, Z+8	; 0x08
     b36:	91 85       	ldd	r25, Z+9	; 0x09
     b38:	a2 85       	ldd	r26, Z+10	; 0x0a
     b3a:	b3 85       	ldd	r27, Z+11	; 0x0b
					nueva_caja.flags.byte = 0;
					nueva_caja.flags.nibbles.bitH = tipo; // Guarda tipo en nibble alto
					nueva_caja.state = BOX_MEASURED;

					// Debug de tipo
					switch (tipo)
     b3c:	e1 e0       	ldi	r30, 0x01	; 1
     b3e:	fe 16       	cp	r15, r30
     b40:	49 f0       	breq	.+18     	; 0xb54 <ultraSensorTask+0x130>
     b42:	fe 16       	cp	r15, r30
     b44:	b0 f0       	brcs	.+44     	; 0xb72 <ultraSensorTask+0x14e>
     b46:	f2 e0       	ldi	r31, 0x02	; 2
     b48:	ff 16       	cp	r15, r31
     b4a:	49 f0       	breq	.+18     	; 0xb5e <ultraSensorTask+0x13a>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	f8 16       	cp	r15, r24
     b50:	59 f0       	breq	.+22     	; 0xb68 <ultraSensorTask+0x144>
     b52:	14 c0       	rjmp	.+40     	; 0xb7c <ultraSensorTask+0x158>
					{
						case BOX_SIZE_A: printf("BOX_SIZE_A\n"); break;
     b54:	8c ed       	ldi	r24, 0xDC	; 220
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     b5c:	13 c0       	rjmp	.+38     	; 0xb84 <ultraSensorTask+0x160>
						case BOX_SIZE_B: printf("BOX_SIZE_B\n"); break;
     b5e:	87 ee       	ldi	r24, 0xE7	; 231
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <ultraSensorTask+0x160>
						case BOX_SIZE_C: printf("BOX_SIZE_C\n"); break;
     b68:	82 ef       	ldi	r24, 0xF2	; 242
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <ultraSensorTask+0x160>
						case BOX_DISCARDED: printf("BOX_DISCARDED\n"); break;
     b72:	8d ef       	ldi	r24, 0xFD	; 253
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <ultraSensorTask+0x160>
						default: printf("Tipo no reconocido\n"); break;
     b7c:	8b e0       	ldi	r24, 0x0B	; 11
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
					}

					// Estadísticas
					if (tipo == BOX_DISCARDED)
     b84:	f1 10       	cpse	r15, r1
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <ultraSensorTask+0x17e>
					{
						nueva_caja.flags.bitmap.bit2 = 1; // DISCARDED
						sorter->stats.total_discarded++;
     b88:	f8 01       	movw	r30, r16
     b8a:	80 89       	ldd	r24, Z+16	; 0x10
     b8c:	91 89       	ldd	r25, Z+17	; 0x11
     b8e:	a2 89       	ldd	r26, Z+18	; 0x12
     b90:	b3 89       	ldd	r27, Z+19	; 0x13
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	a1 1d       	adc	r26, r1
     b96:	b1 1d       	adc	r27, r1
     b98:	80 8b       	std	Z+16, r24	; 0x10
     b9a:	91 8b       	std	Z+17, r25	; 0x11
     b9c:	a2 8b       	std	Z+18, r26	; 0x12
     b9e:	b3 8b       	std	Z+19, r27	; 0x13
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <ultraSensorTask+0x196>
					}
					else
					{
						sorter->stats.total_selected++;
     ba2:	f8 01       	movw	r30, r16
     ba4:	84 85       	ldd	r24, Z+12	; 0x0c
     ba6:	95 85       	ldd	r25, Z+13	; 0x0d
     ba8:	a6 85       	ldd	r26, Z+14	; 0x0e
     baa:	b7 85       	ldd	r27, Z+15	; 0x0f
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	a1 1d       	adc	r26, r1
     bb0:	b1 1d       	adc	r27, r1
     bb2:	84 87       	std	Z+12, r24	; 0x0c
     bb4:	95 87       	std	Z+13, r25	; 0x0d
     bb6:	a6 87       	std	Z+14, r26	; 0x0e
     bb8:	b7 87       	std	Z+15, r27	; 0x0f
					}

					sorter->stats.total_measured++;
     bba:	f8 01       	movw	r30, r16
     bbc:	80 85       	ldd	r24, Z+8	; 0x08
     bbe:	91 85       	ldd	r25, Z+9	; 0x09
     bc0:	a2 85       	ldd	r26, Z+10	; 0x0a
     bc2:	b3 85       	ldd	r27, Z+11	; 0x0b
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	a1 1d       	adc	r26, r1
     bc8:	b1 1d       	adc	r27, r1
     bca:	80 87       	std	Z+8, r24	; 0x08
     bcc:	91 87       	std	Z+9, r25	; 0x09
     bce:	a2 87       	std	Z+10, r26	; 0x0a
     bd0:	b3 87       	std	Z+11, r27	; 0x0b
					sorter->stats.count_by_type[tipo]++;
     bd2:	ef 2d       	mov	r30, r15
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	35 96       	adiw	r30, 0x05	; 5
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	e0 0f       	add	r30, r16
     be2:	f1 1f       	adc	r31, r17
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	a2 81       	ldd	r26, Z+2	; 0x02
     bea:	b3 81       	ldd	r27, Z+3	; 0x03
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	a1 1d       	adc	r26, r1
     bf0:	b1 1d       	adc	r27, r1
     bf2:	80 83       	st	Z, r24
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	a2 83       	std	Z+2, r26	; 0x02
     bf8:	b3 83       	std	Z+3, r27	; 0x03

					// TODO: guardar nueva_caja en buffer de cajas, si implementás uno
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	80 62       	ori	r24, 0x20	; 32
     c00:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
     c02:	88 81       	ld	r24, Y
     c04:	99 81       	ldd	r25, Y+1	; 0x01
     c06:	0e 94 88 08 	call	0x1110	; 0x1110 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
     c0a:	e8 81       	ld	r30, Y
     c0c:	f9 81       	ldd	r31, Y+1	; 0x01
     c0e:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
     c10:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
     c1a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     c1e:	80 ff       	sbrs	r24, 0
     c20:	2d c0       	rjmp	.+90     	; 0xc7c <ultraSensorTask+0x258>
	{
		if (DEBUG_FLAGS)
     c22:	86 ff       	sbrs	r24, 6
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <ultraSensorTask+0x20a>
		{
			printf("HCSR04 perdio ECHO\n");
     c26:	8e e1       	ldi	r24, 0x1E	; 30
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
		}
		VEINTEMS_PASSED = 0;
     c2e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
		WAITING_ECHO = 0;
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	87 7f       	andi	r24, 0xF7	; 247
     c36:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
     c3a:	e8 81       	ld	r30, Y
     c3c:	f9 81       	ldd	r31, Y+1	; 0x01
     c3e:	84 85       	ldd	r24, Z+12	; 0x0c
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
     c44:	e8 81       	ld	r30, Y
     c46:	f9 81       	ldd	r31, Y+1	; 0x01
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
     c4c:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <bandera2>
     c50:	66 fb       	bst	r22, 6
     c52:	66 27       	eor	r22, r22
     c54:	60 f9       	bld	r22, 0
     c56:	88 81       	ld	r24, Y
     c58:	99 81       	ldd	r25, Y+1	; 0x01
     c5a:	0e 94 cc 08 	call	0x1198	; 0x1198 <ultrasonic_timeout_clear>
     c5e:	88 23       	and	r24, r24
     c60:	41 f0       	breq	.+16     	; 0xc72 <ultraSensorTask+0x24e>
     c62:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <bandera2>
     c66:	86 ff       	sbrs	r24, 6
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <ultraSensorTask+0x24e>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
     c6a:	81 e3       	ldi	r24, 0x31	; 49
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <puts>
		}

		ULTRASONIC_ENABLE = 1;
     c72:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <bandera>
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <bandera>
	}
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	08 95       	ret

00000c88 <irSensorsTask>:

void irSensorsTask(sorter_system_t * sorter){
	if(IR_READ){
     c88:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     c8c:	81 ff       	sbrs	r24, 1
     c8e:	25 c0       	rjmp	.+74     	; 0xcda <irSensorsTask+0x52>
		printf("IR A: %u\n", IR_A.ADCConvertedValue);
     c90:	ee e8       	ldi	r30, 0x8E	; 142
     c92:	f5 e0       	ldi	r31, 0x05	; 5
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	8f 93       	push	r24
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	8f 93       	push	r24
     c9c:	83 e5       	ldi	r24, 0x53	; 83
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
		printf("IR B: %u\n", IR_B.ADCConvertedValue);
     ca8:	e8 e4       	ldi	r30, 0x48	; 72
     caa:	f5 e0       	ldi	r31, 0x05	; 5
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	8f 93       	push	r24
     cb0:	81 81       	ldd	r24, Z+1	; 0x01
     cb2:	8f 93       	push	r24
     cb4:	8d e5       	ldi	r24, 0x5D	; 93
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
		IR_READ = 0;
     cc0:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bandera3>
     cc4:	8d 7f       	andi	r24, 0xFD	; 253
     cc6:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bandera3>
     cca:	8d b7       	in	r24, 0x3d	; 61
     ccc:	9e b7       	in	r25, 0x3e	; 62
     cce:	08 96       	adiw	r24, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	9e bf       	out	0x3e, r25	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	8d bf       	out	0x3d, r24	; 61
	}
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
     cda:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <IR_A>
     cde:	80 ff       	sbrs	r24, 0
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <irSensorsTask+0x68>
     ce2:	83 ff       	sbrs	r24, 3
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <irSensorsTask+0x68>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <IR_A>
		tcrt_read();
     cec:	0e 94 c3 07 	call	0xf86	; 0xf86 <tcrt_read>
     cf0:	08 95       	ret

00000cf2 <servosTask>:
	}
}

void servosTask(){
	// SERVO A
	if (!IS_FLAG_SET(servoA.flags, SERVO_PUSH) && !IS_FLAG_SET(servoA.flags, SERVO_RESET)) {
     cf2:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <servoA+0x1>
     cf6:	28 2f       	mov	r18, r24
     cf8:	22 70       	andi	r18, 0x02	; 2
     cfa:	81 fd       	sbrc	r24, 1
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <servosTask+0x1c>
     cfe:	82 fd       	sbrc	r24, 2
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <servosTask+0x1c>
		// Ya terminó su ciclo de activación ? limpiar orden externa
		CLEAR_FLAG(salidaA.flags, OUTPUT_PUSH);
     d02:	e7 e5       	ldi	r30, 0x57	; 87
     d04:	f5 e0       	ldi	r31, 0x05	; 5
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	82 83       	std	Z+2, r24	; 0x02
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <servosTask+0x2e>
		} else if (IS_FLAG_SET(salidaA.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoA.flags, SERVO_PUSH)) {
     d0e:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <salidaA+0x2>
     d12:	91 ff       	sbrs	r25, 1
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <servosTask+0x2e>
     d16:	21 11       	cpse	r18, r1
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <servosTask+0x2e>
		// Solo setea si no se activó aún el pulso
		SET_FLAG(servoA.flags, SERVO_PUSH);
		SET_FLAG(servoA.flags, SERVO_RESET);
     d1a:	86 60       	ori	r24, 0x06	; 6
     d1c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <servoA+0x1>
	}

	// SERVO B
	if (!IS_FLAG_SET(servoB.flags, SERVO_PUSH) && !IS_FLAG_SET(servoB.flags, SERVO_RESET)) {
     d20:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <servoB+0x1>
     d24:	28 2f       	mov	r18, r24
     d26:	22 70       	andi	r18, 0x02	; 2
     d28:	81 fd       	sbrc	r24, 1
     d2a:	08 c0       	rjmp	.+16     	; 0xd3c <servosTask+0x4a>
     d2c:	82 fd       	sbrc	r24, 2
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <servosTask+0x4a>
		CLEAR_FLAG(salidaB.flags, OUTPUT_PUSH);
     d30:	ec eb       	ldi	r30, 0xBC	; 188
     d32:	f5 e0       	ldi	r31, 0x05	; 5
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	8d 7f       	andi	r24, 0xFD	; 253
     d38:	82 83       	std	Z+2, r24	; 0x02
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <servosTask+0x5c>
		} else if (IS_FLAG_SET(salidaB.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoB.flags, SERVO_PUSH)) {
     d3c:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <salidaB+0x2>
     d40:	91 ff       	sbrs	r25, 1
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <servosTask+0x5c>
     d44:	21 11       	cpse	r18, r1
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <servosTask+0x5c>
		SET_FLAG(servoB.flags, SERVO_PUSH);
		SET_FLAG(servoB.flags, SERVO_RESET);
     d48:	86 60       	ori	r24, 0x06	; 6
     d4a:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <servoB+0x1>
	}

	// SERVO C
	if (!IS_FLAG_SET(servoC.flags, SERVO_PUSH) && !IS_FLAG_SET(servoC.flags, SERVO_RESET)) {
     d4e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <servoC+0x1>
     d52:	28 2f       	mov	r18, r24
     d54:	22 70       	andi	r18, 0x02	; 2
     d56:	81 fd       	sbrc	r24, 1
     d58:	08 c0       	rjmp	.+16     	; 0xd6a <servosTask+0x78>
     d5a:	82 fd       	sbrc	r24, 2
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <servosTask+0x78>
		CLEAR_FLAG(salidaC.flags, OUTPUT_PUSH);
     d5e:	e3 ea       	ldi	r30, 0xA3	; 163
     d60:	f5 e0       	ldi	r31, 0x05	; 5
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	08 95       	ret
		} else if (IS_FLAG_SET(salidaC.flags, OUTPUT_PUSH) && !IS_FLAG_SET(servoC.flags, SERVO_PUSH)) {
     d6a:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <salidaC+0x2>
     d6e:	91 ff       	sbrs	r25, 1
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <servosTask+0x8a>
     d72:	21 11       	cpse	r18, r1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <servosTask+0x8a>
		SET_FLAG(servoC.flags, SERVO_PUSH);
		SET_FLAG(servoC.flags, SERVO_RESET);
     d76:	86 60       	ori	r24, 0x06	; 6
     d78:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <servoC+0x1>
     d7c:	08 95       	ret

00000d7e <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(servo_t* servo, uint8_t index, uint8_t pin){
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	8c 01       	movw	r16, r24
     d8a:	f4 2e       	mov	r15, r20
	printf("Init Servo %u\n", index);
     d8c:	c6 2f       	mov	r28, r22
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	1f 92       	push	r1
     d92:	6f 93       	push	r22
     d94:	87 e6       	ldi	r24, 0x67	; 103
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
	servo->flags.byte = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	f8 01       	movw	r30, r16
     da4:	81 83       	std	Z+1, r24	; 0x01
	servo->pulse_us = SERVO_START_PULSE;
     da6:	88 eb       	ldi	r24, 0xB8	; 184
     da8:	9b e0       	ldi	r25, 0x0B	; 11
     daa:	93 83       	std	Z+3, r25	; 0x03
     dac:	82 83       	std	Z+2, r24	; 0x02
	servo->pin = pin;
     dae:	f0 82       	st	Z, r15
	servosArray[index] = servo;
     db0:	cc 0f       	add	r28, r28
     db2:	dd 1f       	adc	r29, r29
     db4:	c3 56       	subi	r28, 0x63	; 99
     db6:	da 4f       	sbci	r29, 0xFA	; 250
     db8:	19 83       	std	Y+1, r17	; 0x01
     dba:	08 83       	st	Y, r16
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	08 95       	ret

00000dd0 <servo_set_angle>:

void servo_set_angle(uint8_t index, uint8_t angle)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
	if (index >= NUM_OUTPUTS) return;
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	f8 f4       	brcc	.+62     	; 0xe16 <servo_set_angle+0x46>
	if (angle > 180) angle = 180;
     dd8:	65 3b       	cpi	r22, 0xB5	; 181
     dda:	08 f0       	brcs	.+2      	; 0xdde <servo_set_angle+0xe>
     ddc:	64 eb       	ldi	r22, 0xB4	; 180
	servosArray[index]->angle = angle;
     dde:	e8 2f       	mov	r30, r24
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e3 56       	subi	r30, 0x63	; 99
     de8:	fa 4f       	sbci	r31, 0xFA	; 250
     dea:	a0 81       	ld	r26, Z
     dec:	b1 81       	ldd	r27, Z+1	; 0x01
     dee:	14 96       	adiw	r26, 0x04	; 4
     df0:	6c 93       	st	X, r22
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	// Escalado lineal: 0º ? min_ticks, 180º ? max_ticks
	servosArray[index]->pulse_us = min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U);
     df2:	c0 81       	ld	r28, Z
     df4:	d1 81       	ldd	r29, Z+1	; 0x01
     df6:	26 2f       	mov	r18, r22
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a0 ed       	ldi	r26, 0xD0	; 208
     dfc:	b7 e0       	ldi	r27, 0x07	; 7
     dfe:	0e 94 b1 09 	call	0x1362	; 0x1362 <__umulhisi3>
     e02:	24 eb       	ldi	r18, 0xB4	; 180
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	0e 94 8f 09 	call	0x131e	; 0x131e <__udivmodsi4>
     e0e:	20 53       	subi	r18, 0x30	; 48
     e10:	38 4f       	sbci	r19, 0xF8	; 248
     e12:	3b 83       	std	Y+3, r19	; 0x03
     e14:	2a 83       	std	Y+2, r18	; 0x02
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
     e1c:	87 b1       	in	r24, 0x07	; 7
     e1e:	80 7f       	andi	r24, 0xF0	; 240
     e20:	87 b9       	out	0x07, r24	; 7
     e22:	88 b1       	in	r24, 0x08	; 8
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	88 b9       	out	0x08, r24	; 8
     e28:	80 e4       	ldi	r24, 0x40	; 64
     e2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e2e:	86 e8       	ldi	r24, 0x86	; 134
     e30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e34:	08 95       	ret

00000e36 <tcrt_read_channel>:
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	a0 f4       	brcc	.+40     	; 0xe62 <tcrt_read_channel+0x2c>
     e3a:	ec e7       	ldi	r30, 0x7C	; 124
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	90 81       	ld	r25, Z
     e40:	90 7f       	andi	r25, 0xF0	; 240
     e42:	89 2b       	or	r24, r25
     e44:	80 83       	st	Z, r24
     e46:	ea e7       	ldi	r30, 0x7A	; 122
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	80 83       	st	Z, r24
     e50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e54:	86 fd       	sbrc	r24, 6
     e56:	fc cf       	rjmp	.-8      	; 0xe50 <tcrt_read_channel+0x1a>
     e58:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e5c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e60:	08 95       	ret
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	08 95       	ret

00000e68 <TCRT_init_Handlers>:
     e68:	cf 93       	push	r28
     e6a:	ee e8       	ldi	r30, 0x8E	; 142
     e6c:	f5 e0       	ldi	r31, 0x05	; 5
     e6e:	17 82       	std	Z+7, r1	; 0x07
     e70:	10 86       	std	Z+8, r1	; 0x08
     e72:	12 82       	std	Z+2, r1	; 0x02
     e74:	11 82       	std	Z+1, r1	; 0x01
     e76:	16 82       	std	Z+6, r1	; 0x06
     e78:	15 82       	std	Z+5, r1	; 0x05
     e7a:	c1 e0       	ldi	r28, 0x01	; 1
     e7c:	c0 83       	st	Z, r28
     e7e:	86 e7       	ldi	r24, 0x76	; 118
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	9f 93       	push	r25
     e84:	8f 93       	push	r24
     e86:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     e8a:	e8 e4       	ldi	r30, 0x48	; 72
     e8c:	f5 e0       	ldi	r31, 0x05	; 5
     e8e:	c7 83       	std	Z+7, r28	; 0x07
     e90:	c0 87       	std	Z+8, r28	; 0x08
     e92:	12 82       	std	Z+2, r1	; 0x02
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	16 82       	std	Z+6, r1	; 0x06
     e98:	15 82       	std	Z+5, r1	; 0x05
     e9a:	c0 83       	st	Z, r28
     e9c:	85 e8       	ldi	r24, 0x85	; 133
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     ea8:	e5 e6       	ldi	r30, 0x65	; 101
     eaa:	f5 e0       	ldi	r31, 0x05	; 5
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	87 83       	std	Z+7, r24	; 0x07
     eb0:	80 87       	std	Z+8, r24	; 0x08
     eb2:	12 82       	std	Z+2, r1	; 0x02
     eb4:	11 82       	std	Z+1, r1	; 0x01
     eb6:	16 82       	std	Z+6, r1	; 0x06
     eb8:	15 82       	std	Z+5, r1	; 0x05
     eba:	c0 83       	st	Z, r28
     ebc:	84 e9       	ldi	r24, 0x94	; 148
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     ec8:	ea e5       	ldi	r30, 0x5A	; 90
     eca:	f5 e0       	ldi	r31, 0x05	; 5
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	87 83       	std	Z+7, r24	; 0x07
     ed0:	80 87       	std	Z+8, r24	; 0x08
     ed2:	12 82       	std	Z+2, r1	; 0x02
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	16 82       	std	Z+6, r1	; 0x06
     ed8:	15 82       	std	Z+5, r1	; 0x05
     eda:	c0 83       	st	Z, r28
     edc:	83 ea       	ldi	r24, 0xA3	; 163
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     ee8:	82 eb       	ldi	r24, 0xB2	; 178
     eea:	93 e0       	ldi	r25, 0x03	; 3
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     ef4:	8d b7       	in	r24, 0x3d	; 61
     ef6:	9e b7       	in	r25, 0x3e	; 62
     ef8:	0a 96       	adiw	r24, 0x0a	; 10
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	9e bf       	out	0x3e, r25	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	8d bf       	out	0x3d, r24	; 61
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
     f0e:	88 81       	ld	r24, Y
     f10:	83 ff       	sbrs	r24, 3
     f12:	36 c0       	rjmp	.+108    	; 0xf80 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	81 11       	cpse	r24, r1
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
     f1e:	1e 82       	std	Y+6, r1	; 0x06
     f20:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
     f22:	8f 81       	ldd	r24, Y+7	; 0x07
     f24:	0e 94 1b 07 	call	0xe36	; 0xe36 <tcrt_read_channel>
     f28:	2d 81       	ldd	r18, Y+5	; 0x05
     f2a:	3e 81       	ldd	r19, Y+6	; 0x06
     f2c:	28 0f       	add	r18, r24
     f2e:	39 1f       	adc	r19, r25
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
     f34:	99 85       	ldd	r25, Y+9	; 0x09
     f36:	9f 5f       	subi	r25, 0xFF	; 255
     f38:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
     f3a:	9a 30       	cpi	r25, 0x0A	; 10
     f3c:	08 f1       	brcs	.+66     	; 0xf80 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
     f3e:	ad ec       	ldi	r26, 0xCD	; 205
     f40:	bc ec       	ldi	r27, 0xCC	; 204
     f42:	0e 94 b1 09 	call	0x1362	; 0x1362 <__umulhisi3>
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
     f56:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
     f58:	28 81       	ld	r18, Y
     f5a:	2b 7f       	andi	r18, 0xFB	; 251
     f5c:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	9f 93       	push	r25
     f62:	8f 93       	push	r24
     f64:	1f 92       	push	r1
     f66:	2f 93       	push	r18
     f68:	85 ec       	ldi	r24, 0xC5	; 197
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <printf>
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
		}
	}
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	5c 01       	movw	r10, r24
	uint32_t acumulador = 0;
	uint16_t valor = 0;
	for (uint8_t i = 0; i < TCRT_FILTER_SAMPLES; i++) {
     f9a:	c0 e0       	ldi	r28, 0x00	; 0
}

void tcrt_read(TCRT_t* sensor)
{
	uint32_t acumulador = 0;
	uint16_t valor = 0;
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void tcrt_read(TCRT_t* sensor)
{
	uint32_t acumulador = 0;
     fa0:	c1 2c       	mov	r12, r1
     fa2:	d1 2c       	mov	r13, r1
     fa4:	76 01       	movw	r14, r12
	uint16_t valor = 0;
	for (uint8_t i = 0; i < TCRT_FILTER_SAMPLES; i++) {
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <tcrt_read+0x36>
		valor = tcrt_read_channel(sensor->channel);  // Lectura cruda del ADC
     fa8:	f5 01       	movw	r30, r10
     faa:	87 81       	ldd	r24, Z+7	; 0x07
     fac:	0e 94 1b 07 	call	0xe36	; 0xe36 <tcrt_read_channel>
     fb0:	8c 01       	movw	r16, r24
		acumulador += valor;
     fb2:	c8 0e       	add	r12, r24
     fb4:	d9 1e       	adc	r13, r25
     fb6:	e1 1c       	adc	r14, r1
     fb8:	f1 1c       	adc	r15, r1

void tcrt_read(TCRT_t* sensor)
{
	uint32_t acumulador = 0;
	uint16_t valor = 0;
	for (uint8_t i = 0; i < TCRT_FILTER_SAMPLES; i++) {
     fba:	cf 5f       	subi	r28, 0xFF	; 255
     fbc:	ca 30       	cpi	r28, 0x0A	; 10
     fbe:	a0 f3       	brcs	.-24     	; 0xfa8 <tcrt_read+0x22>
		valor = tcrt_read_channel(sensor->channel);  // Lectura cruda del ADC
		acumulador += valor;
	}
	uint16_t promedio = acumulador / TCRT_FILTER_SAMPLES;
     fc0:	c7 01       	movw	r24, r14
     fc2:	b6 01       	movw	r22, r12
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	0e 94 8f 09 	call	0x131e	; 0x131e <__udivmodsi4>
	sensor->ADCConvertedValue = promedio;
     fd0:	f5 01       	movw	r30, r10
     fd2:	32 83       	std	Z+2, r19	; 0x02
     fd4:	21 83       	std	Z+1, r18	; 0x01
	sensor->lastReading = valor;
     fd6:	16 83       	std	Z+6, r17	; 0x06
     fd8:	05 83       	std	Z+5, r16	; 0x05
}
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	af 90       	pop	r10
     fec:	08 95       	ret

00000fee <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
     fee:	8b b1       	in	r24, 0x0b	; 11
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	8b b9       	out	0x0b, r24	; 11
     ff4:	08 95       	ret

00000ff6 <ultrasonic_hal_trigger_setLow>:
     ff6:	8b b1       	in	r24, 0x0b	; 11
     ff8:	87 7f       	andi	r24, 0xF7	; 247
     ffa:	8b b9       	out	0x0b, r24	; 11
     ffc:	08 95       	ret

00000ffe <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
     ffe:	e1 e8       	ldi	r30, 0x81	; 129
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret

0000100a <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    100a:	e1 e8       	ldi	r30, 0x81	; 129
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	80 83       	st	Z, r24
    1014:	08 95       	ret

00001016 <USART_Init>:
/* USART Functions -----------------------------------------------------------*/
// Función para inicializar el puerto serial (USART)
void USART_Init(uint16_t ubrr)
{
	// Configura el baud rate para 115200 baudios
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baud rate
    1016:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baud rate
    101a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita el receptor y transmisor
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar RX y TX
    101e:	88 e1       	ldi	r24, 0x18	; 24
    1020:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato de los datos: 8 bits de datos, sin paridad, 1 bit de stop
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1024:	86 e0       	ldi	r24, 0x06	; 6
    1026:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    102a:	08 95       	ret

0000102c <USART_Transmit>:

// Función para enviar un carácter por serial
void USART_Transmit(unsigned char data)
{
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
    102c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1030:	95 ff       	sbrs	r25, 5
    1032:	fc cf       	rjmp	.-8      	; 0x102c <USART_Transmit>
	// Envía el dato al registro de transmisión (UDR0)
	UDR0 = data;
    1034:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1038:	08 95       	ret

0000103a <USART_Receive>:

// Función para recibir un carácter por serial
unsigned char USART_Receive(void)
{
	// Espera hasta que se haya recibido un dato
	while (!(UCSR0A & (1 << RXC0)));
    103a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    103e:	88 23       	and	r24, r24
    1040:	e4 f7       	brge	.-8      	; 0x103a <USART_Receive>
	// Devuelve el dato recibido desde el registro de datos (UDR0)
	return UDR0;
    1042:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1046:	08 95       	ret

00001048 <USART_putchar>:

// Redirige printf para usar USART
int USART_putchar(char c, FILE *stream)
{
    1048:	cf 93       	push	r28
    104a:	c8 2f       	mov	r28, r24
	if (c == '\n')
    104c:	8a 30       	cpi	r24, 0x0A	; 10
    104e:	19 f4       	brne	.+6      	; 0x1056 <USART_putchar+0xe>
	USART_Transmit('\r'); // Enviar un retorno de carro para manejar las nuevas líneas
    1050:	8d e0       	ldi	r24, 0x0D	; 13
    1052:	0e 94 16 08 	call	0x102c	; 0x102c <USART_Transmit>
	USART_Transmit(c);
    1056:	8c 2f       	mov	r24, r28
    1058:	0e 94 16 08 	call	0x102c	; 0x102c <USART_Transmit>
	return 0;
}
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <USART_getchar>:

// Redirige la entrada estándar (stdin) para recibir datos desde USART
int USART_getchar(FILE *stream)
{
	return USART_Receive();  // Recibir un carácter desde USART
    1064:	0e 94 1d 08 	call	0x103a	; 0x103a <USART_Receive>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	08 95       	ret

0000106c <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    106c:	fc 01       	movw	r30, r24
    106e:	66 87       	std	Z+14, r22	; 0x0e
    1070:	08 95       	ret

00001072 <ultrasonic_calculate_distance>:
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	ae 81       	ldd	r26, Y+6	; 0x06
    1082:	bf 81       	ldd	r27, Y+7	; 0x07
    1084:	48 81       	ld	r20, Y
    1086:	59 81       	ldd	r21, Y+1	; 0x01
    1088:	6a 81       	ldd	r22, Y+2	; 0x02
    108a:	7b 81       	ldd	r23, Y+3	; 0x03
    108c:	8c 01       	movw	r16, r24
    108e:	9d 01       	movw	r18, r26
    1090:	04 1b       	sub	r16, r20
    1092:	15 0b       	sbc	r17, r21
    1094:	26 0b       	sbc	r18, r22
    1096:	37 0b       	sbc	r19, r23
    1098:	b9 01       	movw	r22, r18
    109a:	a8 01       	movw	r20, r16
    109c:	d9 01       	movw	r26, r18
    109e:	c8 01       	movw	r24, r16
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	aa 1f       	adc	r26, r26
    10ae:	bb 1f       	adc	r27, r27
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	8c 01       	movw	r16, r24
    10c2:	9d 01       	movw	r18, r26
    10c4:	04 0f       	add	r16, r20
    10c6:	15 1f       	adc	r17, r21
    10c8:	26 1f       	adc	r18, r22
    10ca:	37 1f       	adc	r19, r23
    10cc:	c9 01       	movw	r24, r18
    10ce:	b8 01       	movw	r22, r16
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	20 e9       	ldi	r18, 0x90	; 144
    10da:	31 e0       	ldi	r19, 0x01	; 1
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	0e 94 8f 09 	call	0x131e	; 0x131e <__udivmodsi4>
    10e4:	28 87       	std	Y+8, r18	; 0x08
    10e6:	39 87       	std	Y+9, r19	; 0x09
    10e8:	4a 87       	std	Y+10, r20	; 0x0a
    10ea:	5b 87       	std	Y+11, r21	; 0x0b
    10ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ee:	80 68       	ori	r24, 0x80	; 128
    10f0:	8c 87       	std	Y+12, r24	; 0x0c
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	08 95       	ret

000010fc <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    10fc:	dc 01       	movw	r26, r24
    10fe:	1f 96       	adiw	r26, 0x0f	; 15
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	50 97       	sbiw	r26, 0x10	; 16
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	11 f0       	breq	.+4      	; 0x110e <ultrasonic_print+0x12>
    110a:	cb 01       	movw	r24, r22
		us->print_method(message);
    110c:	09 95       	icall
    110e:	08 95       	ret

00001110 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1116:	18 82       	st	Y, r1
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	1a 82       	std	Y+2, r1	; 0x02
    111c:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    111e:	1c 82       	std	Y+4, r1	; 0x04
    1120:	1d 82       	std	Y+5, r1	; 0x05
    1122:	1e 82       	std	Y+6, r1	; 0x06
    1124:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1126:	18 86       	std	Y+8, r1	; 0x08
    1128:	19 86       	std	Y+9, r1	; 0x09
    112a:	1a 86       	std	Y+10, r1	; 0x0a
    112c:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    112e:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1130:	8c 85       	ldd	r24, Y+12	; 0x0c
    1132:	80 62       	ori	r24, 0x20	; 32
    1134:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1136:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1138:	0e 94 ff 07 	call	0xffe	; 0xffe <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	98 89       	ldd	r25, Y+16	; 0x10
    1140:	89 2b       	or	r24, r25
    1142:	41 f0       	breq	.+16     	; 0x1154 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1144:	8e 85       	ldd	r24, Y+14	; 0x0e
    1146:	88 23       	and	r24, r24
    1148:	29 f0       	breq	.+10     	; 0x1154 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    114a:	61 ef       	ldi	r22, 0xF1	; 241
    114c:	73 e0       	ldi	r23, 0x03	; 3
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
		}
	}
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	ec 01       	movw	r28, r24
    1164:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1166:	0e 94 88 08 	call	0x1110	; 0x1110 <ultrasonic_init_flags>
	us->debugMode = true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    116e:	01 15       	cp	r16, r1
    1170:	11 05       	cpc	r17, r1
    1172:	19 f4       	brne	.+6      	; 0x117a <ultrasonic_init+0x20>
		us->print_method = NULL;
    1174:	18 8a       	std	Y+16, r1	; 0x10
    1176:	1f 86       	std	Y+15, r1	; 0x0f
    1178:	0a c0       	rjmp	.+20     	; 0x118e <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    117a:	18 8b       	std	Y+16, r17	; 0x10
    117c:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    117e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1180:	88 23       	and	r24, r24
    1182:	29 f0       	breq	.+10     	; 0x118e <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1184:	60 e1       	ldi	r22, 0x10	; 16
    1186:	74 e0       	ldi	r23, 0x04	; 4
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
		}
	}
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    119e:	fc 01       	movw	r30, r24
    11a0:	25 85       	ldd	r18, Z+13	; 0x0d
    11a2:	26 30       	cpi	r18, 0x06	; 6
    11a4:	71 f4       	brne	.+28     	; 0x11c2 <ultrasonic_timeout_clear+0x2a>
    11a6:	16 2f       	mov	r17, r22
    11a8:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    11aa:	0e 94 88 08 	call	0x1110	; 0x1110 <ultrasonic_init_flags>
		us->debugMode = state;
    11ae:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    11b0:	1e 85       	ldd	r17, Y+14	; 0x0e
    11b2:	11 23       	and	r17, r17
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    11b6:	61 e3       	ldi	r22, 0x31	; 49
    11b8:	73 e0       	ldi	r23, 0x03	; 3
    11ba:	ce 01       	movw	r24, r28
    11bc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    11c6:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    11c8:	81 2f       	mov	r24, r17
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	08 95       	ret

000011d2 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    11d2:	cf 93       	push	r28
    11d4:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    11d6:	85 85       	ldd	r24, Z+13	; 0x0d
    11d8:	88 23       	and	r24, r24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <ultrasonic_start+0x10>
    11dc:	85 85       	ldd	r24, Z+13	; 0x0d
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	c1 f4       	brne	.+48     	; 0x1212 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    11e2:	84 85       	ldd	r24, Z+12	; 0x0c
    11e4:	85 ff       	sbrs	r24, 5
    11e6:	0b c0       	rjmp	.+22     	; 0x11fe <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    11ec:	c6 85       	ldd	r28, Z+14	; 0x0e
    11ee:	cc 23       	and	r28, r28
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    11f2:	6c e2       	ldi	r22, 0x2C	; 44
    11f4:	74 e0       	ldi	r23, 0x04	; 4
    11f6:	cf 01       	movw	r24, r30
    11f8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
    11fc:	15 c0       	rjmp	.+42     	; 0x1228 <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    11fe:	c6 85       	ldd	r28, Z+14	; 0x0e
    1200:	cc 23       	and	r28, r28
    1202:	91 f0       	breq	.+36     	; 0x1228 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1204:	6b e5       	ldi	r22, 0x5B	; 91
    1206:	74 e0       	ldi	r23, 0x04	; 4
    1208:	cf 01       	movw	r24, r30
    120a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    120e:	c0 e0       	ldi	r28, 0x00	; 0
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    1212:	c6 85       	ldd	r28, Z+14	; 0x0e
    1214:	cc 23       	and	r28, r28
    1216:	41 f0       	breq	.+16     	; 0x1228 <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    1218:	62 e9       	ldi	r22, 0x92	; 146
    121a:	74 e0       	ldi	r23, 0x04	; 4
    121c:	cf 01       	movw	r24, r30
    121e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
			}
	}
	return false;
    1222:	c0 e0       	ldi	r28, 0x00	; 0
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    1226:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    1228:	8c 2f       	mov	r24, r28
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
	switch (us->state)
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	71 f1       	breq	.+92     	; 0x1296 <ultrasonic_update+0x68>
    123a:	28 f4       	brcc	.+10     	; 0x1246 <ultrasonic_update+0x18>
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	49 f0       	breq	.+18     	; 0x1252 <ultrasonic_update+0x24>
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	a1 f0       	breq	.+40     	; 0x126c <ultrasonic_update+0x3e>
    1244:	55 c0       	rjmp	.+170    	; 0x12f0 <ultrasonic_update+0xc2>
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	e1 f1       	breq	.+120    	; 0x12c2 <ultrasonic_update+0x94>
    124a:	86 30       	cpi	r24, 0x06	; 6
    124c:	09 f4       	brne	.+2      	; 0x1250 <ultrasonic_update+0x22>
    124e:	4d c0       	rjmp	.+154    	; 0x12ea <ultrasonic_update+0xbc>
    1250:	4f c0       	rjmp	.+158    	; 0x12f0 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    1252:	8c 85       	ldd	r24, Y+12	; 0x0c
    1254:	81 ff       	sbrs	r24, 1
    1256:	4c c0       	rjmp	.+152    	; 0x12f0 <ultrasonic_update+0xc2>
				if(us->debugMode){
    1258:	8e 85       	ldd	r24, Y+14	; 0x0e
    125a:	88 23       	and	r24, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <ultrasonic_update+0x32>
    125e:	48 c0       	rjmp	.+144    	; 0x12f0 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    1260:	6f eb       	ldi	r22, 0xBF	; 191
    1262:	74 e0       	ldi	r23, 0x04	; 4
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
    126a:	42 c0       	rjmp	.+132    	; 0x12f0 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    126c:	8c 85       	ldd	r24, Y+12	; 0x0c
    126e:	84 fd       	sbrc	r24, 4
    1270:	0c c0       	rjmp	.+24     	; 0x128a <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    1276:	0e 94 05 08 	call	0x100a	; 0x100a <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    127a:	8e 85       	ldd	r24, Y+14	; 0x0e
    127c:	88 23       	and	r24, r24
    127e:	29 f0       	breq	.+10     	; 0x128a <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    1280:	6e ed       	ldi	r22, 0xDE	; 222
    1282:	74 e0       	ldi	r23, 0x04	; 4
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    128a:	8c 85       	ldd	r24, Y+12	; 0x0c
    128c:	83 ff       	sbrs	r24, 3
    128e:	30 c0       	rjmp	.+96     	; 0x12f0 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    1290:	86 e0       	ldi	r24, 0x06	; 6
    1292:	8d 87       	std	Y+13, r24	; 0x0d
    1294:	2d c0       	rjmp	.+90     	; 0x12f0 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    1296:	8c 85       	ldd	r24, Y+12	; 0x0c
    1298:	86 ff       	sbrs	r24, 6
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    12a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a2:	88 23       	and	r24, r24
    12a4:	29 f0       	breq	.+10     	; 0x12b0 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    12a6:	6b ef       	ldi	r22, 0xFB	; 251
    12a8:	74 e0       	ldi	r23, 0x04	; 4
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    12b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    12b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b8:	83 ff       	sbrs	r24, 3
    12ba:	1a c0       	rjmp	.+52     	; 0x12f0 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    12bc:	86 e0       	ldi	r24, 0x06	; 6
    12be:	8d 87       	std	Y+13, r24	; 0x0d
    12c0:	17 c0       	rjmp	.+46     	; 0x12f0 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    12c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c4:	82 ff       	sbrs	r24, 2
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 39 08 	call	0x1072	; 0x1072 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    12ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d0:	8b 7f       	andi	r24, 0xFB	; 251
    12d2:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    12d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12d6:	88 23       	and	r24, r24
    12d8:	29 f0       	breq	.+10     	; 0x12e4 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    12da:	62 e1       	ldi	r22, 0x12	; 18
    12dc:	75 e0       	ldi	r23, 0x05	; 5
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	8d 87       	std	Y+13, r24	; 0x0d
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    12ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <__divmodhi4>:
    12f6:	97 fb       	bst	r25, 7
    12f8:	07 2e       	mov	r0, r23
    12fa:	16 f4       	brtc	.+4      	; 0x1300 <__divmodhi4+0xa>
    12fc:	00 94       	com	r0
    12fe:	07 d0       	rcall	.+14     	; 0x130e <__divmodhi4_neg1>
    1300:	77 fd       	sbrc	r23, 7
    1302:	09 d0       	rcall	.+18     	; 0x1316 <__divmodhi4_neg2>
    1304:	0e 94 c0 09 	call	0x1380	; 0x1380 <__udivmodhi4>
    1308:	07 fc       	sbrc	r0, 7
    130a:	05 d0       	rcall	.+10     	; 0x1316 <__divmodhi4_neg2>
    130c:	3e f4       	brtc	.+14     	; 0x131c <__divmodhi4_exit>

0000130e <__divmodhi4_neg1>:
    130e:	90 95       	com	r25
    1310:	81 95       	neg	r24
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	08 95       	ret

00001316 <__divmodhi4_neg2>:
    1316:	70 95       	com	r23
    1318:	61 95       	neg	r22
    131a:	7f 4f       	sbci	r23, 0xFF	; 255

0000131c <__divmodhi4_exit>:
    131c:	08 95       	ret

0000131e <__udivmodsi4>:
    131e:	a1 e2       	ldi	r26, 0x21	; 33
    1320:	1a 2e       	mov	r1, r26
    1322:	aa 1b       	sub	r26, r26
    1324:	bb 1b       	sub	r27, r27
    1326:	fd 01       	movw	r30, r26
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <__udivmodsi4_ep>

0000132a <__udivmodsi4_loop>:
    132a:	aa 1f       	adc	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	ee 1f       	adc	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	a2 17       	cp	r26, r18
    1334:	b3 07       	cpc	r27, r19
    1336:	e4 07       	cpc	r30, r20
    1338:	f5 07       	cpc	r31, r21
    133a:	20 f0       	brcs	.+8      	; 0x1344 <__udivmodsi4_ep>
    133c:	a2 1b       	sub	r26, r18
    133e:	b3 0b       	sbc	r27, r19
    1340:	e4 0b       	sbc	r30, r20
    1342:	f5 0b       	sbc	r31, r21

00001344 <__udivmodsi4_ep>:
    1344:	66 1f       	adc	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	1a 94       	dec	r1
    134e:	69 f7       	brne	.-38     	; 0x132a <__udivmodsi4_loop>
    1350:	60 95       	com	r22
    1352:	70 95       	com	r23
    1354:	80 95       	com	r24
    1356:	90 95       	com	r25
    1358:	9b 01       	movw	r18, r22
    135a:	ac 01       	movw	r20, r24
    135c:	bd 01       	movw	r22, r26
    135e:	cf 01       	movw	r24, r30
    1360:	08 95       	ret

00001362 <__umulhisi3>:
    1362:	a2 9f       	mul	r26, r18
    1364:	b0 01       	movw	r22, r0
    1366:	b3 9f       	mul	r27, r19
    1368:	c0 01       	movw	r24, r0
    136a:	a3 9f       	mul	r26, r19
    136c:	70 0d       	add	r23, r0
    136e:	81 1d       	adc	r24, r1
    1370:	11 24       	eor	r1, r1
    1372:	91 1d       	adc	r25, r1
    1374:	b2 9f       	mul	r27, r18
    1376:	70 0d       	add	r23, r0
    1378:	81 1d       	adc	r24, r1
    137a:	11 24       	eor	r1, r1
    137c:	91 1d       	adc	r25, r1
    137e:	08 95       	ret

00001380 <__udivmodhi4>:
    1380:	aa 1b       	sub	r26, r26
    1382:	bb 1b       	sub	r27, r27
    1384:	51 e1       	ldi	r21, 0x11	; 17
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <__udivmodhi4_ep>

00001388 <__udivmodhi4_loop>:
    1388:	aa 1f       	adc	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	a6 17       	cp	r26, r22
    138e:	b7 07       	cpc	r27, r23
    1390:	10 f0       	brcs	.+4      	; 0x1396 <__udivmodhi4_ep>
    1392:	a6 1b       	sub	r26, r22
    1394:	b7 0b       	sbc	r27, r23

00001396 <__udivmodhi4_ep>:
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	5a 95       	dec	r21
    139c:	a9 f7       	brne	.-22     	; 0x1388 <__udivmodhi4_loop>
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	08 95       	ret

000013a8 <printf>:
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea ed       	ldi	r30, 0xDA	; 218
    13ae:	f9 e0       	ldi	r31, 0x09	; 9
    13b0:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__prologue_saves__+0x20>
    13b4:	ae 01       	movw	r20, r28
    13b6:	4b 5f       	subi	r20, 0xFB	; 251
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	fa 01       	movw	r30, r20
    13bc:	61 91       	ld	r22, Z+
    13be:	71 91       	ld	r23, Z+
    13c0:	af 01       	movw	r20, r30
    13c2:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <__iob+0x2>
    13c6:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <__iob+0x3>
    13ca:	0e 94 1a 0a 	call	0x1434	; 0x1434 <vfprintf>
    13ce:	e2 e0       	ldi	r30, 0x02	; 2
    13d0:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__epilogue_restores__+0x20>

000013d4 <puts>:
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <__iob+0x2>
    13e0:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <__iob+0x3>
    13e4:	23 81       	ldd	r18, Z+3	; 0x03
    13e6:	21 ff       	sbrs	r18, 1
    13e8:	1b c0       	rjmp	.+54     	; 0x1420 <puts+0x4c>
    13ea:	8c 01       	movw	r16, r24
    13ec:	d0 e0       	ldi	r29, 0x00	; 0
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	f8 01       	movw	r30, r16
    13f2:	81 91       	ld	r24, Z+
    13f4:	8f 01       	movw	r16, r30
    13f6:	60 91 c1 05 	lds	r22, 0x05C1	; 0x8005c1 <__iob+0x2>
    13fa:	70 91 c2 05 	lds	r23, 0x05C2	; 0x8005c2 <__iob+0x3>
    13fe:	db 01       	movw	r26, r22
    1400:	18 96       	adiw	r26, 0x08	; 8
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	19 97       	sbiw	r26, 0x09	; 9
    1408:	88 23       	and	r24, r24
    140a:	31 f0       	breq	.+12     	; 0x1418 <puts+0x44>
    140c:	09 95       	icall
    140e:	89 2b       	or	r24, r25
    1410:	79 f3       	breq	.-34     	; 0x13f0 <puts+0x1c>
    1412:	df ef       	ldi	r29, 0xFF	; 255
    1414:	cf ef       	ldi	r28, 0xFF	; 255
    1416:	ec cf       	rjmp	.-40     	; 0x13f0 <puts+0x1c>
    1418:	8a e0       	ldi	r24, 0x0A	; 10
    141a:	09 95       	icall
    141c:	89 2b       	or	r24, r25
    141e:	19 f0       	breq	.+6      	; 0x1426 <puts+0x52>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	02 c0       	rjmp	.+4      	; 0x142a <puts+0x56>
    1426:	8d 2f       	mov	r24, r29
    1428:	9c 2f       	mov	r25, r28
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <vfprintf>:
    1434:	ab e0       	ldi	r26, 0x0B	; 11
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__prologue_saves__>
    1440:	6c 01       	movw	r12, r24
    1442:	7b 01       	movw	r14, r22
    1444:	8a 01       	movw	r16, r20
    1446:	fc 01       	movw	r30, r24
    1448:	17 82       	std	Z+7, r1	; 0x07
    144a:	16 82       	std	Z+6, r1	; 0x06
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	81 ff       	sbrs	r24, 1
    1450:	cc c1       	rjmp	.+920    	; 0x17ea <vfprintf+0x3b6>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	3c 01       	movw	r6, r24
    1458:	f6 01       	movw	r30, r12
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	f7 01       	movw	r30, r14
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	7f 01       	movw	r14, r30
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <vfprintf+0x3a>
    146c:	ba c1       	rjmp	.+884    	; 0x17e2 <vfprintf+0x3ae>
    146e:	85 32       	cpi	r24, 0x25	; 37
    1470:	39 f4       	brne	.+14     	; 0x1480 <vfprintf+0x4c>
    1472:	93 fd       	sbrc	r25, 3
    1474:	85 91       	lpm	r24, Z+
    1476:	93 ff       	sbrs	r25, 3
    1478:	81 91       	ld	r24, Z+
    147a:	7f 01       	movw	r14, r30
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	29 f4       	brne	.+10     	; 0x148a <vfprintf+0x56>
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1488:	e7 cf       	rjmp	.-50     	; 0x1458 <vfprintf+0x24>
    148a:	91 2c       	mov	r9, r1
    148c:	21 2c       	mov	r2, r1
    148e:	31 2c       	mov	r3, r1
    1490:	ff e1       	ldi	r31, 0x1F	; 31
    1492:	f3 15       	cp	r31, r3
    1494:	d8 f0       	brcs	.+54     	; 0x14cc <vfprintf+0x98>
    1496:	8b 32       	cpi	r24, 0x2B	; 43
    1498:	79 f0       	breq	.+30     	; 0x14b8 <vfprintf+0x84>
    149a:	38 f4       	brcc	.+14     	; 0x14aa <vfprintf+0x76>
    149c:	80 32       	cpi	r24, 0x20	; 32
    149e:	79 f0       	breq	.+30     	; 0x14be <vfprintf+0x8a>
    14a0:	83 32       	cpi	r24, 0x23	; 35
    14a2:	a1 f4       	brne	.+40     	; 0x14cc <vfprintf+0x98>
    14a4:	23 2d       	mov	r18, r3
    14a6:	20 61       	ori	r18, 0x10	; 16
    14a8:	1d c0       	rjmp	.+58     	; 0x14e4 <vfprintf+0xb0>
    14aa:	8d 32       	cpi	r24, 0x2D	; 45
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <vfprintf+0x92>
    14ae:	80 33       	cpi	r24, 0x30	; 48
    14b0:	69 f4       	brne	.+26     	; 0x14cc <vfprintf+0x98>
    14b2:	23 2d       	mov	r18, r3
    14b4:	21 60       	ori	r18, 0x01	; 1
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <vfprintf+0xb0>
    14b8:	83 2d       	mov	r24, r3
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	38 2e       	mov	r3, r24
    14be:	e3 2d       	mov	r30, r3
    14c0:	e4 60       	ori	r30, 0x04	; 4
    14c2:	3e 2e       	mov	r3, r30
    14c4:	2a c0       	rjmp	.+84     	; 0x151a <vfprintf+0xe6>
    14c6:	f3 2d       	mov	r31, r3
    14c8:	f8 60       	ori	r31, 0x08	; 8
    14ca:	1d c0       	rjmp	.+58     	; 0x1506 <vfprintf+0xd2>
    14cc:	37 fc       	sbrc	r3, 7
    14ce:	2d c0       	rjmp	.+90     	; 0x152a <vfprintf+0xf6>
    14d0:	20 ed       	ldi	r18, 0xD0	; 208
    14d2:	28 0f       	add	r18, r24
    14d4:	2a 30       	cpi	r18, 0x0A	; 10
    14d6:	40 f0       	brcs	.+16     	; 0x14e8 <vfprintf+0xb4>
    14d8:	8e 32       	cpi	r24, 0x2E	; 46
    14da:	b9 f4       	brne	.+46     	; 0x150a <vfprintf+0xd6>
    14dc:	36 fc       	sbrc	r3, 6
    14de:	81 c1       	rjmp	.+770    	; 0x17e2 <vfprintf+0x3ae>
    14e0:	23 2d       	mov	r18, r3
    14e2:	20 64       	ori	r18, 0x40	; 64
    14e4:	32 2e       	mov	r3, r18
    14e6:	19 c0       	rjmp	.+50     	; 0x151a <vfprintf+0xe6>
    14e8:	36 fe       	sbrs	r3, 6
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <vfprintf+0xc4>
    14ec:	8a e0       	ldi	r24, 0x0A	; 10
    14ee:	98 9e       	mul	r9, r24
    14f0:	20 0d       	add	r18, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	92 2e       	mov	r9, r18
    14f6:	11 c0       	rjmp	.+34     	; 0x151a <vfprintf+0xe6>
    14f8:	ea e0       	ldi	r30, 0x0A	; 10
    14fa:	2e 9e       	mul	r2, r30
    14fc:	20 0d       	add	r18, r0
    14fe:	11 24       	eor	r1, r1
    1500:	22 2e       	mov	r2, r18
    1502:	f3 2d       	mov	r31, r3
    1504:	f0 62       	ori	r31, 0x20	; 32
    1506:	3f 2e       	mov	r3, r31
    1508:	08 c0       	rjmp	.+16     	; 0x151a <vfprintf+0xe6>
    150a:	8c 36       	cpi	r24, 0x6C	; 108
    150c:	21 f4       	brne	.+8      	; 0x1516 <vfprintf+0xe2>
    150e:	83 2d       	mov	r24, r3
    1510:	80 68       	ori	r24, 0x80	; 128
    1512:	38 2e       	mov	r3, r24
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0xe6>
    1516:	88 36       	cpi	r24, 0x68	; 104
    1518:	41 f4       	brne	.+16     	; 0x152a <vfprintf+0xf6>
    151a:	f7 01       	movw	r30, r14
    151c:	93 fd       	sbrc	r25, 3
    151e:	85 91       	lpm	r24, Z+
    1520:	93 ff       	sbrs	r25, 3
    1522:	81 91       	ld	r24, Z+
    1524:	7f 01       	movw	r14, r30
    1526:	81 11       	cpse	r24, r1
    1528:	b3 cf       	rjmp	.-154    	; 0x1490 <vfprintf+0x5c>
    152a:	98 2f       	mov	r25, r24
    152c:	9f 7d       	andi	r25, 0xDF	; 223
    152e:	95 54       	subi	r25, 0x45	; 69
    1530:	93 30       	cpi	r25, 0x03	; 3
    1532:	28 f4       	brcc	.+10     	; 0x153e <vfprintf+0x10a>
    1534:	0c 5f       	subi	r16, 0xFC	; 252
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	9f e3       	ldi	r25, 0x3F	; 63
    153a:	99 83       	std	Y+1, r25	; 0x01
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <vfprintf+0x124>
    153e:	83 36       	cpi	r24, 0x63	; 99
    1540:	31 f0       	breq	.+12     	; 0x154e <vfprintf+0x11a>
    1542:	83 37       	cpi	r24, 0x73	; 115
    1544:	71 f0       	breq	.+28     	; 0x1562 <vfprintf+0x12e>
    1546:	83 35       	cpi	r24, 0x53	; 83
    1548:	09 f0       	breq	.+2      	; 0x154c <vfprintf+0x118>
    154a:	59 c0       	rjmp	.+178    	; 0x15fe <vfprintf+0x1ca>
    154c:	21 c0       	rjmp	.+66     	; 0x1590 <vfprintf+0x15c>
    154e:	f8 01       	movw	r30, r16
    1550:	80 81       	ld	r24, Z
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	0e 5f       	subi	r16, 0xFE	; 254
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	88 24       	eor	r8, r8
    155a:	83 94       	inc	r8
    155c:	91 2c       	mov	r9, r1
    155e:	53 01       	movw	r10, r6
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <vfprintf+0x154>
    1562:	28 01       	movw	r4, r16
    1564:	f2 e0       	ldi	r31, 0x02	; 2
    1566:	4f 0e       	add	r4, r31
    1568:	51 1c       	adc	r5, r1
    156a:	f8 01       	movw	r30, r16
    156c:	a0 80       	ld	r10, Z
    156e:	b1 80       	ldd	r11, Z+1	; 0x01
    1570:	36 fe       	sbrs	r3, 6
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x146>
    1574:	69 2d       	mov	r22, r9
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x14a>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	c5 01       	movw	r24, r10
    1580:	0e 94 06 0c 	call	0x180c	; 0x180c <strnlen>
    1584:	4c 01       	movw	r8, r24
    1586:	82 01       	movw	r16, r4
    1588:	f3 2d       	mov	r31, r3
    158a:	ff 77       	andi	r31, 0x7F	; 127
    158c:	3f 2e       	mov	r3, r31
    158e:	16 c0       	rjmp	.+44     	; 0x15bc <vfprintf+0x188>
    1590:	28 01       	movw	r4, r16
    1592:	22 e0       	ldi	r18, 0x02	; 2
    1594:	42 0e       	add	r4, r18
    1596:	51 1c       	adc	r5, r1
    1598:	f8 01       	movw	r30, r16
    159a:	a0 80       	ld	r10, Z
    159c:	b1 80       	ldd	r11, Z+1	; 0x01
    159e:	36 fe       	sbrs	r3, 6
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x174>
    15a2:	69 2d       	mov	r22, r9
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x178>
    15a8:	6f ef       	ldi	r22, 0xFF	; 255
    15aa:	7f ef       	ldi	r23, 0xFF	; 255
    15ac:	c5 01       	movw	r24, r10
    15ae:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <strnlen_P>
    15b2:	4c 01       	movw	r8, r24
    15b4:	f3 2d       	mov	r31, r3
    15b6:	f0 68       	ori	r31, 0x80	; 128
    15b8:	3f 2e       	mov	r3, r31
    15ba:	82 01       	movw	r16, r4
    15bc:	33 fc       	sbrc	r3, 3
    15be:	1b c0       	rjmp	.+54     	; 0x15f6 <vfprintf+0x1c2>
    15c0:	82 2d       	mov	r24, r2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 16       	cp	r8, r24
    15c6:	99 06       	cpc	r9, r25
    15c8:	b0 f4       	brcc	.+44     	; 0x15f6 <vfprintf+0x1c2>
    15ca:	b6 01       	movw	r22, r12
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    15d4:	2a 94       	dec	r2
    15d6:	f4 cf       	rjmp	.-24     	; 0x15c0 <vfprintf+0x18c>
    15d8:	f5 01       	movw	r30, r10
    15da:	37 fc       	sbrc	r3, 7
    15dc:	85 91       	lpm	r24, Z+
    15de:	37 fe       	sbrs	r3, 7
    15e0:	81 91       	ld	r24, Z+
    15e2:	5f 01       	movw	r10, r30
    15e4:	b6 01       	movw	r22, r12
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    15ec:	21 10       	cpse	r2, r1
    15ee:	2a 94       	dec	r2
    15f0:	21 e0       	ldi	r18, 0x01	; 1
    15f2:	82 1a       	sub	r8, r18
    15f4:	91 08       	sbc	r9, r1
    15f6:	81 14       	cp	r8, r1
    15f8:	91 04       	cpc	r9, r1
    15fa:	71 f7       	brne	.-36     	; 0x15d8 <vfprintf+0x1a4>
    15fc:	e8 c0       	rjmp	.+464    	; 0x17ce <vfprintf+0x39a>
    15fe:	84 36       	cpi	r24, 0x64	; 100
    1600:	11 f0       	breq	.+4      	; 0x1606 <vfprintf+0x1d2>
    1602:	89 36       	cpi	r24, 0x69	; 105
    1604:	41 f5       	brne	.+80     	; 0x1656 <vfprintf+0x222>
    1606:	f8 01       	movw	r30, r16
    1608:	37 fe       	sbrs	r3, 7
    160a:	07 c0       	rjmp	.+14     	; 0x161a <vfprintf+0x1e6>
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	0c 5f       	subi	r16, 0xFC	; 252
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x1f6>
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	07 2e       	mov	r0, r23
    1620:	00 0c       	add	r0, r0
    1622:	88 0b       	sbc	r24, r24
    1624:	99 0b       	sbc	r25, r25
    1626:	0e 5f       	subi	r16, 0xFE	; 254
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	f3 2d       	mov	r31, r3
    162c:	ff 76       	andi	r31, 0x6F	; 111
    162e:	3f 2e       	mov	r3, r31
    1630:	97 ff       	sbrs	r25, 7
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <vfprintf+0x212>
    1634:	90 95       	com	r25
    1636:	80 95       	com	r24
    1638:	70 95       	com	r23
    163a:	61 95       	neg	r22
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	8f 4f       	sbci	r24, 0xFF	; 255
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	f0 68       	ori	r31, 0x80	; 128
    1644:	3f 2e       	mov	r3, r31
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	a3 01       	movw	r20, r6
    164c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
    1650:	88 2e       	mov	r8, r24
    1652:	86 18       	sub	r8, r6
    1654:	45 c0       	rjmp	.+138    	; 0x16e0 <vfprintf+0x2ac>
    1656:	85 37       	cpi	r24, 0x75	; 117
    1658:	31 f4       	brne	.+12     	; 0x1666 <vfprintf+0x232>
    165a:	23 2d       	mov	r18, r3
    165c:	2f 7e       	andi	r18, 0xEF	; 239
    165e:	b2 2e       	mov	r11, r18
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	25 c0       	rjmp	.+74     	; 0x16b0 <vfprintf+0x27c>
    1666:	93 2d       	mov	r25, r3
    1668:	99 7f       	andi	r25, 0xF9	; 249
    166a:	b9 2e       	mov	r11, r25
    166c:	8f 36       	cpi	r24, 0x6F	; 111
    166e:	c1 f0       	breq	.+48     	; 0x16a0 <vfprintf+0x26c>
    1670:	18 f4       	brcc	.+6      	; 0x1678 <vfprintf+0x244>
    1672:	88 35       	cpi	r24, 0x58	; 88
    1674:	79 f0       	breq	.+30     	; 0x1694 <vfprintf+0x260>
    1676:	b5 c0       	rjmp	.+362    	; 0x17e2 <vfprintf+0x3ae>
    1678:	80 37       	cpi	r24, 0x70	; 112
    167a:	19 f0       	breq	.+6      	; 0x1682 <vfprintf+0x24e>
    167c:	88 37       	cpi	r24, 0x78	; 120
    167e:	21 f0       	breq	.+8      	; 0x1688 <vfprintf+0x254>
    1680:	b0 c0       	rjmp	.+352    	; 0x17e2 <vfprintf+0x3ae>
    1682:	e9 2f       	mov	r30, r25
    1684:	e0 61       	ori	r30, 0x10	; 16
    1686:	be 2e       	mov	r11, r30
    1688:	b4 fe       	sbrs	r11, 4
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <vfprintf+0x272>
    168c:	fb 2d       	mov	r31, r11
    168e:	f4 60       	ori	r31, 0x04	; 4
    1690:	bf 2e       	mov	r11, r31
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <vfprintf+0x272>
    1694:	34 fe       	sbrs	r3, 4
    1696:	0a c0       	rjmp	.+20     	; 0x16ac <vfprintf+0x278>
    1698:	29 2f       	mov	r18, r25
    169a:	26 60       	ori	r18, 0x06	; 6
    169c:	b2 2e       	mov	r11, r18
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x278>
    16a0:	28 e0       	ldi	r18, 0x08	; 8
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfprintf+0x27c>
    16a6:	20 e1       	ldi	r18, 0x10	; 16
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x27c>
    16ac:	20 e1       	ldi	r18, 0x10	; 16
    16ae:	32 e0       	ldi	r19, 0x02	; 2
    16b0:	f8 01       	movw	r30, r16
    16b2:	b7 fe       	sbrs	r11, 7
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <vfprintf+0x290>
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0c 5f       	subi	r16, 0xFC	; 252
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <vfprintf+0x29c>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 5f       	subi	r16, 0xFE	; 254
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	a3 01       	movw	r20, r6
    16d2:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
    16d6:	88 2e       	mov	r8, r24
    16d8:	86 18       	sub	r8, r6
    16da:	fb 2d       	mov	r31, r11
    16dc:	ff 77       	andi	r31, 0x7F	; 127
    16de:	3f 2e       	mov	r3, r31
    16e0:	36 fe       	sbrs	r3, 6
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x2ca>
    16e4:	23 2d       	mov	r18, r3
    16e6:	2e 7f       	andi	r18, 0xFE	; 254
    16e8:	a2 2e       	mov	r10, r18
    16ea:	89 14       	cp	r8, r9
    16ec:	58 f4       	brcc	.+22     	; 0x1704 <vfprintf+0x2d0>
    16ee:	34 fe       	sbrs	r3, 4
    16f0:	0b c0       	rjmp	.+22     	; 0x1708 <vfprintf+0x2d4>
    16f2:	32 fc       	sbrc	r3, 2
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x2d4>
    16f6:	83 2d       	mov	r24, r3
    16f8:	8e 7e       	andi	r24, 0xEE	; 238
    16fa:	a8 2e       	mov	r10, r24
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <vfprintf+0x2d4>
    16fe:	b8 2c       	mov	r11, r8
    1700:	a3 2c       	mov	r10, r3
    1702:	03 c0       	rjmp	.+6      	; 0x170a <vfprintf+0x2d6>
    1704:	b8 2c       	mov	r11, r8
    1706:	01 c0       	rjmp	.+2      	; 0x170a <vfprintf+0x2d6>
    1708:	b9 2c       	mov	r11, r9
    170a:	a4 fe       	sbrs	r10, 4
    170c:	0f c0       	rjmp	.+30     	; 0x172c <vfprintf+0x2f8>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 0d       	add	r30, r8
    1712:	f1 1d       	adc	r31, r1
    1714:	80 81       	ld	r24, Z
    1716:	80 33       	cpi	r24, 0x30	; 48
    1718:	21 f4       	brne	.+8      	; 0x1722 <vfprintf+0x2ee>
    171a:	9a 2d       	mov	r25, r10
    171c:	99 7e       	andi	r25, 0xE9	; 233
    171e:	a9 2e       	mov	r10, r25
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <vfprintf+0x300>
    1722:	a2 fe       	sbrs	r10, 2
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x2fe>
    1726:	b3 94       	inc	r11
    1728:	b3 94       	inc	r11
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <vfprintf+0x300>
    172c:	8a 2d       	mov	r24, r10
    172e:	86 78       	andi	r24, 0x86	; 134
    1730:	09 f0       	breq	.+2      	; 0x1734 <vfprintf+0x300>
    1732:	b3 94       	inc	r11
    1734:	a3 fc       	sbrc	r10, 3
    1736:	11 c0       	rjmp	.+34     	; 0x175a <vfprintf+0x326>
    1738:	a0 fe       	sbrs	r10, 0
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <vfprintf+0x314>
    173c:	b2 14       	cp	r11, r2
    173e:	88 f4       	brcc	.+34     	; 0x1762 <vfprintf+0x32e>
    1740:	28 0c       	add	r2, r8
    1742:	92 2c       	mov	r9, r2
    1744:	9b 18       	sub	r9, r11
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <vfprintf+0x330>
    1748:	b2 14       	cp	r11, r2
    174a:	60 f4       	brcc	.+24     	; 0x1764 <vfprintf+0x330>
    174c:	b6 01       	movw	r22, r12
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1756:	b3 94       	inc	r11
    1758:	f7 cf       	rjmp	.-18     	; 0x1748 <vfprintf+0x314>
    175a:	b2 14       	cp	r11, r2
    175c:	18 f4       	brcc	.+6      	; 0x1764 <vfprintf+0x330>
    175e:	2b 18       	sub	r2, r11
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x332>
    1762:	98 2c       	mov	r9, r8
    1764:	21 2c       	mov	r2, r1
    1766:	a4 fe       	sbrs	r10, 4
    1768:	10 c0       	rjmp	.+32     	; 0x178a <vfprintf+0x356>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1774:	a2 fe       	sbrs	r10, 2
    1776:	17 c0       	rjmp	.+46     	; 0x17a6 <vfprintf+0x372>
    1778:	a1 fc       	sbrc	r10, 1
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x34e>
    177c:	88 e7       	ldi	r24, 0x78	; 120
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x352>
    1782:	88 e5       	ldi	r24, 0x58	; 88
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	b6 01       	movw	r22, r12
    1788:	0c c0       	rjmp	.+24     	; 0x17a2 <vfprintf+0x36e>
    178a:	8a 2d       	mov	r24, r10
    178c:	86 78       	andi	r24, 0x86	; 134
    178e:	59 f0       	breq	.+22     	; 0x17a6 <vfprintf+0x372>
    1790:	a1 fe       	sbrs	r10, 1
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x364>
    1794:	8b e2       	ldi	r24, 0x2B	; 43
    1796:	01 c0       	rjmp	.+2      	; 0x179a <vfprintf+0x366>
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	a7 fc       	sbrc	r10, 7
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	b6 01       	movw	r22, r12
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17a6:	89 14       	cp	r8, r9
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <vfprintf+0x384>
    17aa:	b6 01       	movw	r22, r12
    17ac:	80 e3       	ldi	r24, 0x30	; 48
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17b4:	9a 94       	dec	r9
    17b6:	f7 cf       	rjmp	.-18     	; 0x17a6 <vfprintf+0x372>
    17b8:	8a 94       	dec	r8
    17ba:	f3 01       	movw	r30, r6
    17bc:	e8 0d       	add	r30, r8
    17be:	f1 1d       	adc	r31, r1
    17c0:	80 81       	ld	r24, Z
    17c2:	b6 01       	movw	r22, r12
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17ca:	81 10       	cpse	r8, r1
    17cc:	f5 cf       	rjmp	.-22     	; 0x17b8 <vfprintf+0x384>
    17ce:	22 20       	and	r2, r2
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <vfprintf+0x3a0>
    17d2:	42 ce       	rjmp	.-892    	; 0x1458 <vfprintf+0x24>
    17d4:	b6 01       	movw	r22, r12
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17de:	2a 94       	dec	r2
    17e0:	f6 cf       	rjmp	.-20     	; 0x17ce <vfprintf+0x39a>
    17e2:	f6 01       	movw	r30, r12
    17e4:	86 81       	ldd	r24, Z+6	; 0x06
    17e6:	97 81       	ldd	r25, Z+7	; 0x07
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <vfprintf+0x3ba>
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	9f ef       	ldi	r25, 0xFF	; 255
    17ee:	2b 96       	adiw	r28, 0x0b	; 11
    17f0:	e2 e1       	ldi	r30, 0x12	; 18
    17f2:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__epilogue_restores__>

000017f6 <strnlen_P>:
    17f6:	fc 01       	movw	r30, r24
    17f8:	05 90       	lpm	r0, Z+
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	70 40       	sbci	r23, 0x00	; 0
    17fe:	01 10       	cpse	r0, r1
    1800:	d8 f7       	brcc	.-10     	; 0x17f8 <strnlen_P+0x2>
    1802:	80 95       	com	r24
    1804:	90 95       	com	r25
    1806:	8e 0f       	add	r24, r30
    1808:	9f 1f       	adc	r25, r31
    180a:	08 95       	ret

0000180c <strnlen>:
    180c:	fc 01       	movw	r30, r24
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 90       	ld	r0, Z+
    1814:	01 10       	cpse	r0, r1
    1816:	d8 f7       	brcc	.-10     	; 0x180e <strnlen+0x2>
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	8e 0f       	add	r24, r30
    181e:	9f 1f       	adc	r25, r31
    1820:	08 95       	ret

00001822 <fputc>:
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	fb 01       	movw	r30, r22
    182c:	23 81       	ldd	r18, Z+3	; 0x03
    182e:	21 fd       	sbrc	r18, 1
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <fputc+0x16>
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f ef       	ldi	r25, 0xFF	; 255
    1836:	2c c0       	rjmp	.+88     	; 0x1890 <fputc+0x6e>
    1838:	22 ff       	sbrs	r18, 2
    183a:	16 c0       	rjmp	.+44     	; 0x1868 <fputc+0x46>
    183c:	46 81       	ldd	r20, Z+6	; 0x06
    183e:	57 81       	ldd	r21, Z+7	; 0x07
    1840:	24 81       	ldd	r18, Z+4	; 0x04
    1842:	35 81       	ldd	r19, Z+5	; 0x05
    1844:	42 17       	cp	r20, r18
    1846:	53 07       	cpc	r21, r19
    1848:	44 f4       	brge	.+16     	; 0x185a <fputc+0x38>
    184a:	a0 81       	ld	r26, Z
    184c:	b1 81       	ldd	r27, Z+1	; 0x01
    184e:	9d 01       	movw	r18, r26
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	20 83       	st	Z, r18
    1858:	8c 93       	st	X, r24
    185a:	26 81       	ldd	r18, Z+6	; 0x06
    185c:	37 81       	ldd	r19, Z+7	; 0x07
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	37 83       	std	Z+7, r19	; 0x07
    1864:	26 83       	std	Z+6, r18	; 0x06
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <fputc+0x6e>
    1868:	8b 01       	movw	r16, r22
    186a:	ec 01       	movw	r28, r24
    186c:	fb 01       	movw	r30, r22
    186e:	00 84       	ldd	r0, Z+8	; 0x08
    1870:	f1 85       	ldd	r31, Z+9	; 0x09
    1872:	e0 2d       	mov	r30, r0
    1874:	09 95       	icall
    1876:	89 2b       	or	r24, r25
    1878:	e1 f6       	brne	.-72     	; 0x1832 <fputc+0x10>
    187a:	d8 01       	movw	r26, r16
    187c:	16 96       	adiw	r26, 0x06	; 6
    187e:	8d 91       	ld	r24, X+
    1880:	9c 91       	ld	r25, X
    1882:	17 97       	sbiw	r26, 0x07	; 7
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	17 96       	adiw	r26, 0x07	; 7
    1888:	9c 93       	st	X, r25
    188a:	8e 93       	st	-X, r24
    188c:	16 97       	sbiw	r26, 0x06	; 6
    188e:	ce 01       	movw	r24, r28
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <__ultoa_invert>:
    189a:	fa 01       	movw	r30, r20
    189c:	aa 27       	eor	r26, r26
    189e:	28 30       	cpi	r18, 0x08	; 8
    18a0:	51 f1       	breq	.+84     	; 0x18f6 <__ultoa_invert+0x5c>
    18a2:	20 31       	cpi	r18, 0x10	; 16
    18a4:	81 f1       	breq	.+96     	; 0x1906 <__ultoa_invert+0x6c>
    18a6:	e8 94       	clt
    18a8:	6f 93       	push	r22
    18aa:	6e 7f       	andi	r22, 0xFE	; 254
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	af 4f       	sbci	r26, 0xFF	; 255
    18b6:	b1 e0       	ldi	r27, 0x01	; 1
    18b8:	3e d0       	rcall	.+124    	; 0x1936 <__ultoa_invert+0x9c>
    18ba:	b4 e0       	ldi	r27, 0x04	; 4
    18bc:	3c d0       	rcall	.+120    	; 0x1936 <__ultoa_invert+0x9c>
    18be:	67 0f       	add	r22, r23
    18c0:	78 1f       	adc	r23, r24
    18c2:	89 1f       	adc	r24, r25
    18c4:	9a 1f       	adc	r25, r26
    18c6:	a1 1d       	adc	r26, r1
    18c8:	68 0f       	add	r22, r24
    18ca:	79 1f       	adc	r23, r25
    18cc:	8a 1f       	adc	r24, r26
    18ce:	91 1d       	adc	r25, r1
    18d0:	a1 1d       	adc	r26, r1
    18d2:	6a 0f       	add	r22, r26
    18d4:	71 1d       	adc	r23, r1
    18d6:	81 1d       	adc	r24, r1
    18d8:	91 1d       	adc	r25, r1
    18da:	a1 1d       	adc	r26, r1
    18dc:	20 d0       	rcall	.+64     	; 0x191e <__ultoa_invert+0x84>
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__ultoa_invert+0x48>
    18e0:	68 94       	set
    18e2:	3f 91       	pop	r19
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	26 9f       	mul	r18, r22
    18e8:	11 24       	eor	r1, r1
    18ea:	30 19       	sub	r19, r0
    18ec:	30 5d       	subi	r19, 0xD0	; 208
    18ee:	31 93       	st	Z+, r19
    18f0:	de f6       	brtc	.-74     	; 0x18a8 <__ultoa_invert+0xe>
    18f2:	cf 01       	movw	r24, r30
    18f4:	08 95       	ret
    18f6:	46 2f       	mov	r20, r22
    18f8:	47 70       	andi	r20, 0x07	; 7
    18fa:	40 5d       	subi	r20, 0xD0	; 208
    18fc:	41 93       	st	Z+, r20
    18fe:	b3 e0       	ldi	r27, 0x03	; 3
    1900:	0f d0       	rcall	.+30     	; 0x1920 <__ultoa_invert+0x86>
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__ultoa_invert+0x5c>
    1904:	f6 cf       	rjmp	.-20     	; 0x18f2 <__ultoa_invert+0x58>
    1906:	46 2f       	mov	r20, r22
    1908:	4f 70       	andi	r20, 0x0F	; 15
    190a:	40 5d       	subi	r20, 0xD0	; 208
    190c:	4a 33       	cpi	r20, 0x3A	; 58
    190e:	18 f0       	brcs	.+6      	; 0x1916 <__ultoa_invert+0x7c>
    1910:	49 5d       	subi	r20, 0xD9	; 217
    1912:	31 fd       	sbrc	r19, 1
    1914:	40 52       	subi	r20, 0x20	; 32
    1916:	41 93       	st	Z+, r20
    1918:	02 d0       	rcall	.+4      	; 0x191e <__ultoa_invert+0x84>
    191a:	a9 f7       	brne	.-22     	; 0x1906 <__ultoa_invert+0x6c>
    191c:	ea cf       	rjmp	.-44     	; 0x18f2 <__ultoa_invert+0x58>
    191e:	b4 e0       	ldi	r27, 0x04	; 4
    1920:	a6 95       	lsr	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	ba 95       	dec	r27
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__ultoa_invert+0x86>
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	61 05       	cpc	r22, r1
    1932:	71 05       	cpc	r23, r1
    1934:	08 95       	ret
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	0a 2e       	mov	r0, r26
    193c:	06 94       	lsr	r0
    193e:	57 95       	ror	r21
    1940:	47 95       	ror	r20
    1942:	37 95       	ror	r19
    1944:	27 95       	ror	r18
    1946:	ba 95       	dec	r27
    1948:	c9 f7       	brne	.-14     	; 0x193c <__ultoa_invert+0xa2>
    194a:	62 0f       	add	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	a0 1d       	adc	r26, r0
    1954:	08 95       	ret

00001956 <__prologue_saves__>:
    1956:	2f 92       	push	r2
    1958:	3f 92       	push	r3
    195a:	4f 92       	push	r4
    195c:	5f 92       	push	r5
    195e:	6f 92       	push	r6
    1960:	7f 92       	push	r7
    1962:	8f 92       	push	r8
    1964:	9f 92       	push	r9
    1966:	af 92       	push	r10
    1968:	bf 92       	push	r11
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	ca 1b       	sub	r28, r26
    1980:	db 0b       	sbc	r29, r27
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	09 94       	ijmp

0000198e <__epilogue_restores__>:
    198e:	2a 88       	ldd	r2, Y+18	; 0x12
    1990:	39 88       	ldd	r3, Y+17	; 0x11
    1992:	48 88       	ldd	r4, Y+16	; 0x10
    1994:	5f 84       	ldd	r5, Y+15	; 0x0f
    1996:	6e 84       	ldd	r6, Y+14	; 0x0e
    1998:	7d 84       	ldd	r7, Y+13	; 0x0d
    199a:	8c 84       	ldd	r8, Y+12	; 0x0c
    199c:	9b 84       	ldd	r9, Y+11	; 0x0b
    199e:	aa 84       	ldd	r10, Y+10	; 0x0a
    19a0:	b9 84       	ldd	r11, Y+9	; 0x09
    19a2:	c8 84       	ldd	r12, Y+8	; 0x08
    19a4:	df 80       	ldd	r13, Y+7	; 0x07
    19a6:	ee 80       	ldd	r14, Y+6	; 0x06
    19a8:	fd 80       	ldd	r15, Y+5	; 0x05
    19aa:	0c 81       	ldd	r16, Y+4	; 0x04
    19ac:	1b 81       	ldd	r17, Y+3	; 0x03
    19ae:	aa 81       	ldd	r26, Y+2	; 0x02
    19b0:	b9 81       	ldd	r27, Y+1	; 0x01
    19b2:	ce 0f       	add	r28, r30
    19b4:	d1 1d       	adc	r29, r1
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	ed 01       	movw	r28, r26
    19c2:	08 95       	ret

000019c4 <_exit>:
    19c4:	f8 94       	cli

000019c6 <__stop_program>:
    19c6:	ff cf       	rjmp	.-2      	; 0x19c6 <__stop_program>
