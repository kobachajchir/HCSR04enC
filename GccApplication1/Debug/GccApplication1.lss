
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000600  00800100  000027da  0000286e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e5  00800700  00800700  00002e6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000436e  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000160f  00000000  00000000  0000752a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024b4  00000000  00000000  00008b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000aff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f1  00000000  00000000  0000b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f8f  00000000  00000000  0000c9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000e95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_7>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_10>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_11>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_12>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_18>
      4c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_19>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	74 0c       	add	r7, r4
      6a:	74 0c       	add	r7, r4
      6c:	7f 0c       	add	r7, r15
      6e:	7f 0c       	add	r7, r15
      70:	6d 0c       	add	r6, r13
      72:	cf 0c       	add	r12, r15
      74:	b2 0c       	add	r11, r2
      76:	c6 0c       	add	r12, r6

00000078 <__trampolines_end>:
      78:	42 74       	andi	r20, 0x42	; 66
      7a:	6e 20       	and	r6, r14
      7c:	6f 76       	andi	r22, 0x6F	; 111
      7e:	65 72       	andi	r22, 0x25	; 37
      80:	66 6c       	ori	r22, 0xC6	; 198
      82:	6f 77       	andi	r22, 0x7F	; 127
      84:	65 64       	ori	r22, 0x45	; 69
      86:	0a 00       	.word	0x000a	; ????

00000088 <__c.2335>:
      88:	43 61 6c 69 62 72 61 6e 64 6f 20 73 65 6e 73 6f     Calibrando senso
      98:	72 65 73 20 49 52 2e 2e 2e 0a 00                    res IR.....

000000a3 <__c.2353>:
      a3:	54 6f 64 6f 73 20 6c 6f 73 20 73 65 6e 73 6f 72     Todos los sensor
      b3:	65 73 20 49 52 20 63 61 6c 69 62 72 61 64 6f 73     es IR calibrados
      c3:	2e 0a 00                                            ...

000000c6 <__c.2351>:
      c6:	49 6e 69 63 69 61 64 6f 0a 00                       Iniciado..

000000d0 <__c.2299>:
      d0:	50 72 6f 63 65 73 61 72 20 69 6e 66 6f 0a 00        Procesar info..

000000df <__c.2295>:
      df:	43 6b 73 20 76 61 6c 69 64 6f 0a 00                 Cks valido..

000000eb <__c.2293>:
      eb:	43 6b 73 20 69 6e 76 61 6c 69 64 6f 0a 00           Cks invalido..

000000f9 <__c.2291>:
      f9:	4c 65 6e 67 74 68 20 6d 61 79 6f 72 20 61 20 32     Length mayor a 2
     109:	34 2c 20 73 65 20 70 65 72 64 65 72 69 61 20 64     4, se perderia d
     119:	61 74 61 20 64 65 6c 20 62 75 66 66 65 72 0a 00     ata del buffer..

00000129 <__c.2289>:
     129:	43 6f 6d 61 6e 64 6f 20 69 6e 76 61 6c 69 64 6f     Comando invalido
     139:	0a 00                                               ..

0000013b <__c.2287>:
     13b:	54 6f 6b 65 6e 20 69 6e 76 61 6c 69 64 6f 0a 00     Token invalido..

0000014b <__c.2273>:
     14b:	43 6b 73 20 69 6e 76 61 6c 69 64 6f 0a 00           Cks invalido..

00000159 <__c.2271>:
     159:	43 6b 73 20 76 61 6c 69 64 6f 0a 00                 Cks valido..

00000165 <__c.2264>:
     165:	50 61 79 6c 6f 61 64 20 65 6e 20 48 65 78 3a 0a     Payload en Hex:.
	...

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	17 e0       	ldi	r17, 0x07	; 7
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	ea ed       	ldi	r30, 0xDA	; 218
     18a:	f7 e2       	ldi	r31, 0x27	; 39
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a0 30       	cpi	r26, 0x00	; 0
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	27 e0       	ldi	r18, 0x07	; 7
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b7 e0       	ldi	r27, 0x07	; 7
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a5 3e       	cpi	r26, 0xE5	; 229
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <main>
     1ac:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <printfWrapper>:
// 	EICRA |= (1 << ISC01) | (1 << ISC00);  // Configura INT0 para detectar flanco ascendente
// 	EIMSK |= (1 << INT0);                   // Habilita la interrupción externa INT0 (pin 2)
// }

void printfWrapper(const char* message) {
	printf("%s\n", message);
     1b4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
     1b8:	08 95       	ret

000001ba <__vector_10>:
/* END Function prototypes ---------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_CAPT_vect)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	ef 93       	push	r30
     1d2:	ff 93       	push	r31
	// Verificamos el estado actual del sensor
	switch (ultraSensor.state)
     1d4:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <ultraSensor+0xd>
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	19 f0       	breq	.+6      	; 0x1e2 <__vector_10+0x28>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	19 f1       	breq	.+70     	; 0x226 <__vector_10+0x6c>
     1e0:	3f c0       	rjmp	.+126    	; 0x260 <__vector_10+0xa6>
	{
		case ULTRA_WAIT_RISING:
		{
			if(ultraSensor.ECHO_RISING){
     1e2:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <ultraSensor+0xc>
     1e6:	84 ff       	sbrs	r24, 4
     1e8:	3b c0       	rjmp	.+118    	; 0x260 <__vector_10+0xa6>
				ultraSensor.echo_init_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno init time
     1ea:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     1ee:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     1f2:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <ovf_count>
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	dc 01       	movw	r26, r24
     1fe:	99 27       	eor	r25, r25
     200:	88 27       	eor	r24, r24
     202:	82 0f       	add	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	a1 1d       	adc	r26, r1
     208:	b1 1d       	adc	r27, r1
     20a:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <ultraSensor>
     20e:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <ultraSensor+0x1>
     212:	a0 93 79 07 	sts	0x0779, r26	; 0x800779 <ultraSensor+0x2>
     216:	b0 93 7a 07 	sts	0x077A, r27	; 0x80077a <ultraSensor+0x3>
				ultraSensor.ECHO_RISING = 0; //Bajo la bandera para marcar que llene init time
     21a:	e3 e8       	ldi	r30, 0x83	; 131
     21c:	f7 e0       	ldi	r31, 0x07	; 7
     21e:	80 81       	ld	r24, Z
     220:	8f 7e       	andi	r24, 0xEF	; 239
     222:	80 83       	st	Z, r24
     224:	1d c0       	rjmp	.+58     	; 0x260 <__vector_10+0xa6>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			ultraSensor.echo_finish_time = (uint32_t)(ICR1 + (ovf_count * 65536UL)); //Lleno finish time
     226:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     22a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     22e:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <ovf_count>
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	dc 01       	movw	r26, r24
     23a:	99 27       	eor	r25, r25
     23c:	88 27       	eor	r24, r24
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19
     242:	a1 1d       	adc	r26, r1
     244:	b1 1d       	adc	r27, r1
     246:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <ultraSensor+0x4>
     24a:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <ultraSensor+0x5>
     24e:	a0 93 7d 07 	sts	0x077D, r26	; 0x80077d <ultraSensor+0x6>
     252:	b0 93 7e 07 	sts	0x077E, r27	; 0x80077e <ultraSensor+0x7>
			ultraSensor.ECHO_RECEIVED = 1; //Esto lo pone en modo de calcular
     256:	e3 e8       	ldi	r30, 0x83	; 131
     258:	f7 e0       	ldi	r31, 0x07	; 7
     25a:	80 81       	ld	r24, Z
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	80 83       	st	Z, r24
			break;
		}
	}
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti

0000027a <__vector_13>:


// ISR para el desbordamiento del Timer 1 (para contar los desbordamientos)
ISR(TIMER1_OVF_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	8f 93       	push	r24
	ovf_count++;  // Incrementa el contador de desbordamientos del Timer 1
     286:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <ovf_count>
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <ovf_count>
}
     290:	8f 91       	pop	r24
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	2f 93       	push	r18
     2b0:	3f 93       	push	r19
     2b2:	4f 93       	push	r20
     2b4:	5f 93       	push	r21
     2b6:	6f 93       	push	r22
     2b8:	7f 93       	push	r23
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
     2c2:	cf 93       	push	r28
     2c4:	ef 93       	push	r30
     2c6:	ff 93       	push	r31
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
     2c8:	e8 e8       	ldi	r30, 0x88	; 136
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	91 81       	ldd	r25, Z+1	; 0x01
     2d0:	80 5c       	subi	r24, 0xC0	; 192
     2d2:	93 46       	sbci	r25, 0x63	; 99
     2d4:	91 83       	std	Z+1, r25	; 0x01
     2d6:	80 83       	st	Z, r24
	IR_READ_INTERRUPT = 1;
     2d8:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     2dc:	80 61       	ori	r24, 0x10	; 16
     2de:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	45 c0       	rjmp	.+138    	; 0x370 <__vector_11+0xd4>
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
     2e6:	ec 2e       	mov	r14, r28
     2e8:	f1 2c       	mov	r15, r1
     2ea:	f7 01       	movw	r30, r14
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e3 59       	subi	r30, 0x93	; 147
     2f2:	f8 4f       	sbci	r31, 0xF8	; 248
     2f4:	00 81       	ld	r16, Z
     2f6:	11 81       	ldd	r17, Z+1	; 0x01
     2f8:	f8 01       	movw	r30, r16
     2fa:	81 81       	ldd	r24, Z+1	; 0x01
     2fc:	80 ff       	sbrs	r24, 0
     2fe:	37 c0       	rjmp	.+110    	; 0x36e <__vector_11+0xd2>
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	81 ff       	sbrs	r24, 1
     304:	08 c0       	rjmp	.+16     	; 0x316 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
     306:	81 81       	ldd	r24, Z+1	; 0x01
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
		// Update pulse duration for this servo
		if (IS_FLAG_SET(servosArray[i]->flags, SERVO_ENABLE)) {
			// Calculate pulse width based on state
			if (IS_FLAG_SET(servosArray[i]->flags, SERVO_PUSH) &&
     308:	82 fd       	sbrc	r24, 2
     30a:	05 c0       	rjmp	.+10     	; 0x316 <__vector_11+0x7a>
			!IS_FLAG_SET(servosArray[i]->flags, SERVO_RESET)) {
				// If in push mode, use maximum pulse
				servosArray[i]->pulse_us = SERVO_MAX_PULSE;
     30c:	80 ea       	ldi	r24, 0xA0	; 160
     30e:	9f e0       	ldi	r25, 0x0F	; 15
     310:	93 83       	std	Z+3, r25	; 0x03
     312:	82 83       	std	Z+2, r24	; 0x02
     314:	07 c0       	rjmp	.+14     	; 0x324 <__vector_11+0x88>
				//printf("ISR COMPA PUSH %d...\n", servosArray[i]->pin);
				} else {
				// Otherwise use the angle setting
				servosArray[i]->pulse_us = calculate_angle_pulseUs(servosArray[i]->angle);
     316:	f8 01       	movw	r30, r16
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <calculate_angle_pulseUs>
     31e:	f8 01       	movw	r30, r16
     320:	93 83       	std	Z+3, r25	; 0x03
     322:	82 83       	std	Z+2, r24	; 0x02
			}

			// Set the pin high immediately if it's the first servo
			if (i == 0) {
     324:	c1 11       	cpse	r28, r1
     326:	23 c0       	rjmp	.+70     	; 0x36e <__vector_11+0xd2>
				PORTB |= (1 << servosArray[i]->pin);
     328:	f7 01       	movw	r30, r14
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	e3 59       	subi	r30, 0x93	; 147
     330:	f8 4f       	sbci	r31, 0xF8	; 248
     332:	a0 81       	ld	r26, Z
     334:	b1 81       	ldd	r27, Z+1	; 0x01
     336:	2c 91       	ld	r18, X
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_11+0xa6>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	2a 95       	dec	r18
     344:	e2 f7       	brpl	.-8      	; 0x33e <__vector_11+0xa2>
     346:	95 b1       	in	r25, 0x05	; 5
     348:	89 2b       	or	r24, r25
     34a:	85 b9       	out	0x05, r24	; 5
				// Schedule turn-off with Compare B
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
     34c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     350:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     366:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				current_servo = 0; // Mark this as the active servo
     36a:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <current_servo>
	// Schedule next Compare A interrupt in 20ms
	OCR1A += SERVO_FRAME_PERIOD;
	IR_READ_INTERRUPT = 1;
	
	// Process all servos in one 20ms frame
	for (uint8_t i = 0; i < NUM_OUTPUTS; i++) {
     36e:	cf 5f       	subi	r28, 0xFF	; 255
     370:	c3 30       	cpi	r28, 0x03	; 3
     372:	08 f4       	brcc	.+2      	; 0x376 <__vector_11+0xda>
     374:	b8 cf       	rjmp	.-144    	; 0x2e6 <__vector_11+0x4a>
				OCR1B = TCNT1 + servosArray[i]->pulse_us;
				current_servo = 0; // Mark this as the active servo
			}
		}
	}
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	cf 91       	pop	r28
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
     3c8:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e3 59       	subi	r30, 0x93	; 147
     3d4:	f8 4f       	sbci	r31, 0xF8	; 248
     3d6:	01 90       	ld	r0, Z+
     3d8:	f0 81       	ld	r31, Z
     3da:	e0 2d       	mov	r30, r0
     3dc:	20 81       	ld	r18, Z
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <__vector_12+0x46>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	2a 95       	dec	r18
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <__vector_12+0x42>
     3ec:	80 95       	com	r24
     3ee:	90 95       	com	r25
     3f0:	95 b1       	in	r25, 0x05	; 5
     3f2:	89 23       	and	r24, r25
     3f4:	85 b9       	out	0x05, r24	; 5
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     3f6:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	e3 59       	subi	r30, 0x93	; 147
     402:	f8 4f       	sbci	r31, 0xF8	; 248
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	81 81       	ldd	r24, Z+1	; 0x01
     40c:	81 ff       	sbrs	r24, 1
     40e:	6b c0       	rjmp	.+214    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
     410:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	e3 59       	subi	r30, 0x93	; 147
     41c:	f8 4f       	sbci	r31, 0xF8	; 248
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	81 81       	ldd	r24, Z+1	; 0x01
ISR(TIMER1_COMPB_vect) {
	// Turn off the current servo pin
	PORTB &= ~(1 << servosArray[current_servo]->pin);
	
	// Check if we need to reset after push
	if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_PUSH) &&
     426:	82 ff       	sbrs	r24, 2
     428:	5e c0       	rjmp	.+188    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_RESET)) {
		
		// Clear the push and reset flags
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_RESET);
     42a:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e3 59       	subi	r30, 0x93	; 147
     436:	f8 4f       	sbci	r31, 0xF8	; 248
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	8b 7f       	andi	r24, 0xFB	; 251
     442:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(servosArray[current_servo]->flags, SERVO_PUSH);
     444:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e3 59       	subi	r30, 0x93	; 147
     450:	f8 4f       	sbci	r31, 0xF8	; 248
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	81 83       	std	Z+1, r24	; 0x01
		// Return to idle angle
		servosArray[current_servo]->angle = SERVO_IDLE_ANGLE;
     45e:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e3 59       	subi	r30, 0x93	; 147
     46a:	f8 4f       	sbci	r31, 0xF8	; 248
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	8a e5       	ldi	r24, 0x5A	; 90
     474:	84 83       	std	Z+4, r24	; 0x04
		servosArray[current_servo]->pulse_us = calculate_angle_pulseUs(servosArray[current_servo]->angle);
     476:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e3 59       	subi	r30, 0x93	; 147
     482:	f8 4f       	sbci	r31, 0xF8	; 248
     484:	c0 81       	ld	r28, Z
     486:	d1 81       	ldd	r29, Z+1	; 0x01
     488:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	e3 59       	subi	r30, 0x93	; 147
     494:	f8 4f       	sbci	r31, 0xF8	; 248
     496:	01 90       	ld	r0, Z+
     498:	f0 81       	ld	r31, Z
     49a:	e0 2d       	mov	r30, r0
     49c:	84 81       	ldd	r24, Z+4	; 0x04
     49e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <calculate_angle_pulseUs>
     4a2:	9b 83       	std	Y+3, r25	; 0x03
     4a4:	8a 83       	std	Y+2, r24	; 0x02
		if(current_servo == 0){
     4a6:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     4aa:	81 11       	cpse	r24, r1
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			SET_FLAG(salidaA.flags, OUTPUT_READY);
     4ae:	ec e1       	ldi	r30, 0x1C	; 28
     4b0:	f7 e0       	ldi	r31, 0x07	; 7
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaA.flags, OUTPUT_BUSY);
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	82 83       	std	Z+2, r24	; 0x02
     4ba:	15 c0       	rjmp	.+42     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			//printf("Volvio a posicion IDLE A\n");
		}else if(current_servo == 1){
     4bc:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			SET_FLAG(salidaB.flags, OUTPUT_READY);
     4c4:	eb ed       	ldi	r30, 0xDB	; 219
     4c6:	f7 e0       	ldi	r31, 0x07	; 7
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaB.flags, OUTPUT_BUSY);
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	82 83       	std	Z+2, r24	; 0x02
     4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			//printf("Volvio a posicion IDLE B\n");
		}else if(current_servo == 2){
     4d2:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	31 f4       	brne	.+12     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			SET_FLAG(salidaC.flags, OUTPUT_READY);
     4da:	e3 e7       	ldi	r30, 0x73	; 115
     4dc:	f7 e0       	ldi	r31, 0x07	; 7
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 60       	ori	r24, 0x08	; 8
			CLEAR_FLAG(salidaC.flags, OUTPUT_BUSY);
     4e2:	8e 7f       	andi	r24, 0xFE	; 254
     4e4:	82 83       	std	Z+2, r24	; 0x02
			//printf("Volvio a posicion IDLE C\n");
		}
	}
	
	// Move to next servo, but only if there are more servos to process in this frame
	current_servo++;
     4e6:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     4ea:	8f 5f       	subi	r24, 0xFF	; 255
     4ec:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <current_servo>
	if (current_servo < NUM_OUTPUTS) {
     4f0:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f8:	91 c0       	rjmp	.+290    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
		// If there are more servos to process, activate the next one
		if (IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     4fa:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e3 59       	subi	r30, 0x93	; 147
     506:	f8 4f       	sbci	r31, 0xF8	; 248
     508:	01 90       	ld	r0, Z+
     50a:	f0 81       	ld	r31, Z
     50c:	e0 2d       	mov	r30, r0
     50e:	81 81       	ldd	r24, Z+1	; 0x01
     510:	80 ff       	sbrs	r24, 0
     512:	2c c0       	rjmp	.+88     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
			// Turn on the pin for the next servo
			PORTB |= (1 << servosArray[current_servo]->pin);
     514:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	e3 59       	subi	r30, 0x93	; 147
     520:	f8 4f       	sbci	r31, 0xF8	; 248
     522:	01 90       	ld	r0, Z+
     524:	f0 81       	ld	r31, Z
     526:	e0 2d       	mov	r30, r0
     528:	20 81       	ld	r18, Z
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	2a 95       	dec	r18
     536:	e2 f7       	brpl	.-8      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     538:	95 b1       	in	r25, 0x05	; 5
     53a:	89 2b       	or	r24, r25
     53c:	85 b9       	out	0x05, r24	; 5
			// Schedule turn-off
			OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     53e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     542:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     546:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	e3 59       	subi	r30, 0x93	; 147
     552:	f8 4f       	sbci	r31, 0xF8	; 248
     554:	01 90       	ld	r0, Z+
     556:	f0 81       	ld	r31, Z
     558:	e0 2d       	mov	r30, r0
     55a:	82 81       	ldd	r24, Z+2	; 0x02
     55c:	93 81       	ldd	r25, Z+3	; 0x03
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     566:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     56a:	58 c0       	rjmp	.+176    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
			} else {
			// If the next servo isn't enabled, skip to the one after
			// This is a recursive call to COMPB logic without the actual interrupt
			PORTB &= ~(1 << servosArray[current_servo]->pin); // Make sure the pin is low
     56c:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e3 59       	subi	r30, 0x93	; 147
     578:	f8 4f       	sbci	r31, 0xF8	; 248
     57a:	01 90       	ld	r0, Z+
     57c:	f0 81       	ld	r31, Z
     57e:	e0 2d       	mov	r30, r0
     580:	20 81       	ld	r18, Z
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	02 c0       	rjmp	.+4      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	2a 95       	dec	r18
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
     590:	80 95       	com	r24
     592:	90 95       	com	r25
     594:	95 b1       	in	r25, 0x05	; 5
     596:	89 23       	and	r24, r25
     598:	85 b9       	out	0x05, r24	; 5
			current_servo++;
     59a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <current_servo>
			// Continue checking for the next enabled servo
			if (current_servo < NUM_OUTPUTS && IS_FLAG_SET(servosArray[current_servo]->flags, SERVO_ENABLE)) {
     5a4:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <current_servo>
     5a8:	83 30       	cpi	r24, 0x03	; 3
     5aa:	c0 f5       	brcc	.+112    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     5ac:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	e3 59       	subi	r30, 0x93	; 147
     5b8:	f8 4f       	sbci	r31, 0xF8	; 248
     5ba:	01 90       	ld	r0, Z+
     5bc:	f0 81       	ld	r31, Z
     5be:	e0 2d       	mov	r30, r0
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	2b c0       	rjmp	.+86     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
				PORTB |= (1 << servosArray[current_servo]->pin);
     5c6:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	e3 59       	subi	r30, 0x93	; 147
     5d2:	f8 4f       	sbci	r31, 0xF8	; 248
     5d4:	01 90       	ld	r0, Z+
     5d6:	f0 81       	ld	r31, Z
     5d8:	e0 2d       	mov	r30, r0
     5da:	20 81       	ld	r18, Z
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	2a 95       	dec	r18
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     5ea:	95 b1       	in	r25, 0x05	; 5
     5ec:	89 2b       	or	r24, r25
     5ee:	85 b9       	out	0x05, r24	; 5
				OCR1B = TCNT1 + servosArray[current_servo]->pulse_us;
     5f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     5f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     5f8:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <current_servo>
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	e3 59       	subi	r30, 0x93	; 147
     604:	f8 4f       	sbci	r31, 0xF8	; 248
     606:	01 90       	ld	r0, Z+
     608:	f0 81       	ld	r31, Z
     60a:	e0 2d       	mov	r30, r0
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     618:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}
		}
	}
	// If current_servo >= NUM_OUTPUTS, we've processed all servos for this frame
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_18>:

ISR(USART_RX_vect)
{
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
	uint8_t received_byte = UDR0;  // Lee el byte recibido
     65c:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Calcular el próximo índice de escritura en el buffer circular
	uint8_t next_indexW = (protocolService.indexW + 1) % PROTOCOL_BUFFER_SIZE;
     660:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <protocolService>
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	8f 73       	andi	r24, 0x3F	; 63
     66a:	90 78       	andi	r25, 0x80	; 128
     66c:	99 23       	and	r25, r25
     66e:	24 f4       	brge	.+8      	; 0x678 <__vector_18+0x36>
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	80 6c       	ori	r24, 0xC0	; 192
     674:	9f 6f       	ori	r25, 0xFF	; 255
     676:	01 96       	adiw	r24, 0x01	; 1

	// Verifica si el buffer está lleno: si el próximo índice de escritura es igual al índice de lectura
	if (next_indexW == protocolService.indexR) {
     678:	20 91 8f 07 	lds	r18, 0x078F	; 0x80078f <protocolService+0x1>
     67c:	28 13       	cpse	r18, r24
     67e:	0a c0       	rjmp	.+20     	; 0x694 <__vector_18+0x52>
		// El buffer está lleno; activa la bandera para procesar datos antes de sobrescribir
			if (!(IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA))) {
     680:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
     684:	81 fd       	sbrc	r24, 1
     686:	2a c0       	rjmp	.+84     	; 0x6dc <__vector_18+0x9a>
				// Si la bandera de procesamiento no está activa, no se debe sobreescribir
				SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     688:	e0 ed       	ldi	r30, 0xD0	; 208
     68a:	f7 e0       	ldi	r31, 0x07	; 7
     68c:	80 81       	ld	r24, Z
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	80 83       	st	Z, r24
     692:	24 c0       	rjmp	.+72     	; 0x6dc <__vector_18+0x9a>
			}
		// Opcional: podrías descartar el byte recibido
		} else {
		// Hay espacio: copia el byte en el buffer
		protocolService.buffer[protocolService.indexW] = received_byte;
     694:	ae e8       	ldi	r26, 0x8E	; 142
     696:	b7 e0       	ldi	r27, 0x07	; 7
     698:	ec 91       	ld	r30, X
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	e2 57       	subi	r30, 0x72	; 114
     69e:	f8 4f       	sbci	r31, 0xF8	; 248
     6a0:	32 83       	std	Z+2, r19	; 0x02
		protocolService.indexW = next_indexW;
     6a2:	8c 93       	st	X, r24

		// Calcular la cantidad de bytes disponibles en el buffer (caso circular)
		uint8_t available;
		if (protocolService.indexW >= protocolService.indexR) {
     6a4:	9c 91       	ld	r25, X
     6a6:	11 96       	adiw	r26, 0x01	; 1
     6a8:	8c 91       	ld	r24, X
     6aa:	11 97       	sbiw	r26, 0x01	; 1
     6ac:	98 17       	cp	r25, r24
     6ae:	28 f0       	brcs	.+10     	; 0x6ba <__vector_18+0x78>
			available = protocolService.indexW - protocolService.indexR;
     6b0:	fd 01       	movw	r30, r26
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	89 1b       	sub	r24, r25
     6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <__vector_18+0x84>
			} else {
			available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
     6ba:	ee e8       	ldi	r30, 0x8E	; 142
     6bc:	f7 e0       	ldi	r31, 0x07	; 7
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
     6c2:	89 1b       	sub	r24, r25
     6c4:	80 5c       	subi	r24, 0xC0	; 192
		}

		// Si hay al menos 6 bytes (mínimo para un paquete) disponibles, activa processData
        if (available >= PROTOCOL_MIN_BYTE_COUNT && !IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA)) {
     6c6:	86 30       	cpi	r24, 0x06	; 6
     6c8:	48 f0       	brcs	.+18     	; 0x6dc <__vector_18+0x9a>
     6ca:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
     6ce:	81 fd       	sbrc	r24, 1
     6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__vector_18+0x9a>
	        SET_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
     6d2:	e0 ed       	ldi	r30, 0xD0	; 208
     6d4:	f7 e0       	ldi	r31, 0x07	; 7
     6d6:	80 81       	ld	r24, Z
     6d8:	82 60       	ori	r24, 0x02	; 2
     6da:	80 83       	st	Z, r24
        }
	}
}
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_19>:


ISR(USART_UDRE_vect) {
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
	if (protocolService.indexR != protocolService.indexW) {
     70c:	ee e8       	ldi	r30, 0x8E	; 142
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	80 81       	ld	r24, Z
     714:	98 17       	cp	r25, r24
     716:	b9 f0       	breq	.+46     	; 0x746 <__vector_19+0x50>
		// Hay datos para transmitir, envía el siguiente byte
		uint8_t byte_to_send = protocolService.buffer[protocolService.indexR];
     718:	df 01       	movw	r26, r30
     71a:	e1 81       	ldd	r30, Z+1	; 0x01
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	e2 57       	subi	r30, 0x72	; 114
     720:	f8 4f       	sbci	r31, 0xF8	; 248
     722:	82 81       	ldd	r24, Z+2	; 0x02
		UDR0 = byte_to_send;
     724:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	8c 91       	ld	r24, X
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	8f 73       	andi	r24, 0x3F	; 63
     732:	90 78       	andi	r25, 0x80	; 128
     734:	99 23       	and	r25, r25
     736:	24 f4       	brge	.+8      	; 0x740 <__vector_19+0x4a>
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	80 6c       	ori	r24, 0xC0	; 192
     73c:	9f 6f       	ori	r25, 0xFF	; 255
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <protocolService+0x1>
     744:	0d c0       	rjmp	.+26     	; 0x760 <__vector_19+0x6a>
		} else {
		// No hay más datos para enviar, deshabilita la interrupción de transmisión
		UCSR0B &= ~(1 << UDRIE0);
     746:	e1 ec       	ldi	r30, 0xC1	; 193
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	8f 7d       	andi	r24, 0xDF	; 223
     74e:	80 83       	st	Z, r24
		// Apaga la bandera de transmisión y reactiva la interrupción de recepción
		IS_TRANSMITTING = 0;
     750:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
     754:	87 7f       	andi	r24, 0xF7	; 247
     756:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <bandera3>
		UCSR0B |= (1 << RXCIE0);
     75a:	80 81       	ld	r24, Z
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	80 83       	st	Z, r24
	}
}
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	bf 91       	pop	r27
     766:	af 91       	pop	r26
     768:	9f 91       	pop	r25
     76a:	8f 91       	pop	r24
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti

00000776 <timer1_init>:
/* Timer1 and External Interrupt Functions ---------------------------------*/

void timer1_init()
{
	// Reset the timer counter
	TCNT1 = 0;
     776:	a4 e8       	ldi	r26, 0x84	; 132
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	11 96       	adiw	r26, 0x01	; 1
     77c:	1c 92       	st	X, r1
     77e:	1e 92       	st	-X, r1
	// Clear input capture flag
	TIFR1 |= (1 << ICF1);
     780:	86 b3       	in	r24, 0x16	; 22
     782:	80 62       	ori	r24, 0x20	; 32
     784:	86 bb       	out	0x16, r24	; 22
	// Enable input capture interrupt and overflow interrupt
	TIMSK1 |= (1 << ICIE1) | (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
     786:	ef e6       	ldi	r30, 0x6F	; 111
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	87 62       	ori	r24, 0x27	; 39
     78e:	80 83       	st	Z, r24
	// Set to capture rising edge initially
	TCCR1B |= (1 << ICES1);
     790:	e1 e8       	ldi	r30, 0x81	; 129
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	80 64       	ori	r24, 0x40	; 64
     798:	80 83       	st	Z, r24
	// Set prescaler to 8 for adequate timing resolution
	TCCR1B |= (1 << CS11);  // Prescaler = 8
     79a:	80 81       	ld	r24, Z
     79c:	82 60       	ori	r24, 0x02	; 2
     79e:	80 83       	st	Z, r24
	OCR1A = TCNT1 + SERVO_FRAME_PERIOD; // Primera interrupción en 20ms desde ya
     7a0:	8d 91       	ld	r24, X+
     7a2:	9c 91       	ld	r25, X
     7a4:	80 5c       	subi	r24, 0xC0	; 192
     7a6:	93 46       	sbci	r25, 0x63	; 99
     7a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     7ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     7b0:	08 95       	ret

000007b2 <timer2_init>:
}

void timer2_init()
{
	// Configura el Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler de 1024
     7b2:	e1 eb       	ldi	r30, 0xB1	; 177
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	87 60       	ori	r24, 0x07	; 7
     7ba:	80 83       	st	Z, r24
	OCR2A = 155;  // Para generar una interrupción cada 10 ms (156 ciclos de temporizador)
     7bc:	8b e9       	ldi	r24, 0x9B	; 155
     7be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);  // Habilita la interrupción por comparación de Timer 2
     7c2:	e0 e7       	ldi	r30, 0x70	; 112
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	80 83       	st	Z, r24
	TCNT2 = 0;  // Inicializa el contador de Timer 2 en 0
     7cc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     7d0:	08 95       	ret

000007d2 <gpio_pins_init>:
	// El prescaler se configurará cuando necesitemos iniciar el timer
}

void gpio_pins_init() {
	DDRB |= (1 << LED_BUILTIN_PIN);   // LED pin salida
     7d2:	84 b1       	in	r24, 0x04	; 4
     7d4:	80 62       	ori	r24, 0x20	; 32
     7d6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED_BUILTIN_PIN);  // LED HIGH
     7d8:	85 b1       	in	r24, 0x05	; 5
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1 << TRIGGER_PIN);       // TRIGGER pin salida
     7de:	8a b1       	in	r24, 0x0a	; 10
     7e0:	88 60       	ori	r24, 0x08	; 8
     7e2:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << ECHO_PIN);         // ECHO pin como entrada
     7e4:	84 b1       	in	r24, 0x04	; 4
     7e6:	8e 7f       	andi	r24, 0xFE	; 254
     7e8:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BUTTON_PIN);       // BUTTON pin como entrada
     7ea:	8a b1       	in	r24, 0x0a	; 10
     7ec:	8f 7e       	andi	r24, 0xEF	; 239
     7ee:	8a b9       	out	0x0a, r24	; 10
	
	//Inicializar las salidas de servos
	DDRB |= (1 << SERVOA_PIN); // SERVOA_PIN como salida
     7f0:	84 b1       	in	r24, 0x04	; 4
     7f2:	82 60       	ori	r24, 0x02	; 2
     7f4:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOB_PIN); // SERVOB_PIN como salida
     7f6:	84 b1       	in	r24, 0x04	; 4
     7f8:	84 60       	ori	r24, 0x04	; 4
     7fa:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << SERVOC_PIN); // SERVOC_PIN como salida
     7fc:	84 b1       	in	r24, 0x04	; 4
     7fe:	88 60       	ori	r24, 0x08	; 8
     800:	84 b9       	out	0x04, r24	; 4
	
	tcrt_init(); //Despues haremos esto para todos los sensores, modularizando
     802:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <tcrt_init>
	
	// Poner en bajo estos pines para asegurarnos
	PORTD &= ~(1 << TRIGGER_PIN);
     806:	8b b1       	in	r24, 0x0b	; 11
     808:	87 7f       	andi	r24, 0xF7	; 247
     80a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << BUTTON_PIN);
     80c:	8b b1       	in	r24, 0x0b	; 11
     80e:	8f 7e       	andi	r24, 0xEF	; 239
     810:	8b b9       	out	0x0b, r24	; 11
     812:	08 95       	ret

00000814 <__vector_7>:
}

/* END Timer1 and External Interrupt Functions ------------------------------*/

ISR(TIMER2_COMPA_vect)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
	if(TIMER2_ACTIVE) {
     836:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     83a:	81 ff       	sbrs	r24, 1
     83c:	ee c0       	rjmp	.+476    	; 0xa1a <__stack+0x11b>
		// --- Gestión del pulso de TRIGGER en ULTRA_TRIGGERING ---
		if(ultraSensor.state == ULTRA_TRIGGERING) {
     83e:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <ultraSensor+0xd>
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	51 f5       	brne	.+84     	; 0x89a <__vector_7+0x86>
			if(!TRIGGER_ACTIVE) {
     846:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     84a:	85 fd       	sbrc	r24, 5
     84c:	0d c0       	rjmp	.+26     	; 0x868 <__vector_7+0x54>
				// Primera interrupción: activa el trigger y marca la bandera
				ultrasonic_hal_trigger_setHigh();
     84e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <ultrasonic_hal_trigger_setHigh>
				ultraSensor.DO_TRIGGER = 1;
     852:	e3 e8       	ldi	r30, 0x83	; 131
     854:	f7 e0       	ldi	r31, 0x07	; 7
     856:	80 81       	ld	r24, Z
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 1;
     85c:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     860:	80 62       	ori	r24, 0x20	; 32
     862:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
     866:	19 c0       	rjmp	.+50     	; 0x89a <__vector_7+0x86>
			} else {
				// Segunda interrupción: desactiva el trigger y señala que terminó el pulso
				ultrasonic_hal_trigger_setLow();
     868:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ultrasonic_hal_trigger_setLow>
				ultraSensor.TRIGGER_FINISH = 1;
     86c:	e3 e8       	ldi	r30, 0x83	; 131
     86e:	f7 e0       	ldi	r31, 0x07	; 7
     870:	80 81       	ld	r24, Z
     872:	82 60       	ori	r24, 0x02	; 2
     874:	80 83       	st	Z, r24
				TRIGGER_ACTIVE = 0;
     876:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
				EMIT_TRIGGER = 0;
				WAITING_ECHO = 1;
     87a:	8d 7d       	andi	r24, 0xDD	; 221
     87c:	88 60       	ori	r24, 0x08	; 8
     87e:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
				ultraSensor.TRIGGER_ALLOWED = 0;
     882:	80 81       	ld	r24, Z
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	80 83       	st	Z, r24
				ultraSensor.state = ULTRA_WAIT_RISING;
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <ultraSensor+0xd>
				ultraSensor.ECHO_RISING = 1; // Indica que se ha enviado el trigger y se espera ECHO
     88e:	80 81       	ld	r24, Z
     890:	80 61       	ori	r24, 0x10	; 16
     892:	80 83       	st	Z, r24
				ultraSensor.TRIGGER_FINISH = 0; // Limpiamos la bandera para evitar transiciones repetidas
     894:	80 81       	ld	r24, Z
     896:	8d 7f       	andi	r24, 0xFD	; 253
     898:	80 83       	st	Z, r24
			}
		}
		
		// --- Timeout de 20ms para el ECHO ---
		if(ultraSensor.state == ULTRA_WAIT_RISING && ultraSensor.ECHO_RISING && !VEINTEMS_PASSED && WAITING_ECHO) {
     89a:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <ultraSensor+0xd>
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	d1 f4       	brne	.+52     	; 0x8d6 <__vector_7+0xc2>
     8a2:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <ultraSensor+0xc>
     8a6:	84 ff       	sbrs	r24, 4
     8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <__vector_7+0xc2>
     8aa:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     8ae:	89 70       	andi	r24, 0x09	; 9
     8b0:	88 30       	cpi	r24, 0x08	; 8
     8b2:	89 f4       	brne	.+34     	; 0x8d6 <__vector_7+0xc2>
			if(veintems_counter < 1) { // 1 * 10ms = 10ms (ajusta si lo deseas a 2 para 20ms)
     8b4:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <veintems_counter>
     8b8:	81 11       	cpse	r24, r1
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__vector_7+0xb4>
				veintems_counter++;
     8bc:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <veintems_counter>
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <veintems_counter>
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <__vector_7+0xc2>
				} else {
				VEINTEMS_PASSED = 1;
     8c8:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
				veintems_counter = 0;
     8d2:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <veintems_counter>
			}
		}
		// --- Habilitar el trigger nuevamente en estados IDLE o DONE (70ms) ---
		if(!ultraSensor.TRIGGER_ALLOWED && !WAIT_TIME_TRIGGER_PASSED) {
     8d6:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <ultraSensor+0xc>
     8da:	85 fd       	sbrc	r24, 5
     8dc:	22 c0       	rjmp	.+68     	; 0x922 <__stack+0x23>
     8de:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     8e2:	84 fd       	sbrc	r24, 4
     8e4:	1e c0       	rjmp	.+60     	; 0x922 <__stack+0x23>
			if(wait_time < 7){ // 7 * 10ms = 70ms
     8e6:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <wait_time>
     8ea:	87 30       	cpi	r24, 0x07	; 7
     8ec:	30 f4       	brcc	.+12     	; 0x8fa <__vector_7+0xe6>
				wait_time++;
     8ee:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <wait_time>
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <wait_time>
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
				} else {
				WAIT_TIME_TRIGGER_PASSED = 1;
     8fa:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     8fe:	80 61       	ori	r24, 0x10	; 16
     900:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
				wait_time = 0;
     904:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <wait_time>
			}
			if(ultraSensor.TIMEDOUT){
     908:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <ultraSensor+0xc>
     90c:	83 ff       	sbrs	r24, 3
     90e:	09 c0       	rjmp	.+18     	; 0x922 <__stack+0x23>
				ultrasonic_timeout_clear(&ultraSensor, DEBUG_FLAGS ? true : false);
     910:	60 91 52 07 	lds	r22, 0x0752	; 0x800752 <bandera2>
     914:	66 fb       	bst	r22, 6
     916:	66 27       	eor	r22, r22
     918:	60 f9       	bld	r22, 0
     91a:	87 e7       	ldi	r24, 0x77	; 119
     91c:	97 e0       	ldi	r25, 0x07	; 7
     91e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <ultrasonic_timeout_clear>
			}
		}
		// --- Contador general (no modificado) ---
		if(diezMsCounter < ECHO_INTERVAL_TENMS){
     922:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <diezMsCounter>
     926:	8a 30       	cpi	r24, 0x0A	; 10
     928:	30 f4       	brcc	.+12     	; 0x936 <__stack+0x37>
			diezMsCounter++;
     92a:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <diezMsCounter>
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <diezMsCounter>
     934:	07 c0       	rjmp	.+14     	; 0x944 <__stack+0x45>
			} else {
			ECHO_INTERVAL_FLAG = 1;
     936:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     93a:	88 60       	ori	r24, 0x08	; 8
     93c:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			diezMsCounter = 0;
     940:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <diezMsCounter>
		}
		
		// --- Código adicional (botón, servo, etc.) ---
		if(BTN_PRESSED){
     944:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     948:	86 ff       	sbrs	r24, 6
     94a:	0e c0       	rjmp	.+28     	; 0x968 <__stack+0x69>
			if(btn_pressed_time == 255){
     94c:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <btn_pressed_time>
     950:	8f 3f       	cpi	r24, 0xFF	; 255
     952:	29 f4       	brne	.+10     	; 0x95e <__stack+0x5f>
				BTN_OVF = 1;
     954:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     958:	84 60       	ori	r24, 0x04	; 4
     95a:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			}
			btn_pressed_time++;
     95e:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <btn_pressed_time>
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <btn_pressed_time>
		}
		if(IS_FLAG_SET(servoA.flags, SERVO_PUSH)){
     968:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <servoA+0x1>
     96c:	81 ff       	sbrs	r24, 1
     96e:	0d c0       	rjmp	.+26     	; 0x98a <__stack+0x8b>
			//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			if(servoA.state_time < SERVO_ACTIVE_TIME){
     970:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <servoA+0x5>
     974:	9a 30       	cpi	r25, 0x0A	; 10
     976:	20 f4       	brcc	.+8      	; 0x980 <__stack+0x81>
				servoA.state_time++;  // Increment time spent in PUSH mode
     978:	9f 5f       	subi	r25, 0xFF	; 255
     97a:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <servoA+0x5>
     97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x8b>
				//printf("Servo in PUSH mode: state_time = %d\n", servoA.state_time);
			} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoA.state_time = 0;
     980:	e6 e1       	ldi	r30, 0x16	; 22
     982:	f7 e0       	ldi	r31, 0x07	; 7
     984:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoA.flags, SERVO_RESET);  // Set reset flag
     986:	84 60       	ori	r24, 0x04	; 4
     988:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoA.state_time);
			}
		}
		if(IS_FLAG_SET(servoB.flags, SERVO_PUSH)){
     98a:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <servoB+0x1>
     98e:	81 ff       	sbrs	r24, 1
     990:	0d c0       	rjmp	.+26     	; 0x9ac <__stack+0xad>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoB.state_time < SERVO_ACTIVE_TIME){
     992:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <servoB+0x5>
     996:	9a 30       	cpi	r25, 0x0A	; 10
     998:	20 f4       	brcc	.+8      	; 0x9a2 <__stack+0xa3>
				servoB.state_time++;  // Increment time spent in PUSH mode
     99a:	9f 5f       	subi	r25, 0xFF	; 255
     99c:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <servoB+0x5>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <__stack+0xad>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoB.state_time = 0;
     9a2:	e8 e8       	ldi	r30, 0x88	; 136
     9a4:	f7 e0       	ldi	r31, 0x07	; 7
     9a6:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoB.flags, SERVO_RESET);  // Set reset flag
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		if(IS_FLAG_SET(servoC.flags, SERVO_PUSH)){
     9ac:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <servoC+0x1>
     9b0:	81 ff       	sbrs	r24, 1
     9b2:	0d c0       	rjmp	.+26     	; 0x9ce <__stack+0xcf>
			//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
			if(servoC.state_time < SERVO_ACTIVE_TIME){
     9b4:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <servoC+0x5>
     9b8:	9a 30       	cpi	r25, 0x0A	; 10
     9ba:	20 f4       	brcc	.+8      	; 0x9c4 <__stack+0xc5>
				servoC.state_time++;  // Increment time spent in PUSH mode
     9bc:	9f 5f       	subi	r25, 0xFF	; 255
     9be:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <servoC+0x5>
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__stack+0xcf>
				//printf("Servo in PUSH mode: state_time = %d\n", servoB.state_time);
				} else {
				// If we have reached the active time, reset state_time and set RESET flag
				servoC.state_time = 0;
     9c4:	e3 e5       	ldi	r30, 0x53	; 83
     9c6:	f7 e0       	ldi	r31, 0x07	; 7
     9c8:	15 82       	std	Z+5, r1	; 0x05
				SET_FLAG(servoC.flags, SERVO_RESET);  // Set reset flag
     9ca:	84 60       	ori	r24, 0x04	; 4
     9cc:	81 83       	std	Z+1, r24	; 0x01
				//printf("Servo RESET triggered: state_time = %d\n", servoB.state_time);
			}
		}
		// Codigo lectura TCRT cada 10ms
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9ce:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
     9d2:	80 ff       	sbrs	r24, 0
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <__stack+0xe1>
     9d6:	83 fd       	sbrc	r24, 3
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__stack+0xe1>
			SET_FLAG(IR_A.flags, TCRT_NEW_VALUE);
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9e0:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
     9e4:	80 ff       	sbrs	r24, 0
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__stack+0xf3>
     9e8:	83 fd       	sbrc	r24, 3
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0xf3>
			SET_FLAG(IR_B.flags, TCRT_NEW_VALUE);
     9ec:	88 60       	ori	r24, 0x08	; 8
     9ee:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     9f2:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
     9f6:	80 ff       	sbrs	r24, 0
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__stack+0x109>
     9fa:	83 fd       	sbrc	r24, 3
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <__stack+0x109>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     9fe:	e0 e2       	ldi	r30, 0x20	; 32
     a00:	f7 e0       	ldi	r31, 0x07	; 7
     a02:	80 81       	ld	r24, Z
     a04:	88 60       	ori	r24, 0x08	; 8
     a06:	80 83       	st	Z, r24
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 10ms
     a08:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
     a0c:	80 ff       	sbrs	r24, 0
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__stack+0x11b>
     a10:	83 fd       	sbrc	r24, 3
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <__stack+0x11b>
			SET_FLAG(IR_U.flags, TCRT_NEW_VALUE);
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <IR_U>
		}
	}
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <main>:
	bandera3.byte = 0;
	// Habilita el trigger y verifica explícitamente que otras banderas estén en 0
	TIMER2_ACTIVE = 1;
	ULTRASONIC_ENABLE = 1;
	DEBUG_FLAGS = 0;
	DEBUG_FLAGS_SORTER = 1;
     a3c:	80 e8       	ldi	r24, 0x80	; 128
     a3e:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
	IR_CALIBRATED = 0;	
     a42:	82 e8       	ldi	r24, 0x82	; 130
     a44:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
	OUTPUT_A_HAS_CONFIG = 0; //POR AHORA
	OUTPUT_B_HAS_CONFIG = 0; //POR AHORA
	OUTPUT_C_HAS_CONFIG = 0; //POR AHORA
     a48:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <bandera3>
	// Inicializa la comunicación serial primero
	USART_Init(8);  // 115200 baudios para un reloj de 16 MHz
     a4c:	88 e0       	ldi	r24, 0x08	; 8
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <USART_Init>
	// Redirigir la salida estándar a USART
	stdout = &mystdout;
     a54:	ef ed       	ldi	r30, 0xDF	; 223
     a56:	f7 e0       	ldi	r31, 0x07	; 7
     a58:	8e e0       	ldi	r24, 0x0E	; 14
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	93 83       	std	Z+3, r25	; 0x03
     a5e:	82 83       	std	Z+2, r24	; 0x02
	// Redirigir la entrada estándar a USART
	stdin = &mystdin;
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
	initProtocolService(&protocolService);
     a68:	8e e8       	ldi	r24, 0x8E	; 142
     a6a:	97 e0       	ldi	r25, 0x07	; 7
     a6c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <initProtocolService>
	diezMsCounter = 0;
     a70:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <diezMsCounter>
	// Inicializa los pines GPIO
	gpio_pins_init();
     a74:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <gpio_pins_init>
	// Inicializa los temporizadores
	timer1_init();
     a78:	0e 94 bb 03 	call	0x776	; 0x776 <timer1_init>
	timer2_init();
     a7c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <timer2_init>
	//Inicia HCSR04
	TCRT_init_Handlers(); //Inicializa las estructuras TCRT_X
     a80:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TCRT_init_Handlers>
	ultrasonic_init(&ultraSensor, printfWrapper);
     a84:	6a ed       	ldi	r22, 0xDA	; 218
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	87 e7       	ldi	r24, 0x77	; 119
     a8a:	97 e0       	ldi	r25, 0x07	; 7
     a8c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <ultrasonic_init>
	ultrasonic_set_debug_mode(&ultraSensor, DEBUG_FLAGS ? true : false);
     a90:	60 91 52 07 	lds	r22, 0x0752	; 0x800752 <bandera2>
     a94:	66 fb       	bst	r22, 6
     a96:	66 27       	eor	r22, r22
     a98:	60 f9       	bld	r22, 0
     a9a:	87 e7       	ldi	r24, 0x77	; 119
     a9c:	97 e0       	ldi	r25, 0x07	; 7
     a9e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <ultrasonic_set_debug_mode>
	initDetector(&hcsr04Detector, &ultraSensor, &IR_U);
     aa2:	40 e2       	ldi	r20, 0x20	; 32
     aa4:	57 e0       	ldi	r21, 0x07	; 7
     aa6:	67 e7       	ldi	r22, 0x77	; 119
     aa8:	77 e0       	ldi	r23, 0x07	; 7
     aaa:	88 e6       	ldi	r24, 0x68	; 104
     aac:	97 e0       	ldi	r25, 0x07	; 7
     aae:	0e 94 86 06 	call	0xd0c	; 0xd0c <initDetector>
	initSorter(&SorterSystem);
     ab2:	8f e3       	ldi	r24, 0x3F	; 63
     ab4:	97 e0       	ldi	r25, 0x07	; 7
     ab6:	0e 94 15 07 	call	0xe2a	; 0xe2a <initSorter>
	// Inicializa la interrupción externa
	//external_interrupt_init();
	EMIT_TRIGGER = 1; //Solo si quiero emitir al iniciar, sino sacar
     aba:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     abe:	82 60       	ori	r24, 0x02	; 2
     ac0:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
	//Imprime iniciado
	printf_P(PSTR("Iniciado\n"));
     ac4:	86 ec       	ldi	r24, 0xC6	; 198
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
	sei();
     ad0:	78 94       	sei
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
	while (1)
	{ 
		if(IR_CALIBRATED){
     ad6:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     ada:	85 ff       	sbrs	r24, 5
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <main+0xac>
			irSensorsTask(&SorterSystem);
     ade:	8f e3       	ldi	r24, 0x3F	; 63
     ae0:	97 e0       	ldi	r25, 0x07	; 7
     ae2:	0e 94 11 09 	call	0x1222	; 0x1222 <irSensorsTask>
     ae6:	7d c0       	rjmp	.+250    	; 0xbe2 <main+0x1a6>

static inline bool calibrateAllIRSensors()
{
	static bool init_done = false;

	if (!init_done) {
     ae8:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <__data_end>
     aec:	81 11       	cpse	r24, r1
     aee:	27 c0       	rjmp	.+78     	; 0xb3e <main+0x102>
		printf_P(PSTR("Calibrando sensores IR...\n"));
     af0:	88 e8       	ldi	r24, 0x88	; 136
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
		if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED)){
     afc:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	80 ff       	sbrs	r24, 0
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <main+0xd2>
			SET_FLAG(IR_A.flags, TCRT_CALIBRATING);	
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <IR_A>
		}
		if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED)){
     b0e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
     b12:	80 ff       	sbrs	r24, 0
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <main+0xe0>
			SET_FLAG(IR_B.flags, TCRT_CALIBRATING);
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <IR_B>
		}
		if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED)){
     b1c:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
     b20:	80 ff       	sbrs	r24, 0
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <main+0xee>
			SET_FLAG(IR_C.flags, TCRT_CALIBRATING);
     b24:	84 60       	ori	r24, 0x04	; 4
     b26:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <IR_C>
		}
		if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED)){
     b2a:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
     b2e:	80 ff       	sbrs	r24, 0
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <main+0xfc>
			SET_FLAG(IR_U.flags, TCRT_CALIBRATING);
     b32:	84 60       	ori	r24, 0x04	; 4
     b34:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <IR_U>
		}
		init_done = true;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <__data_end>
	}

	if (IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING)) {
     b3e:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
     b42:	82 ff       	sbrs	r24, 2
     b44:	04 c0       	rjmp	.+8      	; 0xb4e <main+0x112>
		calibrateIRSensor(&IR_A);
     b46:	89 e5       	ldi	r24, 0x59	; 89
     b48:	97 e0       	ldi	r25, 0x07	; 7
     b4a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING)) {
     b4e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
     b52:	82 ff       	sbrs	r24, 2
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <main+0x122>
		calibrateIRSensor(&IR_B);
     b56:	87 e0       	ldi	r24, 0x07	; 7
     b58:	97 e0       	ldi	r25, 0x07	; 7
     b5a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING)) {
     b5e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
     b62:	82 ff       	sbrs	r24, 2
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <main+0x132>
		calibrateIRSensor(&IR_C);
     b66:	80 e3       	ldi	r24, 0x30	; 48
     b68:	97 e0       	ldi	r25, 0x07	; 7
     b6a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <calibrateIRSensor>
	}
	if (IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) {
     b6e:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
     b72:	82 ff       	sbrs	r24, 2
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <main+0x142>
		calibrateIRSensor(&IR_U);
     b76:	80 e2       	ldi	r24, 0x20	; 32
     b78:	97 e0       	ldi	r25, 0x07	; 7
     b7a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <calibrateIRSensor>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     b7e:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
     b82:	82 fd       	sbrc	r24, 2
     b84:	0e c0       	rjmp	.+28     	; 0xba2 <main+0x166>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     b86:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
		calibrateIRSensor(&IR_U);
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
     b8a:	82 fd       	sbrc	r24, 2
     b8c:	0c c0       	rjmp	.+24     	; 0xba6 <main+0x16a>
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     b8e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
	}
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
     b92:	82 fd       	sbrc	r24, 2
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <main+0x16e>
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
     b96:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
	// Lo mismo con los demás si están habilitados...

	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
     b9a:	82 ff       	sbrs	r24, 2
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <main+0x172>
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
	}
	return false; // Sigue calibrando
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <main+0x174>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <main+0x174>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <main+0x174>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <main+0x174>
	// Condición de salida
	if (!IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) &&
		!IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING)) { //Si hay alguno no ENABLED, entonces no entra en CALIBRATING mode y aca puede salir tranquilo, no bloquea el funcionamiento no tener un sensor
		return true; // Listo
     bae:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{ 
		if(IR_CALIBRATED){
			irSensorsTask(&SorterSystem);
		}else{
			if(calibrateAllIRSensors()){
     bb0:	88 23       	and	r24, r24
     bb2:	b9 f0       	breq	.+46     	; 0xbe2 <main+0x1a6>
				printf_P(PSTR("Todos los sensores IR calibrados.\n"));
     bb4:	83 ea       	ldi	r24, 0xA3	; 163
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
				IR_CALIBRATED = 1;
     bc0:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     bc4:	80 62       	ori	r24, 0x20	; 32
     bc6:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
				IR_A.calibrationCounter = 0;
     bca:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <IR_A+0x9>
				IR_B.calibrationCounter = 0;
     bce:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <IR_B+0x9>
				IR_C.calibrationCounter = 0;
     bd2:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <IR_C+0x9>
				IR_U.calibrationCounter = 0;
     bd6:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <IR_U+0x9>
				initOutputs();
     bda:	0e 94 a0 06 	call	0xd40	; 0xd40 <initOutputs>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
     be2:	6f e3       	ldi	r22, 0x3F	; 63
     be4:	77 e0       	ldi	r23, 0x07	; 7
     be6:	88 e6       	ldi	r24, 0x68	; 104
     be8:	97 e0       	ldi	r25, 0x07	; 7
     bea:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ultraSensorTask>
		servosTask();
     bee:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <servosTask>
	}
	return false; // Sigue calibrando
}

static inline void buttonTask(void){
	if((PIND & (1 << BUTTON_PIN)) && !BTN_PRESSED){ //Presionado y no salto la flag aun
     bf2:	4c 9b       	sbis	0x09, 4	; 9
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <main+0x1ce>
     bf6:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     bfa:	86 fd       	sbrc	r24, 6
     bfc:	06 c0       	rjmp	.+12     	; 0xc0a <main+0x1ce>
		btn_pressed_time = 0;
     bfe:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <btn_pressed_time>
		BTN_PRESSED = 1;
     c02:	80 64       	ori	r24, 0x40	; 64
     c04:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
     c08:	2c c0       	rjmp	.+88     	; 0xc62 <main+0x226>
		}else if(BTN_PRESSED && !(PIND & (1 << BUTTON_PIN))){ //Flag activa y no presionado, estuvo presionado y se solto
     c0a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c0e:	86 ff       	sbrs	r24, 6
     c10:	28 c0       	rjmp	.+80     	; 0xc62 <main+0x226>
     c12:	4c 99       	sbic	0x09, 4	; 9
     c14:	26 c0       	rjmp	.+76     	; 0xc62 <main+0x226>
		BTN_PRESSED = 0;
     c16:	8f 7b       	andi	r24, 0xBF	; 191
     c18:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
		if(BTN_OVF){ //Se sostuvo demasiado y hubo un overflow en el contador
     c1c:	82 ff       	sbrs	r24, 2
     c1e:	08 c0       	rjmp	.+16     	; 0xc30 <main+0x1f4>
			printf_P(PSTR("Btn overflowed\n"));
     c20:	88 e7       	ldi	r24, 0x78	; 120
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
		}
		if(btn_pressed_time >= BTN_PRESS_TIME || BTN_OVF){ //Overflow marcado como un tiempo valido
     c30:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <btn_pressed_time>
     c34:	8a 30       	cpi	r24, 0x0A	; 10
     c36:	30 f4       	brcc	.+12     	; 0xc44 <main+0x208>
     c38:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c3c:	98 2f       	mov	r25, r24
     c3e:	94 70       	andi	r25, 0x04	; 4
     c40:	82 ff       	sbrs	r24, 2
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <main+0x214>
			BTN_RELEASED = 1;
     c44:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
     c4e:	09 c0       	rjmp	.+18     	; 0xc62 <main+0x226>
			}else{ //Reiniciar
			btn_pressed_time = 0;
     c50:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <btn_pressed_time>
			if(BTN_OVF){
     c54:	99 23       	and	r25, r25
     c56:	29 f0       	breq	.+10     	; 0xc62 <main+0x226>
				BTN_OVF = 0;
     c58:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c5c:	8b 7f       	andi	r24, 0xFB	; 251
     c5e:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			}
		}
		ultraSensorTask(&hcsr04Detector, &SorterSystem); //Recordar que la funcion pide un puntero y esto ya es un puntero, por lo que no lo apunto con &
		servosTask();
		buttonTask();
		protocolTask();
     c62:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <protocolTask>
		if(WAIT_TIME_TRIGGER_PASSED){ //Esta bandera salta cuando se cunplio el tiempo de espera entre triggers
     c66:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     c6a:	84 ff       	sbrs	r24, 4
     c6c:	08 c0       	rjmp	.+16     	; 0xc7e <main+0x242>
			WAIT_TIME_TRIGGER_PASSED = 0;
     c6e:	8f 7e       	andi	r24, 0xEF	; 239
     c70:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
			ultraSensor.TRIGGER_ALLOWED = 1;
     c74:	e3 e8       	ldi	r30, 0x83	; 131
     c76:	f7 e0       	ldi	r31, 0x07	; 7
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	80 83       	st	Z, r24
		}
		if(ECHO_INTERVAL_FLAG){ //Esto controla cuando entra a emitir otro trigger
     c7e:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c82:	83 ff       	sbrs	r24, 3
     c84:	08 c0       	rjmp	.+16     	; 0xc96 <main+0x25a>
			ECHO_INTERVAL_FLAG = 0;
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			EMIT_TRIGGER = 1;
     c8c:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     c90:	82 60       	ori	r24, 0x02	; 2
     c92:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
			//IR_READ = 1; //DEBUG
		}
		
		if(BTN_RELEASED){ //Bandera que controla accion del press del boton
     c96:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     c9a:	80 ff       	sbrs	r24, 0
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <main+0x268>
			BTN_RELEASED = 0; 
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
		}
		if(IR_READ_INTERRUPT){
     ca4:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     ca8:	84 ff       	sbrs	r24, 4
     caa:	15 cf       	rjmp	.-470    	; 0xad6 <main+0x9a>
			IR_READ_INTERRUPT = 0;
     cac:	8f 7e       	andi	r24, 0xEF	; 239
     cae:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR A
     cb2:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
     cb6:	80 ff       	sbrs	r24, 0
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <main+0x28c>
     cba:	82 ff       	sbrs	r24, 2
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <main+0x28c>
     cbe:	83 fd       	sbrc	r24, 3
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <main+0x28c>
				SET_FLAG(IR_A.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     cc2:	88 60       	ori	r24, 0x08	; 8
     cc4:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <IR_A>
			}
			if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR B
     cc8:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
     ccc:	80 ff       	sbrs	r24, 0
     cce:	07 c0       	rjmp	.+14     	; 0xcde <main+0x2a2>
     cd0:	82 ff       	sbrs	r24, 2
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <main+0x2a2>
     cd4:	83 fd       	sbrc	r24, 3
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <main+0x2a2>
				SET_FLAG(IR_B.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <IR_B>
			}
			if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR C
     cde:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
     ce2:	80 ff       	sbrs	r24, 0
     ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <main+0x2b8>
     ce6:	82 ff       	sbrs	r24, 2
     ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <main+0x2b8>
     cea:	83 fd       	sbrc	r24, 3
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <main+0x2b8>
				SET_FLAG(IR_C.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <IR_C>
			}
			if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_CALIBRATING) && !IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Esta calibrando sensor IR U
     cf4:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
     cf8:	80 ff       	sbrs	r24, 0
     cfa:	ed ce       	rjmp	.-550    	; 0xad6 <main+0x9a>
     cfc:	82 ff       	sbrs	r24, 2
     cfe:	eb ce       	rjmp	.-554    	; 0xad6 <main+0x9a>
     d00:	83 fd       	sbrc	r24, 3
     d02:	e9 ce       	rjmp	.-558    	; 0xad6 <main+0x9a>
				SET_FLAG(IR_U.flags, TCRT_NEW_VALUE); //Setear la toma de nuevo valor
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <IR_U>
     d0a:	e5 ce       	rjmp	.-566    	; 0xad6 <main+0x9a>

00000d0c <initDetector>:
#include "../../types/ultrasonicDetectorType.h"
#include "boxsorter_utils.h"
#include <stdio.h>
#include <stdbool.h>

void initDetector(Ultrasonic_Detector_t* hcsr04Detector, ultrasonic_t* sensor_ultra, TCRT_t* sensor_IR){
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	00 d0       	rcall	.+0      	; 0xd12 <initDetector+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	fc 01       	movw	r30, r24
     d18:	5a 83       	std	Y+2, r21	; 0x02
     d1a:	49 83       	std	Y+1, r20	; 0x01
	hcsr04Detector->sensor = &ultraSensor;
     d1c:	87 e7       	ldi	r24, 0x77	; 119
     d1e:	97 e0       	ldi	r25, 0x07	; 7
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
	hcsr04Detector->sensor_IR = &sensor_IR;
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	93 83       	std	Z+3, r25	; 0x03
     d2a:	82 83       	std	Z+2, r24	; 0x02
	hcsr04Detector->flags.byte = 0;
     d2c:	14 82       	std	Z+4, r1	; 0x04
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
     d2e:	82 e2       	ldi	r24, 0x22	; 34
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <initOutputs>:
	servosArray[2] = &servoC;
	current_servo = 0;
	//printf("Init servos\n");
}

void initOutputs(){
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
	NIBBLEH_SET_STATE(hcsr04Detector->flags, ULTRADET_SENSOR_IDLE);
	printf("Init hcsr04Detector, sensor idle\n");
}

inline void initServos(void){
	initServo(&servoA, 0, SERVOA_PIN, SERVO_IDLE_ANGLE);
     d44:	2a e5       	ldi	r18, 0x5A	; 90
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	86 e1       	ldi	r24, 0x16	; 22
     d52:	97 e0       	ldi	r25, 0x07	; 7
     d54:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <initServo>
	initServo(&servoB, 1, SERVOB_PIN, SERVO_IDLE_ANGLE);
     d58:	2a e5       	ldi	r18, 0x5A	; 90
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	42 e0       	ldi	r20, 0x02	; 2
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	88 e8       	ldi	r24, 0x88	; 136
     d66:	97 e0       	ldi	r25, 0x07	; 7
     d68:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <initServo>
	//initServo(&servoC, 2, SERVOC_PIN, SERVO_IDLE_ANGLE); //Recordar que tenemos que habilitar este cuando pongamos el servo
	servosArray[0] = &servoA;
     d6c:	ed e6       	ldi	r30, 0x6D	; 109
     d6e:	f7 e0       	ldi	r31, 0x07	; 7
     d70:	86 e1       	ldi	r24, 0x16	; 22
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
	servosArray[1] = &servoB;
     d78:	88 e8       	ldi	r24, 0x88	; 136
     d7a:	97 e0       	ldi	r25, 0x07	; 7
     d7c:	93 83       	std	Z+3, r25	; 0x03
     d7e:	82 83       	std	Z+2, r24	; 0x02
	servosArray[2] = &servoC;
     d80:	83 e5       	ldi	r24, 0x53	; 83
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	95 83       	std	Z+5, r25	; 0x05
     d86:	84 83       	std	Z+4, r24	; 0x04
	current_servo = 0;
     d88:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <current_servo>
}

void initOutputs(){
	initServos();
	//TODO Fn para leer EEPROM
	if(OUTPUT_A_HAS_CONFIG){
     d8c:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
     d90:	80 ff       	sbrs	r24, 0
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <initOutputs+0x5e>
		printf("Salida A find setting\n");
     d94:	83 e4       	ldi	r24, 0x43	; 67
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <initOutputs+0x6c>
	}else{
		printf("Salida A no setting\n");
     d9e:	89 e5       	ldi	r24, 0x59	; 89
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		salidaA.boxType = OUTPUT_A_DEFAULT_BOX_TYPE;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <salidaA+0x3>
	}
	if(OUTPUT_B_HAS_CONFIG){
     dac:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
     db0:	81 ff       	sbrs	r24, 1
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <initOutputs+0x7e>
		printf("Salida B find setting\n");
     db4:	8d e6       	ldi	r24, 0x6D	; 109
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <initOutputs+0x8c>
	}else{
		printf("Salida B no setting\n");
     dbe:	83 e8       	ldi	r24, 0x83	; 131
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		salidaB.boxType = OUTPUT_B_DEFAULT_BOX_TYPE;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <salidaB+0x3>
		
	}
	if(OUTPUT_C_HAS_CONFIG){
     dcc:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
     dd0:	82 ff       	sbrs	r24, 2
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <initOutputs+0x9e>
		printf("Salida C find setting\n");
     dd4:	87 e9       	ldi	r24, 0x97	; 151
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <initOutputs+0xac>
	}else{
		printf("Salida C no setting\n");
     dde:	8d ea       	ldi	r24, 0xAD	; 173
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		salidaC.boxType = OUTPUT_C_DEFAULT_BOX_TYPE;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <salidaC+0x3>
	}
	salidaA.actuator_pin = SERVOA_PIN;
     dec:	cc e1       	ldi	r28, 0x1C	; 28
     dee:	d7 e0       	ldi	r29, 0x07	; 7
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
	salidaA.sensor_pin = IR_A.pin;
     df4:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <IR_A+0x8>
     df8:	88 83       	st	Y, r24
	salidaA.flags.byte = 0;
	salidaB.actuator_pin = SERVOB_PIN;
     dfa:	ab ed       	ldi	r26, 0xDB	; 219
     dfc:	b7 e0       	ldi	r27, 0x07	; 7
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	11 96       	adiw	r26, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	11 97       	sbiw	r26, 0x01	; 1
	salidaB.sensor_pin = IR_B.pin;
     e06:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <IR_B+0x8>
     e0a:	8c 93       	st	X, r24
	salidaB.flags.byte = 0;
	salidaC.actuator_pin = SERVOC_PIN;
     e0c:	e3 e7       	ldi	r30, 0x73	; 115
     e0e:	f7 e0       	ldi	r31, 0x07	; 7
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	81 83       	std	Z+1, r24	; 0x01
	salidaC.sensor_pin = IR_C.pin;
     e14:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <IR_C+0x8>
     e18:	80 83       	st	Z, r24
	salidaC.flags.byte = 0;
	SET_FLAG(salidaA.flags, OUTPUT_READY);
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	8a 83       	std	Y+2, r24	; 0x02
	SET_FLAG(salidaB.flags, OUTPUT_READY);
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8c 93       	st	X, r24
	SET_FLAG(salidaC.flags, OUTPUT_READY);
     e22:	82 83       	std	Z+2, r24	; 0x02
	//printf("Init outputs\n");
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <initSorter>:

void initSorter(sorter_system_t* SystemSorter){
     e2a:	fc 01       	movw	r30, r24
	static box_height_range_matrix_t local_box_ranges = {
		.box_size_a = { BOX_A_MIN_MM, BOX_A_MAX_MM },
		.box_size_b = { BOX_B_MIN_MM, BOX_B_MAX_MM },
		.box_size_c = { BOX_C_MIN_MM, BOX_C_MAX_MM }
	};
	SystemSorter->box_ranges = &local_box_ranges;
     e2c:	8c e1       	ldi	r24, 0x1C	; 28
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
	SystemSorter->outputs[0] = &salidaA;
     e34:	8c e1       	ldi	r24, 0x1C	; 28
     e36:	97 e0       	ldi	r25, 0x07	; 7
     e38:	93 83       	std	Z+3, r25	; 0x03
     e3a:	82 83       	std	Z+2, r24	; 0x02
	SystemSorter->outputs[1] = &salidaB;
     e3c:	8b ed       	ldi	r24, 0xDB	; 219
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	95 83       	std	Z+5, r25	; 0x05
     e42:	84 83       	std	Z+4, r24	; 0x04
	SystemSorter->outputs[2] = &salidaC;
     e44:	83 e7       	ldi	r24, 0x73	; 115
     e46:	97 e0       	ldi	r25, 0x07	; 7
     e48:	97 83       	std	Z+7, r25	; 0x07
     e4a:	86 83       	std	Z+6, r24	; 0x06
	if(DEBUG_FLAGS_SORTER){
     e4c:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     e50:	88 23       	and	r24, r24
     e52:	44 f4       	brge	.+16     	; 0xe64 <initSorter+0x3a>
		printf("SYS SORTER DEBUG - Matriz de dimensiones iniciada\n");
     e54:	81 ec       	ldi	r24, 0xC1	; 193
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		printf("SYS SORTER DEBUG - Salidas agregadas\n");
     e5c:	83 ef       	ldi	r24, 0xF3	; 243
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
     e64:	08 95       	ret

00000e66 <classify_box>:


box_type_t classify_box(uint8_t distance_mm, sorter_system_t* SystemSorter)
{
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
     e66:	8e 3b       	cpi	r24, 0xBE	; 190
     e68:	98 f0       	brcs	.+38     	; 0xe90 <classify_box+0x2a>
		if (DEBUG_FLAGS_SORTER) {
     e6a:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <bandera2>
     e6e:	99 23       	and	r25, r25
     e70:	0c f0       	brlt	.+2      	; 0xe74 <classify_box+0xe>
     e72:	83 c0       	rjmp	.+262    	; 0xf7a <classify_box+0x114>
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
     e74:	1f 92       	push	r1
     e76:	8f 93       	push	r24
     e78:	88 e1       	ldi	r24, 0x18	; 24
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
		}
		return NO_BOX;
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	08 95       	ret
	}

	// Calculamos la altura de la caja como la diferencia con la pared
	uint8_t altura_mm = DETECTION_IDLE_DISTANCE_MM - distance_mm;
     e90:	9e eb       	ldi	r25, 0xBE	; 190
     e92:	98 1b       	sub	r25, r24

	if (altura_mm < DETECTION_THRESHOLD_MIN_MM) {
     e94:	97 33       	cpi	r25, 0x37	; 55
     e96:	98 f4       	brcc	.+38     	; 0xebe <classify_box+0x58>
		if (DEBUG_FLAGS_SORTER) {
     e98:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     e9c:	80 78       	andi	r24, 0x80	; 128
     e9e:	09 f4       	brne	.+2      	; 0xea2 <classify_box+0x3c>
     ea0:	73 c0       	rjmp	.+230    	; 0xf88 <classify_box+0x122>
			printf("Caja demasiado baja (%u mm), descartada\n", altura_mm);
     ea2:	1f 92       	push	r1
     ea4:	9f 93       	push	r25
     ea6:	88 e4       	ldi	r24, 0x48	; 72
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	9f 93       	push	r25
     eac:	8f 93       	push	r24
     eae:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
		}
		return BOX_DISCARDED;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     ebe:	db 01       	movw	r26, r22
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	80 81       	ld	r24, Z
     ec6:	98 17       	cp	r25, r24
     ec8:	b0 f0       	brcs	.+44     	; 0xef6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
     eca:	81 81       	ldd	r24, Z+1	; 0x01
		}
		return BOX_DISCARDED;
	}

	// Comparamos contra los rangos definidos
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
     ecc:	89 17       	cp	r24, r25
     ece:	98 f0       	brcs	.+38     	; 0xef6 <classify_box+0x90>
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     ed0:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     ed4:	88 23       	and	r24, r24
     ed6:	0c f0       	brlt	.+2      	; 0xeda <classify_box+0x74>
     ed8:	52 c0       	rjmp	.+164    	; 0xf7e <classify_box+0x118>
			printf("Caja tipo A (%u mm)\n", altura_mm);
     eda:	1f 92       	push	r1
     edc:	9f 93       	push	r25
     ede:	81 e7       	ldi	r24, 0x71	; 113
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
		}
		return BOX_SIZE_A;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	98 17       	cp	r25, r24
     efa:	a8 f0       	brcs	.+42     	; 0xf26 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
     efc:	83 81       	ldd	r24, Z+3	; 0x03
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
     efe:	89 17       	cp	r24, r25
     f00:	90 f0       	brcs	.+36     	; 0xf26 <classify_box+0xc0>
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f02:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     f06:	88 23       	and	r24, r24
     f08:	e4 f5       	brge	.+120    	; 0xf82 <classify_box+0x11c>
			printf("Caja tipo B (%u mm)\n", altura_mm);
     f0a:	1f 92       	push	r1
     f0c:	9f 93       	push	r25
     f0e:	86 e8       	ldi	r24, 0x86	; 134
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
		}
		return BOX_SIZE_B;
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	08 95       	ret
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f26:	84 81       	ldd	r24, Z+4	; 0x04
     f28:	98 17       	cp	r25, r24
     f2a:	a8 f0       	brcs	.+42     	; 0xf56 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
     f2c:	85 81       	ldd	r24, Z+5	; 0x05
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
	}
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
     f2e:	89 17       	cp	r24, r25
     f30:	90 f0       	brcs	.+36     	; 0xf56 <classify_box+0xf0>
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
     f32:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     f36:	88 23       	and	r24, r24
     f38:	34 f5       	brge	.+76     	; 0xf86 <classify_box+0x120>
			printf("Caja tipo C (%u mm)\n", altura_mm);
     f3a:	1f 92       	push	r1
     f3c:	9f 93       	push	r25
     f3e:	8b e9       	ldi	r24, 0x9B	; 155
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
		}
		return BOX_SIZE_C;
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	08 95       	ret
	}

	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
     f56:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     f5a:	80 78       	andi	r24, 0x80	; 128
     f5c:	a9 f0       	breq	.+42     	; 0xf88 <classify_box+0x122>
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
     f5e:	1f 92       	push	r1
     f60:	9f 93       	push	r25
     f62:	80 eb       	ldi	r24, 0xB0	; 176
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
	}
	return BOX_DISCARDED;
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret
	// Si la distancia es mayor o igual a la distancia de reposo (pared)
	if (distance_mm >= DETECTION_IDLE_DISTANCE_MM) {
		if (DEBUG_FLAGS_SORTER) {
			printf("No hay caja presente (pared detectada a %u mm)\n", distance_mm);
		}
		return NO_BOX;
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	08 95       	ret
	if (altura_mm >= SystemSorter->box_ranges->box_size_a.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_a.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo A (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_A;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_b.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_b.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo B (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_B;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	08 95       	ret
	else if (altura_mm >= SystemSorter->box_ranges->box_size_c.min_height_mm &&
	altura_mm <= SystemSorter->box_ranges->box_size_c.max_height_mm) {
		if (DEBUG_FLAGS_SORTER) {
			printf("Caja tipo C (%u mm)\n", altura_mm);
		}
		return BOX_SIZE_C;
     f86:	83 e0       	ldi	r24, 0x03	; 3
	// Si no entró en ningún rango, se descarta
	if (DEBUG_FLAGS_SORTER) {
		printf("Caja fuera de rango (%u mm), descartada\n", altura_mm);
	}
	return BOX_DISCARDED;
}
     f88:	08 95       	ret

00000f8a <ultraSensorTask>:



void ultraSensorTask(Ultrasonic_Detector_t* ultraDetector, sorter_system_t * sorter)
{
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	8b 01       	movw	r16, r22
	// 1. Si está habilitado, el trigger está permitido y hay solicitud de emisión
	if (ULTRASONIC_ENABLE && ultraDetector->sensor->TRIGGER_ALLOWED && EMIT_TRIGGER && IS_FLAG_SET(ultraDetector->flags, ULTRADET_ZONE_TRCT_U_DETECTING)) //tiene que estar detectando en ul U para que pueda sensar ultrasonido
     f98:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     f9c:	88 23       	and	r24, r24
     f9e:	bc f5       	brge	.+110    	; 0x100e <ultraSensorTask+0x84>
     fa0:	e8 81       	ld	r30, Y
     fa2:	f9 81       	ldd	r31, Y+1	; 0x01
     fa4:	84 85       	ldd	r24, Z+12	; 0x0c
     fa6:	85 ff       	sbrs	r24, 5
     fa8:	32 c0       	rjmp	.+100    	; 0x100e <ultraSensorTask+0x84>
     faa:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     fae:	81 ff       	sbrs	r24, 1
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <ultraSensorTask+0x84>
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	81 ff       	sbrs	r24, 1
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <ultraSensorTask+0x84>
	{
		if (ultrasonic_start(ultraDetector->sensor))
     fb8:	cf 01       	movw	r24, r30
     fba:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <ultrasonic_start>
     fbe:	88 23       	and	r24, r24
     fc0:	c1 f0       	breq	.+48     	; 0xff2 <ultraSensorTask+0x68>
		{
			if (DEBUG_FLAGS)
     fc2:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     fc6:	86 ff       	sbrs	r24, 6
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <ultraSensorTask+0x48>
			{
				printf("InitHCSR04\n");
     fca:	8e ed       	ldi	r24, 0xDE	; 222
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
			}

			ULTRASONIC_ENABLE = 0;     // Desactivar para esperar fin de medición
     fd2:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
     fd6:	8f 77       	andi	r24, 0x7F	; 127
     fd8:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
			EMIT_TRIGGER = 0;          // Limpiar bandera de emisión
     fdc:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
			ultraDetector->sensor->TRIGGER_ALLOWED = 0;  // Inhabilitar trigger hasta que se permita de nuevo
     fe6:	e8 81       	ld	r30, Y
     fe8:	f9 81       	ldd	r31, Y+1	; 0x01
     fea:	84 85       	ldd	r24, Z+12	; 0x0c
     fec:	8f 7d       	andi	r24, 0xDF	; 223
     fee:	84 87       	std	Z+12, r24	; 0x0c
     ff0:	0e c0       	rjmp	.+28     	; 0x100e <ultraSensorTask+0x84>
		}
		else
		{
			if (DEBUG_FLAGS)
     ff2:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
     ff6:	86 ff       	sbrs	r24, 6
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <ultraSensorTask+0x78>
			{
				printf("ErrorInitHCSR04\n");
     ffa:	89 ed       	ldi	r24, 0xD9	; 217
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
			}
			EMIT_FAILED = 1;
    1002:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
			EMIT_TRIGGER = 0;
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>
		}
	}

	// 2. Actualiza máquina de estados del sensor
	ultrasonic_update(ultraDetector->sensor);
    100e:	88 81       	ld	r24, Y
    1010:	99 81       	ldd	r25, Y+1	; 0x01
    1012:	0e 94 11 10 	call	0x2022	; 0x2022 <ultrasonic_update>

	// 3. Si la medición finalizó exitosamente
	if (ultraDetector->sensor->state == ULTRA_DONE && ultraDetector->sensor->NEW_RESULT)
    1016:	e8 81       	ld	r30, Y
    1018:	f9 81       	ldd	r31, Y+1	; 0x01
    101a:	85 85       	ldd	r24, Z+13	; 0x0d
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	09 f0       	breq	.+2      	; 0x1022 <ultraSensorTask+0x98>
    1020:	c9 c0       	rjmp	.+402    	; 0x11b4 <ultraSensorTask+0x22a>
    1022:	84 85       	ldd	r24, Z+12	; 0x0c
    1024:	88 23       	and	r24, r24
    1026:	0c f0       	brlt	.+2      	; 0x102a <ultraSensorTask+0xa0>
    1028:	c5 c0       	rjmp	.+394    	; 0x11b4 <ultraSensorTask+0x22a>
	{
		//printf("HCSR04 Dist[mm] %lu\n", (uint32_t)ultrasonic_get_distance(ultraDetector->sensor));
		ultraDetector->sensor->NEW_RESULT = 0;
    102a:	84 85       	ldd	r24, Z+12	; 0x0c
    102c:	8f 77       	andi	r24, 0x7F	; 127
    102e:	84 87       	std	Z+12, r24	; 0x0c

		box_type_t tipo;

		// Si la distancia es mayor al límite de zona activa -> no hay caja
		if (ultraDetector->sensor->distance_mm > DETECTION_IDLE_DISTANCE_MM)
    1030:	e8 81       	ld	r30, Y
    1032:	f9 81       	ldd	r31, Y+1	; 0x01
    1034:	80 85       	ldd	r24, Z+8	; 0x08
    1036:	91 85       	ldd	r25, Z+9	; 0x09
    1038:	a2 85       	ldd	r26, Z+10	; 0x0a
    103a:	b3 85       	ldd	r27, Z+11	; 0x0b
    103c:	8f 3b       	cpi	r24, 0xBF	; 191
    103e:	91 05       	cpc	r25, r1
    1040:	a1 05       	cpc	r26, r1
    1042:	b1 05       	cpc	r27, r1
    1044:	b0 f0       	brcs	.+44     	; 0x1072 <ultraSensorTask+0xe8>
		{
			tipo = NO_BOX;
			SET_FLAG(ultraDetector->flags, ULTRADET_ZONE_ULTRA_CLEAR);
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	8c 83       	std	Y+4, r24	; 0x04

			// Si estaba esperando que se libere, volvemos a IDLE
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_WAITING_CLEAR)
    104c:	98 2f       	mov	r25, r24
    104e:	92 95       	swap	r25
    1050:	9f 70       	andi	r25, 0x0F	; 15
    1052:	92 30       	cpi	r25, 0x02	; 2
    1054:	51 f4       	brne	.+20     	; 0x106a <ultraSensorTask+0xe0>
			{
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE);
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	8c 83       	std	Y+4, r24	; 0x04
				if (DEBUG_FLAGS_SORTER) {
    105a:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
    105e:	88 23       	and	r24, r24
    1060:	24 f4       	brge	.+8      	; 0x106a <ultraSensorTask+0xe0>
					printf("Sensor liberado de nuevo\n");
    1062:	89 ee       	ldi	r24, 0xE9	; 233
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
				}
			}

			NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_IDLE); // Momentáneo, se puede sacar si no se requiere más
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	8f 70       	andi	r24, 0x0F	; 15
    106e:	8c 83       	std	Y+4, r24	; 0x04
    1070:	95 c0       	rjmp	.+298    	; 0x119c <ultraSensorTask+0x212>
		}
		else
		{
			// Si el sensor ya está libre (estado IDLE), se procede a clasificar la caja
			if (NIBBLEH_GET_STATE(ultraDetector->flags) == ULTRADET_SENSOR_IDLE) {
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	98 2f       	mov	r25, r24
    1076:	92 95       	swap	r25
    1078:	9f 70       	andi	r25, 0x0F	; 15
    107a:	09 f0       	breq	.+2      	; 0x107e <ultraSensorTask+0xf4>
    107c:	8f c0       	rjmp	.+286    	; 0x119c <ultraSensorTask+0x212>
				// Hay algo en la zona
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_DETECTING);
    107e:	8f 70       	andi	r24, 0x0F	; 15
    1080:	80 61       	ori	r24, 0x10	; 16
    1082:	8c 83       	std	Y+4, r24	; 0x04
				tipo = classify_box(ultraDetector->sensor->distance_mm, sorter);
    1084:	80 85       	ldd	r24, Z+8	; 0x08
    1086:	91 85       	ldd	r25, Z+9	; 0x09
    1088:	a2 85       	ldd	r26, Z+10	; 0x0a
    108a:	b3 85       	ldd	r27, Z+11	; 0x0b
    108c:	b8 01       	movw	r22, r16
    108e:	0e 94 33 07 	call	0xe66	; 0xe66 <classify_box>
    1092:	f8 2e       	mov	r15, r24

				if (tipo != NO_BOX)
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	f8 16       	cp	r15, r24
    1098:	09 f4       	brne	.+2      	; 0x109c <ultraSensorTask+0x112>
    109a:	7c c0       	rjmp	.+248    	; 0x1194 <ultraSensorTask+0x20a>
				{
					if(salidaA.boxType == tipo){
    109c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <salidaA+0x3>
    10a0:	f8 12       	cpse	r15, r24
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <ultraSensorTask+0x12e>
						SET_FLAG(salidaA.flags, OUTPUT_BUSY); //Setear como busy para que cuando detecte patee
    10a4:	ec e1       	ldi	r30, 0x1C	; 28
    10a6:	f7 e0       	ldi	r31, 0x07	; 7
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida A busy\n");
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    10b6:	20 c0       	rjmp	.+64     	; 0x10f8 <ultraSensorTask+0x16e>
					}else if(salidaB.boxType == tipo){
    10b8:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <salidaB+0x3>
    10bc:	f8 12       	cpse	r15, r24
    10be:	0a c0       	rjmp	.+20     	; 0x10d4 <ultraSensorTask+0x14a>
						SET_FLAG(salidaB.flags, OUTPUT_BUSY);
    10c0:	eb ed       	ldi	r30, 0xDB	; 219
    10c2:	f7 e0       	ldi	r31, 0x07	; 7
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida B busy\n");
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    10d2:	12 c0       	rjmp	.+36     	; 0x10f8 <ultraSensorTask+0x16e>
					}else if(salidaC.boxType == tipo){
    10d4:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <salidaC+0x3>
    10d8:	f8 12       	cpse	r15, r24
    10da:	0a c0       	rjmp	.+20     	; 0x10f0 <ultraSensorTask+0x166>
						SET_FLAG(salidaC.flags, OUTPUT_BUSY);
    10dc:	e3 e7       	ldi	r30, 0x73	; 115
    10de:	f7 e0       	ldi	r31, 0x07	; 7
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	82 83       	std	Z+2, r24	; 0x02
						printf("Salida C busy\n");
    10e6:	8e e1       	ldi	r24, 0x1E	; 30
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <ultraSensorTask+0x16e>
					}else{
						printf("BOX_DISCARDED\n");
    10f0:	8c e2       	ldi	r24, 0x2C	; 44
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
					}
					switch (tipo)
    10f8:	e1 e0       	ldi	r30, 0x01	; 1
    10fa:	fe 16       	cp	r15, r30
    10fc:	49 f0       	breq	.+18     	; 0x1110 <ultraSensorTask+0x186>
    10fe:	fe 16       	cp	r15, r30
    1100:	40 f1       	brcs	.+80     	; 0x1152 <ultraSensorTask+0x1c8>
    1102:	f2 e0       	ldi	r31, 0x02	; 2
    1104:	ff 16       	cp	r15, r31
    1106:	79 f0       	breq	.+30     	; 0x1126 <ultraSensorTask+0x19c>
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	f8 16       	cp	r15, r24
    110c:	b9 f0       	breq	.+46     	; 0x113c <ultraSensorTask+0x1b2>
    110e:	2c c0       	rjmp	.+88     	; 0x1168 <ultraSensorTask+0x1de>
					{
						case BOX_SIZE_A:
						printf("BOX_SIZE_A\n");
    1110:	8a e3       	ldi	r24, 0x3A	; 58
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
						sorter->stats.total_by_type_array[0]++;
    1118:	f8 01       	movw	r30, r16
    111a:	82 85       	ldd	r24, Z+10	; 0x0a
    111c:	93 85       	ldd	r25, Z+11	; 0x0b
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	93 87       	std	Z+11, r25	; 0x0b
    1122:	82 87       	std	Z+10, r24	; 0x0a
						break;
    1124:	25 c0       	rjmp	.+74     	; 0x1170 <ultraSensorTask+0x1e6>
						case BOX_SIZE_B:
						printf("BOX_SIZE_B\n");
    1126:	85 e4       	ldi	r24, 0x45	; 69
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
						sorter->stats.total_by_type_array[1]++;
    112e:	f8 01       	movw	r30, r16
    1130:	84 85       	ldd	r24, Z+12	; 0x0c
    1132:	95 85       	ldd	r25, Z+13	; 0x0d
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	95 87       	std	Z+13, r25	; 0x0d
    1138:	84 87       	std	Z+12, r24	; 0x0c
						break;
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <ultraSensorTask+0x1e6>
						case BOX_SIZE_C:
						printf("BOX_SIZE_C\n");
    113c:	80 e5       	ldi	r24, 0x50	; 80
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
						sorter->stats.total_by_type_array[2]++;
    1144:	f8 01       	movw	r30, r16
    1146:	86 85       	ldd	r24, Z+14	; 0x0e
    1148:	97 85       	ldd	r25, Z+15	; 0x0f
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	97 87       	std	Z+15, r25	; 0x0f
    114e:	86 87       	std	Z+14, r24	; 0x0e
						break;
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <ultraSensorTask+0x1e6>
						case BOX_DISCARDED:
						printf("BOX_DISCARDED\n");
    1152:	8c e2       	ldi	r24, 0x2C	; 44
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
						sorter->stats.total_discarded++;
    115a:	f8 01       	movw	r30, r16
    115c:	80 89       	ldd	r24, Z+16	; 0x10
    115e:	91 89       	ldd	r25, Z+17	; 0x11
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	91 8b       	std	Z+17, r25	; 0x11
    1164:	80 8b       	std	Z+16, r24	; 0x10
						break;
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <ultraSensorTask+0x1e6>
						default:
						printf("Tipo no reconocido\n");
    1168:	8b e5       	ldi	r24, 0x5B	; 91
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
						break;
					}
					sorter->stats.total_measured++;
    1170:	f8 01       	movw	r30, r16
    1172:	80 85       	ldd	r24, Z+8	; 0x08
    1174:	91 85       	ldd	r25, Z+9	; 0x09
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	91 87       	std	Z+9, r25	; 0x09
    117a:	80 87       	std	Z+8, r24	; 0x08
					printf("Contadas: %u\n", sorter->stats.total_measured);
    117c:	9f 93       	push	r25
    117e:	8f 93       	push	r24
    1180:	8e e6       	ldi	r24, 0x6E	; 110
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	9f 93       	push	r25
    1186:	8f 93       	push	r24
    1188:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
					// TODO: Aggregar cola para poder manejar las cajas
				}

				// Cambio de estado para esperar que se libere nuevamente
				NIBBLEH_SET_STATE(ultraDetector->flags, ULTRADET_SENSOR_WAITING_CLEAR);
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	8f 70       	andi	r24, 0x0F	; 15
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	8c 83       	std	Y+4, r24	; 0x04
			}
		}

		ultrasonic_init_flags(ultraDetector->sensor); // Reinicia las flags del sensor
    119c:	88 81       	ld	r24, Y
    119e:	99 81       	ldd	r25, Y+1	; 0x01
    11a0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <ultrasonic_init_flags>
		ultraDetector->sensor->state = ULTRA_IDLE;   // Reinicia el estado del sensor
    11a4:	e8 81       	ld	r30, Y
    11a6:	f9 81       	ldd	r31, Y+1	; 0x01
    11a8:	15 86       	std	Z+13, r1	; 0x0d
		ULTRASONIC_ENABLE = 1; // Habilita nueva medición
    11aa:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
	}


	// 4. Si pasó el tiempo de espera y no hubo ECHO
	if (VEINTEMS_PASSED)
    11b4:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
    11b8:	80 ff       	sbrs	r24, 0
    11ba:	2d c0       	rjmp	.+90     	; 0x1216 <ultraSensorTask+0x28c>
	{
		if (DEBUG_FLAGS)
    11bc:	86 ff       	sbrs	r24, 6
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <ultraSensorTask+0x23e>
		{
			printf("HCSR04 perdio ECHO\n");
    11c0:	8c e7       	ldi	r24, 0x7C	; 124
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		}
		VEINTEMS_PASSED = 0;
    11c8:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
		WAITING_ECHO = 0;
    11cc:	8e 7f       	andi	r24, 0xFE	; 254
    11ce:	87 7f       	andi	r24, 0xF7	; 247
    11d0:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <bandera2>

		ultraDetector->sensor->TIMEDOUT = 1;
    11d4:	e8 81       	ld	r30, Y
    11d6:	f9 81       	ldd	r31, Y+1	; 0x01
    11d8:	84 85       	ldd	r24, Z+12	; 0x0c
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	84 87       	std	Z+12, r24	; 0x0c
		ultraDetector->sensor->state = ULTRA_TIMEOUT;
    11de:	e8 81       	ld	r30, Y
    11e0:	f9 81       	ldd	r31, Y+1	; 0x01
    11e2:	86 e0       	ldi	r24, 0x06	; 6
    11e4:	85 87       	std	Z+13, r24	; 0x0d

		if (ultrasonic_timeout_clear(ultraDetector->sensor, DEBUG_FLAGS ? true : false) && DEBUG_FLAGS)
    11e6:	60 91 52 07 	lds	r22, 0x0752	; 0x800752 <bandera2>
    11ea:	66 fb       	bst	r22, 6
    11ec:	66 27       	eor	r22, r22
    11ee:	60 f9       	bld	r22, 0
    11f0:	88 81       	ld	r24, Y
    11f2:	99 81       	ldd	r25, Y+1	; 0x01
    11f4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <ultrasonic_timeout_clear>
    11f8:	88 23       	and	r24, r24
    11fa:	41 f0       	breq	.+16     	; 0x120c <ultraSensorTask+0x282>
    11fc:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <bandera2>
    1200:	86 ff       	sbrs	r24, 6
    1202:	04 c0       	rjmp	.+8      	; 0x120c <ultraSensorTask+0x282>
		{
			printf("LIB DEBUG - HCSR04 TMDOUT Cleared\n");
    1204:	8f e8       	ldi	r24, 0x8F	; 143
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		}

		ULTRASONIC_ENABLE = 1;
    120c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <bandera>
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <bandera>
	}
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	08 95       	ret

00001222 <irSensorsTask>:
	
	//printf("IR A: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR B: %u\n", IR_A.ADCConvertedValue);	
	//printf("IR C: %u\n", IR_C.ADCConvertedValue);
	//Para ir_U, hay que hacer otro debug, no tiene una salida asignada
	if(IS_FLAG_SET(IR_A.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_A.flags, TCRT_NEW_VALUE)){ //Cada 10 ms se activa
    1222:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
    1226:	80 ff       	sbrs	r24, 0
    1228:	09 c0       	rjmp	.+18     	; 0x123c <irSensorsTask+0x1a>
    122a:	83 ff       	sbrs	r24, 3
    122c:	07 c0       	rjmp	.+14     	; 0x123c <irSensorsTask+0x1a>
		CLEAR_FLAG(IR_A.flags, TCRT_NEW_VALUE);
    122e:	87 7f       	andi	r24, 0xF7	; 247
    1230:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <IR_A>
		tcrt_read(&IR_A);
    1234:	89 e5       	ldi	r24, 0x59	; 89
    1236:	97 e0       	ldi	r25, 0x07	; 7
    1238:	0e 94 67 0e 	call	0x1cce	; 0x1cce <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_A)){
    123c:	89 e5       	ldi	r24, 0x59	; 89
    123e:	97 e0       	ldi	r25, 0x07	; 7
    1240:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <tcrt_is_box_detected>
    1244:	89 2b       	or	r24, r25
    1246:	11 f1       	breq	.+68     	; 0x128c <irSensorsTask+0x6a>
		if(NIBBLEH_GET_STATE(IR_A.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    1248:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <IR_A>
    124c:	82 95       	swap	r24
    124e:	8f 70       	andi	r24, 0x0F	; 15
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	e1 f4       	brne	.+56     	; 0x128c <irSensorsTask+0x6a>
			if(IS_FLAG_SET(salidaA.flags, OUTPUT_READY) && IS_FLAG_SET(salidaA.flags, OUTPUT_BUSY)){
    1254:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <salidaA+0x2>
    1258:	83 ff       	sbrs	r24, 3
    125a:	0f c0       	rjmp	.+30     	; 0x127a <irSensorsTask+0x58>
    125c:	80 ff       	sbrs	r24, 0
    125e:	0d c0       	rjmp	.+26     	; 0x127a <irSensorsTask+0x58>
				CLEAR_FLAG(salidaA.flags, OUTPUT_READY);
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <salidaA+0x2>
				SET_FLAG(servoA.flags, SERVO_PUSH);
    1266:	e6 e1       	ldi	r30, 0x16	; 22
    1268:	f7 e0       	ldi	r31, 0x07	; 7
    126a:	81 81       	ldd	r24, Z+1	; 0x01
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	81 83       	std	Z+1, r24	; 0x01
				servoA.state_time = 0;
    1270:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo A and zeroed state time\n");
    1272:	81 eb       	ldi	r24, 0xB1	; 177
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_A.flags, TCRT_STATUS_IDLE);
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f7 e0       	ldi	r31, 0x07	; 7
    127e:	80 81       	ld	r24, Z
    1280:	8f 70       	andi	r24, 0x0F	; 15
    1282:	80 83       	st	Z, r24
			printf("Detecto en IR A\n");
    1284:	86 ed       	ldi	r24, 0xD6	; 214
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_B.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_B.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    128c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
    1290:	80 ff       	sbrs	r24, 0
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <irSensorsTask+0x84>
    1294:	83 ff       	sbrs	r24, 3
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <irSensorsTask+0x84>
		CLEAR_FLAG(IR_B.flags, TCRT_NEW_VALUE);
    1298:	87 7f       	andi	r24, 0xF7	; 247
    129a:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <IR_B>
		tcrt_read(&IR_B);
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	97 e0       	ldi	r25, 0x07	; 7
    12a2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_B)){
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	97 e0       	ldi	r25, 0x07	; 7
    12aa:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <tcrt_is_box_detected>
    12ae:	89 2b       	or	r24, r25
    12b0:	11 f1       	breq	.+68     	; 0x12f6 <irSensorsTask+0xd4>
		if(NIBBLEH_GET_STATE(IR_B.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    12b2:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <IR_B>
    12b6:	82 95       	swap	r24
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	e1 f4       	brne	.+56     	; 0x12f6 <irSensorsTask+0xd4>
			if(IS_FLAG_SET(salidaB.flags, OUTPUT_READY) && IS_FLAG_SET(salidaB.flags, OUTPUT_BUSY)){
    12be:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <salidaB+0x2>
    12c2:	83 ff       	sbrs	r24, 3
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <irSensorsTask+0xc2>
    12c6:	80 ff       	sbrs	r24, 0
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <irSensorsTask+0xc2>
				CLEAR_FLAG(salidaB.flags, OUTPUT_READY);
    12ca:	87 7f       	andi	r24, 0xF7	; 247
    12cc:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <salidaB+0x2>
				SET_FLAG(servoB.flags, SERVO_PUSH);
    12d0:	e8 e8       	ldi	r30, 0x88	; 136
    12d2:	f7 e0       	ldi	r31, 0x07	; 7
    12d4:	81 81       	ldd	r24, Z+1	; 0x01
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	81 83       	std	Z+1, r24	; 0x01
				servoB.state_time = 0;
    12da:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo B and zeroed state time\n");
    12dc:	86 ee       	ldi	r24, 0xE6	; 230
    12de:	93 e0       	ldi	r25, 0x03	; 3
    12e0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_B.flags, TCRT_STATUS_IDLE);
    12e4:	e7 e0       	ldi	r30, 0x07	; 7
    12e6:	f7 e0       	ldi	r31, 0x07	; 7
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 70       	andi	r24, 0x0F	; 15
    12ec:	80 83       	st	Z, r24
			printf("Detecto en IR B\n");
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_C.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_C.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa
    12f6:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
    12fa:	80 ff       	sbrs	r24, 0
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <irSensorsTask+0xee>
    12fe:	83 ff       	sbrs	r24, 3
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <irSensorsTask+0xee>
		CLEAR_FLAG(IR_C.flags, TCRT_NEW_VALUE);
    1302:	87 7f       	andi	r24, 0xF7	; 247
    1304:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <IR_C>
		tcrt_read(&IR_C);
    1308:	80 e3       	ldi	r24, 0x30	; 48
    130a:	97 e0       	ldi	r25, 0x07	; 7
    130c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_C)){
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	97 e0       	ldi	r25, 0x07	; 7
    1314:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <tcrt_is_box_detected>
    1318:	89 2b       	or	r24, r25
    131a:	11 f1       	breq	.+68     	; 0x1360 <irSensorsTask+0x13e>
		if(NIBBLEH_GET_STATE(IR_C.flags) == TCRT_COUNTED){ //Ya detecto y paso a contarlo
    131c:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <IR_C>
    1320:	82 95       	swap	r24
    1322:	8f 70       	andi	r24, 0x0F	; 15
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	e1 f4       	brne	.+56     	; 0x1360 <irSensorsTask+0x13e>
			if(IS_FLAG_SET(salidaC.flags, OUTPUT_READY) && IS_FLAG_SET(salidaC.flags, OUTPUT_BUSY)){
    1328:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <salidaC+0x2>
    132c:	83 ff       	sbrs	r24, 3
    132e:	0f c0       	rjmp	.+30     	; 0x134e <irSensorsTask+0x12c>
    1330:	80 ff       	sbrs	r24, 0
    1332:	0d c0       	rjmp	.+26     	; 0x134e <irSensorsTask+0x12c>
				CLEAR_FLAG(salidaC.flags, OUTPUT_READY);
    1334:	87 7f       	andi	r24, 0xF7	; 247
    1336:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <salidaC+0x2>
				SET_FLAG(servoC.flags, SERVO_PUSH);
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f7 e0       	ldi	r31, 0x07	; 7
    133e:	81 81       	ldd	r24, Z+1	; 0x01
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	81 83       	std	Z+1, r24	; 0x01
				servoC.state_time = 0;
    1344:	15 82       	std	Z+5, r1	; 0x05
				printf("Pushed servo C and zeroed state time\n");
    1346:	8b e1       	ldi	r24, 0x1B	; 27
    1348:	94 e0       	ldi	r25, 0x04	; 4
    134a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
			}
			NIBBLEH_SET_STATE(IR_C.flags, TCRT_STATUS_IDLE);
    134e:	e0 e3       	ldi	r30, 0x30	; 48
    1350:	f7 e0       	ldi	r31, 0x07	; 7
    1352:	80 81       	ld	r24, Z
    1354:	8f 70       	andi	r24, 0x0F	; 15
    1356:	80 83       	st	Z, r24
			printf("Detecto en IR C\n");
    1358:	80 e4       	ldi	r24, 0x40	; 64
    135a:	94 e0       	ldi	r25, 0x04	; 4
    135c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
		}
	}
	if(IS_FLAG_SET(IR_U.flags, TCRT_ENABLED) && IS_FLAG_SET(IR_U.flags, TCRT_NEW_VALUE)){ //Cada 20 ms se activa IR U del ultrasonido, no tiene salida
    1360:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <IR_U>
    1364:	80 ff       	sbrs	r24, 0
    1366:	09 c0       	rjmp	.+18     	; 0x137a <irSensorsTask+0x158>
    1368:	83 ff       	sbrs	r24, 3
    136a:	07 c0       	rjmp	.+14     	; 0x137a <irSensorsTask+0x158>
		CLEAR_FLAG(IR_U.flags, TCRT_NEW_VALUE);
    136c:	87 7f       	andi	r24, 0xF7	; 247
    136e:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <IR_U>
		tcrt_read(&IR_U);
    1372:	80 e2       	ldi	r24, 0x20	; 32
    1374:	97 e0       	ldi	r25, 0x07	; 7
    1376:	0e 94 67 0e 	call	0x1cce	; 0x1cce <tcrt_read>
	}
	if(tcrt_is_box_detected(&IR_U)){
    137a:	80 e2       	ldi	r24, 0x20	; 32
    137c:	97 e0       	ldi	r25, 0x07	; 7
    137e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <tcrt_is_box_detected>
    1382:	89 2b       	or	r24, r25
    1384:	e1 f0       	breq	.+56     	; 0x13be <irSensorsTask+0x19c>
		// La caja está detectada y es un flanco de subida (recibimos la caja)
		if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_READ && !IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    1386:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <IR_U>
    138a:	89 2f       	mov	r24, r25
    138c:	82 95       	swap	r24
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	41 f4       	brne	.+16     	; 0x13a4 <irSensorsTask+0x182>
    1394:	20 91 6c 07 	lds	r18, 0x076C	; 0x80076c <hcsr04Detector+0x4>
    1398:	21 fd       	sbrc	r18, 1
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <irSensorsTask+0x182>
			// Solo entra aquí si la caja está detectada y no está marcando la zona como detectada
			SET_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    139c:	22 60       	ori	r18, 0x02	; 2
    139e:	20 93 6c 07 	sts	0x076C, r18	; 0x80076c <hcsr04Detector+0x4>
    13a2:	08 95       	ret
			//printf("IR U detecto\n");
		}
		// La caja está detectada y es un flanco de bajada (la caja salió)
		else if(NIBBLEH_GET_STATE(IR_U.flags) == TCRT_COUNTED && IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	b9 f4       	brne	.+46     	; 0x13d6 <irSensorsTask+0x1b4>
    13a8:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <hcsr04Detector+0x4>
    13ac:	81 ff       	sbrs	r24, 1
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <irSensorsTask+0x1b4>
			// Esto garantiza que solo se imprimirá cuando la caja haya salido
			//printf("IR U detecto: la caja salió\n");
			// Limpiar la zona de detección, ya que la caja salió
			CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    13b0:	8d 7f       	andi	r24, 0xFD	; 253
    13b2:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <hcsr04Detector+0x4>
			NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Restablecer el estado
    13b6:	9f 70       	andi	r25, 0x0F	; 15
    13b8:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <IR_U>
    13bc:	08 95       	ret
		}
		} else {
			// Si no hay caja y estábamos detectando una, limpiar las banderas
			if(IS_FLAG_SET(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING)){
    13be:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <hcsr04Detector+0x4>
    13c2:	81 ff       	sbrs	r24, 1
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <irSensorsTask+0x1b4>
				// Ya no hay caja y se había detectado previamente
				CLEAR_FLAG(hcsr04Detector.flags, ULTRADET_ZONE_TRCT_U_DETECTING);
    13c6:	8d 7f       	andi	r24, 0xFD	; 253
    13c8:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <hcsr04Detector+0x4>
				NIBBLEH_SET_STATE(IR_U.flags, TCRT_STATUS_IDLE);  // Poner el sensor en estado idle
    13cc:	e0 e2       	ldi	r30, 0x20	; 32
    13ce:	f7 e0       	ldi	r31, 0x07	; 7
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 70       	andi	r24, 0x0F	; 15
    13d4:	80 83       	st	Z, r24
    13d6:	08 95       	ret

000013d8 <servosTask>:
				//printf("IR U Idle again\n");
			}
	}
}

void servosTask() {
    13d8:	08 95       	ret

000013da <verify_header>:
// 		printf("Error: Checksum inválido\n");
// 	}
// 	return pak;
}

bool verify_header() {
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
	// Verificar si hay al menos 4 bytes disponibles
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    13de:	ee e8       	ldi	r30, 0x8E	; 142
    13e0:	f7 e0       	ldi	r31, 0x07	; 7
    13e2:	90 81       	ld	r25, Z
    13e4:	81 81       	ldd	r24, Z+1	; 0x01
    13e6:	98 17       	cp	r25, r24
    13e8:	18 f0       	brcs	.+6      	; 0x13f0 <verify_header+0x16>
		available = protocolService.indexW - protocolService.indexR;
    13ea:	80 81       	ld	r24, Z
    13ec:	81 81       	ldd	r24, Z+1	; 0x01
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <verify_header+0x1e>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    13f0:	ee e8       	ldi	r30, 0x8E	; 142
    13f2:	f7 e0       	ldi	r31, 0x07	; 7
    13f4:	80 81       	ld	r24, Z
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
    13f8:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <protocolService+0x1>
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	e2 57       	subi	r30, 0x72	; 114
    1400:	f8 4f       	sbci	r31, 0xF8	; 248
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	85 35       	cpi	r24, 0x55	; 85
    1406:	09 f0       	breq	.+2      	; 0x140a <verify_header+0x30>
    1408:	5a c0       	rjmp	.+180    	; 0x14be <verify_header+0xe4>
		return false; // No es un header candidato.
	}

	// Calcular los índices para los 4 bytes del header, considerando el buffer circular.
	uint8_t idx0 = protocolService.indexR;
    140a:	ee e8       	ldi	r30, 0x8E	; 142
    140c:	f7 e0       	ldi	r31, 0x07	; 7
    140e:	a1 81       	ldd	r26, Z+1	; 0x01
	uint8_t idx1 = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	8f 73       	andi	r24, 0x3F	; 63
    1418:	90 78       	andi	r25, 0x80	; 128
    141a:	99 23       	and	r25, r25
    141c:	24 f4       	brge	.+8      	; 0x1426 <verify_header+0x4c>
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	80 6c       	ori	r24, 0xC0	; 192
    1422:	9f 6f       	ori	r25, 0xFF	; 255
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	ec 01       	movw	r28, r24
	uint8_t idx2 = (protocolService.indexR + 2) % PROTOCOL_BUFFER_SIZE;
    1428:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <protocolService+0x1>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 96       	adiw	r24, 0x02	; 2
    1430:	8f 73       	andi	r24, 0x3F	; 63
    1432:	90 78       	andi	r25, 0x80	; 128
    1434:	99 23       	and	r25, r25
    1436:	24 f4       	brge	.+8      	; 0x1440 <verify_header+0x66>
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	80 6c       	ori	r24, 0xC0	; 192
    143c:	9f 6f       	ori	r25, 0xFF	; 255
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	fc 01       	movw	r30, r24
	uint8_t idx3 = (protocolService.indexR + 3) % PROTOCOL_BUFFER_SIZE;
    1442:	60 91 8f 07 	lds	r22, 0x078F	; 0x80078f <protocolService+0x1>
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	6d 5f       	subi	r22, 0xFD	; 253
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	6f 73       	andi	r22, 0x3F	; 63
    144e:	70 78       	andi	r23, 0x80	; 128
    1450:	77 23       	and	r23, r23
    1452:	34 f4       	brge	.+12     	; 0x1460 <verify_header+0x86>
    1454:	61 50       	subi	r22, 0x01	; 1
    1456:	71 09       	sbc	r23, r1
    1458:	60 6c       	ori	r22, 0xC0	; 192
    145a:	7f 6f       	ori	r23, 0xFF	; 255
    145c:	6f 5f       	subi	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255

	// Calcular la suma ponderada de los 4 bytes usando pesos: 4, 3, 2, 1
	uint16_t sum = 0;
	sum += (uint16_t)protocolService.buffer[idx0] * 4;  // 'U'
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	a2 57       	subi	r26, 0x72	; 114
    1464:	b8 4f       	sbci	r27, 0xF8	; 248
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	4c 91       	ld	r20, X
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	da 01       	movw	r26, r20
    146e:	aa 0f       	add	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	aa 0f       	add	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	dd 27       	eor	r29, r29
	sum += (uint16_t)protocolService.buffer[idx1] * 3;  // 'N'
    1478:	c2 57       	subi	r28, 0x72	; 114
    147a:	d8 4f       	sbci	r29, 0xF8	; 248
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	29 2f       	mov	r18, r25
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	24 0f       	add	r18, r20
    148a:	35 1f       	adc	r19, r21
    148c:	ad 01       	movw	r20, r26
    148e:	42 0f       	add	r20, r18
    1490:	53 1f       	adc	r21, r19
    1492:	ff 27       	eor	r31, r31
	sum += (uint16_t)protocolService.buffer[idx2] * 2;  // 'E'
    1494:	e2 57       	subi	r30, 0x72	; 114
    1496:	f8 4f       	sbci	r31, 0xF8	; 248
    1498:	22 81       	ldd	r18, Z+2	; 0x02
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	ca 01       	movw	r24, r20
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	fb 01       	movw	r30, r22
    14a8:	ff 27       	eor	r31, r31
	sum += (uint16_t)protocolService.buffer[idx3] * 1;  // 'R'
    14aa:	e2 57       	subi	r30, 0x72	; 114
    14ac:	f8 4f       	sbci	r31, 0xF8	; 248
    14ae:	92 81       	ldd	r25, Z+2	; 0x02
	
	// Reducir a 8 bits: tomar los 8 bits menos significativos
	uint8_t computed = (uint8_t)(sum & 0xFF);
    14b0:	89 0f       	add	r24, r25

	// Comparar con el valor esperado
	if (computed == EXPECTED_HEADER_SUM) {
    14b2:	8a 31       	cpi	r24, 0x1A	; 26
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <verify_header+0xe8>
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
    14b6:	60 93 8f 07 	sts	0x078F, r22	; 0x80078f <protocolService+0x1>
		return true;  // La cabecera es válida.
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <verify_header+0xea>
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
	}

	// Comprobar que el primer byte es 'U'
	if (protocolService.buffer[protocolService.indexR] != 'U') {
		return false; // No es un header candidato.
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <verify_header+0xea>
	if (computed == EXPECTED_HEADER_SUM) {
		protocolService.indexR = idx3; // Avanzar indexR hasta la posición del cuarto byte (donde debería estar 'R')
		return true;  // La cabecera es válida.
	} else {
		// No coincide; descartar este header.
		return false;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <process_protocol_buffer>:

bool process_protocol_buffer() {
	uint8_t available;
	if (protocolService.indexW >= protocolService.indexR) {
    14ca:	ee e8       	ldi	r30, 0x8E	; 142
    14cc:	f7 e0       	ldi	r31, 0x07	; 7
    14ce:	90 81       	ld	r25, Z
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	98 17       	cp	r25, r24
    14d4:	20 f0       	brcs	.+8      	; 0x14de <process_protocol_buffer+0x14>
		available = protocolService.indexW - protocolService.indexR;
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	89 1b       	sub	r24, r25
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <process_protocol_buffer+0x20>
		} else {
		available = PROTOCOL_BUFFER_SIZE - protocolService.indexR + protocolService.indexW;
    14de:	ee e8       	ldi	r30, 0x8E	; 142
    14e0:	f7 e0       	ldi	r31, 0x07	; 7
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	89 1b       	sub	r24, r25
    14e8:	80 5c       	subi	r24, 0xC0	; 192
	}

	if (available < PROTOCOL_MIN_BYTE_COUNT) {
    14ea:	86 30       	cpi	r24, 0x06	; 6
    14ec:	78 f4       	brcc	.+30     	; 0x150c <process_protocol_buffer+0x42>
		printf("Menos de %u bytes en buffer\n", PROTOCOL_MIN_BYTE_COUNT);
    14ee:	1f 92       	push	r1
    14f0:	86 e0       	ldi	r24, 0x06	; 6
    14f2:	8f 93       	push	r24
    14f4:	80 e5       	ldi	r24, 0x50	; 80
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	9f 93       	push	r25
    14fa:	8f 93       	push	r24
    14fc:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
		return false;
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret
	}
	
	if (verify_header()) {
    150c:	0e 94 ed 09 	call	0x13da	; 0x13da <verify_header>
		// Se continúa procesando el paquete...
		return true;
		} else {
		return false;
	}
}
    1510:	08 95       	ret

00001512 <getResponseCommand>:

Command getResponseCommand(Command req) {
    1512:	cf 93       	push	r28
	uint8_t reqValue = (uint8_t)req;
	uint8_t responseValue;
	
	switch(reqValue) {
    1514:	80 3c       	cpi	r24, 0xC0	; 192
    1516:	a9 f0       	breq	.+42     	; 0x1542 <getResponseCommand+0x30>
    1518:	38 f4       	brcc	.+14     	; 0x1528 <getResponseCommand+0x16>
    151a:	81 3b       	cpi	r24, 0xB1	; 177
    151c:	81 f0       	breq	.+32     	; 0x153e <getResponseCommand+0x2c>
    151e:	82 3b       	cpi	r24, 0xB2	; 178
    1520:	f1 f0       	breq	.+60     	; 0x155e <getResponseCommand+0x4c>
    1522:	80 3a       	cpi	r24, 0xA0	; 160
    1524:	d1 f4       	brne	.+52     	; 0x155a <getResponseCommand+0x48>
    1526:	17 c0       	rjmp	.+46     	; 0x1556 <getResponseCommand+0x44>
    1528:	80 3f       	cpi	r24, 0xF0	; 240
    152a:	99 f0       	breq	.+38     	; 0x1552 <getResponseCommand+0x40>
    152c:	18 f4       	brcc	.+6      	; 0x1534 <getResponseCommand+0x22>
    152e:	81 3c       	cpi	r24, 0xC1	; 193
    1530:	51 f0       	breq	.+20     	; 0x1546 <getResponseCommand+0x34>
    1532:	13 c0       	rjmp	.+38     	; 0x155a <getResponseCommand+0x48>
    1534:	81 3f       	cpi	r24, 0xF1	; 241
    1536:	49 f0       	breq	.+18     	; 0x154a <getResponseCommand+0x38>
    1538:	82 3f       	cpi	r24, 0xF2	; 242
    153a:	49 f0       	breq	.+18     	; 0x154e <getResponseCommand+0x3c>
    153c:	0e c0       	rjmp	.+28     	; 0x155a <getResponseCommand+0x48>
		case CMD_START:
		responseValue = CMD_RESPONSE_START;
    153e:	c1 e0       	ldi	r28, 0x01	; 1
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <getResponseCommand+0x4e>
		case CMD_STOP:
		responseValue = CMD_RESPONSE_STOP;
		break;
		
		case CMD_SET_CONFIG:
		responseValue = CMD_RESPONSE_SET_CONFIG;
    1542:	c3 e0       	ldi	r28, 0x03	; 3
		break;
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <getResponseCommand+0x4e>
		
		case CMD_GET_CONFIG:
		responseValue = CMD_RESPONSE_GET_CONFIG;
    1546:	c4 e0       	ldi	r28, 0x04	; 4
		break;
    1548:	0b c0       	rjmp	.+22     	; 0x1560 <getResponseCommand+0x4e>
		
		case CMD_GET_STATS:
		responseValue = CMD_RESPONSE_GET_STATS;
    154a:	c6 e0       	ldi	r28, 0x06	; 6
		break;
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <getResponseCommand+0x4e>
		
		case CMD_CLEAR_STATS:
		responseValue = CMD_RESPONSE_CLEAR_STATS;
    154e:	c5 e0       	ldi	r28, 0x05	; 5
		break;
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <getResponseCommand+0x4e>
		
		case CMD_GET_FIRMWARE:
		responseValue = CMD_RESPONSE_GET_FIRMWARE;
    1552:	c7 e0       	ldi	r28, 0x07	; 7
		break;
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <getResponseCommand+0x4e>
		
		case CMD_ALIVE:
		responseValue = CMD_RESPONSE_RESPONSE_ALIVE;
    1556:	c9 e0       	ldi	r28, 0x09	; 9
		break;
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <getResponseCommand+0x4e>
		
		default:
		responseValue = CMD_INVALID;
    155a:	c0 ee       	ldi	r28, 0xE0	; 224
		break;
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <getResponseCommand+0x4e>
		case CMD_START:
		responseValue = CMD_RESPONSE_START;
		break;
		
		case CMD_STOP:
		responseValue = CMD_RESPONSE_STOP;
    155e:	c2 e0       	ldi	r28, 0x02	; 2
		default:
		responseValue = CMD_INVALID;
		break;
	}
	
	printf("DEBUG: Request: 0x%X -> Response: 0x%X\n", reqValue, responseValue);
    1560:	1f 92       	push	r1
    1562:	cf 93       	push	r28
    1564:	1f 92       	push	r1
    1566:	8f 93       	push	r24
    1568:	8d e6       	ldi	r24, 0x6D	; 109
    156a:	94 e0       	ldi	r25, 0x04	; 4
    156c:	9f 93       	push	r25
    156e:	8f 93       	push	r24
    1570:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
	return (Command)responseValue;
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
}
    1580:	8c 2f       	mov	r24, r28
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <clear_receive_pck>:

void clear_receive_pck(){
	protocolService.receivePck.checksum = 0;
    1586:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <protocolService+0x4c>
	protocolService.receivePck.cmd = 0;
    158a:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <protocolService+0x49>
	protocolService.receivePck.length = 0;
    158e:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <protocolService+0x47>
	protocolService.receivePck.token = 0;
    1592:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <protocolService+0x48>
	protocolService.receivePck.payload[0] = NULL;
    1596:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <protocolService+0x4a>
    159a:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <protocolService+0x4b>
    159e:	10 82       	st	Z, r1
	protocolService.receivePck.header[0] = NULL;
    15a0:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <protocolService+0x43>
	printf("Paquete RCV cleared \n");
    15a4:	85 e9       	ldi	r24, 0x95	; 149
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    15ac:	08 95       	ret

000015ae <initProtocolService>:
#include "protocol_utils.h"
#include "../usart/usart_utils.h"
#include <avr/pgmspace.h>


void initProtocolService(ProtocolService* service){
    15ae:	fc 01       	movw	r30, r24
	service->buffer[0] = NULL;
    15b0:	12 82       	std	Z+2, r1	; 0x02
	service->indexR = 0;
    15b2:	11 82       	std	Z+1, r1	; 0x01
	service->indexW = 0;
    15b4:	10 82       	st	Z, r1
	service->flags.byte = 0;
    15b6:	ee 5b       	subi	r30, 0xBE	; 190
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	10 82       	st	Z, r1
	clear_receive_pck();
    15bc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <clear_receive_pck>
	printf("Init protocol service\n");
    15c0:	8a ea       	ldi	r24, 0xAA	; 170
    15c2:	94 e0       	ldi	r25, 0x04	; 4
    15c4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    15c8:	08 95       	ret

000015ca <calculatePayload>:
	protocolService.receivePck.payload[0] = NULL;
	protocolService.receivePck.header[0] = NULL;
	printf("Paquete RCV cleared \n");
}

uint8_t calculatePayload() {
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
	checksum ^= 'N';  // XOR de 'N'
	checksum ^= 'E';  // XOR de 'E'
	checksum ^= 'R';  // XOR de 'R'
	
	// Sumar el byte de LENGTH
	checksum ^= protocolService.receivePck.length;
    15d2:	00 91 d5 07 	lds	r16, 0x07D5	; 0x8007d5 <protocolService+0x47>
	
	// Sumar el byte de TOKEN (usamos el valor de PROTOCOL_TOKEN)
	checksum ^= PROTOCOL_TOKEN;
    15d6:	86 e3       	ldi	r24, 0x36	; 54
    15d8:	08 27       	eor	r16, r24
	
	// Sumar el byte de CMD
	checksum ^= protocolService.receivePck.cmd;
    15da:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <protocolService+0x49>
    15de:	08 27       	eor	r16, r24
	
	// Imprimir los valores del payload
	printf_P(PSTR("Payload en Hex:\n"));
    15e0:	85 e6       	ldi	r24, 0x65	; 101
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	9f 93       	push	r25
    15e6:	8f 93       	push	r24
    15e8:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	c0 e0       	ldi	r28, 0x00	; 0
    15f2:	d0 e0       	ldi	r29, 0x00	; 0
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <calculatePayload+0x66>
		uint8_t payload_byte = *(protocolService.receivePck.payload + i);
    15f6:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <protocolService+0x4a>
    15fa:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <protocolService+0x4b>
    15fe:	ec 0f       	add	r30, r28
    1600:	fd 1f       	adc	r31, r29
    1602:	10 81       	ld	r17, Z
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
    1604:	1f 92       	push	r1
    1606:	1f 93       	push	r17
    1608:	1f 92       	push	r1
    160a:	1f 93       	push	r17
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	80 ec       	ldi	r24, 0xC0	; 192
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	9f 93       	push	r25
    1616:	8f 93       	push	r24
    1618:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
		checksum ^= payload_byte;  // XOR de cada byte del payload
    161c:	01 27       	eor	r16, r17
	checksum ^= protocolService.receivePck.cmd;
	
	// Imprimir los valores del payload
	printf_P(PSTR("Payload en Hex:\n"));
	// CHANGED: Removed the -1 to process all bytes
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    161e:	21 96       	adiw	r28, 0x01	; 1
    1620:	8d b7       	in	r24, 0x3d	; 61
    1622:	9e b7       	in	r25, 0x3e	; 62
    1624:	08 96       	adiw	r24, 0x08	; 8
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	9e bf       	out	0x3e, r25	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	8d bf       	out	0x3d, r24	; 61
    1630:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <protocolService+0x47>
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	c8 17       	cp	r28, r24
    1638:	d9 07       	cpc	r29, r25
    163a:	ec f2       	brlt	.-70     	; 0x15f6 <calculatePayload+0x2c>
		printf("Byte %d: 0x%02X (Decimal: %d)\n", i, payload_byte, payload_byte);
		checksum ^= payload_byte;  // XOR de cada byte del payload
	}
	
	// Imprimir el checksum calculado en hexadecimal
	printf("CHECKSUM CALC %02X\n", checksum);
    163c:	1f 92       	push	r1
    163e:	0f 93       	push	r16
    1640:	8f ed       	ldi	r24, 0xDF	; 223
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	9f 93       	push	r25
    1646:	8f 93       	push	r24
    1648:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
	
	// Imprimir el checksum esperado
	printf("CHECKSUM ESPERADO: %02X\n", protocolService.receivePck.checksum);
    164c:	ca ed       	ldi	r28, 0xDA	; 218
    164e:	d7 e0       	ldi	r29, 0x07	; 7
    1650:	88 81       	ld	r24, Y
    1652:	1f 92       	push	r1
    1654:	8f 93       	push	r24
    1656:	83 ef       	ldi	r24, 0xF3	; 243
    1658:	94 e0       	ldi	r25, 0x04	; 4
    165a:	9f 93       	push	r25
    165c:	8f 93       	push	r24
    165e:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
	
	// Comparar el checksum calculado con el esperado
	if (checksum == protocolService.receivePck.checksum) {
    1662:	88 81       	ld	r24, Y
    1664:	2d b7       	in	r18, 0x3d	; 61
    1666:	3e b7       	in	r19, 0x3e	; 62
    1668:	28 5f       	subi	r18, 0xF8	; 248
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	3e bf       	out	0x3e, r19	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	2d bf       	out	0x3d, r18	; 61
    1676:	08 13       	cpse	r16, r24
    1678:	09 c0       	rjmp	.+18     	; 0x168c <calculatePayload+0xc2>
		printf_P(PSTR("Cks valido\n"));
    167a:	89 e5       	ldi	r24, 0x59	; 89
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	9f 93       	push	r25
    1680:	8f 93       	push	r24
    1682:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	08 c0       	rjmp	.+16     	; 0x169c <calculatePayload+0xd2>
		} else {
		printf_P(PSTR("Cks invalido\n"));
    168c:	8b e4       	ldi	r24, 0x4B	; 75
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	9f 93       	push	r25
    1692:	8f 93       	push	r24
    1694:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
	}
	
	// Devuelve el checksum calculado
	return checksum;
}
    169c:	80 2f       	mov	r24, r16
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	08 95       	ret

000016a8 <createPck>:

void createPck(uint8_t cmd, uint8_t* payload, uint8_t payloadLength) {
	// Fill the header with 'UNER'
	protocolService.receivePck.header[0] = 'U';
    16a8:	95 e5       	ldi	r25, 0x55	; 85
    16aa:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <protocolService+0x43>
	protocolService.receivePck.header[1] = 'N';
    16ae:	9e e4       	ldi	r25, 0x4E	; 78
    16b0:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <protocolService+0x44>
	protocolService.receivePck.header[2] = 'E';
    16b4:	95 e4       	ldi	r25, 0x45	; 69
    16b6:	90 93 d3 07 	sts	0x07D3, r25	; 0x8007d3 <protocolService+0x45>
	protocolService.receivePck.header[3] = 'R';
    16ba:	92 e5       	ldi	r25, 0x52	; 82
    16bc:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <protocolService+0x46>
	
	// Set the length field to the payload length
	protocolService.receivePck.length = payloadLength;
    16c0:	40 93 d5 07 	sts	0x07D5, r20	; 0x8007d5 <protocolService+0x47>
	
	// Set the token
	protocolService.receivePck.token = PROTOCOL_TOKEN; // Assuming PROTOCOL_TOKEN is defined as 0x3A
    16c4:	9a e3       	ldi	r25, 0x3A	; 58
    16c6:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <protocolService+0x48>
	
	// Set the command
	protocolService.receivePck.cmd = cmd;
    16ca:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <protocolService+0x49>
	
	if(payload != NULL){
    16ce:	61 15       	cp	r22, r1
    16d0:	71 05       	cpc	r23, r1
    16d2:	21 f0       	breq	.+8      	; 0x16dc <createPck+0x34>
		protocolService.receivePck.payload = payload;	
    16d4:	70 93 d9 07 	sts	0x07D9, r23	; 0x8007d9 <protocolService+0x4b>
    16d8:	60 93 d8 07 	sts	0x07D8, r22	; 0x8007d8 <protocolService+0x4a>
	
	// Calculate the checksum
	uint8_t checksum = 0;
	
	// XOR with header bytes
	checksum ^= protocolService.receivePck.header[0]; // 'U'
    16dc:	40 91 d1 07 	lds	r20, 0x07D1	; 0x8007d1 <protocolService+0x43>
	checksum ^= protocolService.receivePck.header[1]; // 'N'
    16e0:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <protocolService+0x44>
    16e4:	48 27       	eor	r20, r24
	checksum ^= protocolService.receivePck.header[2]; // 'E'
    16e6:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <protocolService+0x45>
    16ea:	48 27       	eor	r20, r24
	checksum ^= protocolService.receivePck.header[3]; // 'R'
    16ec:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <protocolService+0x46>
    16f0:	48 27       	eor	r20, r24
	
	// XOR with length
	checksum ^= protocolService.receivePck.length;
    16f2:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <protocolService+0x47>
    16f6:	48 27       	eor	r20, r24
	
	// XOR with token
	checksum ^= protocolService.receivePck.token;
    16f8:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <protocolService+0x48>
    16fc:	48 27       	eor	r20, r24
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
    16fe:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <protocolService+0x49>
    1702:	48 27       	eor	r20, r24
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	0a c0       	rjmp	.+20     	; 0x171e <createPck+0x76>
		checksum ^= *(protocolService.receivePck.payload + i);
    170a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <protocolService+0x4a>
    170e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <protocolService+0x4b>
    1712:	e2 0f       	add	r30, r18
    1714:	f3 1f       	adc	r31, r19
    1716:	80 81       	ld	r24, Z
    1718:	48 27       	eor	r20, r24
	
	// XOR with command
	checksum ^= protocolService.receivePck.cmd;
	
	// XOR with each byte of the payload
	for (int i = 0; i < protocolService.receivePck.length; i++) {
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <protocolService+0x47>
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	28 17       	cp	r18, r24
    1726:	39 07       	cpc	r19, r25
    1728:	84 f3       	brlt	.-32     	; 0x170a <createPck+0x62>
		checksum ^= *(protocolService.receivePck.payload + i);
	}
	
	// Set the checksum field
	protocolService.receivePck.checksum = checksum;
    172a:	40 93 da 07 	sts	0x07DA, r20	; 0x8007da <protocolService+0x4c>
	printf("Valor CMD paquete creado %x \n", protocolService.receivePck.cmd);
    172e:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <protocolService+0x49>
    1732:	1f 92       	push	r1
    1734:	8f 93       	push	r24
    1736:	8c e0       	ldi	r24, 0x0C	; 12
    1738:	95 e0       	ldi	r25, 0x05	; 5
    173a:	9f 93       	push	r25
    173c:	8f 93       	push	r24
    173e:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	08 95       	ret

0000174c <validatePck>:

bool validatePck(){
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
	NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_LEN);
    1750:	ee e8       	ldi	r30, 0x8E	; 142
    1752:	f7 e0       	ldi	r31, 0x07	; 7
    1754:	c0 ed       	ldi	r28, 0xD0	; 208
    1756:	d7 e0       	ldi	r29, 0x07	; 7
    1758:	88 81       	ld	r24, Y
    175a:	8f 70       	andi	r24, 0x0F	; 15
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	88 83       	st	Y, r24
	protocolService.indexR++; //Poner en dinde deberia estar length
    1760:	81 81       	ldd	r24, Z+1	; 0x01
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	81 83       	std	Z+1, r24	; 0x01
	protocolService.receivePck.length = protocolService.buffer[protocolService.indexR];
    1766:	a1 81       	ldd	r26, Z+1	; 0x01
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	a2 57       	subi	r26, 0x72	; 114
    176c:	b8 4f       	sbci	r27, 0xF8	; 248
    176e:	12 96       	adiw	r26, 0x02	; 2
    1770:	8c 91       	ld	r24, X
    1772:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <protocolService+0x47>
	NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_TOKEN);
    1776:	88 81       	ld	r24, Y
    1778:	8f 70       	andi	r24, 0x0F	; 15
    177a:	80 63       	ori	r24, 0x30	; 48
    177c:	88 83       	st	Y, r24
	protocolService.indexR++; //Donde deberia estar token
    177e:	81 81       	ldd	r24, Z+1	; 0x01
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	81 83       	std	Z+1, r24	; 0x01
	if (protocolService.buffer[protocolService.indexR] != PROTOCOL_TOKEN){
    1784:	e1 81       	ldd	r30, Z+1	; 0x01
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	e2 57       	subi	r30, 0x72	; 114
    178a:	f8 4f       	sbci	r31, 0xF8	; 248
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	8a 33       	cpi	r24, 0x3A	; 58
    1790:	51 f0       	breq	.+20     	; 0x17a6 <validatePck+0x5a>
		printf_P(PSTR("Token invalido\n"));
    1792:	8b e3       	ldi	r24, 0x3B	; 59
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	9f 93       	push	r25
    1798:	8f 93       	push	r24
    179a:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
		return false;
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	89 c0       	rjmp	.+274    	; 0x18b8 <validatePck+0x16c>
		}else{ //Token valido
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CMD);
    17a6:	ee e8       	ldi	r30, 0x8E	; 142
    17a8:	f7 e0       	ldi	r31, 0x07	; 7
    17aa:	a0 ed       	ldi	r26, 0xD0	; 208
    17ac:	b7 e0       	ldi	r27, 0x07	; 7
    17ae:	8c 91       	ld	r24, X
    17b0:	8f 70       	andi	r24, 0x0F	; 15
    17b2:	80 64       	ori	r24, 0x40	; 64
    17b4:	8c 93       	st	X, r24
		protocolService.indexR++; //Donde deberia estar CMD
    17b6:	81 81       	ldd	r24, Z+1	; 0x01
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	81 83       	std	Z+1, r24	; 0x01
		protocolService.receivePck.cmd = protocolService.buffer[protocolService.indexR];
    17bc:	e1 81       	ldd	r30, Z+1	; 0x01
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	e2 57       	subi	r30, 0x72	; 114
    17c2:	f8 4f       	sbci	r31, 0xF8	; 248
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	e7 ed       	ldi	r30, 0xD7	; 215
    17c8:	f7 e0       	ldi	r31, 0x07	; 7
    17ca:	80 83       	st	Z, r24
		if(protocolService.receivePck.cmd == CMD_INVALID){
    17cc:	80 81       	ld	r24, Z
    17ce:	80 3e       	cpi	r24, 0xE0	; 224
    17d0:	51 f4       	brne	.+20     	; 0x17e6 <validatePck+0x9a>
			printf_P(PSTR("Comando invalido\n"));
    17d2:	89 e2       	ldi	r24, 0x29	; 41
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	9f 93       	push	r25
    17d8:	8f 93       	push	r24
    17da:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
			return false;
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	69 c0       	rjmp	.+210    	; 0x18b8 <validatePck+0x16c>
			}else{
			printf("Length %u", protocolService.receivePck.length);
    17e6:	c5 ed       	ldi	r28, 0xD5	; 213
    17e8:	d7 e0       	ldi	r29, 0x07	; 7
    17ea:	88 81       	ld	r24, Y
    17ec:	1f 92       	push	r1
    17ee:	8f 93       	push	r24
    17f0:	8a e2       	ldi	r24, 0x2A	; 42
    17f2:	95 e0       	ldi	r25, 0x05	; 5
    17f4:	9f 93       	push	r25
    17f6:	8f 93       	push	r24
    17f8:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
			if(protocolService.receivePck.length > PROTOCOL_MAX_BYTE_COUNT){ //Nunca deberia ser mayor a 24, porque + UNER+len+:+cmd == 32 y es el size del buffer
    17fc:	88 81       	ld	r24, Y
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	89 31       	cpi	r24, 0x19	; 25
    1808:	50 f0       	brcs	.+20     	; 0x181e <validatePck+0xd2>
				printf_P(PSTR("Length mayor a 24, se perderia data del buffer\n"));
    180a:	89 ef       	ldi	r24, 0xF9	; 249
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9f 93       	push	r25
    1810:	8f 93       	push	r24
    1812:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
				return false;
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	4d c0       	rjmp	.+154    	; 0x18b8 <validatePck+0x16c>
			}
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_PAYLOAD);
    181e:	ee e8       	ldi	r30, 0x8E	; 142
    1820:	f7 e0       	ldi	r31, 0x07	; 7
    1822:	a0 ed       	ldi	r26, 0xD0	; 208
    1824:	b7 e0       	ldi	r27, 0x07	; 7
    1826:	8c 91       	ld	r24, X
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	80 65       	ori	r24, 0x50	; 80
    182c:	8c 93       	st	X, r24
			protocolService.indexR++; //Donde deberia estar el Payload
    182e:	81 81       	ldd	r24, Z+1	; 0x01
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	81 83       	std	Z+1, r24	; 0x01
			protocolService.receivePck.payload = &protocolService.buffer[protocolService.indexR]; //Apunta a la direccion de memoria del primer elemento, esto deberia seguir hasta minimo 2, osea esta direccion y la siguiente
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	80 57       	subi	r24, 0x70	; 112
    183a:	98 4f       	sbci	r25, 0xF8	; 248
    183c:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <protocolService+0x4b>
    1840:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <protocolService+0x4a>
			if(protocolService.receivePck.length > 0){
    1844:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <protocolService+0x47>
    1848:	88 23       	and	r24, r24
    184a:	39 f0       	breq	.+14     	; 0x185a <validatePck+0x10e>
				protocolService.indexR += (protocolService.receivePck.length-1); //Si es 0 no pasa nada porque daria lo mismo la suma
    184c:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <protocolService+0x47>
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	89 0f       	add	r24, r25
    1858:	81 83       	std	Z+1, r24	; 0x01
			}
			protocolService.indexR++; //Donde deberia estar cks
    185a:	ee e8       	ldi	r30, 0x8E	; 142
    185c:	f7 e0       	ldi	r31, 0x07	; 7
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	81 83       	std	Z+1, r24	; 0x01
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_CHK);
    1864:	a0 ed       	ldi	r26, 0xD0	; 208
    1866:	b7 e0       	ldi	r27, 0x07	; 7
    1868:	8c 91       	ld	r24, X
    186a:	8f 70       	andi	r24, 0x0F	; 15
    186c:	80 66       	ori	r24, 0x60	; 96
    186e:	8c 93       	st	X, r24
			protocolService.receivePck.checksum = protocolService.buffer[protocolService.indexR];
    1870:	e1 81       	ldd	r30, Z+1	; 0x01
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	e2 57       	subi	r30, 0x72	; 114
    1876:	f8 4f       	sbci	r31, 0xF8	; 248
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	ca ed       	ldi	r28, 0xDA	; 218
    187c:	d7 e0       	ldi	r29, 0x07	; 7
    187e:	88 83       	st	Y, r24
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_CALCULATING_CHK);
    1880:	8c 91       	ld	r24, X
    1882:	8f 70       	andi	r24, 0x0F	; 15
    1884:	80 67       	ori	r24, 0x70	; 112
    1886:	8c 93       	st	X, r24
			if(calculatePayload() != protocolService.receivePck.checksum){
    1888:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <calculatePayload>
    188c:	98 81       	ld	r25, Y
    188e:	89 17       	cp	r24, r25
    1890:	51 f0       	breq	.+20     	; 0x18a6 <validatePck+0x15a>
				printf_P(PSTR("Cks invalido\n"));
    1892:	8b ee       	ldi	r24, 0xEB	; 235
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9f 93       	push	r25
    1898:	8f 93       	push	r24
    189a:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
				return false;
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <validatePck+0x16c>
			}else{
				printf_P(PSTR("Cks valido\n"));
    18a6:	8f ed       	ldi	r24, 0xDF	; 223
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9f 93       	push	r25
    18ac:	8f 93       	push	r24
    18ae:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
				return true;
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <create_payload>:
}

uint8_t create_payload(Command cmd) {
	uint8_t payload_length = 0;
	// Posición de inicio en el buffer (donde se escribirá el payload)
	uint8_t start_index = protocolService.indexW;
    18be:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <protocolService>

	switch (cmd) {
    18c2:	48 2f       	mov	r20, r24
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	fa 01       	movw	r30, r20
    18c8:	31 97       	sbiw	r30, 0x01	; 1
    18ca:	e8 30       	cpi	r30, 0x08	; 8
    18cc:	f1 05       	cpc	r31, r1
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <create_payload+0x14>
    18d0:	66 c0       	rjmp	.+204    	; 0x199e <create_payload+0xe0>
    18d2:	ec 5c       	subi	r30, 0xCC	; 204
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	0c 94 97 10 	jmp	0x212e	; 0x212e <__tablejump2__>
			break;
		}
		
		case CMD_RESPONSE_CLEAR_STATS: {
			// Payload: 1 byte (0x01 para éxito)
			protocolService.buffer[start_index] = 0x01;
    18da:	e9 2f       	mov	r30, r25
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	e2 57       	subi	r30, 0x72	; 114
    18e0:	f8 4f       	sbci	r31, 0xF8	; 248
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	82 83       	std	Z+2, r24	; 0x02
			payload_length = 1;
			break;
    18e6:	08 95       	ret
		}
		
		case CMD_RESPONSE_START:
		case CMD_RESPONSE_STOP: {
			// Payload: 1 byte (0x01 para start, 0x00 para stop)
			protocolService.buffer[start_index] = (cmd == CMD_RESPONSE_START) ? 0x01 : 0x00;
    18e8:	e9 2f       	mov	r30, r25
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <create_payload+0x36>
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	e2 57       	subi	r30, 0x72	; 114
    18f6:	f8 4f       	sbci	r31, 0xF8	; 248
    18f8:	92 83       	std	Z+2, r25	; 0x02
			payload_length = 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
			break;
    18fc:	08 95       	ret
		case CMD_RESPONSE_GET_CONFIG: {
			// Payload: Formato "OutputID:BoxSize" (3 bytes)
			uint8_t output_id = 0;  // Ejemplo: salida 0
			uint8_t box_size = 1;   // Ejemplo: tamaño A
			
			protocolService.buffer[start_index] = output_id;
    18fe:	89 2f       	mov	r24, r25
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fc 01       	movw	r30, r24
    1904:	e2 57       	subi	r30, 0x72	; 114
    1906:	f8 4f       	sbci	r31, 0xF8	; 248
    1908:	12 82       	std	Z+2, r1	; 0x02
			protocolService.buffer[(start_index + 1) % PROTOCOL_BUFFER_SIZE] = ':';
    190a:	9c 01       	movw	r18, r24
    190c:	2f 5f       	subi	r18, 0xFF	; 255
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	2f 73       	andi	r18, 0x3F	; 63
    1912:	30 78       	andi	r19, 0x80	; 128
    1914:	33 23       	and	r19, r19
    1916:	34 f4       	brge	.+12     	; 0x1924 <create_payload+0x66>
    1918:	21 50       	subi	r18, 0x01	; 1
    191a:	31 09       	sbc	r19, r1
    191c:	20 6c       	ori	r18, 0xC0	; 192
    191e:	3f 6f       	ori	r19, 0xFF	; 255
    1920:	2f 5f       	subi	r18, 0xFF	; 255
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	f9 01       	movw	r30, r18
    1926:	e2 57       	subi	r30, 0x72	; 114
    1928:	f8 4f       	sbci	r31, 0xF8	; 248
    192a:	4a e3       	ldi	r20, 0x3A	; 58
    192c:	42 83       	std	Z+2, r20	; 0x02
			protocolService.buffer[(start_index + 2) % PROTOCOL_BUFFER_SIZE] = box_size;
    192e:	02 96       	adiw	r24, 0x02	; 2
    1930:	8f 73       	andi	r24, 0x3F	; 63
    1932:	90 78       	andi	r25, 0x80	; 128
    1934:	99 23       	and	r25, r25
    1936:	24 f4       	brge	.+8      	; 0x1940 <create_payload+0x82>
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	80 6c       	ori	r24, 0xC0	; 192
    193c:	9f 6f       	ori	r25, 0xFF	; 255
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	fc 01       	movw	r30, r24
    1942:	e2 57       	subi	r30, 0x72	; 114
    1944:	f8 4f       	sbci	r31, 0xF8	; 248
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	22 83       	std	Z+2, r18	; 0x02
			
			payload_length = 3;
    194a:	83 e0       	ldi	r24, 0x03	; 3
			break;
    194c:	08 95       	ret
			// Payload: Cadena de versión del firmware (por ejemplo, "v1.2.3")
			const char* firmware_version = "v1.2.3";
			uint8_t i = 0;
			
			while (firmware_version[i] != '\0') {
				protocolService.buffer[(start_index + i) % PROTOCOL_BUFFER_SIZE] = firmware_version[i];
    194e:	e8 2f       	mov	r30, r24
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	e9 0f       	add	r30, r25
    1954:	f1 1d       	adc	r31, r1
    1956:	ef 73       	andi	r30, 0x3F	; 63
    1958:	ff 27       	eor	r31, r31
    195a:	e2 57       	subi	r30, 0x72	; 114
    195c:	f8 4f       	sbci	r31, 0xF8	; 248
    195e:	22 83       	std	Z+2, r18	; 0x02
				i++;
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <create_payload+0xa8>
uint8_t create_payload(Command cmd) {
	uint8_t payload_length = 0;
	// Posición de inicio en el buffer (donde se escribirá el payload)
	uint8_t start_index = protocolService.indexW;

	switch (cmd) {
    1964:	80 e0       	ldi	r24, 0x00	; 0
		case CMD_RESPONSE_GET_FIRMWARE: {
			// Payload: Cadena de versión del firmware (por ejemplo, "v1.2.3")
			const char* firmware_version = "v1.2.3";
			uint8_t i = 0;
			
			while (firmware_version[i] != '\0') {
    1966:	e8 2f       	mov	r30, r24
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	ec 5c       	subi	r30, 0xCC	; 204
    196c:	fa 4f       	sbci	r31, 0xFA	; 250
    196e:	20 81       	ld	r18, Z
    1970:	21 11       	cpse	r18, r1
    1972:	ed cf       	rjmp	.-38     	; 0x194e <create_payload+0x90>
    1974:	08 95       	ret
			// Payload: URL del repositorio (por ejemplo, "https://github.com/yourrepo")
			const char* repo_url = "https://github.com/yourrepo";
			uint8_t i = 0;
			
			while (repo_url[i] != '\0') {
				protocolService.buffer[(start_index + i) % PROTOCOL_BUFFER_SIZE] = repo_url[i];
    1976:	e8 2f       	mov	r30, r24
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	e9 0f       	add	r30, r25
    197c:	f1 1d       	adc	r31, r1
    197e:	ef 73       	andi	r30, 0x3F	; 63
    1980:	ff 27       	eor	r31, r31
    1982:	e2 57       	subi	r30, 0x72	; 114
    1984:	f8 4f       	sbci	r31, 0xF8	; 248
    1986:	22 83       	std	Z+2, r18	; 0x02
				i++;
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	01 c0       	rjmp	.+2      	; 0x198e <create_payload+0xd0>
uint8_t create_payload(Command cmd) {
	uint8_t payload_length = 0;
	// Posición de inicio en el buffer (donde se escribirá el payload)
	uint8_t start_index = protocolService.indexW;

	switch (cmd) {
    198c:	80 e0       	ldi	r24, 0x00	; 0
		case CMD_RESPONSE_GET_REPOSITORY: {
			// Payload: URL del repositorio (por ejemplo, "https://github.com/yourrepo")
			const char* repo_url = "https://github.com/yourrepo";
			uint8_t i = 0;
			
			while (repo_url[i] != '\0') {
    198e:	e8 2f       	mov	r30, r24
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	e5 5c       	subi	r30, 0xC5	; 197
    1994:	fa 4f       	sbci	r31, 0xFA	; 250
    1996:	20 81       	ld	r18, Z
    1998:	21 11       	cpse	r18, r1
    199a:	ed cf       	rjmp	.-38     	; 0x1976 <create_payload+0xb8>
    199c:	08 95       	ret
	uint8_t start_index = protocolService.indexW;

	switch (cmd) {
		case CMD_RESPONSE_ALIVE: {
			// No hay payload para CMD_RESPONSE_ALIVE
			payload_length = 0;
    199e:	80 e0       	ldi	r24, 0x00	; 0
			payload_length = 0;
			break;
		}
	}
	return payload_length;
}
    19a0:	08 95       	ret

000019a2 <protocolTask>:
			}
		}
	}
}

uint8_t protocolTask(){
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
	if (IS_FLAG_SET(protocolService.flags, PROTOSERV_CHECKDATA) && !IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)) {
    19ae:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    19b2:	81 ff       	sbrs	r24, 1
    19b4:	1f c0       	rjmp	.+62     	; 0x19f4 <protocolTask+0x52>
    19b6:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    19ba:	80 fd       	sbrc	r24, 0
    19bc:	1b c0       	rjmp	.+54     	; 0x19f4 <protocolTask+0x52>
		printf_P(PSTR("Procesar info\n"));
    19be:	80 ed       	ldi	r24, 0xD0	; 208
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	0e 94 cd 10 	call	0x219a	; 0x219a <printf_P>
		if (process_protocol_buffer()) {
    19ca:	0e 94 65 0a 	call	0x14ca	; 0x14ca <process_protocol_buffer>
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	88 23       	and	r24, r24
    19d4:	51 f0       	breq	.+20     	; 0x19ea <protocolTask+0x48>
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_READING_HEADER);
    19d6:	e0 ed       	ldi	r30, 0xD0	; 208
    19d8:	f7 e0       	ldi	r31, 0x07	; 7
    19da:	80 81       	ld	r24, Z
    19dc:	8f 70       	andi	r24, 0x0F	; 15
    19de:	80 61       	ori	r24, 0x10	; 16
    19e0:	80 83       	st	Z, r24
			SET_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
    19e2:	80 81       	ld	r24, Z
    19e4:	81 60       	ori	r24, 0x01	; 1
    19e6:	80 83       	st	Z, r24
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <protocolTask+0x52>
			} else {
			SET_FLAG(protocolService.flags, PROTOSERV_RESET);
    19ea:	e0 ed       	ldi	r30, 0xD0	; 208
    19ec:	f7 e0       	ldi	r31, 0x07	; 7
    19ee:	80 81       	ld	r24, Z
    19f0:	84 60       	ori	r24, 0x04	; 4
    19f2:	80 83       	st	Z, r24
		}
	}
	if(IS_FLAG_SET(protocolService.flags, PROTOSERV_RESET)){
    19f4:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    19f8:	82 ff       	sbrs	r24, 2
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <protocolTask+0x82>
		protocolService.indexR = protocolService.indexW;
    19fc:	ee e8       	ldi	r30, 0x8E	; 142
    19fe:	f7 e0       	ldi	r31, 0x07	; 7
    1a00:	80 81       	ld	r24, Z
    1a02:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
    1a04:	e0 ed       	ldi	r30, 0xD0	; 208
    1a06:	f7 e0       	ldi	r31, 0x07	; 7
    1a08:	80 81       	ld	r24, Z
    1a0a:	8e 7f       	andi	r24, 0xFE	; 254
    1a0c:	80 83       	st	Z, r24
		CLEAR_FLAG(protocolService.flags, PROTOSERV_RESET);
    1a0e:	80 81       	ld	r24, Z
    1a10:	8b 7f       	andi	r24, 0xFB	; 251
    1a12:	80 83       	st	Z, r24
		CLEAR_FLAG(protocolService.flags, PROTOSERV_CHECKDATA);
    1a14:	80 81       	ld	r24, Z
    1a16:	8d 7f       	andi	r24, 0xFD	; 253
    1a18:	80 83       	st	Z, r24
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 70       	andi	r24, 0x0F	; 15
    1a1e:	80 83       	st	Z, r24
		clear_receive_pck();
    1a20:	0e 94 c3 0a 	call	0x1586	; 0x1586 <clear_receive_pck>
	}
	if(IS_FLAG_SET(protocolService.flags, PROTOSERV_PROCESSING)){
    1a24:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    1a28:	80 ff       	sbrs	r24, 0
    1a2a:	1b c0       	rjmp	.+54     	; 0x1a62 <protocolTask+0xc0>
		if(validatePck()){
    1a2c:	0e 94 a6 0b 	call	0x174c	; 0x174c <validatePck>
    1a30:	88 23       	and	r24, r24
    1a32:	79 f0       	breq	.+30     	; 0x1a52 <protocolTask+0xb0>
			//PROCESAR DATOS ACA
			NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_VALIDATED);
    1a34:	e0 ed       	ldi	r30, 0xD0	; 208
    1a36:	f7 e0       	ldi	r31, 0x07	; 7
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 70       	andi	r24, 0x0F	; 15
    1a3c:	80 68       	ori	r24, 0x80	; 128
    1a3e:	80 83       	st	Z, r24
			CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
    1a40:	80 81       	ld	r24, Z
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	80 83       	st	Z, r24
			//POR AHORA SIEMPRE CREA PAQUETE DE RESPUESTA, DESPUES PONEMOS UNA BANDERA
			CREATE_RESPONSE_PCK = 1;
    1a46:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <bandera3>
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <protocolTask+0xc0>
			}else{
			CLEAR_FLAG(protocolService.flags, PROTOSERV_PROCESSING);
    1a52:	e0 ed       	ldi	r30, 0xD0	; 208
    1a54:	f7 e0       	ldi	r31, 0x07	; 7
    1a56:	80 81       	ld	r24, Z
    1a58:	8e 7f       	andi	r24, 0xFE	; 254
    1a5a:	80 83       	st	Z, r24
			SET_FLAG(protocolService.flags, PROTOSERV_RESET);
    1a5c:	80 81       	ld	r24, Z
    1a5e:	84 60       	ori	r24, 0x04	; 4
    1a60:	80 83       	st	Z, r24
		}
	}
	if(CREATE_RESPONSE_PCK){
    1a62:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
    1a66:	84 ff       	sbrs	r24, 4
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <protocolTask+0x124>
		CREATE_RESPONSE_PCK = 0;
    1a6a:	8f 7e       	andi	r24, 0xEF	; 239
    1a6c:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <bandera3>
		protocolService.receivePck.cmd = (uint8_t)getResponseCommand(protocolService.receivePck.cmd); //Asignar comando de respuesta
    1a70:	0f 2e       	mov	r0, r31
    1a72:	fe e8       	ldi	r31, 0x8E	; 142
    1a74:	ef 2e       	mov	r14, r31
    1a76:	f7 e0       	ldi	r31, 0x07	; 7
    1a78:	ff 2e       	mov	r15, r31
    1a7a:	f0 2d       	mov	r31, r0
    1a7c:	07 ed       	ldi	r16, 0xD7	; 215
    1a7e:	17 e0       	ldi	r17, 0x07	; 7
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 81       	ld	r24, Z
    1a84:	0e 94 89 0a 	call	0x1512	; 0x1512 <getResponseCommand>
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 83       	st	Z, r24
		SET_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
    1a8c:	c0 ed       	ldi	r28, 0xD0	; 208
    1a8e:	d7 e0       	ldi	r29, 0x07	; 7
    1a90:	88 81       	ld	r24, Y
    1a92:	88 60       	ori	r24, 0x08	; 8
    1a94:	88 83       	st	Y, r24
		uint8_t len = create_payload(protocolService.receivePck.cmd);
    1a96:	80 81       	ld	r24, Z
    1a98:	0e 94 5f 0c 	call	0x18be	; 0x18be <create_payload>
    1a9c:	48 2f       	mov	r20, r24
		protocolService.indexW = ((protocolService.indexW + len)% PROTOCOL_BUFFER_SIZE);
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	90 81       	ld	r25, Z
    1aa2:	98 0f       	add	r25, r24
    1aa4:	9f 73       	andi	r25, 0x3F	; 63
    1aa6:	90 83       	st	Z, r25
		createPck(protocolService.receivePck.cmd, &protocolService.buffer[protocolService.indexW], len);
    1aa8:	60 81       	ld	r22, Z
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	60 57       	subi	r22, 0x70	; 112
    1aae:	78 4f       	sbci	r23, 0xF8	; 248
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 81       	ld	r24, Z
    1ab4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <createPck>
		CLEAR_FLAG(protocolService.flags, PROTOSERV_CREATE_PCK);
    1ab8:	88 81       	ld	r24, Y
    1aba:	87 7f       	andi	r24, 0xF7	; 247
    1abc:	88 83       	st	Y, r24
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND);
    1abe:	88 81       	ld	r24, Y
    1ac0:	8f 70       	andi	r24, 0x0F	; 15
    1ac2:	80 69       	ori	r24, 0x90	; 144
    1ac4:	88 83       	st	Y, r24
	}
	if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND){
    1ac6:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    1aca:	82 95       	swap	r24
    1acc:	8f 70       	andi	r24, 0x0F	; 15
    1ace:	89 30       	cpi	r24, 0x09	; 9
    1ad0:	b9 f4       	brne	.+46     	; 0x1b00 <protocolTask+0x15e>
		if (!IS_TRANSMITTING) {
    1ad2:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
    1ad6:	83 fd       	sbrc	r24, 3
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <protocolTask+0x152>
			UCSR0B &= ~(1 << RXCIE0);  // Desactiva la interrupción de recepción
    1ada:	e1 ec       	ldi	r30, 0xC1	; 193
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	80 83       	st	Z, r24
			IS_TRANSMITTING = 1;
    1ae4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <bandera3>
    1ae8:	88 60       	ori	r24, 0x08	; 8
    1aea:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <bandera3>
			UCSR0B |= (1 << UDRIE0);   // Activa la interrupción de transmisión para iniciar el envío
    1aee:	80 81       	ld	r24, Z
    1af0:	80 62       	ori	r24, 0x20	; 32
    1af2:	80 83       	st	Z, r24
		}
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_SEND_DONE);
    1af4:	e0 ed       	ldi	r30, 0xD0	; 208
    1af6:	f7 e0       	ldi	r31, 0x07	; 7
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 70       	andi	r24, 0x0F	; 15
    1afc:	80 6a       	ori	r24, 0xA0	; 160
    1afe:	80 83       	st	Z, r24
	}
	if(NIBBLEH_GET_STATE(protocolService.flags) == PROTOSERV_SEND_DONE){
    1b00:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <protocolService+0x42>
    1b04:	82 95       	swap	r24
    1b06:	8f 70       	andi	r24, 0x0F	; 15
    1b08:	8a 30       	cpi	r24, 0x0A	; 10
    1b0a:	29 f4       	brne	.+10     	; 0x1b16 <protocolTask+0x174>
		NIBBLEH_SET_STATE(protocolService.flags, PROTOSERV_IDLE);
    1b0c:	e0 ed       	ldi	r30, 0xD0	; 208
    1b0e:	f7 e0       	ldi	r31, 0x07	; 7
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 70       	andi	r24, 0x0F	; 15
    1b14:	80 83       	st	Z, r24
	}
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	08 95       	ret

00001b24 <calculate_angle_pulseUs>:
	servo->state_time = 0;
	SET_FLAG(servo->flags, SERVO_ENABLE);
}

uint16_t calculate_angle_pulseUs(uint8_t angle){
	if (angle > 180) angle = 180;
    1b24:	85 3b       	cpi	r24, 0xB5	; 181
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <calculate_angle_pulseUs+0x6>
    1b28:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t min_ticks = SERVO_MIN_PULSE;
	uint16_t max_ticks = SERVO_MAX_PULSE;
	return (uint16_t)(min_ticks + (((uint32_t)(max_ticks - min_ticks) * angle) / 180U));
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	a0 ed       	ldi	r26, 0xD0	; 208
    1b30:	b7 e0       	ldi	r27, 0x07	; 7
    1b32:	0e 94 9d 10 	call	0x213a	; 0x213a <__umulhisi3>
    1b36:	24 eb       	ldi	r18, 0xB4	; 180
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>
}
    1b42:	c9 01       	movw	r24, r18
    1b44:	80 53       	subi	r24, 0x30	; 48
    1b46:	98 4f       	sbci	r25, 0xF8	; 248
    1b48:	08 95       	ret

00001b4a <initServo>:
#include <stdio.h>
#include "./../../main.h"
#include "../../types/servoType.h"
#include "servo_utils.h"

void initServo(volatile servo_t* servo, uint8_t index, uint8_t pin, uint8_t startAngle){
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	ec 01       	movw	r28, r24
    1b54:	04 2f       	mov	r16, r20
    1b56:	12 2f       	mov	r17, r18
	printf("Init Servo %u\n", index);
    1b58:	1f 92       	push	r1
    1b5a:	6f 93       	push	r22
    1b5c:	87 e5       	ldi	r24, 0x57	; 87
    1b5e:	95 e0       	ldi	r25, 0x05	; 5
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
	servo->flags.byte = 0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	servo->pulse_us = calculate_angle_pulseUs(startAngle);
    1b6a:	81 2f       	mov	r24, r17
    1b6c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <calculate_angle_pulseUs>
    1b70:	9b 83       	std	Y+3, r25	; 0x03
    1b72:	8a 83       	std	Y+2, r24	; 0x02
	servo->pin = pin;
    1b74:	08 83       	st	Y, r16
	servo->angle = startAngle;
    1b76:	1c 83       	std	Y+4, r17	; 0x04
	servo->state_time = 0;
    1b78:	1d 82       	std	Y+5, r1	; 0x05
	SET_FLAG(servo->flags, SERVO_ENABLE);
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret

00001b92 <tcrt_init>:
bool detect_rising_edge(TCRT_t* sensor, uint8_t current_state)
{
	bool rising = (sensor->lastReading == 0 && current_state == 1);
	sensor->lastReading = current_state;
	return rising;
}
    1b92:	87 b1       	in	r24, 0x07	; 7
    1b94:	80 7f       	andi	r24, 0xF0	; 240
    1b96:	87 b9       	out	0x07, r24	; 7
    1b98:	88 b1       	in	r24, 0x08	; 8
    1b9a:	80 7f       	andi	r24, 0xF0	; 240
    1b9c:	88 b9       	out	0x08, r24	; 8
    1b9e:	80 e4       	ldi	r24, 0x40	; 64
    1ba0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ba4:	86 e8       	ldi	r24, 0x86	; 134
    1ba6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1baa:	08 95       	ret

00001bac <tcrt_read_channel>:
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	a0 f4       	brcc	.+40     	; 0x1bd8 <tcrt_read_channel+0x2c>
    1bb0:	ec e7       	ldi	r30, 0x7C	; 124
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	90 81       	ld	r25, Z
    1bb6:	90 7f       	andi	r25, 0xF0	; 240
    1bb8:	89 2b       	or	r24, r25
    1bba:	80 83       	st	Z, r24
    1bbc:	ea e7       	ldi	r30, 0x7A	; 122
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 64       	ori	r24, 0x40	; 64
    1bc4:	80 83       	st	Z, r24
    1bc6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1bca:	86 fd       	sbrc	r24, 6
    1bcc:	fc cf       	rjmp	.-8      	; 0x1bc6 <tcrt_read_channel+0x1a>
    1bce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1bd2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1bd6:	08 95       	ret
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	08 95       	ret

00001bde <TCRT_init_Handlers>:
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	e9 e5       	ldi	r30, 0x59	; 89
    1be4:	f7 e0       	ldi	r31, 0x07	; 7
    1be6:	17 82       	std	Z+7, r1	; 0x07
    1be8:	10 86       	std	Z+8, r1	; 0x08
    1bea:	12 82       	std	Z+2, r1	; 0x02
    1bec:	11 82       	std	Z+1, r1	; 0x01
    1bee:	16 82       	std	Z+6, r1	; 0x06
    1bf0:	15 82       	std	Z+5, r1	; 0x05
    1bf2:	d4 e1       	ldi	r29, 0x14	; 20
    1bf4:	d6 87       	std	Z+14, r29	; 0x0e
    1bf6:	c1 e0       	ldi	r28, 0x01	; 1
    1bf8:	c0 83       	st	Z, r28
    1bfa:	86 e6       	ldi	r24, 0x66	; 102
    1bfc:	95 e0       	ldi	r25, 0x05	; 5
    1bfe:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    1c02:	e7 e0       	ldi	r30, 0x07	; 7
    1c04:	f7 e0       	ldi	r31, 0x07	; 7
    1c06:	10 82       	st	Z, r1
    1c08:	c7 83       	std	Z+7, r28	; 0x07
    1c0a:	c0 87       	std	Z+8, r28	; 0x08
    1c0c:	12 82       	std	Z+2, r1	; 0x02
    1c0e:	11 82       	std	Z+1, r1	; 0x01
    1c10:	16 82       	std	Z+6, r1	; 0x06
    1c12:	15 82       	std	Z+5, r1	; 0x05
    1c14:	d6 87       	std	Z+14, r29	; 0x0e
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f7 e0       	ldi	r31, 0x07	; 7
    1c1a:	10 82       	st	Z, r1
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	87 83       	std	Z+7, r24	; 0x07
    1c20:	80 87       	std	Z+8, r24	; 0x08
    1c22:	12 82       	std	Z+2, r1	; 0x02
    1c24:	11 82       	std	Z+1, r1	; 0x01
    1c26:	16 82       	std	Z+6, r1	; 0x06
    1c28:	15 82       	std	Z+5, r1	; 0x05
    1c2a:	d6 87       	std	Z+14, r29	; 0x0e
    1c2c:	e0 e2       	ldi	r30, 0x20	; 32
    1c2e:	f7 e0       	ldi	r31, 0x07	; 7
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	87 83       	std	Z+7, r24	; 0x07
    1c34:	80 87       	std	Z+8, r24	; 0x08
    1c36:	12 82       	std	Z+2, r1	; 0x02
    1c38:	11 82       	std	Z+1, r1	; 0x01
    1c3a:	16 82       	std	Z+6, r1	; 0x06
    1c3c:	15 82       	std	Z+5, r1	; 0x05
    1c3e:	d6 87       	std	Z+14, r29	; 0x0e
    1c40:	c0 83       	st	Z, r28
    1c42:	85 e7       	ldi	r24, 0x75	; 117
    1c44:	95 e0       	ldi	r25, 0x05	; 5
    1c46:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <puts>
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <calibrateIRSensor>:

void calibrateIRSensor(TCRT_t* sensor)
{
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
	if (IS_FLAG_SET(sensor->flags, TCRT_NEW_VALUE)) {
    1c56:	88 81       	ld	r24, Y
    1c58:	83 ff       	sbrs	r24, 3
    1c5a:	36 c0       	rjmp	.+108    	; 0x1cc8 <calibrateIRSensor+0x78>
		CLEAR_FLAG(sensor->flags, TCRT_NEW_VALUE); // Se leyó, limpiar flag
    1c5c:	87 7f       	andi	r24, 0xF7	; 247
    1c5e:	88 83       	st	Y, r24

		// Inicialización automática en primer ciclo
		if (sensor->calibrationCounter == 0) {
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	81 11       	cpse	r24, r1
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <calibrateIRSensor+0x1a>
			sensor->lastReading = 0;
    1c66:	1e 82       	std	Y+6, r1	; 0x06
    1c68:	1d 82       	std	Y+5, r1	; 0x05
		}

		// Acumula valores
		sensor->lastReading += tcrt_read_channel(sensor->channel);
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <tcrt_read_channel>
    1c70:	2d 81       	ldd	r18, Y+5	; 0x05
    1c72:	3e 81       	ldd	r19, Y+6	; 0x06
    1c74:	28 0f       	add	r18, r24
    1c76:	39 1f       	adc	r19, r25
    1c78:	3e 83       	std	Y+6, r19	; 0x06
    1c7a:	2d 83       	std	Y+5, r18	; 0x05
		sensor->calibrationCounter++;
    1c7c:	99 85       	ldd	r25, Y+9	; 0x09
    1c7e:	9f 5f       	subi	r25, 0xFF	; 255
    1c80:	99 87       	std	Y+9, r25	; 0x09

		// Si terminó de tomar las muestras necesarias
		if (sensor->calibrationCounter >= TCRT_CALIBRATION_SAMPLES) {
    1c82:	9a 30       	cpi	r25, 0x0A	; 10
    1c84:	08 f1       	brcs	.+66     	; 0x1cc8 <calibrateIRSensor+0x78>
			sensor->threshold = sensor->lastReading / TCRT_CALIBRATION_SAMPLES;
    1c86:	ad ec       	ldi	r26, 0xCD	; 205
    1c88:	bc ec       	ldi	r27, 0xCC	; 204
    1c8a:	0e 94 9d 10 	call	0x213a	; 0x213a <__umulhisi3>
    1c8e:	96 95       	lsr	r25
    1c90:	87 95       	ror	r24
    1c92:	96 95       	lsr	r25
    1c94:	87 95       	ror	r24
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
			sensor->calibrationCounter = 0;
    1c9e:	19 86       	std	Y+9, r1	; 0x09
			CLEAR_FLAG(sensor->flags, TCRT_CALIBRATING); // IMPORTANTE
    1ca0:	28 81       	ld	r18, Y
    1ca2:	2b 7f       	andi	r18, 0xFB	; 251
    1ca4:	28 83       	st	Y, r18
			printf("Sensor canal %u calibrado con threshold %u\n", sensor->channel, sensor->threshold);
    1ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	1f 92       	push	r1
    1cae:	2f 93       	push	r18
    1cb0:	84 e8       	ldi	r24, 0x84	; 132
    1cb2:	95 e0       	ldi	r25, 0x05	; 5
    1cb4:	9f 93       	push	r25
    1cb6:	8f 93       	push	r24
    1cb8:	0e 94 b7 10 	call	0x216e	; 0x216e <printf>
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
		}
	}
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	08 95       	ret

00001cce <tcrt_read>:

void tcrt_read(TCRT_t* sensor)
{
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ec 01       	movw	r28, r24
	uint16_t lectura = tcrt_read_channel(sensor->channel);
    1cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cda:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <tcrt_read_channel>
	sensor->lastReading = lectura;
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05

	// Acumula
	sensor->filterAccumulator += lectura;
    1ce2:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ce4:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ce6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ce8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cea:	8a 01       	movw	r16, r20
    1cec:	9b 01       	movw	r18, r22
    1cee:	08 0f       	add	r16, r24
    1cf0:	19 1f       	adc	r17, r25
    1cf2:	21 1d       	adc	r18, r1
    1cf4:	31 1d       	adc	r19, r1
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	b8 01       	movw	r22, r16
    1cfa:	0a 87       	std	Y+10, r16	; 0x0a
    1cfc:	1b 87       	std	Y+11, r17	; 0x0b
    1cfe:	2c 87       	std	Y+12, r18	; 0x0c
    1d00:	3d 87       	std	Y+13, r19	; 0x0d
	sensor->calibrationCounter++;
    1d02:	29 85       	ldd	r18, Y+9	; 0x09
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	29 87       	std	Y+9, r18	; 0x09
		
	// Si alcanzó el número de muestras requerido
	if (sensor->calibrationCounter >= TCRT_FILTER_SAMPLES) {
    1d08:	2a 30       	cpi	r18, 0x0A	; 10
    1d0a:	68 f0       	brcs	.+26     	; 0x1d26 <tcrt_read+0x58>
		sensor->ADCConvertedValue = sensor->filterAccumulator / TCRT_FILTER_SAMPLES;
    1d0c:	2a e0       	ldi	r18, 0x0A	; 10
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>
    1d18:	3a 83       	std	Y+2, r19	; 0x02
    1d1a:	29 83       	std	Y+1, r18	; 0x01
		sensor->filterAccumulator = 0;
    1d1c:	1a 86       	std	Y+10, r1	; 0x0a
    1d1e:	1b 86       	std	Y+11, r1	; 0x0b
    1d20:	1c 86       	std	Y+12, r1	; 0x0c
    1d22:	1d 86       	std	Y+13, r1	; 0x0d
		sensor->calibrationCounter = 0;
    1d24:	19 86       	std	Y+9, r1	; 0x09
	}
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <tcrt_is_box_detected>:

bool tcrt_is_box_detected(TCRT_t* sensor)
{
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
	// Calcular el umbral ajustado con margen de histéresis
	uint32_t threshold_with_margin = (sensor->threshold * (100UL - sensor->hysteresis_percent)) / 100UL;
    1d3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d40:	bc 81       	ldd	r27, Y+4	; 0x04
    1d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d44:	0f 2e       	mov	r0, r31
    1d46:	f4 e6       	ldi	r31, 0x64	; 100
    1d48:	cf 2e       	mov	r12, r31
    1d4a:	d1 2c       	mov	r13, r1
    1d4c:	e1 2c       	mov	r14, r1
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	f0 2d       	mov	r31, r0
    1d52:	a7 01       	movw	r20, r14
    1d54:	96 01       	movw	r18, r12
    1d56:	28 1b       	sub	r18, r24
    1d58:	31 09       	sbc	r19, r1
    1d5a:	41 09       	sbc	r20, r1
    1d5c:	51 09       	sbc	r21, r1
    1d5e:	0e 94 ac 10 	call	0x2158	; 0x2158 <__muluhisi3>
    1d62:	a7 01       	movw	r20, r14
    1d64:	96 01       	movw	r18, r12
    1d66:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>

	// Ver si hay objeto ahora
	bool box_now = (sensor->ADCConvertedValue < threshold_with_margin);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	6c 01       	movw	r12, r24
    1d70:	e1 2c       	mov	r14, r1
    1d72:	f1 2c       	mov	r15, r1
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	c2 16       	cp	r12, r18
    1d78:	d3 06       	cpc	r13, r19
    1d7a:	e4 06       	cpc	r14, r20
    1d7c:	f5 06       	cpc	r15, r21
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <tcrt_is_box_detected+0x52>
    1d80:	80 e0       	ldi	r24, 0x00	; 0

	if (box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_STATUS_IDLE) {
    1d82:	c2 16       	cp	r12, r18
    1d84:	d3 06       	cpc	r13, r19
    1d86:	e4 06       	cpc	r14, r20
    1d88:	f5 06       	cpc	r15, r21
    1d8a:	50 f4       	brcc	.+20     	; 0x1da0 <tcrt_is_box_detected+0x70>
    1d8c:	98 81       	ld	r25, Y
    1d8e:	e9 2f       	mov	r30, r25
    1d90:	e2 95       	swap	r30
    1d92:	ef 70       	andi	r30, 0x0F	; 15
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <tcrt_is_box_detected+0x70>
		// Caja recién detectada ? flanco de subida
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
		SET_FLAG(sensor->flags, TCRT_EDGE_RISING);
    1d96:	9a 60       	ori	r25, 0x0A	; 10
		NIBBLEH_SET_STATE(sensor->flags, TCRT_READ);
    1d98:	9f 70       	andi	r25, 0x0F	; 15
    1d9a:	90 61       	ori	r25, 0x10	; 16
    1d9c:	98 83       	st	Y, r25
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <tcrt_is_box_detected+0x8e>
	}else if (!box_now && NIBBLEH_GET_STATE(sensor->flags) == TCRT_READ) {
    1da0:	c2 16       	cp	r12, r18
    1da2:	d3 06       	cpc	r13, r19
    1da4:	e4 06       	cpc	r14, r20
    1da6:	f5 06       	cpc	r15, r21
    1da8:	50 f0       	brcs	.+20     	; 0x1dbe <tcrt_is_box_detected+0x8e>
    1daa:	98 81       	ld	r25, Y
    1dac:	29 2f       	mov	r18, r25
    1dae:	22 95       	swap	r18
    1db0:	2f 70       	andi	r18, 0x0F	; 15
    1db2:	21 30       	cpi	r18, 0x01	; 1
    1db4:	21 f4       	brne	.+8      	; 0x1dbe <tcrt_is_box_detected+0x8e>
		// Caja recién salió del sensor ? flanco de bajada
		SET_FLAG(sensor->flags, TCRT_NEW_VALUE);
    1db6:	98 60       	ori	r25, 0x08	; 8
		CLEAR_FLAG(sensor->flags, TCRT_EDGE_RISING);
		NIBBLEH_SET_STATE(sensor->flags, TCRT_COUNTED);
    1db8:	9d 70       	andi	r25, 0x0D	; 13
    1dba:	90 62       	ori	r25, 0x20	; 32
    1dbc:	98 83       	st	Y, r25
	}

	return box_now;
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	08 95       	ret

00001dcc <ultrasonic_hal_trigger_setHigh>:
{
}

void ultrasonic_hal_echo_timeout(ultrasonic_t *us)
{
	us->TIMEDOUT = 1;
    1dcc:	8b b1       	in	r24, 0x0b	; 11
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	8b b9       	out	0x0b, r24	; 11
    1dd2:	08 95       	ret

00001dd4 <ultrasonic_hal_trigger_setLow>:
    1dd4:	8b b1       	in	r24, 0x0b	; 11
    1dd6:	87 7f       	andi	r24, 0xF7	; 247
    1dd8:	8b b9       	out	0x0b, r24	; 11
    1dda:	08 95       	ret

00001ddc <ultrasonic_hal_echo_setRisingEdge>:
}

void ultrasonic_hal_echo_setRisingEdge(ultrasonic_t *us)
{
	TCCR1B |= (1 << ICES1);
    1ddc:	e1 e8       	ldi	r30, 0x81	; 129
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 64       	ori	r24, 0x40	; 64
    1de4:	80 83       	st	Z, r24
    1de6:	08 95       	ret

00001de8 <ultrasonic_hal_echo_setFallingEdge>:
}

void ultrasonic_hal_echo_setFallingEdge(ultrasonic_t *us)
{
	TCCR1B &= ~(1 << ICES1);
    1de8:	e1 e8       	ldi	r30, 0x81	; 129
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 7b       	andi	r24, 0xBF	; 191
    1df0:	80 83       	st	Z, r24
    1df2:	08 95       	ret

00001df4 <USART_Init>:
	protocolService.indexW = next_indexW;

	// Habilita la interrupción de transmisión para iniciar el envío
	UCSR0B |= (1 << UDRIE0);
	return 0;
}
    1df4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1df8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1dfc:	88 e9       	ldi	r24, 0x98	; 152
    1dfe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1e08:	08 95       	ret

00001e0a <USART_putchar_blocking>:

// Función bloqueante para enviar un byte por USART
int USART_putchar_blocking(char c, FILE *stream) {
	// Espera a que el registro de datos esté vacío (bit UDRE0 activo)
	while (!(UCSR0A & (1 << UDRE0))) {
    1e0a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1e0e:	95 ff       	sbrs	r25, 5
    1e10:	fc cf       	rjmp	.-8      	; 0x1e0a <USART_putchar_blocking>
		// Espera activa (polling)
	}
	UDR0 = c; // Envía el byte
    1e12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	08 95       	ret

00001e1c <USART_getchar>:

int USART_getchar(FILE *stream) {
	// Verifica si hay datos disponibles
	if (protocolService.indexR == protocolService.indexW) {
    1e1c:	ee e8       	ldi	r30, 0x8E	; 142
    1e1e:	f7 e0       	ldi	r31, 0x07	; 7
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	80 81       	ld	r24, Z
    1e24:	98 17       	cp	r25, r24
    1e26:	c9 f0       	breq	.+50     	; 0x1e5a <USART_getchar+0x3e>
		return -1; // No hay datos disponibles
	}

	uint8_t data = protocolService.buffer[protocolService.indexR];
    1e28:	df 01       	movw	r26, r30
    1e2a:	e1 81       	ldd	r30, Z+1	; 0x01
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	e2 57       	subi	r30, 0x72	; 114
    1e30:	f8 4f       	sbci	r31, 0xF8	; 248
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	2c 91       	ld	r18, X
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	2f 73       	andi	r18, 0x3F	; 63
    1e40:	30 78       	andi	r19, 0x80	; 128
    1e42:	33 23       	and	r19, r19
    1e44:	34 f4       	brge	.+12     	; 0x1e52 <USART_getchar+0x36>
    1e46:	21 50       	subi	r18, 0x01	; 1
    1e48:	31 09       	sbc	r19, r1
    1e4a:	20 6c       	ori	r18, 0xC0	; 192
    1e4c:	3f 6f       	ori	r19, 0xFF	; 255
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	20 93 8f 07 	sts	0x078F, r18	; 0x80078f <protocolService+0x1>
	return data;
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	08 95       	ret
}

int USART_getchar(FILE *stream) {
	// Verifica si hay datos disponibles
	if (protocolService.indexR == protocolService.indexW) {
		return -1; // No hay datos disponibles
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	9f ef       	ldi	r25, 0xFF	; 255
	}

	uint8_t data = protocolService.buffer[protocolService.indexR];
	protocolService.indexR = (protocolService.indexR + 1) % PROTOCOL_BUFFER_SIZE;
	return data;
}
    1e5e:	08 95       	ret

00001e60 <ultrasonic_set_debug_mode>:
{
    return us->distance_mm;
}
// Función para establecer método de impresión
void ultrasonic_set_print_method(ultrasonic_t *us, PrintfMethod print_method) {
	us->print_method = print_method;
    1e60:	fc 01       	movw	r30, r24
    1e62:	66 87       	std	Z+14, r22	; 0x0e
    1e64:	08 95       	ret

00001e66 <ultrasonic_calculate_distance>:
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	ec 01       	movw	r28, r24
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	ae 81       	ldd	r26, Y+6	; 0x06
    1e76:	bf 81       	ldd	r27, Y+7	; 0x07
    1e78:	48 81       	ld	r20, Y
    1e7a:	59 81       	ldd	r21, Y+1	; 0x01
    1e7c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e7e:	7b 81       	ldd	r23, Y+3	; 0x03
    1e80:	8c 01       	movw	r16, r24
    1e82:	9d 01       	movw	r18, r26
    1e84:	04 1b       	sub	r16, r20
    1e86:	15 0b       	sbc	r17, r21
    1e88:	26 0b       	sbc	r18, r22
    1e8a:	37 0b       	sbc	r19, r23
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	a8 01       	movw	r20, r16
    1e90:	d9 01       	movw	r26, r18
    1e92:	c8 01       	movw	r24, r16
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	aa 1f       	adc	r26, r26
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	aa 1f       	adc	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	aa 1f       	adc	r26, r26
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	aa 1f       	adc	r26, r26
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	9d 01       	movw	r18, r26
    1eb8:	04 0f       	add	r16, r20
    1eba:	15 1f       	adc	r17, r21
    1ebc:	26 1f       	adc	r18, r22
    1ebe:	37 1f       	adc	r19, r23
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	b8 01       	movw	r22, r16
    1ec4:	66 0f       	add	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	20 e9       	ldi	r18, 0x90	; 144
    1ece:	31 e0       	ldi	r19, 0x01	; 1
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>
    1ed8:	28 87       	std	Y+8, r18	; 0x08
    1eda:	39 87       	std	Y+9, r19	; 0x09
    1edc:	4a 87       	std	Y+10, r20	; 0x0a
    1ede:	5b 87       	std	Y+11, r21	; 0x0b
    1ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	8c 87       	std	Y+12, r24	; 0x0c
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <ultrasonic_print>:
}

// Función de impresión para la librería
void ultrasonic_print(ultrasonic_t *us, const char* message) {
	if (us->print_method != NULL) {
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	1f 96       	adiw	r26, 0x0f	; 15
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	50 97       	sbiw	r26, 0x10	; 16
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <ultrasonic_print+0x12>
    1efe:	cb 01       	movw	r24, r22
		us->print_method(message);
    1f00:	09 95       	icall
    1f02:	08 95       	ret

00001f04 <ultrasonic_init_flags>:

void ultrasonic_set_debug_mode(ultrasonic_t *us, bool newState){
	us->debugMode = newState;
}

void ultrasonic_init_flags(ultrasonic_t *us){
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	ec 01       	movw	r28, r24
	us->echo_init_time    = 0;
    1f0a:	18 82       	st	Y, r1
    1f0c:	19 82       	std	Y+1, r1	; 0x01
    1f0e:	1a 82       	std	Y+2, r1	; 0x02
    1f10:	1b 82       	std	Y+3, r1	; 0x03
	us->echo_finish_time  = 0;
    1f12:	1c 82       	std	Y+4, r1	; 0x04
    1f14:	1d 82       	std	Y+5, r1	; 0x05
    1f16:	1e 82       	std	Y+6, r1	; 0x06
    1f18:	1f 82       	std	Y+7, r1	; 0x07
	us->distance_mm       = 0;
    1f1a:	18 86       	std	Y+8, r1	; 0x08
    1f1c:	19 86       	std	Y+9, r1	; 0x09
    1f1e:	1a 86       	std	Y+10, r1	; 0x0a
    1f20:	1b 86       	std	Y+11, r1	; 0x0b
	us->ALL_FLAGS = 0;
    1f22:	1c 86       	std	Y+12, r1	; 0x0c
	us->TRIGGER_ALLOWED = 1;
    1f24:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f26:	80 62       	ori	r24, 0x20	; 32
    1f28:	8c 87       	std	Y+12, r24	; 0x0c
	us->state = ULTRA_IDLE;
    1f2a:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic_hal_echo_setRisingEdge();
    1f2c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ultrasonic_hal_echo_setRisingEdge>
	if(us->print_method != NULL){
    1f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f32:	98 89       	ldd	r25, Y+16	; 0x10
    1f34:	89 2b       	or	r24, r25
    1f36:	41 f0       	breq	.+16     	; 0x1f48 <ultrasonic_init_flags+0x44>
		if(us->debugMode){
    1f38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f3a:	88 23       	and	r24, r24
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <ultrasonic_init_flags+0x44>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Flags Reset");	
    1f3e:	60 eb       	ldi	r22, 0xB0	; 176
    1f40:	75 e0       	ldi	r23, 0x05	; 5
    1f42:	ce 01       	movw	r24, r28
    1f44:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
		}
	}
}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	08 95       	ret

00001f4e <ultrasonic_init>:

// Inicializa la estructura interna
void ultrasonic_init(ultrasonic_t *us, PrintfMethod printMethod)
{
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	ec 01       	movw	r28, r24
    1f58:	8b 01       	movw	r16, r22
	ultrasonic_init_flags(us);	
    1f5a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <ultrasonic_init_flags>
	us->debugMode = true;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	8e 87       	std	Y+14, r24	; 0x0e
	if(printMethod == NULL){
    1f62:	01 15       	cp	r16, r1
    1f64:	11 05       	cpc	r17, r1
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <ultrasonic_init+0x20>
		us->print_method = NULL;
    1f68:	18 8a       	std	Y+16, r1	; 0x10
    1f6a:	1f 86       	std	Y+15, r1	; 0x0f
    1f6c:	0a c0       	rjmp	.+20     	; 0x1f82 <ultrasonic_init+0x34>
		}else{
		us->print_method = printMethod; // Asignación directa
    1f6e:	18 8b       	std	Y+16, r17	; 0x10
    1f70:	0f 87       	std	Y+15, r16	; 0x0f
		if(us->debugMode){
    1f72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f74:	88 23       	and	r24, r24
    1f76:	29 f0       	breq	.+10     	; 0x1f82 <ultrasonic_init+0x34>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 Iniciado");
    1f78:	6f ec       	ldi	r22, 0xCF	; 207
    1f7a:	75 e0       	ldi	r23, 0x05	; 5
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
		}
	}
}
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	08 95       	ret

00001f8c <ultrasonic_timeout_clear>:

bool ultrasonic_timeout_clear(ultrasonic_t *us, bool state){
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
	if(us->state == ULTRA_TIMEOUT){
    1f92:	fc 01       	movw	r30, r24
    1f94:	25 85       	ldd	r18, Z+13	; 0x0d
    1f96:	26 30       	cpi	r18, 0x06	; 6
    1f98:	71 f4       	brne	.+28     	; 0x1fb6 <ultrasonic_timeout_clear+0x2a>
    1f9a:	16 2f       	mov	r17, r22
    1f9c:	ec 01       	movw	r28, r24
		ultrasonic_init_flags(us);
    1f9e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <ultrasonic_init_flags>
		us->debugMode = state;
    1fa2:	1e 87       	std	Y+14, r17	; 0x0e
		if(us->debugMode){	
    1fa4:	1e 85       	ldd	r17, Y+14	; 0x0e
    1fa6:	11 23       	and	r17, r17
    1fa8:	41 f0       	breq	.+16     	; 0x1fba <ultrasonic_timeout_clear+0x2e>
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
    1faa:	6f e8       	ldi	r22, 0x8F	; 143
    1fac:	73 e0       	ldi	r23, 0x03	; 3
    1fae:	ce 01       	movw	r24, r28
    1fb0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <ultrasonic_timeout_clear+0x30>
		}
		return true;
	}
	return false;
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <ultrasonic_timeout_clear+0x30>
		ultrasonic_init_flags(us);
		us->debugMode = state;
		if(us->debugMode){	
			ultrasonic_print(us, "LIB DEBUG - HCSR04 TMDOUT Cleared");
		}
		return true;
    1fba:	11 e0       	ldi	r17, 0x01	; 1
	}
	return false;
}
    1fbc:	81 2f       	mov	r24, r17
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	08 95       	ret

00001fc6 <ultrasonic_start>:

// Pide iniciar una medición (cambia al estado de TRIGGERING)
bool ultrasonic_start(ultrasonic_t *us)
{
    1fc6:	cf 93       	push	r28
    1fc8:	fc 01       	movw	r30, r24
	// Solo se inicia la medición si el sensor está en reposo o finalizado
	if ((us->state == ULTRA_IDLE || us->state == ULTRA_DONE)) {
    1fca:	85 85       	ldd	r24, Z+13	; 0x0d
    1fcc:	88 23       	and	r24, r24
    1fce:	19 f0       	breq	.+6      	; 0x1fd6 <ultrasonic_start+0x10>
    1fd0:	85 85       	ldd	r24, Z+13	; 0x0d
    1fd2:	85 30       	cpi	r24, 0x05	; 5
    1fd4:	c1 f4       	brne	.+48     	; 0x2006 <ultrasonic_start+0x40>
		// Comprobar que el trigger está permitido
		if (us->TRIGGER_ALLOWED) {
    1fd6:	84 85       	ldd	r24, Z+12	; 0x0c
    1fd8:	85 ff       	sbrs	r24, 5
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <ultrasonic_start+0x2c>
			us->state = ULTRA_TRIGGERING;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	85 87       	std	Z+13, r24	; 0x0d
			if(us->debugMode){
    1fe0:	c6 85       	ldd	r28, Z+14	; 0x0e
    1fe2:	cc 23       	and	r28, r28
    1fe4:	d1 f0       	breq	.+52     	; 0x201a <ultrasonic_start+0x54>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
    1fe6:	6b ee       	ldi	r22, 0xEB	; 235
    1fe8:	75 e0       	ldi	r23, 0x05	; 5
    1fea:	cf 01       	movw	r24, r30
    1fec:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
    1ff0:	15 c0       	rjmp	.+42     	; 0x201c <ultrasonic_start+0x56>
			}
			return true;
			} else {
			if(us->debugMode){
    1ff2:	c6 85       	ldd	r28, Z+14	; 0x0e
    1ff4:	cc 23       	and	r28, r28
    1ff6:	91 f0       	breq	.+36     	; 0x201c <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
    1ff8:	6a e1       	ldi	r22, 0x1A	; 26
    1ffa:	76 e0       	ldi	r23, 0x06	; 6
    1ffc:	cf 01       	movw	r24, r30
    1ffe:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
		} else {
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
    2002:	c0 e0       	ldi	r28, 0x00	; 0
    2004:	0b c0       	rjmp	.+22     	; 0x201c <ultrasonic_start+0x56>
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: TRIGGER_ALLOWED false");
			}
		}
		} else {
			if(us->debugMode){	
    2006:	c6 85       	ldd	r28, Z+14	; 0x0e
    2008:	cc 23       	and	r28, r28
    200a:	41 f0       	breq	.+16     	; 0x201c <ultrasonic_start+0x56>
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
    200c:	61 e5       	ldi	r22, 0x51	; 81
    200e:	76 e0       	ldi	r23, 0x06	; 6
    2010:	cf 01       	movw	r24, r30
    2012:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
			}
	}
	return false;
    2016:	c0 e0       	ldi	r28, 0x00	; 0
    2018:	01 c0       	rjmp	.+2      	; 0x201c <ultrasonic_start+0x56>
		if (us->TRIGGER_ALLOWED) {
			us->state = ULTRA_TRIGGERING;
			if(us->debugMode){
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start: TRIGGER_ALLOWED true");
			}
			return true;
    201a:	c1 e0       	ldi	r28, 0x01	; 1
			if(us->debugMode){	
				ultrasonic_print(us, "LIB DEBUG - HCSR04 Start failed: wrong state");
			}
	}
	return false;
}
    201c:	8c 2f       	mov	r24, r28
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <ultrasonic_update>:

// Función principal de la máquina de estados
void ultrasonic_update(ultrasonic_t *us)
{
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	ec 01       	movw	r28, r24
	switch (us->state)
    2028:	8d 85       	ldd	r24, Y+13	; 0x0d
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	71 f1       	breq	.+92     	; 0x208a <ultrasonic_update+0x68>
    202e:	28 f4       	brcc	.+10     	; 0x203a <ultrasonic_update+0x18>
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	49 f0       	breq	.+18     	; 0x2046 <ultrasonic_update+0x24>
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	a1 f0       	breq	.+40     	; 0x2060 <ultrasonic_update+0x3e>
    2038:	55 c0       	rjmp	.+170    	; 0x20e4 <ultrasonic_update+0xc2>
    203a:	84 30       	cpi	r24, 0x04	; 4
    203c:	e1 f1       	breq	.+120    	; 0x20b6 <ultrasonic_update+0x94>
    203e:	86 30       	cpi	r24, 0x06	; 6
    2040:	09 f4       	brne	.+2      	; 0x2044 <ultrasonic_update+0x22>
    2042:	4d c0       	rjmp	.+154    	; 0x20de <ultrasonic_update+0xbc>
    2044:	4f c0       	rjmp	.+158    	; 0x20e4 <ultrasonic_update+0xc2>
		// Espera a que ultrasonic_start() lo saque de este estado
		break;
		case ULTRA_TRIGGERING:
		{
			// Ya no se utiliza la rama DO_TRIGGER porque el ISR se encarga de encender el trigger
			if(us->TRIGGER_FINISH){ // Activado desde el ISR
    2046:	8c 85       	ldd	r24, Y+12	; 0x0c
    2048:	81 ff       	sbrs	r24, 1
    204a:	4c c0       	rjmp	.+152    	; 0x20e4 <ultrasonic_update+0xc2>
				if(us->debugMode){
    204c:	8e 85       	ldd	r24, Y+14	; 0x0e
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <ultrasonic_update+0x32>
    2052:	48 c0       	rjmp	.+144    	; 0x20e4 <ultrasonic_update+0xc2>
					ultrasonic_print(us, "LIB DEBUG - TRIGGER_FINISH lib");
    2054:	6e e7       	ldi	r22, 0x7E	; 126
    2056:	76 e0       	ldi	r23, 0x06	; 6
    2058:	ce 01       	movw	r24, r28
    205a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
    205e:	42 c0       	rjmp	.+132    	; 0x20e4 <ultrasonic_update+0xc2>
			break;
		}
		// Los demás casos permanecen igual...
		case ULTRA_WAIT_RISING:
		{
			if (!us->ECHO_RISING) {
    2060:	8c 85       	ldd	r24, Y+12	; 0x0c
    2062:	84 fd       	sbrc	r24, 4
    2064:	0c c0       	rjmp	.+24     	; 0x207e <ultrasonic_update+0x5c>
				us->state = ULTRA_WAIT_FALLING;
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	8d 87       	std	Y+13, r24	; 0x0d
				ultrasonic_hal_echo_setFallingEdge();
    206a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <ultrasonic_hal_echo_setFallingEdge>
				if(us->debugMode){
    206e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2070:	88 23       	and	r24, r24
    2072:	29 f0       	breq	.+10     	; 0x207e <ultrasonic_update+0x5c>
					ultrasonic_print(us, "LIB DEBUG - ECHO RISING bajo");
    2074:	6d e9       	ldi	r22, 0x9D	; 157
    2076:	76 e0       	ldi	r23, 0x06	; 6
    2078:	ce 01       	movw	r24, r28
    207a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
				}
			}
			if (us->TIMEDOUT) {
    207e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2080:	83 ff       	sbrs	r24, 3
    2082:	30 c0       	rjmp	.+96     	; 0x20e4 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    2084:	86 e0       	ldi	r24, 0x06	; 6
    2086:	8d 87       	std	Y+13, r24	; 0x0d
    2088:	2d c0       	rjmp	.+90     	; 0x20e4 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_WAIT_FALLING:
		{
			if(us->ECHO_RECEIVED){
    208a:	8c 85       	ldd	r24, Y+12	; 0x0c
    208c:	86 ff       	sbrs	r24, 6
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <ultrasonic_update+0x88>
				us->state = ULTRA_CALCULATING;
    2090:	84 e0       	ldi	r24, 0x04	; 4
    2092:	8d 87       	std	Y+13, r24	; 0x0d
				if(us->debugMode){
    2094:	8e 85       	ldd	r24, Y+14	; 0x0e
    2096:	88 23       	and	r24, r24
    2098:	29 f0       	breq	.+10     	; 0x20a4 <ultrasonic_update+0x82>
					ultrasonic_print(us, "LIB DEBUG - CALCULANDO");
    209a:	6a eb       	ldi	r22, 0xBA	; 186
    209c:	76 e0       	ldi	r23, 0x06	; 6
    209e:	ce 01       	movw	r24, r28
    20a0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
				}
				us->CALCULATE_DISTANCE = 1;
    20a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    20a6:	84 60       	ori	r24, 0x04	; 4
    20a8:	8c 87       	std	Y+12, r24	; 0x0c
			}
			if (us->TIMEDOUT) {
    20aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ac:	83 ff       	sbrs	r24, 3
    20ae:	1a c0       	rjmp	.+52     	; 0x20e4 <ultrasonic_update+0xc2>
				us->state = ULTRA_TIMEOUT;
    20b0:	86 e0       	ldi	r24, 0x06	; 6
    20b2:	8d 87       	std	Y+13, r24	; 0x0d
    20b4:	17 c0       	rjmp	.+46     	; 0x20e4 <ultrasonic_update+0xc2>
			}
			break;
		}
		case ULTRA_CALCULATING:
		{
			if (us->CALCULATE_DISTANCE) {
    20b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b8:	82 ff       	sbrs	r24, 2
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <ultrasonic_update+0xc2>
				ultrasonic_calculate_distance(us);
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <ultrasonic_calculate_distance>
				us->CALCULATE_DISTANCE = 0;
    20c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c4:	8b 7f       	andi	r24, 0xFB	; 251
    20c6:	8c 87       	std	Y+12, r24	; 0x0c
				if(us->debugMode){
    20c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ca:	88 23       	and	r24, r24
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <ultrasonic_update+0xb6>
					ultrasonic_print(us, "LIB DEBUG - Calculado, pasando a estado listo");
    20ce:	61 ed       	ldi	r22, 0xD1	; 209
    20d0:	76 e0       	ldi	r23, 0x06	; 6
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ultrasonic_print>
				}
				us->state = ULTRA_DONE;
    20d8:	85 e0       	ldi	r24, 0x05	; 5
    20da:	8d 87       	std	Y+13, r24	; 0x0d
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <ultrasonic_update+0xc2>
		{
			// Permanece en DONE hasta la siguiente medición
			break;
		}
		case ULTRA_TIMEOUT:
			us->TIMEDOUT = 1;
    20de:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e0:	88 60       	ori	r24, 0x08	; 8
    20e2:	8c 87       	std	Y+12, r24	; 0x0c
		break;
	}
}
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <__udivmodsi4>:
    20ea:	a1 e2       	ldi	r26, 0x21	; 33
    20ec:	1a 2e       	mov	r1, r26
    20ee:	aa 1b       	sub	r26, r26
    20f0:	bb 1b       	sub	r27, r27
    20f2:	fd 01       	movw	r30, r26
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <__udivmodsi4_ep>

000020f6 <__udivmodsi4_loop>:
    20f6:	aa 1f       	adc	r26, r26
    20f8:	bb 1f       	adc	r27, r27
    20fa:	ee 1f       	adc	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	a2 17       	cp	r26, r18
    2100:	b3 07       	cpc	r27, r19
    2102:	e4 07       	cpc	r30, r20
    2104:	f5 07       	cpc	r31, r21
    2106:	20 f0       	brcs	.+8      	; 0x2110 <__udivmodsi4_ep>
    2108:	a2 1b       	sub	r26, r18
    210a:	b3 0b       	sbc	r27, r19
    210c:	e4 0b       	sbc	r30, r20
    210e:	f5 0b       	sbc	r31, r21

00002110 <__udivmodsi4_ep>:
    2110:	66 1f       	adc	r22, r22
    2112:	77 1f       	adc	r23, r23
    2114:	88 1f       	adc	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	1a 94       	dec	r1
    211a:	69 f7       	brne	.-38     	; 0x20f6 <__udivmodsi4_loop>
    211c:	60 95       	com	r22
    211e:	70 95       	com	r23
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	9b 01       	movw	r18, r22
    2126:	ac 01       	movw	r20, r24
    2128:	bd 01       	movw	r22, r26
    212a:	cf 01       	movw	r24, r30
    212c:	08 95       	ret

0000212e <__tablejump2__>:
    212e:	ee 0f       	add	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	05 90       	lpm	r0, Z+
    2134:	f4 91       	lpm	r31, Z
    2136:	e0 2d       	mov	r30, r0
    2138:	09 94       	ijmp

0000213a <__umulhisi3>:
    213a:	a2 9f       	mul	r26, r18
    213c:	b0 01       	movw	r22, r0
    213e:	b3 9f       	mul	r27, r19
    2140:	c0 01       	movw	r24, r0
    2142:	a3 9f       	mul	r26, r19
    2144:	70 0d       	add	r23, r0
    2146:	81 1d       	adc	r24, r1
    2148:	11 24       	eor	r1, r1
    214a:	91 1d       	adc	r25, r1
    214c:	b2 9f       	mul	r27, r18
    214e:	70 0d       	add	r23, r0
    2150:	81 1d       	adc	r24, r1
    2152:	11 24       	eor	r1, r1
    2154:	91 1d       	adc	r25, r1
    2156:	08 95       	ret

00002158 <__muluhisi3>:
    2158:	0e 94 9d 10 	call	0x213a	; 0x213a <__umulhisi3>
    215c:	a5 9f       	mul	r26, r21
    215e:	90 0d       	add	r25, r0
    2160:	b4 9f       	mul	r27, r20
    2162:	90 0d       	add	r25, r0
    2164:	a4 9f       	mul	r26, r20
    2166:	80 0d       	add	r24, r0
    2168:	91 1d       	adc	r25, r1
    216a:	11 24       	eor	r1, r1
    216c:	08 95       	ret

0000216e <printf>:
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	ed eb       	ldi	r30, 0xBD	; 189
    2174:	f0 e1       	ldi	r31, 0x10	; 16
    2176:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__+0x20>
    217a:	ae 01       	movw	r20, r28
    217c:	4b 5f       	subi	r20, 0xFB	; 251
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	fa 01       	movw	r30, r20
    2182:	61 91       	ld	r22, Z+
    2184:	71 91       	ld	r23, Z+
    2186:	af 01       	movw	r20, r30
    2188:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <__iob+0x2>
    218c:	90 91 e2 07 	lds	r25, 0x07E2	; 0x8007e2 <__iob+0x3>
    2190:	0e 94 23 11 	call	0x2246	; 0x2246 <vfprintf>
    2194:	e2 e0       	ldi	r30, 0x02	; 2
    2196:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__epilogue_restores__+0x20>

0000219a <printf_P>:
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e3 ed       	ldi	r30, 0xD3	; 211
    21a0:	f0 e1       	ldi	r31, 0x10	; 16
    21a2:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__prologue_saves__+0x1c>
    21a6:	ae 01       	movw	r20, r28
    21a8:	49 5f       	subi	r20, 0xF9	; 249
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	da 01       	movw	r26, r20
    21ae:	6d 91       	ld	r22, X+
    21b0:	7d 91       	ld	r23, X+
    21b2:	ad 01       	movw	r20, r26
    21b4:	0f ed       	ldi	r16, 0xDF	; 223
    21b6:	17 e0       	ldi	r17, 0x07	; 7
    21b8:	f8 01       	movw	r30, r16
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	dc 01       	movw	r26, r24
    21c0:	13 96       	adiw	r26, 0x03	; 3
    21c2:	2c 91       	ld	r18, X
    21c4:	13 97       	sbiw	r26, 0x03	; 3
    21c6:	28 60       	ori	r18, 0x08	; 8
    21c8:	13 96       	adiw	r26, 0x03	; 3
    21ca:	2c 93       	st	X, r18
    21cc:	0e 94 23 11 	call	0x2246	; 0x2246 <vfprintf>
    21d0:	d8 01       	movw	r26, r16
    21d2:	12 96       	adiw	r26, 0x02	; 2
    21d4:	ed 91       	ld	r30, X+
    21d6:	fc 91       	ld	r31, X
    21d8:	13 97       	sbiw	r26, 0x03	; 3
    21da:	23 81       	ldd	r18, Z+3	; 0x03
    21dc:	27 7f       	andi	r18, 0xF7	; 247
    21de:	23 83       	std	Z+3, r18	; 0x03
    21e0:	e4 e0       	ldi	r30, 0x04	; 4
    21e2:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__epilogue_restores__+0x1c>

000021e6 <puts>:
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	e0 91 e1 07 	lds	r30, 0x07E1	; 0x8007e1 <__iob+0x2>
    21f2:	f0 91 e2 07 	lds	r31, 0x07E2	; 0x8007e2 <__iob+0x3>
    21f6:	23 81       	ldd	r18, Z+3	; 0x03
    21f8:	21 ff       	sbrs	r18, 1
    21fa:	1b c0       	rjmp	.+54     	; 0x2232 <puts+0x4c>
    21fc:	8c 01       	movw	r16, r24
    21fe:	d0 e0       	ldi	r29, 0x00	; 0
    2200:	c0 e0       	ldi	r28, 0x00	; 0
    2202:	f8 01       	movw	r30, r16
    2204:	81 91       	ld	r24, Z+
    2206:	8f 01       	movw	r16, r30
    2208:	60 91 e1 07 	lds	r22, 0x07E1	; 0x8007e1 <__iob+0x2>
    220c:	70 91 e2 07 	lds	r23, 0x07E2	; 0x8007e2 <__iob+0x3>
    2210:	db 01       	movw	r26, r22
    2212:	18 96       	adiw	r26, 0x08	; 8
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	19 97       	sbiw	r26, 0x09	; 9
    221a:	88 23       	and	r24, r24
    221c:	31 f0       	breq	.+12     	; 0x222a <puts+0x44>
    221e:	09 95       	icall
    2220:	89 2b       	or	r24, r25
    2222:	79 f3       	breq	.-34     	; 0x2202 <puts+0x1c>
    2224:	df ef       	ldi	r29, 0xFF	; 255
    2226:	cf ef       	ldi	r28, 0xFF	; 255
    2228:	ec cf       	rjmp	.-40     	; 0x2202 <puts+0x1c>
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	09 95       	icall
    222e:	89 2b       	or	r24, r25
    2230:	19 f0       	breq	.+6      	; 0x2238 <puts+0x52>
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	9f ef       	ldi	r25, 0xFF	; 255
    2236:	02 c0       	rjmp	.+4      	; 0x223c <puts+0x56>
    2238:	8d 2f       	mov	r24, r29
    223a:	9c 2f       	mov	r25, r28
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <vfprintf>:
    2246:	ab e0       	ldi	r26, 0x0B	; 11
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e9 e2       	ldi	r30, 0x29	; 41
    224c:	f1 e1       	ldi	r31, 0x11	; 17
    224e:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__>
    2252:	6c 01       	movw	r12, r24
    2254:	7b 01       	movw	r14, r22
    2256:	8a 01       	movw	r16, r20
    2258:	fc 01       	movw	r30, r24
    225a:	17 82       	std	Z+7, r1	; 0x07
    225c:	16 82       	std	Z+6, r1	; 0x06
    225e:	83 81       	ldd	r24, Z+3	; 0x03
    2260:	81 ff       	sbrs	r24, 1
    2262:	cc c1       	rjmp	.+920    	; 0x25fc <vfprintf+0x3b6>
    2264:	ce 01       	movw	r24, r28
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	3c 01       	movw	r6, r24
    226a:	f6 01       	movw	r30, r12
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	f7 01       	movw	r30, r14
    2270:	93 fd       	sbrc	r25, 3
    2272:	85 91       	lpm	r24, Z+
    2274:	93 ff       	sbrs	r25, 3
    2276:	81 91       	ld	r24, Z+
    2278:	7f 01       	movw	r14, r30
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <vfprintf+0x3a>
    227e:	ba c1       	rjmp	.+884    	; 0x25f4 <vfprintf+0x3ae>
    2280:	85 32       	cpi	r24, 0x25	; 37
    2282:	39 f4       	brne	.+14     	; 0x2292 <vfprintf+0x4c>
    2284:	93 fd       	sbrc	r25, 3
    2286:	85 91       	lpm	r24, Z+
    2288:	93 ff       	sbrs	r25, 3
    228a:	81 91       	ld	r24, Z+
    228c:	7f 01       	movw	r14, r30
    228e:	85 32       	cpi	r24, 0x25	; 37
    2290:	29 f4       	brne	.+10     	; 0x229c <vfprintf+0x56>
    2292:	b6 01       	movw	r22, r12
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    229a:	e7 cf       	rjmp	.-50     	; 0x226a <vfprintf+0x24>
    229c:	91 2c       	mov	r9, r1
    229e:	21 2c       	mov	r2, r1
    22a0:	31 2c       	mov	r3, r1
    22a2:	ff e1       	ldi	r31, 0x1F	; 31
    22a4:	f3 15       	cp	r31, r3
    22a6:	d8 f0       	brcs	.+54     	; 0x22de <vfprintf+0x98>
    22a8:	8b 32       	cpi	r24, 0x2B	; 43
    22aa:	79 f0       	breq	.+30     	; 0x22ca <vfprintf+0x84>
    22ac:	38 f4       	brcc	.+14     	; 0x22bc <vfprintf+0x76>
    22ae:	80 32       	cpi	r24, 0x20	; 32
    22b0:	79 f0       	breq	.+30     	; 0x22d0 <vfprintf+0x8a>
    22b2:	83 32       	cpi	r24, 0x23	; 35
    22b4:	a1 f4       	brne	.+40     	; 0x22de <vfprintf+0x98>
    22b6:	23 2d       	mov	r18, r3
    22b8:	20 61       	ori	r18, 0x10	; 16
    22ba:	1d c0       	rjmp	.+58     	; 0x22f6 <vfprintf+0xb0>
    22bc:	8d 32       	cpi	r24, 0x2D	; 45
    22be:	61 f0       	breq	.+24     	; 0x22d8 <vfprintf+0x92>
    22c0:	80 33       	cpi	r24, 0x30	; 48
    22c2:	69 f4       	brne	.+26     	; 0x22de <vfprintf+0x98>
    22c4:	23 2d       	mov	r18, r3
    22c6:	21 60       	ori	r18, 0x01	; 1
    22c8:	16 c0       	rjmp	.+44     	; 0x22f6 <vfprintf+0xb0>
    22ca:	83 2d       	mov	r24, r3
    22cc:	82 60       	ori	r24, 0x02	; 2
    22ce:	38 2e       	mov	r3, r24
    22d0:	e3 2d       	mov	r30, r3
    22d2:	e4 60       	ori	r30, 0x04	; 4
    22d4:	3e 2e       	mov	r3, r30
    22d6:	2a c0       	rjmp	.+84     	; 0x232c <vfprintf+0xe6>
    22d8:	f3 2d       	mov	r31, r3
    22da:	f8 60       	ori	r31, 0x08	; 8
    22dc:	1d c0       	rjmp	.+58     	; 0x2318 <vfprintf+0xd2>
    22de:	37 fc       	sbrc	r3, 7
    22e0:	2d c0       	rjmp	.+90     	; 0x233c <vfprintf+0xf6>
    22e2:	20 ed       	ldi	r18, 0xD0	; 208
    22e4:	28 0f       	add	r18, r24
    22e6:	2a 30       	cpi	r18, 0x0A	; 10
    22e8:	40 f0       	brcs	.+16     	; 0x22fa <vfprintf+0xb4>
    22ea:	8e 32       	cpi	r24, 0x2E	; 46
    22ec:	b9 f4       	brne	.+46     	; 0x231c <vfprintf+0xd6>
    22ee:	36 fc       	sbrc	r3, 6
    22f0:	81 c1       	rjmp	.+770    	; 0x25f4 <vfprintf+0x3ae>
    22f2:	23 2d       	mov	r18, r3
    22f4:	20 64       	ori	r18, 0x40	; 64
    22f6:	32 2e       	mov	r3, r18
    22f8:	19 c0       	rjmp	.+50     	; 0x232c <vfprintf+0xe6>
    22fa:	36 fe       	sbrs	r3, 6
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <vfprintf+0xc4>
    22fe:	8a e0       	ldi	r24, 0x0A	; 10
    2300:	98 9e       	mul	r9, r24
    2302:	20 0d       	add	r18, r0
    2304:	11 24       	eor	r1, r1
    2306:	92 2e       	mov	r9, r18
    2308:	11 c0       	rjmp	.+34     	; 0x232c <vfprintf+0xe6>
    230a:	ea e0       	ldi	r30, 0x0A	; 10
    230c:	2e 9e       	mul	r2, r30
    230e:	20 0d       	add	r18, r0
    2310:	11 24       	eor	r1, r1
    2312:	22 2e       	mov	r2, r18
    2314:	f3 2d       	mov	r31, r3
    2316:	f0 62       	ori	r31, 0x20	; 32
    2318:	3f 2e       	mov	r3, r31
    231a:	08 c0       	rjmp	.+16     	; 0x232c <vfprintf+0xe6>
    231c:	8c 36       	cpi	r24, 0x6C	; 108
    231e:	21 f4       	brne	.+8      	; 0x2328 <vfprintf+0xe2>
    2320:	83 2d       	mov	r24, r3
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	38 2e       	mov	r3, r24
    2326:	02 c0       	rjmp	.+4      	; 0x232c <vfprintf+0xe6>
    2328:	88 36       	cpi	r24, 0x68	; 104
    232a:	41 f4       	brne	.+16     	; 0x233c <vfprintf+0xf6>
    232c:	f7 01       	movw	r30, r14
    232e:	93 fd       	sbrc	r25, 3
    2330:	85 91       	lpm	r24, Z+
    2332:	93 ff       	sbrs	r25, 3
    2334:	81 91       	ld	r24, Z+
    2336:	7f 01       	movw	r14, r30
    2338:	81 11       	cpse	r24, r1
    233a:	b3 cf       	rjmp	.-154    	; 0x22a2 <vfprintf+0x5c>
    233c:	98 2f       	mov	r25, r24
    233e:	9f 7d       	andi	r25, 0xDF	; 223
    2340:	95 54       	subi	r25, 0x45	; 69
    2342:	93 30       	cpi	r25, 0x03	; 3
    2344:	28 f4       	brcc	.+10     	; 0x2350 <vfprintf+0x10a>
    2346:	0c 5f       	subi	r16, 0xFC	; 252
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	9f e3       	ldi	r25, 0x3F	; 63
    234c:	99 83       	std	Y+1, r25	; 0x01
    234e:	0d c0       	rjmp	.+26     	; 0x236a <vfprintf+0x124>
    2350:	83 36       	cpi	r24, 0x63	; 99
    2352:	31 f0       	breq	.+12     	; 0x2360 <vfprintf+0x11a>
    2354:	83 37       	cpi	r24, 0x73	; 115
    2356:	71 f0       	breq	.+28     	; 0x2374 <vfprintf+0x12e>
    2358:	83 35       	cpi	r24, 0x53	; 83
    235a:	09 f0       	breq	.+2      	; 0x235e <vfprintf+0x118>
    235c:	59 c0       	rjmp	.+178    	; 0x2410 <vfprintf+0x1ca>
    235e:	21 c0       	rjmp	.+66     	; 0x23a2 <vfprintf+0x15c>
    2360:	f8 01       	movw	r30, r16
    2362:	80 81       	ld	r24, Z
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	0e 5f       	subi	r16, 0xFE	; 254
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	88 24       	eor	r8, r8
    236c:	83 94       	inc	r8
    236e:	91 2c       	mov	r9, r1
    2370:	53 01       	movw	r10, r6
    2372:	13 c0       	rjmp	.+38     	; 0x239a <vfprintf+0x154>
    2374:	28 01       	movw	r4, r16
    2376:	f2 e0       	ldi	r31, 0x02	; 2
    2378:	4f 0e       	add	r4, r31
    237a:	51 1c       	adc	r5, r1
    237c:	f8 01       	movw	r30, r16
    237e:	a0 80       	ld	r10, Z
    2380:	b1 80       	ldd	r11, Z+1	; 0x01
    2382:	36 fe       	sbrs	r3, 6
    2384:	03 c0       	rjmp	.+6      	; 0x238c <vfprintf+0x146>
    2386:	69 2d       	mov	r22, r9
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <vfprintf+0x14a>
    238c:	6f ef       	ldi	r22, 0xFF	; 255
    238e:	7f ef       	ldi	r23, 0xFF	; 255
    2390:	c5 01       	movw	r24, r10
    2392:	0e 94 0f 13 	call	0x261e	; 0x261e <strnlen>
    2396:	4c 01       	movw	r8, r24
    2398:	82 01       	movw	r16, r4
    239a:	f3 2d       	mov	r31, r3
    239c:	ff 77       	andi	r31, 0x7F	; 127
    239e:	3f 2e       	mov	r3, r31
    23a0:	16 c0       	rjmp	.+44     	; 0x23ce <vfprintf+0x188>
    23a2:	28 01       	movw	r4, r16
    23a4:	22 e0       	ldi	r18, 0x02	; 2
    23a6:	42 0e       	add	r4, r18
    23a8:	51 1c       	adc	r5, r1
    23aa:	f8 01       	movw	r30, r16
    23ac:	a0 80       	ld	r10, Z
    23ae:	b1 80       	ldd	r11, Z+1	; 0x01
    23b0:	36 fe       	sbrs	r3, 6
    23b2:	03 c0       	rjmp	.+6      	; 0x23ba <vfprintf+0x174>
    23b4:	69 2d       	mov	r22, r9
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <vfprintf+0x178>
    23ba:	6f ef       	ldi	r22, 0xFF	; 255
    23bc:	7f ef       	ldi	r23, 0xFF	; 255
    23be:	c5 01       	movw	r24, r10
    23c0:	0e 94 04 13 	call	0x2608	; 0x2608 <strnlen_P>
    23c4:	4c 01       	movw	r8, r24
    23c6:	f3 2d       	mov	r31, r3
    23c8:	f0 68       	ori	r31, 0x80	; 128
    23ca:	3f 2e       	mov	r3, r31
    23cc:	82 01       	movw	r16, r4
    23ce:	33 fc       	sbrc	r3, 3
    23d0:	1b c0       	rjmp	.+54     	; 0x2408 <vfprintf+0x1c2>
    23d2:	82 2d       	mov	r24, r2
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	88 16       	cp	r8, r24
    23d8:	99 06       	cpc	r9, r25
    23da:	b0 f4       	brcc	.+44     	; 0x2408 <vfprintf+0x1c2>
    23dc:	b6 01       	movw	r22, r12
    23de:	80 e2       	ldi	r24, 0x20	; 32
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    23e6:	2a 94       	dec	r2
    23e8:	f4 cf       	rjmp	.-24     	; 0x23d2 <vfprintf+0x18c>
    23ea:	f5 01       	movw	r30, r10
    23ec:	37 fc       	sbrc	r3, 7
    23ee:	85 91       	lpm	r24, Z+
    23f0:	37 fe       	sbrs	r3, 7
    23f2:	81 91       	ld	r24, Z+
    23f4:	5f 01       	movw	r10, r30
    23f6:	b6 01       	movw	r22, r12
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    23fe:	21 10       	cpse	r2, r1
    2400:	2a 94       	dec	r2
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	82 1a       	sub	r8, r18
    2406:	91 08       	sbc	r9, r1
    2408:	81 14       	cp	r8, r1
    240a:	91 04       	cpc	r9, r1
    240c:	71 f7       	brne	.-36     	; 0x23ea <vfprintf+0x1a4>
    240e:	e8 c0       	rjmp	.+464    	; 0x25e0 <vfprintf+0x39a>
    2410:	84 36       	cpi	r24, 0x64	; 100
    2412:	11 f0       	breq	.+4      	; 0x2418 <vfprintf+0x1d2>
    2414:	89 36       	cpi	r24, 0x69	; 105
    2416:	41 f5       	brne	.+80     	; 0x2468 <vfprintf+0x222>
    2418:	f8 01       	movw	r30, r16
    241a:	37 fe       	sbrs	r3, 7
    241c:	07 c0       	rjmp	.+14     	; 0x242c <vfprintf+0x1e6>
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	0c 5f       	subi	r16, 0xFC	; 252
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	08 c0       	rjmp	.+16     	; 0x243c <vfprintf+0x1f6>
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	07 2e       	mov	r0, r23
    2432:	00 0c       	add	r0, r0
    2434:	88 0b       	sbc	r24, r24
    2436:	99 0b       	sbc	r25, r25
    2438:	0e 5f       	subi	r16, 0xFE	; 254
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	f3 2d       	mov	r31, r3
    243e:	ff 76       	andi	r31, 0x6F	; 111
    2440:	3f 2e       	mov	r3, r31
    2442:	97 ff       	sbrs	r25, 7
    2444:	09 c0       	rjmp	.+18     	; 0x2458 <vfprintf+0x212>
    2446:	90 95       	com	r25
    2448:	80 95       	com	r24
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	f0 68       	ori	r31, 0x80	; 128
    2456:	3f 2e       	mov	r3, r31
    2458:	2a e0       	ldi	r18, 0x0A	; 10
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	a3 01       	movw	r20, r6
    245e:	0e 94 56 13 	call	0x26ac	; 0x26ac <__ultoa_invert>
    2462:	88 2e       	mov	r8, r24
    2464:	86 18       	sub	r8, r6
    2466:	45 c0       	rjmp	.+138    	; 0x24f2 <vfprintf+0x2ac>
    2468:	85 37       	cpi	r24, 0x75	; 117
    246a:	31 f4       	brne	.+12     	; 0x2478 <vfprintf+0x232>
    246c:	23 2d       	mov	r18, r3
    246e:	2f 7e       	andi	r18, 0xEF	; 239
    2470:	b2 2e       	mov	r11, r18
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	25 c0       	rjmp	.+74     	; 0x24c2 <vfprintf+0x27c>
    2478:	93 2d       	mov	r25, r3
    247a:	99 7f       	andi	r25, 0xF9	; 249
    247c:	b9 2e       	mov	r11, r25
    247e:	8f 36       	cpi	r24, 0x6F	; 111
    2480:	c1 f0       	breq	.+48     	; 0x24b2 <vfprintf+0x26c>
    2482:	18 f4       	brcc	.+6      	; 0x248a <vfprintf+0x244>
    2484:	88 35       	cpi	r24, 0x58	; 88
    2486:	79 f0       	breq	.+30     	; 0x24a6 <vfprintf+0x260>
    2488:	b5 c0       	rjmp	.+362    	; 0x25f4 <vfprintf+0x3ae>
    248a:	80 37       	cpi	r24, 0x70	; 112
    248c:	19 f0       	breq	.+6      	; 0x2494 <vfprintf+0x24e>
    248e:	88 37       	cpi	r24, 0x78	; 120
    2490:	21 f0       	breq	.+8      	; 0x249a <vfprintf+0x254>
    2492:	b0 c0       	rjmp	.+352    	; 0x25f4 <vfprintf+0x3ae>
    2494:	e9 2f       	mov	r30, r25
    2496:	e0 61       	ori	r30, 0x10	; 16
    2498:	be 2e       	mov	r11, r30
    249a:	b4 fe       	sbrs	r11, 4
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <vfprintf+0x272>
    249e:	fb 2d       	mov	r31, r11
    24a0:	f4 60       	ori	r31, 0x04	; 4
    24a2:	bf 2e       	mov	r11, r31
    24a4:	09 c0       	rjmp	.+18     	; 0x24b8 <vfprintf+0x272>
    24a6:	34 fe       	sbrs	r3, 4
    24a8:	0a c0       	rjmp	.+20     	; 0x24be <vfprintf+0x278>
    24aa:	29 2f       	mov	r18, r25
    24ac:	26 60       	ori	r18, 0x06	; 6
    24ae:	b2 2e       	mov	r11, r18
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <vfprintf+0x278>
    24b2:	28 e0       	ldi	r18, 0x08	; 8
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <vfprintf+0x27c>
    24b8:	20 e1       	ldi	r18, 0x10	; 16
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <vfprintf+0x27c>
    24be:	20 e1       	ldi	r18, 0x10	; 16
    24c0:	32 e0       	ldi	r19, 0x02	; 2
    24c2:	f8 01       	movw	r30, r16
    24c4:	b7 fe       	sbrs	r11, 7
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <vfprintf+0x290>
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	0c 5f       	subi	r16, 0xFC	; 252
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <vfprintf+0x29c>
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e 5f       	subi	r16, 0xFE	; 254
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	a3 01       	movw	r20, r6
    24e4:	0e 94 56 13 	call	0x26ac	; 0x26ac <__ultoa_invert>
    24e8:	88 2e       	mov	r8, r24
    24ea:	86 18       	sub	r8, r6
    24ec:	fb 2d       	mov	r31, r11
    24ee:	ff 77       	andi	r31, 0x7F	; 127
    24f0:	3f 2e       	mov	r3, r31
    24f2:	36 fe       	sbrs	r3, 6
    24f4:	0d c0       	rjmp	.+26     	; 0x2510 <vfprintf+0x2ca>
    24f6:	23 2d       	mov	r18, r3
    24f8:	2e 7f       	andi	r18, 0xFE	; 254
    24fa:	a2 2e       	mov	r10, r18
    24fc:	89 14       	cp	r8, r9
    24fe:	58 f4       	brcc	.+22     	; 0x2516 <vfprintf+0x2d0>
    2500:	34 fe       	sbrs	r3, 4
    2502:	0b c0       	rjmp	.+22     	; 0x251a <vfprintf+0x2d4>
    2504:	32 fc       	sbrc	r3, 2
    2506:	09 c0       	rjmp	.+18     	; 0x251a <vfprintf+0x2d4>
    2508:	83 2d       	mov	r24, r3
    250a:	8e 7e       	andi	r24, 0xEE	; 238
    250c:	a8 2e       	mov	r10, r24
    250e:	05 c0       	rjmp	.+10     	; 0x251a <vfprintf+0x2d4>
    2510:	b8 2c       	mov	r11, r8
    2512:	a3 2c       	mov	r10, r3
    2514:	03 c0       	rjmp	.+6      	; 0x251c <vfprintf+0x2d6>
    2516:	b8 2c       	mov	r11, r8
    2518:	01 c0       	rjmp	.+2      	; 0x251c <vfprintf+0x2d6>
    251a:	b9 2c       	mov	r11, r9
    251c:	a4 fe       	sbrs	r10, 4
    251e:	0f c0       	rjmp	.+30     	; 0x253e <vfprintf+0x2f8>
    2520:	fe 01       	movw	r30, r28
    2522:	e8 0d       	add	r30, r8
    2524:	f1 1d       	adc	r31, r1
    2526:	80 81       	ld	r24, Z
    2528:	80 33       	cpi	r24, 0x30	; 48
    252a:	21 f4       	brne	.+8      	; 0x2534 <vfprintf+0x2ee>
    252c:	9a 2d       	mov	r25, r10
    252e:	99 7e       	andi	r25, 0xE9	; 233
    2530:	a9 2e       	mov	r10, r25
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <vfprintf+0x300>
    2534:	a2 fe       	sbrs	r10, 2
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <vfprintf+0x2fe>
    2538:	b3 94       	inc	r11
    253a:	b3 94       	inc	r11
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <vfprintf+0x300>
    253e:	8a 2d       	mov	r24, r10
    2540:	86 78       	andi	r24, 0x86	; 134
    2542:	09 f0       	breq	.+2      	; 0x2546 <vfprintf+0x300>
    2544:	b3 94       	inc	r11
    2546:	a3 fc       	sbrc	r10, 3
    2548:	11 c0       	rjmp	.+34     	; 0x256c <vfprintf+0x326>
    254a:	a0 fe       	sbrs	r10, 0
    254c:	06 c0       	rjmp	.+12     	; 0x255a <vfprintf+0x314>
    254e:	b2 14       	cp	r11, r2
    2550:	88 f4       	brcc	.+34     	; 0x2574 <vfprintf+0x32e>
    2552:	28 0c       	add	r2, r8
    2554:	92 2c       	mov	r9, r2
    2556:	9b 18       	sub	r9, r11
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <vfprintf+0x330>
    255a:	b2 14       	cp	r11, r2
    255c:	60 f4       	brcc	.+24     	; 0x2576 <vfprintf+0x330>
    255e:	b6 01       	movw	r22, r12
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    2568:	b3 94       	inc	r11
    256a:	f7 cf       	rjmp	.-18     	; 0x255a <vfprintf+0x314>
    256c:	b2 14       	cp	r11, r2
    256e:	18 f4       	brcc	.+6      	; 0x2576 <vfprintf+0x330>
    2570:	2b 18       	sub	r2, r11
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <vfprintf+0x332>
    2574:	98 2c       	mov	r9, r8
    2576:	21 2c       	mov	r2, r1
    2578:	a4 fe       	sbrs	r10, 4
    257a:	10 c0       	rjmp	.+32     	; 0x259c <vfprintf+0x356>
    257c:	b6 01       	movw	r22, r12
    257e:	80 e3       	ldi	r24, 0x30	; 48
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    2586:	a2 fe       	sbrs	r10, 2
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <vfprintf+0x372>
    258a:	a1 fc       	sbrc	r10, 1
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <vfprintf+0x34e>
    258e:	88 e7       	ldi	r24, 0x78	; 120
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <vfprintf+0x352>
    2594:	88 e5       	ldi	r24, 0x58	; 88
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	b6 01       	movw	r22, r12
    259a:	0c c0       	rjmp	.+24     	; 0x25b4 <vfprintf+0x36e>
    259c:	8a 2d       	mov	r24, r10
    259e:	86 78       	andi	r24, 0x86	; 134
    25a0:	59 f0       	breq	.+22     	; 0x25b8 <vfprintf+0x372>
    25a2:	a1 fe       	sbrs	r10, 1
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <vfprintf+0x364>
    25a6:	8b e2       	ldi	r24, 0x2B	; 43
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <vfprintf+0x366>
    25aa:	80 e2       	ldi	r24, 0x20	; 32
    25ac:	a7 fc       	sbrc	r10, 7
    25ae:	8d e2       	ldi	r24, 0x2D	; 45
    25b0:	b6 01       	movw	r22, r12
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    25b8:	89 14       	cp	r8, r9
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <vfprintf+0x384>
    25bc:	b6 01       	movw	r22, r12
    25be:	80 e3       	ldi	r24, 0x30	; 48
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    25c6:	9a 94       	dec	r9
    25c8:	f7 cf       	rjmp	.-18     	; 0x25b8 <vfprintf+0x372>
    25ca:	8a 94       	dec	r8
    25cc:	f3 01       	movw	r30, r6
    25ce:	e8 0d       	add	r30, r8
    25d0:	f1 1d       	adc	r31, r1
    25d2:	80 81       	ld	r24, Z
    25d4:	b6 01       	movw	r22, r12
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    25dc:	81 10       	cpse	r8, r1
    25de:	f5 cf       	rjmp	.-22     	; 0x25ca <vfprintf+0x384>
    25e0:	22 20       	and	r2, r2
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <vfprintf+0x3a0>
    25e4:	42 ce       	rjmp	.-892    	; 0x226a <vfprintf+0x24>
    25e6:	b6 01       	movw	r22, r12
    25e8:	80 e2       	ldi	r24, 0x20	; 32
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 1a 13 	call	0x2634	; 0x2634 <fputc>
    25f0:	2a 94       	dec	r2
    25f2:	f6 cf       	rjmp	.-20     	; 0x25e0 <vfprintf+0x39a>
    25f4:	f6 01       	movw	r30, r12
    25f6:	86 81       	ldd	r24, Z+6	; 0x06
    25f8:	97 81       	ldd	r25, Z+7	; 0x07
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <vfprintf+0x3ba>
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	9f ef       	ldi	r25, 0xFF	; 255
    2600:	2b 96       	adiw	r28, 0x0b	; 11
    2602:	e2 e1       	ldi	r30, 0x12	; 18
    2604:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__>

00002608 <strnlen_P>:
    2608:	fc 01       	movw	r30, r24
    260a:	05 90       	lpm	r0, Z+
    260c:	61 50       	subi	r22, 0x01	; 1
    260e:	70 40       	sbci	r23, 0x00	; 0
    2610:	01 10       	cpse	r0, r1
    2612:	d8 f7       	brcc	.-10     	; 0x260a <strnlen_P+0x2>
    2614:	80 95       	com	r24
    2616:	90 95       	com	r25
    2618:	8e 0f       	add	r24, r30
    261a:	9f 1f       	adc	r25, r31
    261c:	08 95       	ret

0000261e <strnlen>:
    261e:	fc 01       	movw	r30, r24
    2620:	61 50       	subi	r22, 0x01	; 1
    2622:	70 40       	sbci	r23, 0x00	; 0
    2624:	01 90       	ld	r0, Z+
    2626:	01 10       	cpse	r0, r1
    2628:	d8 f7       	brcc	.-10     	; 0x2620 <strnlen+0x2>
    262a:	80 95       	com	r24
    262c:	90 95       	com	r25
    262e:	8e 0f       	add	r24, r30
    2630:	9f 1f       	adc	r25, r31
    2632:	08 95       	ret

00002634 <fputc>:
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	fb 01       	movw	r30, r22
    263e:	23 81       	ldd	r18, Z+3	; 0x03
    2640:	21 fd       	sbrc	r18, 1
    2642:	03 c0       	rjmp	.+6      	; 0x264a <fputc+0x16>
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	9f ef       	ldi	r25, 0xFF	; 255
    2648:	2c c0       	rjmp	.+88     	; 0x26a2 <fputc+0x6e>
    264a:	22 ff       	sbrs	r18, 2
    264c:	16 c0       	rjmp	.+44     	; 0x267a <fputc+0x46>
    264e:	46 81       	ldd	r20, Z+6	; 0x06
    2650:	57 81       	ldd	r21, Z+7	; 0x07
    2652:	24 81       	ldd	r18, Z+4	; 0x04
    2654:	35 81       	ldd	r19, Z+5	; 0x05
    2656:	42 17       	cp	r20, r18
    2658:	53 07       	cpc	r21, r19
    265a:	44 f4       	brge	.+16     	; 0x266c <fputc+0x38>
    265c:	a0 81       	ld	r26, Z
    265e:	b1 81       	ldd	r27, Z+1	; 0x01
    2660:	9d 01       	movw	r18, r26
    2662:	2f 5f       	subi	r18, 0xFF	; 255
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	31 83       	std	Z+1, r19	; 0x01
    2668:	20 83       	st	Z, r18
    266a:	8c 93       	st	X, r24
    266c:	26 81       	ldd	r18, Z+6	; 0x06
    266e:	37 81       	ldd	r19, Z+7	; 0x07
    2670:	2f 5f       	subi	r18, 0xFF	; 255
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	37 83       	std	Z+7, r19	; 0x07
    2676:	26 83       	std	Z+6, r18	; 0x06
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <fputc+0x6e>
    267a:	8b 01       	movw	r16, r22
    267c:	ec 01       	movw	r28, r24
    267e:	fb 01       	movw	r30, r22
    2680:	00 84       	ldd	r0, Z+8	; 0x08
    2682:	f1 85       	ldd	r31, Z+9	; 0x09
    2684:	e0 2d       	mov	r30, r0
    2686:	09 95       	icall
    2688:	89 2b       	or	r24, r25
    268a:	e1 f6       	brne	.-72     	; 0x2644 <fputc+0x10>
    268c:	d8 01       	movw	r26, r16
    268e:	16 96       	adiw	r26, 0x06	; 6
    2690:	8d 91       	ld	r24, X+
    2692:	9c 91       	ld	r25, X
    2694:	17 97       	sbiw	r26, 0x07	; 7
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	17 96       	adiw	r26, 0x07	; 7
    269a:	9c 93       	st	X, r25
    269c:	8e 93       	st	-X, r24
    269e:	16 97       	sbiw	r26, 0x06	; 6
    26a0:	ce 01       	movw	r24, r28
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <__ultoa_invert>:
    26ac:	fa 01       	movw	r30, r20
    26ae:	aa 27       	eor	r26, r26
    26b0:	28 30       	cpi	r18, 0x08	; 8
    26b2:	51 f1       	breq	.+84     	; 0x2708 <__ultoa_invert+0x5c>
    26b4:	20 31       	cpi	r18, 0x10	; 16
    26b6:	81 f1       	breq	.+96     	; 0x2718 <__ultoa_invert+0x6c>
    26b8:	e8 94       	clt
    26ba:	6f 93       	push	r22
    26bc:	6e 7f       	andi	r22, 0xFE	; 254
    26be:	6e 5f       	subi	r22, 0xFE	; 254
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	8f 4f       	sbci	r24, 0xFF	; 255
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	af 4f       	sbci	r26, 0xFF	; 255
    26c8:	b1 e0       	ldi	r27, 0x01	; 1
    26ca:	3e d0       	rcall	.+124    	; 0x2748 <__ultoa_invert+0x9c>
    26cc:	b4 e0       	ldi	r27, 0x04	; 4
    26ce:	3c d0       	rcall	.+120    	; 0x2748 <__ultoa_invert+0x9c>
    26d0:	67 0f       	add	r22, r23
    26d2:	78 1f       	adc	r23, r24
    26d4:	89 1f       	adc	r24, r25
    26d6:	9a 1f       	adc	r25, r26
    26d8:	a1 1d       	adc	r26, r1
    26da:	68 0f       	add	r22, r24
    26dc:	79 1f       	adc	r23, r25
    26de:	8a 1f       	adc	r24, r26
    26e0:	91 1d       	adc	r25, r1
    26e2:	a1 1d       	adc	r26, r1
    26e4:	6a 0f       	add	r22, r26
    26e6:	71 1d       	adc	r23, r1
    26e8:	81 1d       	adc	r24, r1
    26ea:	91 1d       	adc	r25, r1
    26ec:	a1 1d       	adc	r26, r1
    26ee:	20 d0       	rcall	.+64     	; 0x2730 <__ultoa_invert+0x84>
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <__ultoa_invert+0x48>
    26f2:	68 94       	set
    26f4:	3f 91       	pop	r19
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	26 9f       	mul	r18, r22
    26fa:	11 24       	eor	r1, r1
    26fc:	30 19       	sub	r19, r0
    26fe:	30 5d       	subi	r19, 0xD0	; 208
    2700:	31 93       	st	Z+, r19
    2702:	de f6       	brtc	.-74     	; 0x26ba <__ultoa_invert+0xe>
    2704:	cf 01       	movw	r24, r30
    2706:	08 95       	ret
    2708:	46 2f       	mov	r20, r22
    270a:	47 70       	andi	r20, 0x07	; 7
    270c:	40 5d       	subi	r20, 0xD0	; 208
    270e:	41 93       	st	Z+, r20
    2710:	b3 e0       	ldi	r27, 0x03	; 3
    2712:	0f d0       	rcall	.+30     	; 0x2732 <__ultoa_invert+0x86>
    2714:	c9 f7       	brne	.-14     	; 0x2708 <__ultoa_invert+0x5c>
    2716:	f6 cf       	rjmp	.-20     	; 0x2704 <__ultoa_invert+0x58>
    2718:	46 2f       	mov	r20, r22
    271a:	4f 70       	andi	r20, 0x0F	; 15
    271c:	40 5d       	subi	r20, 0xD0	; 208
    271e:	4a 33       	cpi	r20, 0x3A	; 58
    2720:	18 f0       	brcs	.+6      	; 0x2728 <__ultoa_invert+0x7c>
    2722:	49 5d       	subi	r20, 0xD9	; 217
    2724:	31 fd       	sbrc	r19, 1
    2726:	40 52       	subi	r20, 0x20	; 32
    2728:	41 93       	st	Z+, r20
    272a:	02 d0       	rcall	.+4      	; 0x2730 <__ultoa_invert+0x84>
    272c:	a9 f7       	brne	.-22     	; 0x2718 <__ultoa_invert+0x6c>
    272e:	ea cf       	rjmp	.-44     	; 0x2704 <__ultoa_invert+0x58>
    2730:	b4 e0       	ldi	r27, 0x04	; 4
    2732:	a6 95       	lsr	r26
    2734:	97 95       	ror	r25
    2736:	87 95       	ror	r24
    2738:	77 95       	ror	r23
    273a:	67 95       	ror	r22
    273c:	ba 95       	dec	r27
    273e:	c9 f7       	brne	.-14     	; 0x2732 <__ultoa_invert+0x86>
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	61 05       	cpc	r22, r1
    2744:	71 05       	cpc	r23, r1
    2746:	08 95       	ret
    2748:	9b 01       	movw	r18, r22
    274a:	ac 01       	movw	r20, r24
    274c:	0a 2e       	mov	r0, r26
    274e:	06 94       	lsr	r0
    2750:	57 95       	ror	r21
    2752:	47 95       	ror	r20
    2754:	37 95       	ror	r19
    2756:	27 95       	ror	r18
    2758:	ba 95       	dec	r27
    275a:	c9 f7       	brne	.-14     	; 0x274e <__ultoa_invert+0xa2>
    275c:	62 0f       	add	r22, r18
    275e:	73 1f       	adc	r23, r19
    2760:	84 1f       	adc	r24, r20
    2762:	95 1f       	adc	r25, r21
    2764:	a0 1d       	adc	r26, r0
    2766:	08 95       	ret

00002768 <__prologue_saves__>:
    2768:	2f 92       	push	r2
    276a:	3f 92       	push	r3
    276c:	4f 92       	push	r4
    276e:	5f 92       	push	r5
    2770:	6f 92       	push	r6
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	ca 1b       	sub	r28, r26
    2792:	db 0b       	sbc	r29, r27
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	09 94       	ijmp

000027a0 <__epilogue_restores__>:
    27a0:	2a 88       	ldd	r2, Y+18	; 0x12
    27a2:	39 88       	ldd	r3, Y+17	; 0x11
    27a4:	48 88       	ldd	r4, Y+16	; 0x10
    27a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    27aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    27b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b2:	b9 84       	ldd	r11, Y+9	; 0x09
    27b4:	c8 84       	ldd	r12, Y+8	; 0x08
    27b6:	df 80       	ldd	r13, Y+7	; 0x07
    27b8:	ee 80       	ldd	r14, Y+6	; 0x06
    27ba:	fd 80       	ldd	r15, Y+5	; 0x05
    27bc:	0c 81       	ldd	r16, Y+4	; 0x04
    27be:	1b 81       	ldd	r17, Y+3	; 0x03
    27c0:	aa 81       	ldd	r26, Y+2	; 0x02
    27c2:	b9 81       	ldd	r27, Y+1	; 0x01
    27c4:	ce 0f       	add	r28, r30
    27c6:	d1 1d       	adc	r29, r1
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	ed 01       	movw	r28, r26
    27d4:	08 95       	ret

000027d6 <_exit>:
    27d6:	f8 94       	cli

000027d8 <__stop_program>:
    27d8:	ff cf       	rjmp	.-2      	; 0x27d8 <__stop_program>
